multiline_comment|/*&n; * net/sched/cls_rsvp.h&t;Template file for RSVPv[46] classifiers.&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; *&n; * Authors:&t;Alexey Kuznetsov, &lt;kuznet@ms2.inr.ac.ru&gt;&n; */
multiline_comment|/*&n;   Comparing to general packet classification problem,&n;   RSVP needs only sevaral relatively simple rules:&n;&n;   * (dst, protocol) are always specified,&n;     so that we are able to hash them.&n;   * src may be exact, or may be wildcard, so that&n;     we can keep a hash table plus one wildcard entry.&n;   * source port (or flow label) is important only if src is given.&n;&n;   IMPLEMENTATION.&n;&n;   We use a two level hash table: The top level is keyed by&n;   destination address and protocol ID, every bucket contains a list&n;   of &quot;rsvp sessions&quot;, identified by destination address, protocol and&n;   DPI(=&quot;Destination Port ID&quot;): triple (key, mask, offset).&n;&n;   Every bucket has a smaller hash table keyed by source address&n;   (cf. RSVP flowspec) and one wildcard entry for wildcard reservations.&n;   Every bucket is again a list of &quot;RSVP flows&quot;, selected by&n;   source address and SPI(=&quot;Source Port ID&quot; here rather than&n;   &quot;security parameter index&quot;): triple (key, mask, offset).&n;&n;&n;   NOTE 1. All the packets with IPv6 extension headers (but AH and ESP)&n;   and all fragmented packets go to the best-effort traffic class.&n;&n;&n;   NOTE 2. Two &quot;port id&quot;&squot;s seems to be redundant, rfc2207 requires&n;   only one &quot;Generalized Port Identifier&quot;. So that for classic&n;   ah, esp (and udp,tcp) both *pi should coincide or one of them&n;   should be wildcard.&n;&n;   At first sight, this redundancy is just a waste of CPU&n;   resources. But DPI and SPI add the possibility to assign different&n;   priorities to GPIs. Look also at note 4 about tunnels below.&n;&n;&n;   NOTE 3. One complication is the case of tunneled packets.&n;   We implement it as following: if the first lookup&n;   matches a special session with &quot;tunnelhdr&quot; value not zero,&n;   flowid doesn&squot;t contain the true flow ID, but the tunnel ID (1...255).&n;   In this case, we pull tunnelhdr bytes and restart lookup&n;   with tunnel ID added to the list of keys. Simple and stupid 8)8)&n;   It&squot;s enough for PIMREG and IPIP.&n;&n;&n;   NOTE 4. Two GPIs make it possible to parse even GRE packets.&n;   F.e. DPI can select ETH_P_IP (and necessary flags to make&n;   tunnelhdr correct) in GRE protocol field and SPI matches&n;   GRE key. Is it not nice? 8)8)&n;&n;&n;   Well, as result, despite its simplicity, we get a pretty&n;   powerful classification engine.  */
macro_line|#include &lt;linux/config.h&gt;
DECL|struct|rsvp_head
r_struct
id|rsvp_head
(brace
DECL|member|tmap
id|u32
id|tmap
(braket
l_int|256
op_div
l_int|32
)braket
suffix:semicolon
DECL|member|hgenerator
id|u32
id|hgenerator
suffix:semicolon
DECL|member|tgenerator
id|u8
id|tgenerator
suffix:semicolon
DECL|member|ht
r_struct
id|rsvp_session
op_star
id|ht
(braket
l_int|256
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|rsvp_session
r_struct
id|rsvp_session
(brace
DECL|member|next
r_struct
id|rsvp_session
op_star
id|next
suffix:semicolon
DECL|member|dst
id|u32
id|dst
(braket
id|RSVP_DST_LEN
)braket
suffix:semicolon
DECL|member|dpi
r_struct
id|tc_rsvp_gpi
id|dpi
suffix:semicolon
DECL|member|protocol
id|u8
id|protocol
suffix:semicolon
DECL|member|tunnelid
id|u8
id|tunnelid
suffix:semicolon
multiline_comment|/* 16 (src,sport) hash slots, and one wildcard source slot */
DECL|member|ht
r_struct
id|rsvp_filter
op_star
id|ht
(braket
l_int|16
op_plus
l_int|1
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|rsvp_filter
r_struct
id|rsvp_filter
(brace
DECL|member|next
r_struct
id|rsvp_filter
op_star
id|next
suffix:semicolon
DECL|member|src
id|u32
id|src
(braket
id|RSVP_DST_LEN
)braket
suffix:semicolon
DECL|member|spi
r_struct
id|tc_rsvp_gpi
id|spi
suffix:semicolon
DECL|member|tunnelhdr
id|u8
id|tunnelhdr
suffix:semicolon
DECL|member|res
r_struct
id|tcf_result
id|res
suffix:semicolon
macro_line|#ifdef CONFIG_NET_CLS_POLICE
DECL|member|police
r_struct
id|tcf_police
op_star
id|police
suffix:semicolon
macro_line|#endif
DECL|member|handle
id|u32
id|handle
suffix:semicolon
DECL|member|sess
r_struct
id|rsvp_session
op_star
id|sess
suffix:semicolon
)brace
suffix:semicolon
DECL|function|hash_dst
r_static
id|__inline__
r_int
id|hash_dst
c_func
(paren
id|u32
op_star
id|dst
comma
id|u8
id|protocol
comma
id|u8
id|tunnelid
)paren
(brace
r_int
id|h
op_assign
id|dst
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
suffix:semicolon
id|h
op_xor_assign
id|h
op_rshift
l_int|16
suffix:semicolon
id|h
op_xor_assign
id|h
op_rshift
l_int|8
suffix:semicolon
r_return
(paren
id|h
op_xor
id|protocol
op_xor
id|tunnelid
)paren
op_amp
l_int|0xFF
suffix:semicolon
)brace
DECL|function|hash_src
r_static
id|__inline__
r_int
id|hash_src
c_func
(paren
id|u32
op_star
id|src
)paren
(brace
r_int
id|h
op_assign
id|src
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
suffix:semicolon
id|h
op_xor_assign
id|h
op_rshift
l_int|16
suffix:semicolon
id|h
op_xor_assign
id|h
op_rshift
l_int|8
suffix:semicolon
id|h
op_xor_assign
id|h
op_rshift
l_int|4
suffix:semicolon
r_return
id|h
op_amp
l_int|0xF
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_NET_CLS_POLICE
DECL|macro|RSVP_POLICE
mdefine_line|#define RSVP_POLICE() &bslash;&n;if (f-&gt;police) { &bslash;&n;&t;int pol_res = tcf_police(skb, f-&gt;police); &bslash;&n;&t;if (pol_res &lt; 0) continue; &bslash;&n;&t;if (pol_res) return pol_res; &bslash;&n;}
macro_line|#else
DECL|macro|RSVP_POLICE
mdefine_line|#define RSVP_POLICE()
macro_line|#endif
DECL|function|rsvp_classify
r_static
r_int
id|rsvp_classify
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|tcf_proto
op_star
id|tp
comma
r_struct
id|tcf_result
op_star
id|res
)paren
(brace
r_struct
id|rsvp_session
op_star
op_star
id|sht
op_assign
(paren
(paren
r_struct
id|rsvp_head
op_star
)paren
id|tp-&gt;root
)paren
op_member_access_from_pointer
id|ht
suffix:semicolon
r_struct
id|rsvp_session
op_star
id|s
suffix:semicolon
r_struct
id|rsvp_filter
op_star
id|f
suffix:semicolon
r_int
id|h1
comma
id|h2
suffix:semicolon
id|u32
op_star
id|dst
comma
op_star
id|src
suffix:semicolon
id|u8
id|protocol
suffix:semicolon
id|u8
id|tunnelid
op_assign
l_int|0
suffix:semicolon
id|u8
op_star
id|xprt
suffix:semicolon
macro_line|#if RSVP_DST_LEN == 4
r_struct
id|ipv6hdr
op_star
id|nhptr
op_assign
id|skb-&gt;nh.ipv6h
suffix:semicolon
macro_line|#else
r_struct
id|iphdr
op_star
id|nhptr
op_assign
id|skb-&gt;nh.iph
suffix:semicolon
macro_line|#endif
macro_line|#if !defined( __i386__) &amp;&amp; !defined(__mc68000__)
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|nhptr
op_amp
l_int|3
)paren
r_return
op_minus
l_int|1
suffix:semicolon
macro_line|#endif
id|restart
suffix:colon
macro_line|#if RSVP_DST_LEN == 4
id|src
op_assign
op_amp
id|nhptr-&gt;saddr.s6_addr32
(braket
l_int|0
)braket
suffix:semicolon
id|dst
op_assign
op_amp
id|nhptr-&gt;daddr.s6_addr32
(braket
l_int|0
)braket
suffix:semicolon
id|protocol
op_assign
id|nhptr-&gt;nexthdr
suffix:semicolon
id|xprt
op_assign
(paren
(paren
id|u8
op_star
)paren
id|nhptr
)paren
op_plus
r_sizeof
(paren
r_struct
id|ipv6hdr
)paren
suffix:semicolon
macro_line|#else
id|src
op_assign
op_amp
id|nhptr-&gt;saddr
suffix:semicolon
id|dst
op_assign
op_amp
id|nhptr-&gt;daddr
suffix:semicolon
id|protocol
op_assign
id|nhptr-&gt;protocol
suffix:semicolon
id|xprt
op_assign
(paren
(paren
id|u8
op_star
)paren
id|nhptr
)paren
op_plus
(paren
id|nhptr-&gt;ihl
op_lshift
l_int|2
)paren
suffix:semicolon
r_if
c_cond
(paren
id|nhptr-&gt;frag_off
op_amp
id|__constant_htons
c_func
(paren
id|IP_MF
op_or
id|IP_OFFSET
)paren
)paren
r_return
op_minus
l_int|1
suffix:semicolon
macro_line|#endif
id|h1
op_assign
id|hash_dst
c_func
(paren
id|dst
comma
id|protocol
comma
id|tunnelid
)paren
suffix:semicolon
id|h2
op_assign
id|hash_src
c_func
(paren
id|src
)paren
suffix:semicolon
r_for
c_loop
(paren
id|s
op_assign
id|sht
(braket
id|h1
)braket
suffix:semicolon
id|s
suffix:semicolon
id|s
op_assign
id|s-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|dst
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
op_eq
id|s-&gt;dst
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
op_logical_and
id|protocol
op_eq
id|s-&gt;protocol
op_logical_and
op_logical_neg
(paren
id|s-&gt;dpi.mask
op_amp
(paren
op_star
(paren
id|u32
op_star
)paren
(paren
id|xprt
op_plus
id|s-&gt;dpi.offset
)paren
op_xor
id|s-&gt;dpi.key
)paren
)paren
macro_line|#if RSVP_DST_LEN == 4
op_logical_and
id|dst
(braket
l_int|0
)braket
op_eq
id|s-&gt;dst
(braket
l_int|0
)braket
op_logical_and
id|dst
(braket
l_int|1
)braket
op_eq
id|s-&gt;dst
(braket
l_int|1
)braket
op_logical_and
id|dst
(braket
l_int|2
)braket
op_eq
id|s-&gt;dst
(braket
l_int|2
)braket
macro_line|#endif
op_logical_and
id|tunnelid
op_eq
id|s-&gt;tunnelid
)paren
(brace
r_for
c_loop
(paren
id|f
op_assign
id|s-&gt;ht
(braket
id|h2
)braket
suffix:semicolon
id|f
suffix:semicolon
id|f
op_assign
id|f-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|src
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
op_eq
id|f-&gt;src
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
op_logical_and
op_logical_neg
(paren
id|f-&gt;spi.mask
op_amp
(paren
op_star
(paren
id|u32
op_star
)paren
(paren
id|xprt
op_plus
id|f-&gt;spi.offset
)paren
op_xor
id|f-&gt;spi.key
)paren
)paren
macro_line|#if RSVP_DST_LEN == 4
op_logical_and
id|src
(braket
l_int|0
)braket
op_eq
id|f-&gt;src
(braket
l_int|0
)braket
op_logical_and
id|src
(braket
l_int|1
)braket
op_eq
id|f-&gt;src
(braket
l_int|1
)braket
op_logical_and
id|src
(braket
l_int|2
)braket
op_eq
id|f-&gt;src
(braket
l_int|2
)braket
macro_line|#endif
)paren
(brace
op_star
id|res
op_assign
id|f-&gt;res
suffix:semicolon
id|RSVP_POLICE
c_func
(paren
)paren
suffix:semicolon
id|matched
suffix:colon
r_if
c_cond
(paren
id|f-&gt;tunnelhdr
op_eq
l_int|0
)paren
r_return
l_int|0
suffix:semicolon
id|tunnelid
op_assign
id|f-&gt;res.classid
suffix:semicolon
id|nhptr
op_assign
(paren
r_void
op_star
)paren
(paren
id|xprt
op_plus
id|f-&gt;tunnelhdr
op_minus
r_sizeof
(paren
op_star
id|nhptr
)paren
)paren
suffix:semicolon
r_goto
id|restart
suffix:semicolon
)brace
)brace
multiline_comment|/* And wildcard bucket... */
r_for
c_loop
(paren
id|f
op_assign
id|s-&gt;ht
(braket
l_int|16
)braket
suffix:semicolon
id|f
suffix:semicolon
id|f
op_assign
id|f-&gt;next
)paren
(brace
op_star
id|res
op_assign
id|f-&gt;res
suffix:semicolon
id|RSVP_POLICE
c_func
(paren
)paren
suffix:semicolon
r_goto
id|matched
suffix:semicolon
)brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
)brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
DECL|function|rsvp_get
r_static
r_int
r_int
id|rsvp_get
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
id|u32
id|handle
)paren
(brace
r_struct
id|rsvp_session
op_star
op_star
id|sht
op_assign
(paren
(paren
r_struct
id|rsvp_head
op_star
)paren
id|tp-&gt;root
)paren
op_member_access_from_pointer
id|ht
suffix:semicolon
r_struct
id|rsvp_session
op_star
id|s
suffix:semicolon
r_struct
id|rsvp_filter
op_star
id|f
suffix:semicolon
r_int
id|h1
op_assign
id|handle
op_amp
l_int|0xFF
suffix:semicolon
r_int
id|h2
op_assign
(paren
id|handle
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
suffix:semicolon
r_if
c_cond
(paren
id|h2
OG
l_int|16
)paren
r_return
l_int|0
suffix:semicolon
r_for
c_loop
(paren
id|s
op_assign
id|sht
(braket
id|h1
)braket
suffix:semicolon
id|s
suffix:semicolon
id|s
op_assign
id|s-&gt;next
)paren
(brace
r_for
c_loop
(paren
id|f
op_assign
id|s-&gt;ht
(braket
id|h2
)braket
suffix:semicolon
id|f
suffix:semicolon
id|f
op_assign
id|f-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|f-&gt;handle
op_eq
id|handle
)paren
r_return
(paren
r_int
r_int
)paren
id|f
suffix:semicolon
)brace
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|rsvp_put
r_static
r_void
id|rsvp_put
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
r_int
r_int
id|f
)paren
(brace
)brace
DECL|function|rsvp_init
r_static
r_int
id|rsvp_init
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
)paren
(brace
r_struct
id|rsvp_head
op_star
id|data
suffix:semicolon
id|MOD_INC_USE_COUNT
suffix:semicolon
id|data
op_assign
id|kmalloc
c_func
(paren
r_sizeof
(paren
r_struct
id|rsvp_head
)paren
comma
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|data
)paren
(brace
id|memset
c_func
(paren
id|data
comma
l_int|0
comma
r_sizeof
(paren
r_struct
id|rsvp_head
)paren
)paren
suffix:semicolon
id|tp-&gt;root
op_assign
id|data
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
id|MOD_DEC_USE_COUNT
suffix:semicolon
r_return
op_minus
id|ENOBUFS
suffix:semicolon
)brace
DECL|function|rsvp_destroy
r_static
r_void
id|rsvp_destroy
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
)paren
(brace
r_struct
id|rsvp_head
op_star
id|data
op_assign
id|xchg
c_func
(paren
op_amp
id|tp-&gt;root
comma
l_int|NULL
)paren
suffix:semicolon
r_struct
id|rsvp_session
op_star
op_star
id|sht
suffix:semicolon
r_int
id|h1
comma
id|h2
suffix:semicolon
r_if
c_cond
(paren
id|data
op_eq
l_int|NULL
)paren
r_return
suffix:semicolon
id|sht
op_assign
id|data-&gt;ht
suffix:semicolon
r_for
c_loop
(paren
id|h1
op_assign
l_int|0
suffix:semicolon
id|h1
OL
l_int|256
suffix:semicolon
id|h1
op_increment
)paren
(brace
r_struct
id|rsvp_session
op_star
id|s
suffix:semicolon
r_while
c_loop
(paren
(paren
id|s
op_assign
id|sht
(braket
id|h1
)braket
)paren
op_ne
l_int|NULL
)paren
(brace
id|sht
(braket
id|h1
)braket
op_assign
id|s-&gt;next
suffix:semicolon
r_for
c_loop
(paren
id|h2
op_assign
l_int|0
suffix:semicolon
id|h2
op_le
l_int|16
suffix:semicolon
id|h2
op_increment
)paren
(brace
r_struct
id|rsvp_filter
op_star
id|f
suffix:semicolon
r_while
c_loop
(paren
(paren
id|f
op_assign
id|s-&gt;ht
(braket
id|h2
)braket
)paren
op_ne
l_int|NULL
)paren
(brace
r_int
r_int
id|cl
suffix:semicolon
id|s-&gt;ht
(braket
id|h2
)braket
op_assign
id|f-&gt;next
suffix:semicolon
r_if
c_cond
(paren
(paren
id|cl
op_assign
id|__cls_set_class
c_func
(paren
op_amp
id|f-&gt;res
dot
r_class
comma
l_int|0
)paren
)paren
op_ne
l_int|0
)paren
id|tp-&gt;q-&gt;ops-&gt;cl_ops
op_member_access_from_pointer
id|unbind_tcf
c_func
(paren
id|tp-&gt;q
comma
id|cl
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_NET_CLS_POLICE
id|tcf_police_release
c_func
(paren
id|f-&gt;police
)paren
suffix:semicolon
macro_line|#endif
id|kfree
c_func
(paren
id|f
)paren
suffix:semicolon
)brace
)brace
id|kfree
c_func
(paren
id|s
)paren
suffix:semicolon
)brace
)brace
id|kfree
c_func
(paren
id|data
)paren
suffix:semicolon
id|MOD_DEC_USE_COUNT
suffix:semicolon
)brace
DECL|function|rsvp_delete
r_static
r_int
id|rsvp_delete
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
r_int
r_int
id|arg
)paren
(brace
r_struct
id|rsvp_filter
op_star
op_star
id|fp
comma
op_star
id|f
op_assign
(paren
r_struct
id|rsvp_filter
op_star
)paren
id|arg
suffix:semicolon
r_int
id|h
op_assign
id|f-&gt;handle
suffix:semicolon
r_struct
id|rsvp_session
op_star
op_star
id|sp
suffix:semicolon
r_struct
id|rsvp_session
op_star
id|s
op_assign
id|f-&gt;sess
suffix:semicolon
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|fp
op_assign
op_amp
id|s-&gt;ht
(braket
(paren
id|h
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)braket
suffix:semicolon
op_star
id|fp
suffix:semicolon
id|fp
op_assign
op_amp
(paren
op_star
id|fp
)paren
op_member_access_from_pointer
id|next
)paren
(brace
r_if
c_cond
(paren
op_star
id|fp
op_eq
id|f
)paren
(brace
r_int
r_int
id|cl
suffix:semicolon
id|tcf_tree_lock
c_func
(paren
id|tp
)paren
suffix:semicolon
op_star
id|fp
op_assign
id|f-&gt;next
suffix:semicolon
id|tcf_tree_unlock
c_func
(paren
id|tp
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|cl
op_assign
id|cls_set_class
c_func
(paren
id|tp
comma
op_amp
id|f-&gt;res
dot
r_class
comma
l_int|0
)paren
)paren
op_ne
l_int|0
)paren
id|tp-&gt;q-&gt;ops-&gt;cl_ops
op_member_access_from_pointer
id|unbind_tcf
c_func
(paren
id|tp-&gt;q
comma
id|cl
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_NET_CLS_POLICE
id|tcf_police_release
c_func
(paren
id|f-&gt;police
)paren
suffix:semicolon
macro_line|#endif
id|kfree
c_func
(paren
id|f
)paren
suffix:semicolon
multiline_comment|/* Strip tree */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
op_le
l_int|16
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
id|s-&gt;ht
(braket
id|i
)braket
)paren
r_return
l_int|0
suffix:semicolon
multiline_comment|/* OK, session has no flows */
r_for
c_loop
(paren
id|sp
op_assign
op_amp
(paren
(paren
r_struct
id|rsvp_head
op_star
)paren
id|tp-&gt;root
)paren
op_member_access_from_pointer
id|ht
(braket
id|h
op_amp
l_int|0xFF
)braket
suffix:semicolon
op_star
id|sp
suffix:semicolon
id|sp
op_assign
op_amp
(paren
op_star
id|sp
)paren
op_member_access_from_pointer
id|next
)paren
(brace
r_if
c_cond
(paren
op_star
id|sp
op_eq
id|s
)paren
(brace
id|tcf_tree_lock
c_func
(paren
id|tp
)paren
suffix:semicolon
op_star
id|sp
op_assign
id|s-&gt;next
suffix:semicolon
id|tcf_tree_unlock
c_func
(paren
id|tp
)paren
suffix:semicolon
id|kfree
c_func
(paren
id|s
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
)brace
r_return
l_int|0
suffix:semicolon
)brace
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|gen_handle
r_static
r_int
id|gen_handle
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
r_int
id|salt
)paren
(brace
r_struct
id|rsvp_head
op_star
id|data
op_assign
id|tp-&gt;root
suffix:semicolon
r_int
id|i
op_assign
l_int|0xFFFF
suffix:semicolon
r_while
c_loop
(paren
id|i
op_decrement
OG
l_int|0
)paren
(brace
id|u32
id|h
suffix:semicolon
r_if
c_cond
(paren
(paren
id|data-&gt;hgenerator
op_add_assign
l_int|0x10000
)paren
op_eq
l_int|0
)paren
id|data-&gt;hgenerator
op_assign
l_int|0x10000
suffix:semicolon
id|h
op_assign
id|data-&gt;hgenerator
op_or
id|salt
suffix:semicolon
r_if
c_cond
(paren
id|rsvp_get
c_func
(paren
id|tp
comma
id|h
)paren
op_eq
l_int|0
)paren
r_return
id|h
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|tunnel_bts
r_static
r_int
id|tunnel_bts
c_func
(paren
r_struct
id|rsvp_head
op_star
id|data
)paren
(brace
r_int
id|n
op_assign
id|data-&gt;tgenerator
op_rshift
l_int|5
suffix:semicolon
id|u32
id|b
op_assign
l_int|1
op_lshift
(paren
id|data-&gt;tgenerator
op_amp
l_int|0x1F
)paren
suffix:semicolon
r_if
c_cond
(paren
id|data-&gt;tmap
(braket
id|n
)braket
op_amp
id|b
)paren
r_return
l_int|0
suffix:semicolon
id|data-&gt;tmap
(braket
id|n
)braket
op_or_assign
id|b
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|tunnel_recycle
r_static
r_void
id|tunnel_recycle
c_func
(paren
r_struct
id|rsvp_head
op_star
id|data
)paren
(brace
r_struct
id|rsvp_session
op_star
op_star
id|sht
op_assign
id|data-&gt;ht
suffix:semicolon
id|u32
id|tmap
(braket
l_int|256
op_div
l_int|32
)braket
suffix:semicolon
r_int
id|h1
comma
id|h2
suffix:semicolon
id|memset
c_func
(paren
id|tmap
comma
l_int|0
comma
r_sizeof
(paren
id|tmap
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|h1
op_assign
l_int|0
suffix:semicolon
id|h1
OL
l_int|256
suffix:semicolon
id|h1
op_increment
)paren
(brace
r_struct
id|rsvp_session
op_star
id|s
suffix:semicolon
r_for
c_loop
(paren
id|s
op_assign
id|sht
(braket
id|h1
)braket
suffix:semicolon
id|s
suffix:semicolon
id|s
op_assign
id|s-&gt;next
)paren
(brace
r_for
c_loop
(paren
id|h2
op_assign
l_int|0
suffix:semicolon
id|h2
op_le
l_int|16
suffix:semicolon
id|h2
op_increment
)paren
(brace
r_struct
id|rsvp_filter
op_star
id|f
suffix:semicolon
r_for
c_loop
(paren
id|f
op_assign
id|s-&gt;ht
(braket
id|h2
)braket
suffix:semicolon
id|f
suffix:semicolon
id|f
op_assign
id|f-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|f-&gt;tunnelhdr
op_eq
l_int|0
)paren
r_continue
suffix:semicolon
id|data-&gt;tgenerator
op_assign
id|f-&gt;res.classid
suffix:semicolon
id|tunnel_bts
c_func
(paren
id|data
)paren
suffix:semicolon
)brace
)brace
)brace
)brace
id|memcpy
c_func
(paren
id|data-&gt;tmap
comma
id|tmap
comma
r_sizeof
(paren
id|tmap
)paren
)paren
suffix:semicolon
)brace
DECL|function|gen_tunnel
r_static
id|u32
id|gen_tunnel
c_func
(paren
r_struct
id|rsvp_head
op_star
id|data
)paren
(brace
r_int
id|i
comma
id|k
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
l_int|2
suffix:semicolon
id|k
op_increment
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|255
suffix:semicolon
id|i
OG
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
(brace
r_if
c_cond
(paren
op_increment
id|data-&gt;tgenerator
op_eq
l_int|0
)paren
id|data-&gt;tgenerator
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|tunnel_bts
c_func
(paren
id|data
)paren
)paren
r_return
id|data-&gt;tgenerator
suffix:semicolon
)brace
id|tunnel_recycle
c_func
(paren
id|data
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|rsvp_change
r_static
r_int
id|rsvp_change
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
r_int
r_int
id|base
comma
id|u32
id|handle
comma
r_struct
id|rtattr
op_star
op_star
id|tca
comma
r_int
r_int
op_star
id|arg
)paren
(brace
r_struct
id|rsvp_head
op_star
id|data
op_assign
id|tp-&gt;root
suffix:semicolon
r_struct
id|rsvp_filter
op_star
id|f
comma
op_star
op_star
id|fp
suffix:semicolon
r_struct
id|rsvp_session
op_star
id|s
comma
op_star
op_star
id|sp
suffix:semicolon
r_struct
id|tc_rsvp_pinfo
op_star
id|pinfo
op_assign
l_int|NULL
suffix:semicolon
r_struct
id|rtattr
op_star
id|opt
op_assign
id|tca
(braket
id|TCA_OPTIONS
op_minus
l_int|1
)braket
suffix:semicolon
r_struct
id|rtattr
op_star
id|tb
(braket
id|TCA_RSVP_MAX
)braket
suffix:semicolon
r_int
id|h1
comma
id|h2
suffix:semicolon
id|u32
op_star
id|dst
suffix:semicolon
r_int
id|err
suffix:semicolon
r_if
c_cond
(paren
id|opt
op_eq
l_int|NULL
)paren
r_return
id|handle
ques
c_cond
op_minus
id|EINVAL
suffix:colon
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|rtattr_parse
c_func
(paren
id|tb
comma
id|TCA_RSVP_MAX
comma
id|RTA_DATA
c_func
(paren
id|opt
)paren
comma
id|RTA_PAYLOAD
c_func
(paren
id|opt
)paren
)paren
OL
l_int|0
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
(paren
id|f
op_assign
(paren
r_struct
id|rsvp_filter
op_star
)paren
op_star
id|arg
)paren
op_ne
l_int|NULL
)paren
(brace
multiline_comment|/* Node exists: adjust only classid */
r_if
c_cond
(paren
id|f-&gt;handle
op_ne
id|handle
op_logical_and
id|handle
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_CLASSID
op_minus
l_int|1
)braket
)paren
(brace
r_int
r_int
id|cl
suffix:semicolon
id|f-&gt;res.classid
op_assign
op_star
(paren
id|u32
op_star
)paren
id|RTA_DATA
c_func
(paren
id|tb
(braket
id|TCA_RSVP_CLASSID
op_minus
l_int|1
)braket
)paren
suffix:semicolon
id|cl
op_assign
id|cls_set_class
c_func
(paren
id|tp
comma
op_amp
id|f-&gt;res
dot
r_class
comma
id|tp-&gt;q-&gt;ops-&gt;cl_ops
op_member_access_from_pointer
id|bind_tcf
c_func
(paren
id|tp-&gt;q
comma
id|base
comma
id|f-&gt;res.classid
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|cl
)paren
id|tp-&gt;q-&gt;ops-&gt;cl_ops
op_member_access_from_pointer
id|unbind_tcf
c_func
(paren
id|tp-&gt;q
comma
id|cl
)paren
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_NET_CLS_POLICE
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_POLICE
op_minus
l_int|1
)braket
)paren
(brace
r_struct
id|tcf_police
op_star
id|police
op_assign
id|tcf_police_locate
c_func
(paren
id|tb
(braket
id|TCA_RSVP_POLICE
op_minus
l_int|1
)braket
comma
id|tca
(braket
id|TCA_RATE
op_minus
l_int|1
)braket
)paren
suffix:semicolon
id|tcf_tree_lock
c_func
(paren
id|tp
)paren
suffix:semicolon
id|police
op_assign
id|xchg
c_func
(paren
op_amp
id|f-&gt;police
comma
id|police
)paren
suffix:semicolon
id|tcf_tree_unlock
c_func
(paren
id|tp
)paren
suffix:semicolon
id|tcf_police_release
c_func
(paren
id|police
)paren
suffix:semicolon
)brace
macro_line|#endif
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/* Now more serious part... */
r_if
c_cond
(paren
id|handle
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_DST
op_minus
l_int|1
)braket
op_eq
l_int|NULL
)paren
r_return
op_minus
id|EINVAL
suffix:semicolon
id|f
op_assign
id|kmalloc
c_func
(paren
r_sizeof
(paren
r_struct
id|rsvp_filter
)paren
comma
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|f
op_eq
l_int|NULL
)paren
r_return
op_minus
id|ENOBUFS
suffix:semicolon
id|memset
c_func
(paren
id|f
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|f
)paren
)paren
suffix:semicolon
id|h2
op_assign
l_int|16
suffix:semicolon
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_SRC
op_minus
l_int|1
)braket
)paren
(brace
id|err
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|RTA_PAYLOAD
c_func
(paren
id|tb
(braket
id|TCA_RSVP_SRC
op_minus
l_int|1
)braket
)paren
op_ne
r_sizeof
(paren
id|f-&gt;src
)paren
)paren
r_goto
id|errout
suffix:semicolon
id|memcpy
c_func
(paren
id|f-&gt;src
comma
id|RTA_DATA
c_func
(paren
id|tb
(braket
id|TCA_RSVP_SRC
op_minus
l_int|1
)braket
)paren
comma
r_sizeof
(paren
id|f-&gt;src
)paren
)paren
suffix:semicolon
id|h2
op_assign
id|hash_src
c_func
(paren
id|f-&gt;src
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_PINFO
op_minus
l_int|1
)braket
)paren
(brace
id|err
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|RTA_PAYLOAD
c_func
(paren
id|tb
(braket
id|TCA_RSVP_PINFO
op_minus
l_int|1
)braket
)paren
OL
r_sizeof
(paren
r_struct
id|tc_rsvp_pinfo
)paren
)paren
r_goto
id|errout
suffix:semicolon
id|pinfo
op_assign
id|RTA_DATA
c_func
(paren
id|tb
(braket
id|TCA_RSVP_PINFO
op_minus
l_int|1
)braket
)paren
suffix:semicolon
id|f-&gt;spi
op_assign
id|pinfo-&gt;spi
suffix:semicolon
id|f-&gt;tunnelhdr
op_assign
id|pinfo-&gt;tunnelhdr
suffix:semicolon
)brace
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_CLASSID
op_minus
l_int|1
)braket
)paren
(brace
id|err
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|RTA_PAYLOAD
c_func
(paren
id|tb
(braket
id|TCA_RSVP_CLASSID
op_minus
l_int|1
)braket
)paren
op_ne
l_int|4
)paren
r_goto
id|errout
suffix:semicolon
id|f-&gt;res.classid
op_assign
op_star
(paren
id|u32
op_star
)paren
id|RTA_DATA
c_func
(paren
id|tb
(braket
id|TCA_RSVP_CLASSID
op_minus
l_int|1
)braket
)paren
suffix:semicolon
)brace
id|err
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|RTA_PAYLOAD
c_func
(paren
id|tb
(braket
id|TCA_RSVP_DST
op_minus
l_int|1
)braket
)paren
op_ne
r_sizeof
(paren
id|f-&gt;src
)paren
)paren
r_goto
id|errout
suffix:semicolon
id|dst
op_assign
id|RTA_DATA
c_func
(paren
id|tb
(braket
id|TCA_RSVP_DST
op_minus
l_int|1
)braket
)paren
suffix:semicolon
id|h1
op_assign
id|hash_dst
c_func
(paren
id|dst
comma
id|pinfo
ques
c_cond
id|pinfo-&gt;protocol
suffix:colon
l_int|0
comma
id|pinfo
ques
c_cond
id|pinfo-&gt;tunnelid
suffix:colon
l_int|0
)paren
suffix:semicolon
id|err
op_assign
op_minus
id|ENOMEM
suffix:semicolon
r_if
c_cond
(paren
(paren
id|f-&gt;handle
op_assign
id|gen_handle
c_func
(paren
id|tp
comma
id|h1
op_or
(paren
id|h2
op_lshift
l_int|8
)paren
)paren
)paren
op_eq
l_int|0
)paren
r_goto
id|errout
suffix:semicolon
r_if
c_cond
(paren
id|f-&gt;tunnelhdr
)paren
(brace
id|err
op_assign
op_minus
id|EINVAL
suffix:semicolon
r_if
c_cond
(paren
id|f-&gt;res.classid
OG
l_int|255
)paren
r_goto
id|errout
suffix:semicolon
id|err
op_assign
op_minus
id|ENOMEM
suffix:semicolon
r_if
c_cond
(paren
id|f-&gt;res.classid
op_eq
l_int|0
op_logical_and
(paren
id|f-&gt;res.classid
op_assign
id|gen_tunnel
c_func
(paren
id|data
)paren
)paren
op_eq
l_int|0
)paren
r_goto
id|errout
suffix:semicolon
)brace
r_for
c_loop
(paren
id|sp
op_assign
op_amp
id|data-&gt;ht
(braket
id|h1
)braket
suffix:semicolon
(paren
id|s
op_assign
op_star
id|sp
)paren
op_ne
l_int|NULL
suffix:semicolon
id|sp
op_assign
op_amp
id|s-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|dst
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
op_eq
id|s-&gt;dst
(braket
id|RSVP_DST_LEN
op_minus
l_int|1
)braket
op_logical_and
id|pinfo-&gt;protocol
op_eq
id|s-&gt;protocol
op_logical_and
id|memcmp
c_func
(paren
op_amp
id|pinfo-&gt;dpi
comma
op_amp
id|s-&gt;dpi
comma
r_sizeof
(paren
id|s-&gt;dpi
)paren
)paren
op_eq
l_int|0
macro_line|#if RSVP_DST_LEN == 4
op_logical_and
id|dst
(braket
l_int|0
)braket
op_eq
id|s-&gt;dst
(braket
l_int|0
)braket
op_logical_and
id|dst
(braket
l_int|1
)braket
op_eq
id|s-&gt;dst
(braket
l_int|1
)braket
op_logical_and
id|dst
(braket
l_int|2
)braket
op_eq
id|s-&gt;dst
(braket
l_int|2
)braket
macro_line|#endif
op_logical_and
id|pinfo-&gt;tunnelid
op_eq
id|s-&gt;tunnelid
)paren
(brace
id|insert
suffix:colon
multiline_comment|/* OK, we found appropriate session */
id|fp
op_assign
op_amp
id|s-&gt;ht
(braket
id|h2
)braket
suffix:semicolon
id|f-&gt;sess
op_assign
id|s
suffix:semicolon
r_if
c_cond
(paren
id|f-&gt;tunnelhdr
op_eq
l_int|0
)paren
id|cls_set_class
c_func
(paren
id|tp
comma
op_amp
id|f-&gt;res
dot
r_class
comma
id|tp-&gt;q-&gt;ops-&gt;cl_ops
op_member_access_from_pointer
id|bind_tcf
c_func
(paren
id|tp-&gt;q
comma
id|base
comma
id|f-&gt;res.classid
)paren
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_NET_CLS_POLICE
r_if
c_cond
(paren
id|tb
(braket
id|TCA_RSVP_POLICE
op_minus
l_int|1
)braket
)paren
id|f-&gt;police
op_assign
id|tcf_police_locate
c_func
(paren
id|tb
(braket
id|TCA_RSVP_POLICE
op_minus
l_int|1
)braket
comma
id|tca
(braket
id|TCA_RATE
op_minus
l_int|1
)braket
)paren
suffix:semicolon
macro_line|#endif
r_for
c_loop
(paren
id|fp
op_assign
op_amp
id|s-&gt;ht
(braket
id|h2
)braket
suffix:semicolon
op_star
id|fp
suffix:semicolon
id|fp
op_assign
op_amp
(paren
op_star
id|fp
)paren
op_member_access_from_pointer
id|next
)paren
r_if
c_cond
(paren
(paren
(paren
op_star
id|fp
)paren
op_member_access_from_pointer
id|spi.mask
op_amp
id|f-&gt;spi.mask
)paren
op_ne
id|f-&gt;spi.mask
)paren
r_break
suffix:semicolon
id|f-&gt;next
op_assign
op_star
id|fp
suffix:semicolon
id|wmb
c_func
(paren
)paren
suffix:semicolon
op_star
id|fp
op_assign
id|f
suffix:semicolon
op_star
id|arg
op_assign
(paren
r_int
r_int
)paren
id|f
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
)brace
multiline_comment|/* No session found. Create new one. */
id|err
op_assign
op_minus
id|ENOBUFS
suffix:semicolon
id|s
op_assign
id|kmalloc
c_func
(paren
r_sizeof
(paren
r_struct
id|rsvp_session
)paren
comma
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|s
op_eq
l_int|NULL
)paren
r_goto
id|errout
suffix:semicolon
id|memset
c_func
(paren
id|s
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|s
)paren
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|s-&gt;dst
comma
id|dst
comma
r_sizeof
(paren
id|s-&gt;dst
)paren
)paren
suffix:semicolon
id|s-&gt;dpi
op_assign
id|pinfo-&gt;dpi
suffix:semicolon
id|s-&gt;protocol
op_assign
id|pinfo-&gt;protocol
suffix:semicolon
id|s-&gt;tunnelid
op_assign
id|pinfo-&gt;tunnelid
suffix:semicolon
r_for
c_loop
(paren
id|sp
op_assign
op_amp
id|data-&gt;ht
(braket
id|h1
)braket
suffix:semicolon
op_star
id|sp
suffix:semicolon
id|sp
op_assign
op_amp
(paren
op_star
id|sp
)paren
op_member_access_from_pointer
id|next
)paren
(brace
r_if
c_cond
(paren
(paren
(paren
op_star
id|sp
)paren
op_member_access_from_pointer
id|dpi.mask
op_amp
id|s-&gt;dpi.mask
)paren
op_ne
id|s-&gt;dpi.mask
)paren
r_break
suffix:semicolon
)brace
id|s-&gt;next
op_assign
op_star
id|sp
suffix:semicolon
id|wmb
c_func
(paren
)paren
suffix:semicolon
op_star
id|sp
op_assign
id|s
suffix:semicolon
r_goto
id|insert
suffix:semicolon
id|errout
suffix:colon
r_if
c_cond
(paren
id|f
)paren
id|kfree
c_func
(paren
id|f
)paren
suffix:semicolon
r_return
id|err
suffix:semicolon
)brace
DECL|function|rsvp_walk
r_static
r_void
id|rsvp_walk
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
r_struct
id|tcf_walker
op_star
id|arg
)paren
(brace
r_struct
id|rsvp_head
op_star
id|head
op_assign
id|tp-&gt;root
suffix:semicolon
r_int
id|h
comma
id|h1
suffix:semicolon
r_if
c_cond
(paren
id|arg-&gt;stop
)paren
r_return
suffix:semicolon
r_for
c_loop
(paren
id|h
op_assign
l_int|0
suffix:semicolon
id|h
OL
l_int|256
suffix:semicolon
id|h
op_increment
)paren
(brace
r_struct
id|rsvp_session
op_star
id|s
suffix:semicolon
r_for
c_loop
(paren
id|s
op_assign
id|head-&gt;ht
(braket
id|h
)braket
suffix:semicolon
id|s
suffix:semicolon
id|s
op_assign
id|s-&gt;next
)paren
(brace
r_for
c_loop
(paren
id|h1
op_assign
l_int|0
suffix:semicolon
id|h1
op_le
l_int|16
suffix:semicolon
id|h1
op_increment
)paren
(brace
r_struct
id|rsvp_filter
op_star
id|f
suffix:semicolon
r_for
c_loop
(paren
id|f
op_assign
id|s-&gt;ht
(braket
id|h1
)braket
suffix:semicolon
id|f
suffix:semicolon
id|f
op_assign
id|f-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|arg-&gt;count
OL
id|arg-&gt;skip
)paren
(brace
id|arg-&gt;count
op_increment
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_if
c_cond
(paren
id|arg
op_member_access_from_pointer
id|fn
c_func
(paren
id|tp
comma
(paren
r_int
r_int
)paren
id|f
comma
id|arg
)paren
OL
l_int|0
)paren
(brace
id|arg-&gt;stop
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
)brace
id|arg-&gt;count
op_increment
suffix:semicolon
)brace
)brace
)brace
)brace
)brace
macro_line|#ifdef CONFIG_RTNETLINK
DECL|function|rsvp_dump
r_static
r_int
id|rsvp_dump
c_func
(paren
r_struct
id|tcf_proto
op_star
id|tp
comma
r_int
r_int
id|fh
comma
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|tcmsg
op_star
id|t
)paren
(brace
r_struct
id|rsvp_filter
op_star
id|f
op_assign
(paren
r_struct
id|rsvp_filter
op_star
)paren
id|fh
suffix:semicolon
r_struct
id|rsvp_session
op_star
id|s
suffix:semicolon
r_int
r_char
op_star
id|b
op_assign
id|skb-&gt;tail
suffix:semicolon
r_struct
id|rtattr
op_star
id|rta
suffix:semicolon
r_struct
id|tc_rsvp_pinfo
id|pinfo
suffix:semicolon
r_if
c_cond
(paren
id|f
op_eq
l_int|NULL
)paren
r_return
id|skb-&gt;len
suffix:semicolon
id|s
op_assign
id|f-&gt;sess
suffix:semicolon
id|t-&gt;tcm_handle
op_assign
id|f-&gt;handle
suffix:semicolon
id|rta
op_assign
(paren
r_struct
id|rtattr
op_star
)paren
id|b
suffix:semicolon
id|RTA_PUT
c_func
(paren
id|skb
comma
id|TCA_OPTIONS
comma
l_int|0
comma
l_int|NULL
)paren
suffix:semicolon
id|RTA_PUT
c_func
(paren
id|skb
comma
id|TCA_RSVP_DST
comma
r_sizeof
(paren
id|s-&gt;dst
)paren
comma
op_amp
id|s-&gt;dst
)paren
suffix:semicolon
id|pinfo.dpi
op_assign
id|s-&gt;dpi
suffix:semicolon
id|pinfo.spi
op_assign
id|f-&gt;spi
suffix:semicolon
id|pinfo.protocol
op_assign
id|s-&gt;protocol
suffix:semicolon
id|pinfo.tunnelid
op_assign
id|s-&gt;tunnelid
suffix:semicolon
id|pinfo.tunnelhdr
op_assign
id|f-&gt;tunnelhdr
suffix:semicolon
id|RTA_PUT
c_func
(paren
id|skb
comma
id|TCA_RSVP_PINFO
comma
r_sizeof
(paren
id|pinfo
)paren
comma
op_amp
id|pinfo
)paren
suffix:semicolon
r_if
c_cond
(paren
id|f-&gt;res.classid
)paren
id|RTA_PUT
c_func
(paren
id|skb
comma
id|TCA_RSVP_CLASSID
comma
l_int|4
comma
op_amp
id|f-&gt;res.classid
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
id|f-&gt;handle
op_rshift
l_int|8
)paren
op_amp
l_int|0xFF
)paren
op_ne
l_int|16
)paren
id|RTA_PUT
c_func
(paren
id|skb
comma
id|TCA_RSVP_SRC
comma
r_sizeof
(paren
id|f-&gt;src
)paren
comma
id|f-&gt;src
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_NET_CLS_POLICE
r_if
c_cond
(paren
id|f-&gt;police
)paren
(brace
r_struct
id|rtattr
op_star
id|p_rta
op_assign
(paren
r_struct
id|rtattr
op_star
)paren
id|skb-&gt;tail
suffix:semicolon
id|RTA_PUT
c_func
(paren
id|skb
comma
id|TCA_RSVP_POLICE
comma
l_int|0
comma
l_int|NULL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tcf_police_dump
c_func
(paren
id|skb
comma
id|f-&gt;police
)paren
OL
l_int|0
)paren
r_goto
id|rtattr_failure
suffix:semicolon
id|p_rta-&gt;rta_len
op_assign
id|skb-&gt;tail
op_minus
(paren
id|u8
op_star
)paren
id|p_rta
suffix:semicolon
)brace
macro_line|#endif
id|rta-&gt;rta_len
op_assign
id|skb-&gt;tail
op_minus
id|b
suffix:semicolon
macro_line|#ifdef CONFIG_NET_CLS_POLICE
r_if
c_cond
(paren
id|f-&gt;police
)paren
(brace
r_if
c_cond
(paren
id|qdisc_copy_stats
c_func
(paren
id|skb
comma
op_amp
id|f-&gt;police-&gt;stats
)paren
)paren
r_goto
id|rtattr_failure
suffix:semicolon
)brace
macro_line|#endif
r_return
id|skb-&gt;len
suffix:semicolon
id|rtattr_failure
suffix:colon
id|skb_trim
c_func
(paren
id|skb
comma
id|b
op_minus
id|skb-&gt;data
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
macro_line|#endif
DECL|variable|RSVP_OPS
r_struct
id|tcf_proto_ops
id|RSVP_OPS
op_assign
(brace
l_int|NULL
comma
id|RSVP_ID
comma
id|rsvp_classify
comma
id|rsvp_init
comma
id|rsvp_destroy
comma
id|rsvp_get
comma
id|rsvp_put
comma
id|rsvp_change
comma
id|rsvp_delete
comma
id|rsvp_walk
comma
macro_line|#ifdef CONFIG_RTNETLINK
id|rsvp_dump
macro_line|#else
l_int|NULL
macro_line|#endif
)brace
suffix:semicolon
macro_line|#ifdef MODULE
DECL|function|init_module
r_int
id|init_module
c_func
(paren
r_void
)paren
(brace
r_return
id|register_tcf_proto_ops
c_func
(paren
op_amp
id|RSVP_OPS
)paren
suffix:semicolon
)brace
DECL|function|cleanup_module
r_void
id|cleanup_module
c_func
(paren
r_void
)paren
(brace
id|unregister_tcf_proto_ops
c_func
(paren
op_amp
id|RSVP_OPS
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
