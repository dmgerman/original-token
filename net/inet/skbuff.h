multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the &squot;struct sk_buff&squot; memory handlers.&n; *&n; * Version:&t;@(#)skbuff.h&t;1.0.4&t;05/20/93&n; *&n; * Authors:&t;Ross Biro, &lt;bir7@leland.Stanford.Edu&gt;&n; *&t;&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; *&t;&t;Corey Minyard &lt;wf-rch!minyard@relay.EU.net&gt;&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _SKBUFF_H
DECL|macro|_SKBUFF_H
mdefine_line|#define _SKBUFF_H
DECL|macro|FREE_READ
mdefine_line|#define FREE_READ&t;1
DECL|macro|FREE_WRITE
mdefine_line|#define FREE_WRITE&t;0
DECL|struct|sk_buff
r_struct
id|sk_buff
(brace
DECL|member|next
r_struct
id|sk_buff
op_star
id|next
suffix:semicolon
DECL|member|prev
r_struct
id|sk_buff
op_star
id|prev
suffix:semicolon
DECL|member|link3
r_struct
id|sk_buff
op_star
id|link3
suffix:semicolon
DECL|member|sk
r_struct
id|sock
op_star
id|sk
suffix:semicolon
DECL|member|when
r_volatile
r_int
r_int
id|when
suffix:semicolon
multiline_comment|/* used to compute rtt&squot;s&t;*/
DECL|member|dev
r_struct
id|device
op_star
id|dev
suffix:semicolon
DECL|member|mem_addr
r_void
op_star
id|mem_addr
suffix:semicolon
r_union
(brace
DECL|member|th
r_struct
id|tcphdr
op_star
id|th
suffix:semicolon
DECL|member|eth
r_struct
id|ethhdr
op_star
id|eth
suffix:semicolon
DECL|member|iph
r_struct
id|iphdr
op_star
id|iph
suffix:semicolon
DECL|member|uh
r_struct
id|udphdr
op_star
id|uh
suffix:semicolon
DECL|member|arp
r_struct
id|arphdr
op_star
id|arp
suffix:semicolon
DECL|member|raw
r_int
r_char
op_star
id|raw
suffix:semicolon
DECL|member|seq
r_int
r_int
id|seq
suffix:semicolon
DECL|member|h
)brace
id|h
suffix:semicolon
DECL|member|mem_len
r_int
r_int
id|mem_len
suffix:semicolon
DECL|member|len
r_int
r_int
id|len
suffix:semicolon
DECL|member|saddr
r_int
r_int
id|saddr
suffix:semicolon
DECL|member|daddr
r_int
r_int
id|daddr
suffix:semicolon
DECL|member|magic
r_int
id|magic
suffix:semicolon
DECL|member|acked
r_volatile
r_char
id|acked
comma
DECL|member|used
id|used
comma
DECL|member|free
id|free
comma
DECL|member|arp
id|arp
comma
DECL|member|urg_used
id|urg_used
comma
DECL|member|lock
id|lock
suffix:semicolon
DECL|member|tries
r_int
r_char
id|tries
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|SK_WMEM_MAX
mdefine_line|#define SK_WMEM_MAX&t;8192
DECL|macro|SK_RMEM_MAX
mdefine_line|#define SK_RMEM_MAX&t;32767
r_extern
r_void
id|print_skb
c_func
(paren
r_struct
id|sk_buff
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kfree_skb
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
id|rw
)paren
suffix:semicolon
r_extern
r_void
id|lock_skb
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_void
id|unlock_skb
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
id|rw
)paren
suffix:semicolon
macro_line|#endif&t;/* _SKBUFF_H */
eof
