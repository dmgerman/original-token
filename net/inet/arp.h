multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the ARP protocol module.&n; *&n; * Version:&t;@(#)arp.h&t;1.0.6&t;05/21/93&n; *&n; * Authors:&t;Ross Biro, &lt;bir7@leland.Stanford.Edu&gt;&n; *&t;&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _ARP_H
DECL|macro|_ARP_H
mdefine_line|#define _ARP_H
DECL|macro|ARP_TABLE_SIZE
mdefine_line|#define ARP_TABLE_SIZE&t;16&t;&t;/* size of ARP table&t;&t;*/
DECL|macro|ARP_TIMEOUT
mdefine_line|#define ARP_TIMEOUT&t;30000&t;&t;/* five minutes&t;&t;&t;*/
DECL|macro|ARP_RES_TIME
mdefine_line|#define ARP_RES_TIME&t;250&t;&t;/* 2.5 seconds&t;&t;&t;*/
DECL|macro|ARP_MAX_TRIES
mdefine_line|#define ARP_MAX_TRIES&t;3&t;&t;/* max # of tries to send ARP&t;*/
DECL|macro|ARP_QUEUE_MAGIC
mdefine_line|#define ARP_QUEUE_MAGIC&t;0x0432447A&t;/* magic # for queues&t;&t;*/
multiline_comment|/* This structure defines the ARP mapping cache. */
DECL|struct|arp_table
r_struct
id|arp_table
(brace
DECL|member|next
r_struct
id|arp_table
op_star
id|next
suffix:semicolon
DECL|member|last_used
r_volatile
r_int
r_int
id|last_used
suffix:semicolon
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
macro_line|#if 1
DECL|member|ip
r_int
r_int
id|ip
suffix:semicolon
macro_line|#else
DECL|member|pa
r_int
r_char
id|pa
(braket
id|MAX_ADDR_LEN
)braket
suffix:semicolon
DECL|member|plen
r_int
r_char
id|plen
suffix:semicolon
DECL|member|ptype
r_int
r_char
id|ptype
suffix:semicolon
macro_line|#endif
DECL|member|ha
r_int
r_char
id|ha
(braket
id|MAX_ADDR_LEN
)braket
suffix:semicolon
DECL|member|hlen
r_int
r_char
id|hlen
suffix:semicolon
DECL|member|htype
r_int
r_char
id|htype
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* This is also used in &quot;sock.c&quot; and &quot;tcp.c&quot; - YUCK! - FvK */
r_extern
r_struct
id|sk_buff
op_star
id|arp_q
suffix:semicolon
r_extern
r_void
id|arp_destroy
c_func
(paren
r_int
r_int
id|paddr
)paren
suffix:semicolon
r_extern
r_int
id|arp_rcv
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|device
op_star
id|dev
comma
r_struct
id|packet_type
op_star
id|pt
)paren
suffix:semicolon
r_extern
r_int
id|arp_find
c_func
(paren
r_int
r_char
op_star
id|haddr
comma
r_int
r_int
id|paddr
comma
r_struct
id|device
op_star
id|dev
comma
r_int
r_int
id|saddr
)paren
suffix:semicolon
r_extern
r_void
id|arp_add
c_func
(paren
r_int
r_int
id|addr
comma
r_int
r_char
op_star
id|haddr
comma
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|arp_add_broad
c_func
(paren
r_int
r_int
id|addr
comma
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|arp_queue
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
id|arp_get_info
c_func
(paren
r_char
op_star
id|buffer
)paren
suffix:semicolon
r_extern
r_int
id|arp_ioctl
c_func
(paren
r_int
r_int
id|cmd
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
r_extern
r_void
id|arp_destroy_maybe
c_func
(paren
r_int
r_int
id|paddr
)paren
suffix:semicolon
macro_line|#endif&t;/* _ARP_H */
eof
