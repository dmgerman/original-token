multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the &squot;struct sk_buff&squot; memory handlers.&n; *&n; * Version:&t;@(#)skbuff.h&t;1.0.4&t;05/20/93&n; *&n; * Authors:&t;Ross Biro, &lt;bir7@leland.Stanford.Edu&gt;&n; *&t;&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; *&t;&t;Corey Minyard &lt;wf-rch!minyard@relay.EU.net&gt;&n; *&n; * Fixes:&n; *&t;&t;Alan Cox&t;&t;: &t;Volatiles (this makes me unhappy - we want proper asm linked list stuff)&n; *&t;&t;Alan Cox&t;&t;:&t;Declaration for new primitives&n; *&t;&t;Alan Cox&t;&t;:&t;Fraglist support (idea by Donald Becker)&n; *&t;&t;Alan Cox&t;&t;:&t;&squot;users&squot; counter. Combines with datagram changes to avoid skb_peek_copy&n; *&t;&t;&t;&t;&t;&t;being used.&n; *&t;&t;Alan Cox&t;&t;: &t;Extra fields for RAW fixes&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _SKBUFF_H
DECL|macro|_SKBUFF_H
mdefine_line|#define _SKBUFF_H
macro_line|#include &lt;linux/malloc.h&gt;
macro_line|#ifdef CONFIG_IPX
macro_line|#include &quot;ipx/ipx.h&quot;
macro_line|#endif
DECL|macro|HAVE_ALLOC_SKB
mdefine_line|#define HAVE_ALLOC_SKB&t;&t;/* For the drivers to know */
DECL|macro|FREE_READ
mdefine_line|#define FREE_READ&t;1
DECL|macro|FREE_WRITE
mdefine_line|#define FREE_WRITE&t;0
DECL|struct|sk_buff
r_struct
id|sk_buff
(brace
DECL|member|magic_debug_cookie
r_int
r_int
id|magic_debug_cookie
suffix:semicolon
DECL|member|next
r_struct
id|sk_buff
op_star
r_volatile
id|next
suffix:semicolon
DECL|member|prev
r_struct
id|sk_buff
op_star
r_volatile
id|prev
suffix:semicolon
DECL|member|link3
r_struct
id|sk_buff
op_star
r_volatile
id|link3
suffix:semicolon
DECL|member|list
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
suffix:semicolon
DECL|member|sk
r_struct
id|sock
op_star
id|sk
suffix:semicolon
DECL|member|when
r_volatile
r_int
r_int
id|when
suffix:semicolon
multiline_comment|/* used to compute rtt&squot;s&t;*/
DECL|member|dev
r_struct
id|device
op_star
id|dev
suffix:semicolon
DECL|member|mem_addr
r_void
op_star
id|mem_addr
suffix:semicolon
r_union
(brace
DECL|member|th
r_struct
id|tcphdr
op_star
id|th
suffix:semicolon
DECL|member|eth
r_struct
id|ethhdr
op_star
id|eth
suffix:semicolon
DECL|member|iph
r_struct
id|iphdr
op_star
id|iph
suffix:semicolon
DECL|member|uh
r_struct
id|udphdr
op_star
id|uh
suffix:semicolon
DECL|member|arp
r_struct
id|arphdr
op_star
id|arp
suffix:semicolon
DECL|member|raw
r_int
r_char
op_star
id|raw
suffix:semicolon
DECL|member|seq
r_int
r_int
id|seq
suffix:semicolon
macro_line|#ifdef CONFIG_IPX&t;
DECL|member|ipx
id|ipx_packet
op_star
id|ipx
suffix:semicolon
macro_line|#endif&t;
DECL|member|h
)brace
id|h
suffix:semicolon
DECL|member|ip_hdr
r_struct
id|iphdr
op_star
id|ip_hdr
suffix:semicolon
DECL|member|mem_len
r_int
r_int
id|mem_len
suffix:semicolon
DECL|member|len
r_int
r_int
id|len
suffix:semicolon
DECL|member|fraglen
r_int
r_int
id|fraglen
suffix:semicolon
DECL|member|fraglist
r_struct
id|sk_buff
op_star
id|fraglist
suffix:semicolon
multiline_comment|/* Fragment list */
DECL|member|truesize
r_int
r_int
id|truesize
suffix:semicolon
DECL|member|saddr
r_int
r_int
id|saddr
suffix:semicolon
DECL|member|daddr
r_int
r_int
id|daddr
suffix:semicolon
DECL|member|magic
r_int
id|magic
suffix:semicolon
DECL|member|acked
r_volatile
r_char
id|acked
comma
DECL|member|used
id|used
comma
DECL|member|free
id|free
comma
DECL|member|arp
id|arp
comma
DECL|member|urg_used
id|urg_used
suffix:semicolon
DECL|member|tries
DECL|member|lock
r_int
r_char
id|tries
comma
id|lock
suffix:semicolon
multiline_comment|/* Lock is now unused */
DECL|member|users
r_int
r_int
id|users
suffix:semicolon
multiline_comment|/* User count - see datagram.c (and soon seqpacket.c/stream.c) */
)brace
suffix:semicolon
DECL|macro|SK_WMEM_MAX
mdefine_line|#define SK_WMEM_MAX&t;8192
DECL|macro|SK_RMEM_MAX
mdefine_line|#define SK_RMEM_MAX&t;32767
DECL|macro|SK_FREED_SKB
mdefine_line|#define SK_FREED_SKB&t;0x0DE2C0DE
DECL|macro|SK_GOOD_SKB
mdefine_line|#define SK_GOOD_SKB&t;0xDEC0DED1
r_extern
r_void
id|print_skb
c_func
(paren
r_struct
id|sk_buff
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kfree_skb
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
id|rw
)paren
suffix:semicolon
r_extern
r_void
id|skb_queue_head
c_func
(paren
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
comma
r_struct
id|sk_buff
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_void
id|skb_queue_tail
c_func
(paren
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
comma
r_struct
id|sk_buff
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|skb_dequeue
c_func
(paren
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
)paren
suffix:semicolon
r_extern
r_void
id|skb_insert
c_func
(paren
r_struct
id|sk_buff
op_star
id|old
comma
r_struct
id|sk_buff
op_star
id|newsk
)paren
suffix:semicolon
r_extern
r_void
id|skb_append
c_func
(paren
r_struct
id|sk_buff
op_star
id|old
comma
r_struct
id|sk_buff
op_star
id|newsk
)paren
suffix:semicolon
r_extern
r_void
id|skb_unlink
c_func
(paren
r_struct
id|sk_buff
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_void
id|skb_new_list_head
c_func
(paren
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|skb_peek
c_func
(paren
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|skb_peek_copy
c_func
(paren
r_struct
id|sk_buff
op_star
r_volatile
op_star
id|list
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|alloc_skb
c_func
(paren
r_int
r_int
id|size
comma
r_int
id|priority
)paren
suffix:semicolon
r_extern
r_void
id|kfree_skbmem
c_func
(paren
r_void
op_star
id|mem
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|skb_check
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
comma
r_char
op_star
)paren
suffix:semicolon
DECL|macro|IS_SKB
mdefine_line|#define IS_SKB(skb)&t;skb_check((skb),__LINE__,__FILE__)
r_extern
r_struct
id|sk_buff
op_star
id|skb_recv_datagram
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|flags
comma
r_int
id|noblock
comma
r_int
op_star
id|err
)paren
suffix:semicolon
r_extern
r_int
id|datagram_select
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|sel_type
comma
id|select_table
op_star
id|wait
)paren
suffix:semicolon
r_extern
r_void
id|skb_copy_datagram
c_func
(paren
r_struct
id|sk_buff
op_star
id|from
comma
r_int
id|offset
comma
r_char
op_star
id|to
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|skb_free_datagram
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
macro_line|#endif&t;/* _SKBUFF_H */
eof
