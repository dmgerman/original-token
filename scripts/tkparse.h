multiline_comment|/*&n; * tkparse.h&n; */
multiline_comment|/*&n; * Token types (mostly statement types).&n; */
DECL|enum|e_token
r_enum
id|e_token
(brace
DECL|enumerator|token_UNKNOWN
id|token_UNKNOWN
comma
DECL|enumerator|token_bool
id|token_bool
comma
DECL|enumerator|token_choice_header
id|token_choice_header
comma
DECL|enumerator|token_choice_item
id|token_choice_item
comma
DECL|enumerator|token_comment
id|token_comment
comma
DECL|enumerator|token_define_bool
id|token_define_bool
comma
DECL|enumerator|token_define_hex
id|token_define_hex
comma
DECL|enumerator|token_define_int
id|token_define_int
comma
DECL|enumerator|token_define_string
id|token_define_string
comma
DECL|enumerator|token_define_tristate
id|token_define_tristate
comma
DECL|enumerator|token_dep_bool
id|token_dep_bool
comma
DECL|enumerator|token_dep_mbool
id|token_dep_mbool
comma
DECL|enumerator|token_dep_tristate
id|token_dep_tristate
comma
DECL|enumerator|token_else
id|token_else
comma
DECL|enumerator|token_endmenu
id|token_endmenu
comma
DECL|enumerator|token_fi
id|token_fi
comma
DECL|enumerator|token_hex
id|token_hex
comma
DECL|enumerator|token_if
id|token_if
comma
DECL|enumerator|token_int
id|token_int
comma
DECL|enumerator|token_mainmenu_name
id|token_mainmenu_name
comma
DECL|enumerator|token_mainmenu_option
id|token_mainmenu_option
comma
DECL|enumerator|token_source
id|token_source
comma
DECL|enumerator|token_string
id|token_string
comma
DECL|enumerator|token_then
id|token_then
comma
DECL|enumerator|token_tristate
id|token_tristate
comma
DECL|enumerator|token_unset
id|token_unset
comma
)brace
suffix:semicolon
multiline_comment|/*&n; * Operator types for conditionals.&n; */
DECL|enum|operator
r_enum
r_operator
(brace
DECL|enumerator|op_eq
id|op_eq
comma
DECL|enumerator|op_neq
id|op_neq
comma
DECL|enumerator|op_and
id|op_and
comma
DECL|enumerator|op_and1
id|op_and1
comma
DECL|enumerator|op_or
id|op_or
comma
DECL|enumerator|op_bang
id|op_bang
comma
DECL|enumerator|op_lparen
id|op_lparen
comma
DECL|enumerator|op_rparen
id|op_rparen
comma
DECL|enumerator|op_constant
id|op_constant
comma
DECL|enumerator|op_variable
id|op_variable
comma
DECL|enumerator|op_true
id|op_true
comma
DECL|enumerator|op_false
id|op_false
comma
DECL|enumerator|op_nuked
id|op_nuked
)brace
suffix:semicolon
multiline_comment|/*&n; * Conditions come in linked lists.&n; * Some operators take strings:&n; *&n; *   op_constant   &quot;foo&quot;&n; *   op_variable   &quot;$ARCH&quot;, &quot;$CONFIG_PMAC&quot;, &quot;$CONFIG_EXPERIMENTAL&quot;&n; *&n; * Most &quot;$...&quot; constructs refer to a variable which is defined somewhere&n; * in the script.  Note that it is legal to test variables which are never&n; * defined, such as variables that are meaningful only on other architectures.&n; */
DECL|struct|condition
r_struct
id|condition
(brace
DECL|member|next
r_struct
id|condition
op_star
id|next
suffix:semicolon
DECL|member|op
r_enum
r_operator
id|op
suffix:semicolon
DECL|member|str
r_const
r_char
op_star
id|str
suffix:semicolon
multiline_comment|/* op_constant */
DECL|member|nameindex
r_int
id|nameindex
suffix:semicolon
multiline_comment|/* op_variable */
)brace
suffix:semicolon
multiline_comment|/*&n; * Dependency list for dep_bool, dep_mbool, dep_tristate&n; */
DECL|struct|dependency
r_struct
id|dependency
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|next
r_struct
id|dependency
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * A statement from a config.in file&n; */
DECL|struct|kconfig
r_struct
id|kconfig
(brace
DECL|member|next
r_struct
id|kconfig
op_star
id|next
suffix:semicolon
DECL|member|token
r_enum
id|e_token
id|token
suffix:semicolon
DECL|member|nameindex
r_int
id|nameindex
suffix:semicolon
DECL|member|label
r_char
op_star
id|label
suffix:semicolon
DECL|member|value
r_char
op_star
id|value
suffix:semicolon
DECL|member|cond
r_struct
id|condition
op_star
id|cond
suffix:semicolon
DECL|member|depend
r_struct
id|dependency
op_star
id|depend
suffix:semicolon
multiline_comment|/* token_dep_tristate */
DECL|member|cfg_parent
r_struct
id|kconfig
op_star
id|cfg_parent
suffix:semicolon
multiline_comment|/* token_choice_item */
multiline_comment|/* used only in tkgen.c */
DECL|member|menu_number
r_int
id|menu_number
suffix:semicolon
DECL|member|menu_line
r_int
id|menu_line
suffix:semicolon
DECL|member|menu_next
r_struct
id|kconfig
op_star
id|menu_next
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|variable
r_struct
id|variable
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|defined
r_char
id|defined
suffix:semicolon
DECL|member|global_written
r_char
id|global_written
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|variable
id|vartable
(braket
)braket
suffix:semicolon
r_extern
r_int
id|max_varnum
suffix:semicolon
multiline_comment|/*&n; * Prototypes&n; */
r_extern
r_void
id|fix_conditionals
(paren
r_struct
id|kconfig
op_star
id|scfg
)paren
suffix:semicolon
multiline_comment|/* tkcond.c */
r_extern
r_void
id|dump_tk_script
(paren
r_struct
id|kconfig
op_star
id|scfg
)paren
suffix:semicolon
multiline_comment|/* tkgen.c  */
r_extern
r_int
id|get_varnum
(paren
r_char
op_star
id|name
)paren
suffix:semicolon
multiline_comment|/* tkparse.c */
eof
