multiline_comment|/*&n; *  linux/fs/ufs/ufs_swab.h&n; *&n; * Copyright (C) 1997 &n; * Francois-Rene Rideau &lt;rideau@ens.fr&gt;&n; *&n; */
macro_line|#ifndef _UFS_SWAB_H
DECL|macro|_UFS_SWAB_H
mdefine_line|#define _UFS_SWAB_H
multiline_comment|/*&n; * Notes:&n; * (1) HERE WE ASSUME EITHER BIG OR LITTLE ENDIAN UFSes&n; *    in case there are ufs implementations that have strange bytesexes,&n; *    you&squot;ll need to modify code here as well as in ufs_super.c and ufs_fs.h&n; *    to support them.&n; * (2) for a read/write ufs driver, we should distinguish&n; *    between byteswapping for read or write accesses!&n; */
macro_line|#include &lt;linux/ufs_fs.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
multiline_comment|/*&n; * These are only valid inside ufs routines,&n; * after bytesex has been initialized to sb-&gt;u.ufs_sb.s_flags&amp;UFS_BYTESEX&n; */
DECL|macro|SWAB16
mdefine_line|#define SWAB16(x) ufs_swab16(bytesex,x)
DECL|macro|SWAB32
mdefine_line|#define SWAB32(x) ufs_swab32(bytesex,x)
DECL|macro|SWAB64
mdefine_line|#define SWAB64(x) ufs_swab64(bytesex,x)
DECL|function|ufs_swab16
r_extern
id|__inline__
id|__const__
id|__u16
id|ufs_swab16
c_func
(paren
id|__u32
id|bytesex
comma
id|__u16
id|x
)paren
(brace
r_if
c_cond
(paren
id|bytesex
op_eq
id|UFS_LITTLE_ENDIAN
)paren
(brace
r_return
id|le16_to_cpu
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
r_else
(brace
r_return
id|be16_to_cpu
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
)brace
DECL|function|ufs_swab32
r_extern
id|__inline__
id|__const__
id|__u32
id|ufs_swab32
c_func
(paren
id|__u32
id|bytesex
comma
id|__u32
id|x
)paren
(brace
r_if
c_cond
(paren
id|bytesex
op_eq
id|UFS_LITTLE_ENDIAN
)paren
(brace
r_return
id|le32_to_cpu
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
r_else
(brace
r_return
id|be32_to_cpu
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
)brace
DECL|function|ufs_swab64
r_extern
id|__inline__
id|__const__
id|__u64
id|ufs_swab64
c_func
(paren
id|__u32
id|bytesex
comma
id|__u64
id|x
)paren
(brace
r_if
c_cond
(paren
id|bytesex
op_eq
id|UFS_LITTLE_ENDIAN
)paren
(brace
r_return
id|le64_to_cpu
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
r_else
(brace
r_return
id|be64_to_cpu
c_func
(paren
id|x
)paren
suffix:semicolon
)brace
)brace
r_extern
r_void
id|ufs_superblock_le_to_cpus
c_func
(paren
r_struct
id|ufs_superblock
op_star
id|usb
)paren
suffix:semicolon
r_extern
r_void
id|ufs_superblock_be_to_cpus
c_func
(paren
r_struct
id|ufs_superblock
op_star
id|usb
)paren
suffix:semicolon
macro_line|#endif /* _UFS_SWAB_H */
eof
