multiline_comment|/*&n; * JFFS -- Journaling Flash File System, Linux implementation.&n; *&n; * Copyright (C) 1999, 2000  Axis Communications AB.&n; *&n; * Created by Finn Hakansson &lt;finn@axis.com&gt;.&n; *&n; * This is free software; you can redistribute it and/or modify it&n; * under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * $Id: intrep.h,v 1.11 2000/08/17 22:46:46 bmatthews Exp $&n; *&n; */
macro_line|#ifndef __LINUX_JFFS_INTREP_H__
DECL|macro|__LINUX_JFFS_INTREP_H__
mdefine_line|#define __LINUX_JFFS_INTREP_H__
macro_line|#include &quot;jffs_fm.h&quot;
r_inline
r_int
id|jffs_min
c_func
(paren
r_int
id|a
comma
r_int
id|b
)paren
suffix:semicolon
r_inline
r_int
id|jffs_max
c_func
(paren
r_int
id|a
comma
r_int
id|b
)paren
suffix:semicolon
id|__u32
id|jffs_checksum
c_func
(paren
r_const
r_void
op_star
id|data
comma
r_int
id|size
)paren
suffix:semicolon
r_void
id|jffs_cleanup_control
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
)paren
suffix:semicolon
r_int
id|jffs_build_fs
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_int
id|jffs_insert_node
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
comma
r_struct
id|jffs_file
op_star
id|f
comma
r_const
r_struct
id|jffs_raw_inode
op_star
id|raw_inode
comma
r_const
r_char
op_star
id|name
comma
r_struct
id|jffs_node
op_star
id|node
)paren
suffix:semicolon
r_struct
id|jffs_file
op_star
id|jffs_find_file
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
comma
id|__u32
id|ino
)paren
suffix:semicolon
r_struct
id|jffs_file
op_star
id|jffs_find_child
c_func
(paren
r_struct
id|jffs_file
op_star
id|dir
comma
r_const
r_char
op_star
id|name
comma
r_int
id|len
)paren
suffix:semicolon
r_void
id|jffs_free_node
c_func
(paren
r_struct
id|jffs_node
op_star
id|node
)paren
suffix:semicolon
r_int
id|jffs_foreach_file
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
comma
r_int
(paren
op_star
id|func
)paren
(paren
r_struct
id|jffs_file
op_star
)paren
)paren
suffix:semicolon
r_int
id|jffs_free_node_list
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_free_file
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_possibly_delete_file
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_build_file
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_insert_file_into_hash
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_insert_file_into_tree
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_unlink_file_from_hash
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_unlink_file_from_tree
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_remove_redundant_nodes
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_file_count
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_write_node
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
comma
r_struct
id|jffs_node
op_star
id|node
comma
r_struct
id|jffs_raw_inode
op_star
id|raw_inode
comma
r_const
r_char
op_star
id|name
comma
r_const
r_int
r_char
op_star
id|buf
comma
r_int
id|recoverable
comma
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_int
id|jffs_read_data
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
comma
r_int
r_char
op_star
id|buf
comma
id|__u32
id|read_offset
comma
id|__u32
id|size
)paren
suffix:semicolon
multiline_comment|/* Garbage collection stuff.  */
r_int
id|jffs_garbage_collect_thread
c_func
(paren
r_void
op_star
id|c
)paren
suffix:semicolon
r_void
id|jffs_garbage_collect_trigger
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
)paren
suffix:semicolon
r_int
id|jffs_garbage_collect_now
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
)paren
suffix:semicolon
multiline_comment|/* Is there enough space on the flash?  */
DECL|function|JFFS_ENOUGH_SPACE
r_static
r_inline
r_int
id|JFFS_ENOUGH_SPACE
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
comma
id|__u32
id|space
)paren
(brace
r_struct
id|jffs_fmcontrol
op_star
id|fmc
op_assign
id|c-&gt;fmc
suffix:semicolon
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
(paren
id|fmc-&gt;flash_size
op_minus
(paren
id|fmc-&gt;used_size
op_plus
id|fmc-&gt;dirty_size
)paren
)paren
op_ge
id|fmc-&gt;min_free_size
op_plus
id|space
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
id|fmc-&gt;dirty_size
OL
id|fmc-&gt;sector_size
)paren
r_return
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|jffs_garbage_collect_now
c_func
(paren
id|c
)paren
)paren
(brace
id|D1
c_func
(paren
id|printk
c_func
(paren
l_string|&quot;JFFS_ENOUGH_SPACE: jffs_garbage_collect_now() failed.&bslash;n&quot;
)paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
)brace
)brace
multiline_comment|/* For debugging purposes.  */
r_void
id|jffs_print_node
c_func
(paren
r_struct
id|jffs_node
op_star
id|n
)paren
suffix:semicolon
r_void
id|jffs_print_raw_inode
c_func
(paren
r_struct
id|jffs_raw_inode
op_star
id|raw_inode
)paren
suffix:semicolon
r_int
id|jffs_print_file
c_func
(paren
r_struct
id|jffs_file
op_star
id|f
)paren
suffix:semicolon
r_void
id|jffs_print_hash_table
c_func
(paren
r_struct
id|jffs_control
op_star
id|c
)paren
suffix:semicolon
r_void
id|jffs_print_tree
c_func
(paren
r_struct
id|jffs_file
op_star
id|first_file
comma
r_int
id|indent
)paren
suffix:semicolon
r_struct
id|buffer_head
op_star
id|jffs_get_write_buffer
c_func
(paren
id|kdev_t
id|dev
comma
r_int
id|block
)paren
suffix:semicolon
r_void
id|jffs_put_write_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
suffix:semicolon
macro_line|#endif /* __LINUX_JFFS_INTREP_H__  */
eof
