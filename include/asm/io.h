macro_line|#ifndef _ASM_IO_H
DECL|macro|_ASM_IO_H
mdefine_line|#define _ASM_IO_H
multiline_comment|/*&n; * Thanks to James van Artsdalen for a better timing-fix than&n; * the two short jumps: using outb&squot;s to a nonexistent port seems&n; * to guarantee better timings even on fast machines.&n; *&n; * On the other hand, I&squot;d like to be sure of a non-existent port:&n; * I feel a bit unsafe about using 0x80.&n; *&n; *&t;&t;Linus&n; */
macro_line|#ifdef SLOW_IO_BY_JUMPING
DECL|macro|__SLOW_DOWN_IO
mdefine_line|#define __SLOW_DOWN_IO __asm__ __volatile__(&quot;jmp 1f&bslash;n1:&bslash;tjmp 1f&bslash;n1:&quot;)
macro_line|#else
DECL|macro|__SLOW_DOWN_IO
mdefine_line|#define __SLOW_DOWN_IO __asm__ __volatile__(&quot;outb %al,$0x80&quot;)
macro_line|#endif
macro_line|#ifdef REALLY_SLOW_IO
DECL|macro|SLOW_DOWN_IO
mdefine_line|#define SLOW_DOWN_IO { __SLOW_DOWN_IO; __SLOW_DOWN_IO; __SLOW_DOWN_IO; __SLOW_DOWN_IO; }
macro_line|#else
DECL|macro|SLOW_DOWN_IO
mdefine_line|#define SLOW_DOWN_IO __SLOW_DOWN_IO
macro_line|#endif
multiline_comment|/* This is the more general version of outb.. */
DECL|function|__outb
r_extern
r_inline
r_void
id|__outb
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;outb %b0,%w1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;a&quot;
(paren
id|value
)paren
comma
l_string|&quot;d&quot;
(paren
id|port
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* this is used for constant port numbers &lt; 256.. */
DECL|function|__outbc
r_extern
r_inline
r_void
id|__outbc
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;outb %b0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;a&quot;
(paren
id|value
)paren
comma
l_string|&quot;i&quot;
(paren
id|port
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* general version of inb */
DECL|function|__inb
r_extern
r_inline
r_int
r_int
id|__inb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;inb %w1,%b0&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;d&quot;
(paren
id|port
)paren
comma
l_string|&quot;0&quot;
(paren
l_int|0
)paren
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
multiline_comment|/* inb with constant port nr 0-255 */
DECL|function|__inbc
r_extern
r_inline
r_int
r_int
id|__inbc
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;inb %1,%b0&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;i&quot;
(paren
id|port
)paren
comma
l_string|&quot;0&quot;
(paren
l_int|0
)paren
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|__outb_p
r_extern
r_inline
r_void
id|__outb_p
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;outb %b0,%w1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;a&quot;
(paren
id|value
)paren
comma
l_string|&quot;d&quot;
(paren
id|port
)paren
)paren
suffix:semicolon
id|SLOW_DOWN_IO
suffix:semicolon
)brace
DECL|function|__outbc_p
r_extern
r_inline
r_void
id|__outbc_p
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;outb %b0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;a&quot;
(paren
id|value
)paren
comma
l_string|&quot;i&quot;
(paren
id|port
)paren
)paren
suffix:semicolon
id|SLOW_DOWN_IO
suffix:semicolon
)brace
DECL|function|__inb_p
r_extern
r_inline
r_int
r_int
id|__inb_p
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;inb %w1,%b0&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;d&quot;
(paren
id|port
)paren
comma
l_string|&quot;0&quot;
(paren
l_int|0
)paren
)paren
suffix:semicolon
id|SLOW_DOWN_IO
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|__inbc_p
r_extern
r_inline
r_int
r_int
id|__inbc_p
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;inb %1,%b0&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;i&quot;
(paren
id|port
)paren
comma
l_string|&quot;0&quot;
(paren
l_int|0
)paren
)paren
suffix:semicolon
id|SLOW_DOWN_IO
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
multiline_comment|/*&n; * Note that due to the way __builtin_constant_p() works, you&n; *  - can&squot;t use it inside a inline function (it will never be true)&n; *  - you don&squot;t have to worry about side effects within the __builtin..&n; */
DECL|macro|outb
mdefine_line|#define outb(val,port) &bslash;&n;((__builtin_constant_p((port)) &amp;&amp; (port) &lt; 256) ? &bslash;&n;&t;__outbc((val),(port)) : &bslash;&n;&t;__outb((val),(port)))
DECL|macro|inb
mdefine_line|#define inb(port) &bslash;&n;((__builtin_constant_p((port)) &amp;&amp; (port) &lt; 256) ? &bslash;&n;&t;__inbc(port) : &bslash;&n;&t;__inb(port))
DECL|macro|outb_p
mdefine_line|#define outb_p(val,port) &bslash;&n;((__builtin_constant_p((port)) &amp;&amp; (port) &lt; 256) ? &bslash;&n;&t;__outbc_p((val),(port)) : &bslash;&n;&t;__outb_p((val),(port)))
DECL|macro|inb_p
mdefine_line|#define inb_p(port) &bslash;&n;((__builtin_constant_p((port)) &amp;&amp; (port) &lt; 256) ? &bslash;&n;&t;__inbc_p(port) : &bslash;&n;&t;__inb_p(port))
macro_line|#endif
eof
