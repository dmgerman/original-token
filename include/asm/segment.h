DECL|function|get_fs_byte
r_extern
r_inline
r_int
r_char
id|get_fs_byte
c_func
(paren
r_const
r_char
op_star
id|addr
)paren
(brace
r_int
r_register
r_char
id|_v
suffix:semicolon
id|__asm__
(paren
l_string|&quot;movb %%fs:%1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|get_fs_word
r_extern
r_inline
r_int
r_int
id|get_fs_word
c_func
(paren
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
(paren
l_string|&quot;movw %%fs:%1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|get_fs_long
r_extern
r_inline
r_int
r_int
id|get_fs_long
c_func
(paren
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
(paren
l_string|&quot;movl %%fs:%1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
"&bslash;"
r_return
id|_v
suffix:semicolon
)brace
DECL|function|put_fs_byte
r_extern
r_inline
r_void
id|put_fs_byte
c_func
(paren
r_char
id|val
comma
r_char
op_star
id|addr
)paren
(brace
id|__asm__
(paren
l_string|&quot;movb %0,%%fs:%1&quot;
op_scope_resolution
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|put_fs_word
r_extern
r_inline
r_void
id|put_fs_word
c_func
(paren
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
id|__asm__
(paren
l_string|&quot;movw %0,%%fs:%1&quot;
op_scope_resolution
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|put_fs_long
r_extern
r_inline
r_void
id|put_fs_long
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
op_star
id|addr
)paren
(brace
id|__asm__
(paren
l_string|&quot;movl %0,%%fs:%1&quot;
op_scope_resolution
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Someone who knows GNU asm better than I should double check the followig.&n; * It seems to work, but I don&squot;t know if I&squot;m doing something subtly wrong.&n; * --- TYT, 11/24/91&n; * [ nothing wrong here, Linus ]&n; */
DECL|function|get_fs
r_extern
r_inline
r_int
r_int
id|get_fs
c_func
(paren
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov %%fs,%%ax&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|_v
)paren
suffix:colon
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|get_ds
r_extern
r_inline
r_int
r_int
id|get_ds
c_func
(paren
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;mov %%ds,%%ax&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|_v
)paren
suffix:colon
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|set_fs
r_extern
r_inline
r_void
id|set_fs
c_func
(paren
r_int
r_int
id|val
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;mov %0,%%fs&quot;
op_scope_resolution
l_string|&quot;a&quot;
(paren
(paren
r_int
r_int
)paren
id|val
)paren
)paren
suffix:semicolon
)brace
eof
