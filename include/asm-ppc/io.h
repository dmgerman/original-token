macro_line|#ifndef _PPC_IO_H
DECL|macro|_PPC_IO_H
mdefine_line|#define _PPC_IO_H
macro_line|#include &lt;asm/page.h&gt;
multiline_comment|/* from the Carolina Technical Spec -- Cort */
DECL|macro|IBM_ACORN
mdefine_line|#define IBM_ACORN 0x82A
DECL|macro|SIO_CONFIG_RA
mdefine_line|#define SIO_CONFIG_RA&t;0x398
DECL|macro|SIO_CONFIG_RD
mdefine_line|#define SIO_CONFIG_RD&t;0x399
DECL|macro|IBM_HDD_LED
mdefine_line|#define IBM_HDD_LED       0x808
DECL|macro|IBM_EQUIP_PRESENT
mdefine_line|#define IBM_EQUIP_PRESENT 0x80c&t;
DECL|macro|IBM_L2_STATUS
mdefine_line|#define IBM_L2_STATUS     0x80d
DECL|macro|IBM_L2_INVALIDATE
mdefine_line|#define IBM_L2_INVALIDATE 0x814
DECL|macro|IBM_SYS_CTL
mdefine_line|#define IBM_SYS_CTL       0x81c
multiline_comment|/* Define the particulars of outb/outw/outl &quot;instructions&quot; */
DECL|macro|SLOW_DOWN_IO
mdefine_line|#define SLOW_DOWN_IO
macro_line|#ifndef PCI_DRAM_OFFSET
DECL|macro|PCI_DRAM_OFFSET
mdefine_line|#define PCI_DRAM_OFFSET  0x80000000
macro_line|#endif
multiline_comment|/*&n; * The PCI bus is inherently Little-Endian.  The PowerPC is being&n; * run Big-Endian.  Thus all values which cross the [PCI] barrier&n; * must be endian-adjusted.  Also, the local DRAM has a different&n; * address from the PCI point of view, thus buffer addresses also&n; * have to be modified [mapped] appropriately.&n; */
DECL|function|virt_to_bus
r_extern
r_inline
r_int
r_int
id|virt_to_bus
c_func
(paren
r_volatile
r_void
op_star
id|address
)paren
(brace
r_if
c_cond
(paren
id|address
op_eq
(paren
r_void
op_star
)paren
l_int|0
)paren
r_return
l_int|0
suffix:semicolon
r_return
(paren
(paren
r_int
r_int
)paren
(paren
(paren
r_int
)paren
id|address
op_minus
id|KERNELBASE
op_plus
id|PCI_DRAM_OFFSET
)paren
)paren
suffix:semicolon
)brace
DECL|function|bus_to_virt
r_extern
r_inline
r_void
op_star
id|bus_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_if
c_cond
(paren
id|address
op_eq
l_int|0
)paren
r_return
l_int|0
suffix:semicolon
r_return
(paren
(paren
r_void
op_star
)paren
(paren
id|address
op_minus
id|PCI_DRAM_OFFSET
op_plus
id|KERNELBASE
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* #define virt_to_bus(a) ((unsigned long)(((char *)a==(char *) 0) ? ((char *)0) &bslash;&n;&t;&t;&t;: ((char *)((long)a - KERNELBASE + PCI_DRAM_OFFSET))))&n;#define bus_to_virt(a) ((void *) (((char *)a==(char *)0) ? ((char *)0) &bslash;&n;&t;&t;&t;: ((char *)((long)a - PCI_DRAM_OFFSET + KERNELBASE))))&n;*/
DECL|macro|readb
mdefine_line|#define readb(addr) (*(volatile unsigned char *) (addr))
DECL|macro|readw
mdefine_line|#define readw(addr) (*(volatile unsigned short *) (addr))
DECL|macro|readl
mdefine_line|#define readl(addr) (*(volatile unsigned int *) (addr))
DECL|macro|writeb
mdefine_line|#define writeb(b,addr) ((*(volatile unsigned char *) (addr)) = (b))
DECL|macro|writew
mdefine_line|#define writew(b,addr) ((*(volatile unsigned short *) (addr)) = (b))
DECL|macro|writel
mdefine_line|#define writel(b,addr) ((*(volatile unsigned int *) (addr)) = (b))
multiline_comment|/*&n; * Change virtual addresses to physical addresses and vv.&n; * These are trivial on the 1:1 Linux/i386 mapping (but if we ever&n; * make the kernel segment mapped at 0, we need to do translation&n; * on the i386 as well)&n; */
DECL|function|virt_to_phys
r_extern
r_inline
r_int
r_int
id|virt_to_phys
c_func
(paren
r_volatile
r_void
op_star
id|address
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|address
suffix:semicolon
)brace
DECL|function|phys_to_virt
r_extern
r_inline
r_void
op_star
id|phys_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_return
(paren
r_void
op_star
)paren
id|address
suffix:semicolon
)brace
multiline_comment|/* from arch/ppc/kernel/port_io.c&n; *               -- Cort&n; */
r_int
r_char
id|inb
c_func
(paren
r_int
id|port
)paren
suffix:semicolon
r_int
r_int
id|inw
c_func
(paren
r_int
id|port
)paren
suffix:semicolon
r_int
r_int
id|inl
c_func
(paren
r_int
id|port
)paren
suffix:semicolon
r_int
r_char
id|outb
c_func
(paren
r_int
r_char
id|val
comma
r_int
id|port
)paren
suffix:semicolon
r_int
r_int
id|outw
c_func
(paren
r_int
r_int
id|val
comma
r_int
id|port
)paren
suffix:semicolon
r_int
r_int
id|outl
c_func
(paren
r_int
r_int
id|val
comma
r_int
id|port
)paren
suffix:semicolon
r_void
id|outsl
c_func
(paren
r_int
id|port
comma
r_int
op_star
id|ptr
comma
r_int
id|len
)paren
suffix:semicolon
DECL|function|inb_p
r_static
r_inline
r_int
r_char
id|inb_p
c_func
(paren
r_int
id|port
)paren
(brace
r_return
(paren
id|inb
c_func
(paren
id|port
)paren
)paren
suffix:semicolon
)brace
DECL|function|inw_p
r_static
r_inline
r_int
r_int
id|inw_p
c_func
(paren
r_int
id|port
)paren
(brace
r_return
(paren
id|inw
c_func
(paren
id|port
)paren
)paren
suffix:semicolon
)brace
DECL|function|inl_p
r_static
r_inline
r_int
r_int
id|inl_p
c_func
(paren
r_int
id|port
)paren
(brace
r_return
(paren
id|inl
c_func
(paren
id|port
)paren
)paren
suffix:semicolon
)brace
DECL|function|outb_p
r_static
r_inline
r_int
r_char
id|outb_p
c_func
(paren
r_int
r_char
id|val
comma
r_int
id|port
)paren
(brace
r_return
(paren
id|outb
c_func
(paren
id|val
comma
id|port
)paren
)paren
suffix:semicolon
)brace
DECL|function|outw_p
r_static
r_inline
r_int
r_int
id|outw_p
c_func
(paren
r_int
r_int
id|val
comma
r_int
id|port
)paren
(brace
r_return
(paren
id|outw
c_func
(paren
id|val
comma
id|port
)paren
)paren
suffix:semicolon
)brace
DECL|function|outl_p
r_static
r_inline
r_int
r_int
id|outl_p
c_func
(paren
r_int
r_int
id|val
comma
r_int
id|port
)paren
(brace
r_return
(paren
id|outl
c_func
(paren
id|val
comma
id|port
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
