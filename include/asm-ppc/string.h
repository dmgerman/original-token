macro_line|#ifndef _PPC_STRING_H_
DECL|macro|_PPC_STRING_H_
mdefine_line|#define _PPC_STRING_H_
multiline_comment|/*&n; * keep things happy, the compile became unhappy since memset is&n; * in include/string.h and lib/string.c with different args&n; *                          -- Cort&n; */
DECL|macro|__HAVE_ARCH_MEMSET
mdefine_line|#define  __HAVE_ARCH_MEMSET
DECL|function|memset
r_extern
r_inline
r_void
op_star
id|memset
c_func
(paren
r_void
op_star
id|s
comma
r_int
id|c
comma
r_int
id|count
)paren
(brace
r_char
op_star
id|xs
op_assign
(paren
r_char
op_star
)paren
id|s
suffix:semicolon
r_while
c_loop
(paren
id|count
op_decrement
)paren
op_star
id|xs
op_increment
op_assign
id|c
suffix:semicolon
r_return
id|s
suffix:semicolon
)brace
DECL|macro|__HAVE_ARCH_STRSTR
mdefine_line|#define __HAVE_ARCH_STRSTR
multiline_comment|/* Return the first ocurrence of NEEDLE in HAYSTACK.  */
r_extern
r_inline
r_char
op_star
DECL|function|strstr
id|strstr
c_func
(paren
r_const
r_char
op_star
id|haystack
comma
r_const
r_char
op_star
id|needle
)paren
(brace
r_const
r_char
op_star
r_const
id|needle_end
op_assign
id|strchr
c_func
(paren
id|needle
comma
l_char|&squot;&bslash;0&squot;
)paren
suffix:semicolon
r_const
r_char
op_star
r_const
id|haystack_end
op_assign
id|strchr
c_func
(paren
id|haystack
comma
l_char|&squot;&bslash;0&squot;
)paren
suffix:semicolon
r_const
r_int
id|needle_len
op_assign
id|needle_end
op_minus
id|needle
suffix:semicolon
r_const
r_int
id|needle_last
op_assign
id|needle_len
op_minus
l_int|1
suffix:semicolon
r_const
r_char
op_star
id|begin
suffix:semicolon
r_if
c_cond
(paren
id|needle_len
op_eq
l_int|0
)paren
macro_line|#ifdef __linux__
r_return
(paren
r_char
op_star
)paren
id|haystack
suffix:semicolon
macro_line|#else
r_return
(paren
r_char
op_star
)paren
id|haystack_end
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
(paren
r_int
)paren
(paren
id|haystack_end
op_minus
id|haystack
)paren
OL
id|needle_len
)paren
r_return
l_int|NULL
suffix:semicolon
r_for
c_loop
(paren
id|begin
op_assign
op_amp
id|haystack
(braket
id|needle_last
)braket
suffix:semicolon
id|begin
OL
id|haystack_end
suffix:semicolon
op_increment
id|begin
)paren
(brace
r_register
r_const
r_char
op_star
id|n
op_assign
op_amp
id|needle
(braket
id|needle_last
)braket
suffix:semicolon
r_register
r_const
r_char
op_star
id|h
op_assign
id|begin
suffix:semicolon
r_do
r_if
c_cond
(paren
op_star
id|h
op_ne
op_star
id|n
)paren
r_goto
id|loop
suffix:semicolon
multiline_comment|/* continue for loop */
r_while
c_loop
(paren
op_decrement
id|n
op_ge
id|needle
op_logical_and
op_decrement
id|h
op_ge
id|haystack
)paren
suffix:semicolon
r_return
(paren
r_char
op_star
)paren
id|h
suffix:semicolon
id|loop
suffix:colon
suffix:semicolon
)brace
r_return
l_int|NULL
suffix:semicolon
)brace
macro_line|#endif
eof
