macro_line|#ifndef __PPC_SYSTEM_H
DECL|macro|__PPC_SYSTEM_H
mdefine_line|#define __PPC_SYSTEM_H
macro_line|#include &lt;linux/kdev_t.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
multiline_comment|/*&n; * Memory barrier.&n; * The sync instruction guarantees that all memory accesses initiated&n; * by this processor have been performed (with respect to all other&n; * mechanisms that access memory).  The eieio instruction is a barrier&n; * providing an ordering (separately) for (a) cacheable stores and (b)&n; * loads and stores to non-cacheable memory (e.g. I/O devices).&n; *&n; * mb() prevents loads and stores being reordered across this point.&n; * rmb() prevents loads being reordered across this point.&n; * wmb() prevents stores being reordered across this point.&n; *&n; * We can use the eieio instruction for wmb, but since it doesn&squot;t&n; * give any ordering guarantees about loads, we have to use the&n; * stronger but slower sync instruction for mb and rmb.&n; */
DECL|macro|mb
mdefine_line|#define mb()  __asm__ __volatile__ (&quot;sync&quot; : : : &quot;memory&quot;)
DECL|macro|rmb
mdefine_line|#define rmb()  __asm__ __volatile__ (&quot;sync&quot; : : : &quot;memory&quot;)
DECL|macro|wmb
mdefine_line|#define wmb()  __asm__ __volatile__ (&quot;eieio&quot; : : : &quot;memory&quot;)
DECL|macro|__save_flags
mdefine_line|#define __save_flags(flags)&t;({&bslash;&n;&t;__asm__ __volatile__ (&quot;mfmsr %0&quot; : &quot;=r&quot; ((flags)) : : &quot;memory&quot;); })
DECL|macro|__save_and_cli
mdefine_line|#define __save_and_cli(flags)&t;({__save_flags(flags);__cli();})
multiline_comment|/* Data cache block flush - write out the cache line containing the&n;   specified address and then invalidate it in the cache. */
DECL|function|dcbf
r_extern
id|__inline__
r_void
id|dcbf
c_func
(paren
r_void
op_star
id|line
)paren
(brace
id|asm
c_func
(paren
l_string|&quot;dcbf %0,%1; sync&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|line
)paren
comma
l_string|&quot;r&quot;
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
DECL|function|__restore_flags
r_extern
id|__inline__
r_void
id|__restore_flags
c_func
(paren
r_int
r_int
id|flags
)paren
(brace
r_extern
id|atomic_t
id|n_lost_interrupts
suffix:semicolon
r_extern
r_void
id|do_lost_interrupts
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|flags
op_amp
id|MSR_EE
)paren
op_logical_and
id|atomic_read
c_func
(paren
op_amp
id|n_lost_interrupts
)paren
op_ne
l_int|0
)paren
(brace
id|do_lost_interrupts
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
r_else
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;sync; mtmsr %0; isync&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|flags
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
)brace
r_extern
r_void
id|__sti
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__cli
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|_disable_interrupts
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|_enable_interrupts
c_func
(paren
r_int
)paren
suffix:semicolon
r_extern
r_void
id|instruction_dump
c_func
(paren
r_int
r_int
op_star
)paren
suffix:semicolon
r_extern
r_void
id|print_backtrace
c_func
(paren
r_int
r_int
op_star
)paren
suffix:semicolon
r_extern
r_void
id|show_regs
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_extern
r_void
id|flush_instruction_cache
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|hard_reset_now
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|poweroff_now
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|_get_PVR
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|_get_L2CR
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|_set_L2CR
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|via_cuda_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|pmac_nvram_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|read_rtc_time
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|pmac_find_display
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|giveup_fpu
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_giveup_fpu
c_func
(paren
r_struct
id|task_struct
op_star
)paren
suffix:semicolon
r_extern
r_void
id|cvt_fd
c_func
(paren
r_float
op_star
id|from
comma
r_float
op_star
id|to
comma
r_int
r_int
op_star
id|fpscr
)paren
suffix:semicolon
r_extern
r_void
id|cvt_df
c_func
(paren
r_float
op_star
id|from
comma
r_float
op_star
id|to
comma
r_int
r_int
op_star
id|fpscr
)paren
suffix:semicolon
r_struct
id|device_node
suffix:semicolon
r_extern
r_void
id|note_scsi_host
c_func
(paren
r_struct
id|device_node
op_star
comma
r_void
op_star
)paren
suffix:semicolon
r_struct
id|task_struct
suffix:semicolon
r_extern
r_void
id|switch_to
c_func
(paren
r_struct
id|task_struct
op_star
id|prev
comma
r_struct
id|task_struct
op_star
id|next
)paren
suffix:semicolon
r_struct
id|thread_struct
suffix:semicolon
r_extern
r_void
id|_switch
c_func
(paren
r_struct
id|thread_struct
op_star
id|prev
comma
r_struct
id|thread_struct
op_star
id|next
comma
r_int
r_int
id|context
)paren
suffix:semicolon
r_struct
id|pt_regs
suffix:semicolon
r_extern
r_void
id|dump_regs
c_func
(paren
r_struct
id|pt_regs
op_star
)paren
suffix:semicolon
macro_line|#ifndef __SMP__
DECL|macro|cli
mdefine_line|#define cli()&t;__cli()
DECL|macro|sti
mdefine_line|#define sti()&t;__sti()
DECL|macro|save_flags
mdefine_line|#define save_flags(flags)&t;__save_flags(flags)
DECL|macro|restore_flags
mdefine_line|#define restore_flags(flags)&t;__restore_flags(flags)
DECL|macro|save_and_cli
mdefine_line|#define save_and_cli(flags)&t;__save_and_cli(flags)
macro_line|#else /* __SMP__ */
r_extern
r_void
id|__global_cli
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__global_sti
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|__global_save_flags
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__global_restore_flags
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
DECL|macro|cli
mdefine_line|#define cli() __global_cli()
DECL|macro|sti
mdefine_line|#define sti() __global_sti()
DECL|macro|save_flags
mdefine_line|#define save_flags(x) ((x)=__global_save_flags())
DECL|macro|restore_flags
mdefine_line|#define restore_flags(x) __global_restore_flags(x)
macro_line|#endif /* !__SMP__ */
DECL|macro|xchg
mdefine_line|#define xchg(ptr,x) ((__typeof__(*(ptr)))__xchg((unsigned long)(x),(ptr),sizeof(*(ptr))))
r_extern
r_int
r_int
id|xchg_u64
c_func
(paren
r_void
op_star
id|ptr
comma
r_int
r_int
id|val
)paren
suffix:semicolon
r_extern
r_int
r_int
id|xchg_u32
c_func
(paren
r_void
op_star
id|ptr
comma
r_int
r_int
id|val
)paren
suffix:semicolon
multiline_comment|/*&n; * This function doesn&squot;t exist, so you&squot;ll get a linker error&n; * if something tries to do an invalid xchg().&n; *&n; * This only works if the compiler isn&squot;t horribly bad at optimizing.&n; * gcc-2.5.8 reportedly can&squot;t handle this, but as that doesn&squot;t work&n; * too well on the alpha anyway..&n; */
r_extern
r_void
id|__xchg_called_with_bad_pointer
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|xchg
mdefine_line|#define xchg(ptr,x) ((__typeof__(*(ptr)))__xchg((unsigned long)(x),(ptr),sizeof(*(ptr))))
DECL|macro|tas
mdefine_line|#define tas(ptr) (xchg((ptr),1))
DECL|function|__xchg
r_static
r_inline
r_int
r_int
id|__xchg
c_func
(paren
r_int
r_int
id|x
comma
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|4
suffix:colon
r_return
(paren
r_int
r_int
)paren
id|xchg_u32
c_func
(paren
id|ptr
comma
id|x
)paren
suffix:semicolon
r_case
l_int|8
suffix:colon
r_return
(paren
r_int
r_int
)paren
id|xchg_u64
c_func
(paren
id|ptr
comma
id|x
)paren
suffix:semicolon
)brace
id|__xchg_called_with_bad_pointer
c_func
(paren
)paren
suffix:semicolon
r_return
id|x
suffix:semicolon
)brace
DECL|function|xchg_ptr
r_extern
r_inline
r_void
op_star
id|xchg_ptr
c_func
(paren
r_void
op_star
id|m
comma
r_void
op_star
id|val
)paren
(brace
r_return
(paren
r_void
op_star
)paren
id|xchg_u32
c_func
(paren
id|m
comma
(paren
r_int
r_int
)paren
id|val
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
