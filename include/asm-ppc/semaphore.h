macro_line|#ifndef _PPC_SEMAPHORE_H
DECL|macro|_PPC_SEMAPHORE_H
mdefine_line|#define _PPC_SEMAPHORE_H
multiline_comment|/*&n; * Swiped from asm-sparc/semaphore.h and modified&n; * -- Cort (cort@cs.nmt.edu)&n; *&n; * Stole some rw spinlock-based semaphore stuff from asm-alpha/semaphore.h&n; * -- Ani Joshi (ajoshi@unixbox.com)&n; */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;linux/wait.h&gt;
DECL|struct|semaphore
r_struct
id|semaphore
(brace
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
DECL|member|waking
id|atomic_t
id|waking
suffix:semicolon
DECL|member|wait
id|wait_queue_head_t
id|wait
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|member|__magic
r_int
id|__magic
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|macro|__SEM_DEBUG_INIT
macro_line|# define __SEM_DEBUG_INIT(name) &bslash;&n;&t;&t;, (long)&amp;(name).__magic
macro_line|#else
DECL|macro|__SEM_DEBUG_INIT
macro_line|# define __SEM_DEBUG_INIT(name)
macro_line|#endif
DECL|macro|__SEMAPHORE_INITIALIZER
mdefine_line|#define __SEMAPHORE_INITIALIZER(name,count) &bslash;&n;{ ATOMIC_INIT(count), ATOMIC_INIT(0), __WAIT_QUEUE_HEAD_INITIALIZER((name).wait) &bslash;&n;&t;__SEM_DEBUG_INIT(name) }
DECL|macro|__MUTEX_INITIALIZER
mdefine_line|#define __MUTEX_INITIALIZER(name) &bslash;&n;&t;__SEMAPHORE_INITIALIZER(name,1)
DECL|macro|__DECLARE_SEMAPHORE_GENERIC
mdefine_line|#define __DECLARE_SEMAPHORE_GENERIC(name,count) &bslash;&n;&t;struct semaphore name = __SEMAPHORE_INITIALIZER(name,count)
DECL|macro|DECLARE_MUTEX
mdefine_line|#define DECLARE_MUTEX(name) __DECLARE_SEMAPHORE_GENERIC(name,1)
DECL|macro|DECLARE_MUTEX_LOCKED
mdefine_line|#define DECLARE_MUTEX_LOCKED(name) __DECLARE_SEMAPHORE_GENERIC(name,0)
DECL|function|sema_init
r_extern
r_inline
r_void
id|sema_init
(paren
r_struct
id|semaphore
op_star
id|sem
comma
r_int
id|val
)paren
(brace
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;count
comma
id|val
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;waking
comma
l_int|0
)paren
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|sem-&gt;wait
)paren
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
id|sem-&gt;__magic
op_assign
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
suffix:semicolon
macro_line|#endif
)brace
DECL|function|init_MUTEX
r_static
r_inline
r_void
id|init_MUTEX
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|sema_init
c_func
(paren
id|sem
comma
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|init_MUTEX_LOCKED
r_static
r_inline
r_void
id|init_MUTEX_LOCKED
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|sema_init
c_func
(paren
id|sem
comma
l_int|0
)paren
suffix:semicolon
)brace
r_extern
r_void
id|__down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_int
id|__down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_int
id|__down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_void
id|__up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
DECL|function|down
r_extern
r_inline
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_if
c_cond
(paren
id|atomic_dec_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
op_ge
l_int|0
)paren
id|wmb
c_func
(paren
)paren
suffix:semicolon
r_else
id|__down
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|down_interruptible
r_extern
r_inline
r_int
id|down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|atomic_dec_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
op_ge
l_int|0
)paren
id|wmb
c_func
(paren
)paren
suffix:semicolon
r_else
id|ret
op_assign
id|__down_interruptible
c_func
(paren
id|sem
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|down_trylock
r_extern
r_inline
r_int
id|down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|atomic_dec_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
op_ge
l_int|0
)paren
id|wmb
c_func
(paren
)paren
suffix:semicolon
r_else
id|ret
op_assign
id|__down_trylock
c_func
(paren
id|sem
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|up
r_extern
r_inline
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|mb
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_inc_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
op_le
l_int|0
)paren
id|__up
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
multiline_comment|/* RW spinlock-based semaphores */
DECL|struct|rw_semaphore
r_struct
id|rw_semaphore
(brace
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|rd
DECL|member|wr
r_int
id|rd
comma
id|wr
suffix:semicolon
DECL|member|wait
id|wait_queue_head_t
id|wait
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|member|__magic
r_int
id|__magic
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
DECL|macro|__RWSEM_INITIALIZER
mdefine_line|#define __RWSEM_INITIALIZER(name, rd, wr)&t;&t;&bslash;&n;{&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;SPIN_LOCK_UNLOCKED,&t;&t;&t;&t;&bslash;&n;&t;(rd), (wr),&t;&t;&t;&t;&t;&bslash;&n;&t;__WAIT_QUEUE_HEAD_INITIALIZER((name).wait)&t;&bslash;&n;&t;__SEM_DEBUG_INIT(name)&t;&t;&t;&t;&bslash;&n;}
DECL|macro|__DECLARE_RWSEM_GENERIC
mdefine_line|#define __DECLARE_RWSEM_GENERIC(name, rd, wr)&t;&t;&bslash;&n;&t;struct rw_semaphore name = __RWSEM_INITIALIZER(name, rd, wr)
DECL|macro|DECLARE_RWSEM
mdefine_line|#define DECLARE_RWSEM(name) __DECLARE_RWSEM_GENERIC(name, 0, 0)
DECL|macro|DECLARE_RWSEM_READ_LOCKED
mdefine_line|#define DECLARE_RWSEM_READ_LOCKED(name) __DECLARE_RWSEM_GENERIC(name, 1, 0)
DECL|macro|DECLAER_RWSEM_WRITE_LOCKED
mdefine_line|#define DECLAER_RWSEM_WRITE_LOCKED(name) __DECLARE_RWSEM_GENERIC(name, 0, 1)
DECL|function|init_rwsem
r_extern
r_inline
r_void
id|init_rwsem
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|spin_lock_init
c_func
(paren
op_amp
id|sem-&gt;lock
)paren
suffix:semicolon
id|sem-&gt;rd
op_assign
id|sem-&gt;wr
op_assign
l_int|0
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|sem-&gt;wait
)paren
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
id|sem-&gt;__magic
op_assign
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
suffix:semicolon
macro_line|#endif
)brace
macro_line|#ifndef CHECK_MAGIC
DECL|macro|CHECK_MAGIC
mdefine_line|#define CHECK_MAGIC(x)
macro_line|#endif
r_extern
r_void
id|down_read_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|down_write_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
DECL|function|down_read
r_extern
r_inline
r_void
id|down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|CHECK_MAGIC
c_func
(paren
id|sem-&gt;__magic
)paren
suffix:semicolon
id|spin_lock_irq
c_func
(paren
op_amp
id|sem-&gt;lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sem-&gt;wr
)paren
id|down_read_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
id|sem-&gt;rd
op_increment
suffix:semicolon
id|spin_unlock_irq
c_func
(paren
op_amp
id|sem-&gt;lock
)paren
suffix:semicolon
)brace
DECL|function|down_write
r_extern
r_inline
r_void
id|down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|CHECK_MAGIC
c_func
(paren
id|sem-&gt;__magic
)paren
suffix:semicolon
id|spin_lock
c_func
(paren
op_amp
id|sem-&gt;lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sem-&gt;rd
op_logical_or
id|sem-&gt;wr
)paren
(brace
id|down_write_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
id|sem-&gt;wr
op_assign
l_int|1
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|sem-&gt;lock
)paren
suffix:semicolon
)brace
DECL|macro|up_read
mdefine_line|#define up_read(sem)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long flags;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;CHECK_MAGIC((sem)-&gt;__magic);&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;spin_lock_irqsave(&amp;(sem)-&gt;lock, flags);&t;&t;&t;&bslash;&n;&t;&t;if (!--(sem)-&gt;rd &amp;&amp; waitqueue_active(&amp;(sem)-&gt;wait))&t;&bslash;&n;&t;&t;&t;wake_up(&amp;(sem)-&gt;wait);&t;&t;&t;&t;&bslash;&n;&t;&t;spin_unlock_irqrestore(&amp;(sem)-&gt;lock, flags);&t;&t;&bslash;&n;&t;} while (0)
DECL|macro|up_write
mdefine_line|#define up_write(sem)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long flags;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;CHECK_MAGIC((sem)-&gt;__magic);&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;spin_lock_irqsave(&amp;(sem)-&gt;lock, flags);&t;&t;&t;&bslash;&n;&t;&t;(sem)-&gt;wr = 0;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;if (waitqueue_active(&amp;(sem)-&gt;wait))&t;&t;&t;&bslash;&n;&t;&t;&t;wake_up(&amp;(sem)-&gt;wait);&t;&t;&t;&t;&bslash;&n;&t;&t;spin_unlock_irqrestore(&amp;(sem)-&gt;lock, flags);&t;&t;&bslash;&n;&t;} while (0)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* !(_PPC_SEMAPHORE_H) */
eof
