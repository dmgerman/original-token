macro_line|#ifndef _PPC_TYPES_H
DECL|macro|_PPC_TYPES_H
mdefine_line|#define _PPC_TYPES_H
macro_line|#ifndef _SIZE_T
DECL|macro|_SIZE_T
mdefine_line|#define _SIZE_T
DECL|typedef|size_t
r_typedef
r_int
r_int
r_int
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _SSIZE_T
DECL|macro|_SSIZE_T
mdefine_line|#define _SSIZE_T
DECL|typedef|ssize_t
r_typedef
r_int
id|ssize_t
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _PTRDIFF_T
DECL|macro|_PTRDIFF_T
mdefine_line|#define _PTRDIFF_T
DECL|typedef|ptrdiff_t
r_typedef
r_int
r_int
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _TIME_T
DECL|macro|_TIME_T
mdefine_line|#define _TIME_T
DECL|typedef|time_t
r_typedef
r_int
id|time_t
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _CLOCK_T
DECL|macro|_CLOCK_T
mdefine_line|#define _CLOCK_T
DECL|typedef|clock_t
r_typedef
r_int
id|clock_t
suffix:semicolon
macro_line|#endif
DECL|typedef|pid_t
r_typedef
r_int
id|pid_t
suffix:semicolon
DECL|typedef|uid_t
r_typedef
r_int
r_int
id|uid_t
suffix:semicolon
DECL|typedef|gid_t
r_typedef
r_int
r_int
id|gid_t
suffix:semicolon
DECL|typedef|dev_t
r_typedef
r_int
r_int
id|dev_t
suffix:semicolon
DECL|typedef|ino_t
r_typedef
r_int
r_int
id|ino_t
suffix:semicolon
DECL|typedef|mode_t
r_typedef
r_int
r_int
id|mode_t
suffix:semicolon
DECL|typedef|umode_t
r_typedef
r_int
r_int
id|umode_t
suffix:semicolon
DECL|typedef|nlink_t
r_typedef
r_int
r_int
id|nlink_t
suffix:semicolon
DECL|typedef|daddr_t
r_typedef
r_int
id|daddr_t
suffix:semicolon
DECL|typedef|off_t
r_typedef
r_int
id|off_t
suffix:semicolon
multiline_comment|/*&n; * __xx is ok: it doesn&squot;t pollute the POSIX namespace. Use these in the&n; * header files exported to user space&n; */
DECL|typedef|__s8
r_typedef
id|__signed__
r_char
id|__s8
suffix:semicolon
DECL|typedef|__u8
r_typedef
r_int
r_char
id|__u8
suffix:semicolon
DECL|typedef|__s16
r_typedef
id|__signed__
r_int
id|__s16
suffix:semicolon
DECL|typedef|__u16
r_typedef
r_int
r_int
id|__u16
suffix:semicolon
DECL|typedef|__s32
r_typedef
id|__signed__
r_int
id|__s32
suffix:semicolon
DECL|typedef|__u32
r_typedef
r_int
r_int
id|__u32
suffix:semicolon
macro_line|#if defined(__GNUC__) &amp;&amp; !defined(__STRICT_ANSI__)
DECL|typedef|__s64
r_typedef
id|__signed__
r_int
r_int
id|__s64
suffix:semicolon
DECL|typedef|__u64
r_typedef
r_int
r_int
r_int
id|__u64
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * These aren&squot;t exported outside the kernel to avoid name space clashes&n; */
macro_line|#ifdef __KERNEL__
DECL|typedef|s8
r_typedef
r_int
r_char
id|s8
suffix:semicolon
DECL|typedef|u8
r_typedef
r_int
r_char
id|u8
suffix:semicolon
DECL|typedef|s16
r_typedef
r_int
r_int
id|s16
suffix:semicolon
DECL|typedef|u16
r_typedef
r_int
r_int
id|u16
suffix:semicolon
DECL|typedef|s32
r_typedef
r_int
r_int
id|s32
suffix:semicolon
DECL|typedef|u32
r_typedef
r_int
r_int
id|u32
suffix:semicolon
DECL|typedef|s64
r_typedef
r_int
r_int
r_int
id|s64
suffix:semicolon
DECL|typedef|u64
r_typedef
r_int
r_int
r_int
id|u64
suffix:semicolon
macro_line|#endif /* __KERNEL__ */
DECL|macro|__FD_SET
macro_line|#undef __FD_SET
DECL|function|__FD_SET
r_static
id|__inline__
r_void
id|__FD_SET
c_func
(paren
r_int
r_int
id|fd
comma
id|fd_set
op_star
id|fdsetp
)paren
(brace
r_int
r_int
id|_tmp
op_assign
id|fd
op_div
id|__NFDBITS
suffix:semicolon
r_int
r_int
id|_rem
op_assign
id|fd
op_mod
id|__NFDBITS
suffix:semicolon
id|fdsetp-&gt;fds_bits
(braket
id|_tmp
)braket
op_or_assign
(paren
l_int|1UL
op_lshift
id|_rem
)paren
suffix:semicolon
)brace
DECL|macro|__FD_CLR
macro_line|#undef __FD_CLR
DECL|function|__FD_CLR
r_static
id|__inline__
r_void
id|__FD_CLR
c_func
(paren
r_int
r_int
id|fd
comma
id|fd_set
op_star
id|fdsetp
)paren
(brace
r_int
r_int
id|_tmp
op_assign
id|fd
op_div
id|__NFDBITS
suffix:semicolon
r_int
r_int
id|_rem
op_assign
id|fd
op_mod
id|__NFDBITS
suffix:semicolon
id|fdsetp-&gt;fds_bits
(braket
id|_tmp
)braket
op_and_assign
op_complement
(paren
l_int|1UL
op_lshift
id|_rem
)paren
suffix:semicolon
)brace
DECL|macro|__FD_ISSET
macro_line|#undef __FD_ISSET
DECL|function|__FD_ISSET
r_static
id|__inline__
r_int
id|__FD_ISSET
c_func
(paren
r_int
r_int
id|fd
comma
id|fd_set
op_star
id|p
)paren
(brace
r_int
r_int
id|_tmp
op_assign
id|fd
op_div
id|__NFDBITS
suffix:semicolon
r_int
r_int
id|_rem
op_assign
id|fd
op_mod
id|__NFDBITS
suffix:semicolon
r_return
(paren
id|p-&gt;fds_bits
(braket
id|_tmp
)braket
op_amp
(paren
l_int|1UL
op_lshift
id|_rem
)paren
)paren
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * This will unroll the loop for the normal constant case (8 ints,&n; * for a 256-bit fd_set)&n; */
DECL|macro|__FD_ZERO
macro_line|#undef __FD_ZERO
DECL|function|__FD_ZERO
r_static
id|__inline__
r_void
id|__FD_ZERO
c_func
(paren
id|fd_set
op_star
id|p
)paren
(brace
r_int
r_int
op_star
id|tmp
op_assign
id|p-&gt;fds_bits
suffix:semicolon
r_int
id|i
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_constant_p
c_func
(paren
id|__FDSET_INTS
)paren
)paren
(brace
r_switch
c_cond
(paren
id|__FDSET_INTS
)paren
(brace
r_case
l_int|8
suffix:colon
id|tmp
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|1
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|2
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|3
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|4
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|5
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|6
)braket
op_assign
l_int|0
suffix:semicolon
id|tmp
(braket
l_int|7
)braket
op_assign
l_int|0
suffix:semicolon
r_return
suffix:semicolon
)brace
)brace
id|i
op_assign
id|__FDSET_INTS
suffix:semicolon
r_while
c_loop
(paren
id|i
)paren
(brace
id|i
op_decrement
suffix:semicolon
op_star
id|tmp
op_assign
l_int|0
suffix:semicolon
id|tmp
op_increment
suffix:semicolon
)brace
)brace
macro_line|#endif
eof
