multiline_comment|/*&n; * PowerPC atomic operations&n; */
macro_line|#ifndef _ASM_PPC_ATOMIC_H_ 
DECL|macro|_ASM_PPC_ATOMIC_H_
mdefine_line|#define _ASM_PPC_ATOMIC_H_
DECL|member|counter
DECL|typedef|atomic_t
r_typedef
r_struct
(brace
r_volatile
r_int
id|counter
suffix:semicolon
)brace
id|atomic_t
suffix:semicolon
DECL|macro|ATOMIC_INIT
mdefine_line|#define ATOMIC_INIT(i)&t;{ (i) }
DECL|macro|atomic_read
mdefine_line|#define atomic_read(v)&t;&t;((v)-&gt;counter)
DECL|macro|atomic_set
mdefine_line|#define atomic_set(v,i)&t;&t;(((v)-&gt;counter) = (i))
r_extern
r_void
id|atomic_clear_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_int
r_int
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|atomic_set_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_int
r_int
op_star
id|addr
)paren
suffix:semicolon
DECL|function|atomic_add_return
r_static
id|__inline__
r_int
id|atomic_add_return
c_func
(paren
r_int
id|a
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|t
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n&bslash;&n;1:&t;lwarx&t;%0,0,%3&bslash;n&bslash;&n;&t;add&t;%0,%2,%0&bslash;n&bslash;&n;&t;stwcx.&t;%0,0,%3&bslash;n&bslash;&n;&t;bne-&t;1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|t
)paren
comma
l_string|&quot;=m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|v
)paren
comma
l_string|&quot;m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
DECL|function|atomic_sub_return
r_static
id|__inline__
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|a
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|t
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n&bslash;&n;1:&t;lwarx&t;%0,0,%3&bslash;n&bslash;&n;&t;subf&t;%0,%2,%0&bslash;n&bslash;&n;&t;stwcx.&t;%0,0,%3&bslash;n&bslash;&n;&t;bne-&t;1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|t
)paren
comma
l_string|&quot;=m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|a
)paren
comma
l_string|&quot;r&quot;
(paren
id|v
)paren
comma
l_string|&quot;m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
DECL|function|atomic_inc_return
r_static
id|__inline__
r_int
id|atomic_inc_return
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|t
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n&bslash;&n;1:&t;lwarx&t;%0,0,%2&bslash;n&bslash;&n;&t;addic&t;%0,%0,1&bslash;n&bslash;&n;&t;stwcx.&t;%0,0,%2&bslash;n&bslash;&n;&t;bne-&t;1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|t
)paren
comma
l_string|&quot;=m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|v
)paren
comma
l_string|&quot;m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
DECL|function|atomic_dec_return
r_static
id|__inline__
r_int
id|atomic_dec_return
c_func
(paren
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|t
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n&bslash;&n;1:&t;lwarx&t;%0,0,%2&bslash;n&bslash;&n;&t;addic&t;%0,%0,-1&bslash;n&bslash;&n;&t;stwcx.&t;%0,0,%2&bslash;n&bslash;&n;&t;bne&t;1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|t
)paren
comma
l_string|&quot;=m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|v
)paren
comma
l_string|&quot;m&quot;
(paren
id|v-&gt;counter
)paren
suffix:colon
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|t
suffix:semicolon
)brace
DECL|macro|atomic_add
mdefine_line|#define atomic_add(a, v)&t;&t;((void) atomic_add_return((a), (v)))
DECL|macro|atomic_sub
mdefine_line|#define atomic_sub(a, v)&t;&t;((void) atomic_sub_return((a), (v)))
DECL|macro|atomic_sub_and_test
mdefine_line|#define atomic_sub_and_test(a, v)&t;(atomic_sub_return((a), (v)) == 0)
DECL|macro|atomic_inc
mdefine_line|#define atomic_inc(v)&t;&t;&t;((void) atomic_inc_return((v)))
DECL|macro|atomic_dec
mdefine_line|#define atomic_dec(v)&t;&t;&t;((void) atomic_dec_return((v)))
DECL|macro|atomic_dec_and_test
mdefine_line|#define atomic_dec_and_test(v)&t;&t;(atomic_dec_return((v)) == 0)
macro_line|#endif /* _ASM_PPC_ATOMIC_H_ */
eof
