macro_line|#ifndef _ASM_PPC_BITOPS_H_
DECL|macro|_ASM_PPC_BITOPS_H_
mdefine_line|#define _ASM_PPC_BITOPS_H_
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
DECL|macro|BIT
mdefine_line|#define BIT(n) 1&lt;&lt;(n&amp;0x1F)
DECL|typedef|BITFIELD
r_typedef
r_int
r_int
id|BITFIELD
suffix:semicolon
multiline_comment|/* Set bit &squot;nr&squot; in 32-bit quantity at address &squot;addr&squot; where bit &squot;0&squot;&n; * is in the highest of the four bytes and bit &squot;31&squot; is the high bit&n; * within the first byte. powerpc is BIG-Endian. Unless noted otherwise&n; * all bit-ops return 0 if bit was previously clear and != 0 otherwise.&n; */
DECL|function|set_bit
r_extern
id|__inline__
r_int
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
r_int
id|mask
comma
id|oldbit
suffix:semicolon
macro_line|#ifdef __KERNEL__
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_or_assign
id|mask
suffix:semicolon
macro_line|#ifdef __KERNEL__&t;
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
macro_line|#endif
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_int
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
r_int
id|mask
comma
id|retval
suffix:semicolon
macro_line|#ifdef __KERNEL__
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_xor_assign
id|mask
suffix:semicolon
macro_line|#ifdef __KERNEL__
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
r_int
id|mask
comma
id|retval
suffix:semicolon
macro_line|#ifdef __KERNEL__
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_and_assign
op_complement
id|mask
suffix:semicolon
macro_line|#ifdef __KERNEL__&t;
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
)brace
DECL|macro|_EXT2_HAVE_ASM_BITOPS_
mdefine_line|#define _EXT2_HAVE_ASM_BITOPS_
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit(addr, size) &bslash;&n;        ext2_find_next_zero_bit((addr), (size), 0)
DECL|function|ext2_set_bit
r_extern
id|__inline__
r_int
id|ext2_set_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
macro_line|#ifdef __KERNEL__
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
r_int
id|mask
suffix:semicolon
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
id|oldbit
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|ADDR
op_amp
id|mask
)paren
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
op_star
id|ADDR
op_or_assign
id|mask
suffix:semicolon
macro_line|#ifdef __KERNEL__&t;
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
macro_line|#endif
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|ext2_clear_bit
r_extern
id|__inline__
r_int
id|ext2_clear_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
macro_line|#ifdef __KERNEL__
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
r_int
id|mask
suffix:semicolon
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
r_int
id|oldbit
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
op_star
id|ADDR
op_amp
id|mask
)paren
ques
c_cond
l_int|1
suffix:colon
l_int|0
suffix:semicolon
op_star
id|ADDR
op_assign
op_star
id|ADDR
op_amp
op_complement
id|mask
suffix:semicolon
macro_line|#ifdef __KERNEL__&t;
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
macro_line|#endif
r_return
id|oldbit
suffix:semicolon
)brace
multiline_comment|/* The following routine need not be atomic. */
DECL|function|test_bit
r_extern
id|__inline__
r_int
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_return
l_int|1UL
op_amp
(paren
(paren
(paren
id|__const__
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|5
)braket
op_rshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
suffix:semicolon
)brace
DECL|function|ext2_test_bit
r_extern
id|__inline__
r_int
id|ext2_test_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
id|__const__
r_int
r_char
op_star
id|ADDR
op_assign
(paren
id|__const__
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|ext2_find_next_zero_bit
r_extern
id|__inline__
r_int
r_int
id|ext2_find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
id|le32_to_cpu
c_func
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|le32_to_cpu
c_func
(paren
id|tmp
)paren
op_or
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
)paren
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|le32_to_cpu
c_func
(paren
id|tmp
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* _ASM_PPC_BITOPS_H */
eof
