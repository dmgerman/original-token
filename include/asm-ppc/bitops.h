macro_line|#ifndef _ASM_PPC_BITOPS_H_
DECL|macro|_ASM_PPC_BITOPS_H_
mdefine_line|#define _ASM_PPC_BITOPS_H_
multiline_comment|/*&n; * For the benefit of those who are trying to port Linux to another&n; * architecture, here are some C-language equivalents.  You should&n; * recode these in the native assembly language, if at all possible.&n; * To guarantee atomicity, these routines call cli() and sti() to&n; * disable interrupts while they operate.  (You have to provide inline&n; * routines to cli() and sti().)&n; *&n; * Also note, these routines assume that you have 32 bit integers.&n; * You will have to change this if you are trying to port Linux to the&n; * Alpha architecture or to a Cray.  :-)&n; * &n; * C language equivalents written by Theodore Ts&squot;o, 9/26/92&n; */
macro_line|#include &quot;asm/system.h&quot;  /* For cli/sti declaration */
DECL|macro|BIT
mdefine_line|#define BIT(n) 1&lt;&lt;(n&amp;0x1F)
DECL|typedef|BITFIELD
r_typedef
r_int
r_int
id|BITFIELD
suffix:semicolon
DECL|function|set_bit
r_extern
id|__inline__
r_int
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
r_int
id|mask
comma
id|oldbit
suffix:semicolon
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
id|oldbit
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_or_assign
id|mask
suffix:semicolon
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_int
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_xor_assign
id|mask
suffix:semicolon
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
r_int
id|mask
comma
id|retval
suffix:semicolon
r_int
id|s
op_assign
id|_disable_interrupts
c_func
(paren
)paren
suffix:semicolon
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_and_assign
op_complement
id|mask
suffix:semicolon
id|_enable_interrupts
c_func
(paren
id|s
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|add
)paren
(brace
r_int
id|mask
suffix:semicolon
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
macro_line|#if 0
r_extern
id|__inline__
r_int
id|find_first_zero_bit
c_func
(paren
r_void
op_star
id|add
comma
r_int
id|len
)paren
(brace
r_int
id|mask
comma
id|nr
comma
id|i
suffix:semicolon
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
id|nr
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|len
)paren
(brace
r_if
c_cond
(paren
op_complement
op_star
id|addr
op_ne
l_int|0
)paren
(brace
multiline_comment|/* Contains at least one zero */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|32
suffix:semicolon
id|i
op_increment
comma
id|nr
op_increment
)paren
(brace
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_eq
l_int|0
)paren
(brace
r_return
(paren
id|nr
)paren
suffix:semicolon
)brace
)brace
)brace
id|len
op_sub_assign
l_int|32
suffix:semicolon
id|addr
op_increment
suffix:semicolon
id|nr
op_add_assign
l_int|32
suffix:semicolon
)brace
r_return
(paren
l_int|0
)paren
suffix:semicolon
multiline_comment|/* Shouldn&squot;t happen */
)brace
r_extern
id|__inline__
r_int
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|add
comma
r_int
id|len
comma
r_int
id|nr
)paren
(brace
r_int
id|mask
comma
id|i
suffix:semicolon
id|BITFIELD
op_star
id|addr
op_assign
id|add
suffix:semicolon
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|len
op_sub_assign
id|nr
suffix:semicolon
r_while
c_loop
(paren
id|len
)paren
(brace
r_if
c_cond
(paren
op_star
id|addr
op_ne
l_int|0xFFFFFFFF
)paren
(brace
multiline_comment|/* Contains at least one zero */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|32
suffix:semicolon
id|i
op_increment
comma
id|nr
op_increment
)paren
(brace
id|mask
op_assign
id|BIT
c_func
(paren
id|nr
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_eq
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Bit: %d(%d), Pat: %x&bslash;n&quot;
comma
id|nr
comma
id|nr
op_amp
l_int|0x1F
comma
op_star
id|addr
)paren
suffix:semicolon
r_return
(paren
id|nr
)paren
suffix:semicolon
)brace
)brace
)brace
id|len
op_sub_assign
l_int|32
suffix:semicolon
id|addr
op_increment
suffix:semicolon
id|nr
op_add_assign
l_int|32
suffix:semicolon
)brace
r_return
(paren
l_int|0
)paren
suffix:semicolon
multiline_comment|/* Shouldn&squot;t happen */
)brace
macro_line|#endif
macro_line|#endif /* _ASM_PPC_BITOPS_H */
eof
