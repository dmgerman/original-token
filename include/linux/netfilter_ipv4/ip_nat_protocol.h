multiline_comment|/* Header for use in defining a given protocol. */
macro_line|#ifndef _IP_NAT_PROTOCOL_H
DECL|macro|_IP_NAT_PROTOCOL_H
mdefine_line|#define _IP_NAT_PROTOCOL_H
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;linux/list.h&gt;
r_struct
id|iphdr
suffix:semicolon
r_struct
id|ip_nat_range
suffix:semicolon
DECL|struct|ip_nat_protocol
r_struct
id|ip_nat_protocol
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
multiline_comment|/* Protocol name */
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
multiline_comment|/* Protocol number. */
DECL|member|protonum
r_int
r_int
id|protonum
suffix:semicolon
multiline_comment|/* Do a packet translation according to the ip_nat_proto_manip&n;&t; * and manip type. */
DECL|member|manip_pkt
r_void
(paren
op_star
id|manip_pkt
)paren
(paren
r_struct
id|iphdr
op_star
id|iph
comma
r_int
id|len
comma
r_const
r_struct
id|ip_conntrack_manip
op_star
id|manip
comma
r_enum
id|ip_nat_manip_type
id|maniptype
)paren
suffix:semicolon
multiline_comment|/* Is the manipable part of the tuple between min and max incl? */
DECL|member|in_range
r_int
(paren
op_star
id|in_range
)paren
(paren
r_const
r_struct
id|ip_conntrack_tuple
op_star
id|tuple
comma
r_enum
id|ip_nat_manip_type
id|maniptype
comma
r_const
r_union
id|ip_conntrack_manip_proto
op_star
id|min
comma
r_const
r_union
id|ip_conntrack_manip_proto
op_star
id|max
)paren
suffix:semicolon
multiline_comment|/* Alter the per-proto part of the tuple (depending on&n;&t;   maniptype), to give a unique tuple in the given range if&n;&t;   possible; return false if not.  Per-protocol part of tuple&n;&t;   is initialized to the incoming packet. */
DECL|member|unique_tuple
r_int
(paren
op_star
id|unique_tuple
)paren
(paren
r_struct
id|ip_conntrack_tuple
op_star
id|tuple
comma
r_const
r_struct
id|ip_nat_range
op_star
id|range
comma
r_enum
id|ip_nat_manip_type
id|maniptype
comma
r_const
r_struct
id|ip_conntrack
op_star
id|conntrack
)paren
suffix:semicolon
DECL|member|print
r_int
r_int
(paren
op_star
id|print
)paren
(paren
r_char
op_star
id|buffer
comma
r_const
r_struct
id|ip_conntrack_tuple
op_star
id|match
comma
r_const
r_struct
id|ip_conntrack_tuple
op_star
id|mask
)paren
suffix:semicolon
DECL|member|print_range
r_int
r_int
(paren
op_star
id|print_range
)paren
(paren
r_char
op_star
id|buffer
comma
r_const
r_struct
id|ip_nat_range
op_star
id|range
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Protocol registration. */
r_extern
r_int
id|ip_nat_protocol_register
c_func
(paren
r_struct
id|ip_nat_protocol
op_star
id|proto
)paren
suffix:semicolon
r_extern
r_void
id|ip_nat_protocol_unregister
c_func
(paren
r_struct
id|ip_nat_protocol
op_star
id|proto
)paren
suffix:semicolon
r_extern
r_int
id|init_protocols
c_func
(paren
r_void
)paren
id|__init
suffix:semicolon
r_extern
r_void
id|cleanup_protocols
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_struct
id|ip_nat_protocol
op_star
id|find_nat_proto
c_func
(paren
id|u_int16_t
id|protonum
)paren
suffix:semicolon
macro_line|#endif /*_IP_NAT_PROTO_H*/
eof
