macro_line|#ifndef _LINUX_BLKDEV_H
DECL|macro|_LINUX_BLKDEV_H
mdefine_line|#define _LINUX_BLKDEV_H
macro_line|#include &lt;linux/major.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#include &lt;linux/genhd.h&gt;
multiline_comment|/*&n; * Ok, this is an expanded form so that we can use the same&n; * request for paging requests when that is implemented. In&n; * paging, &squot;bh&squot; is NULL, and the semaphore is used to wait&n; * for read/write completion.&n; */
DECL|struct|request
r_struct
id|request
(brace
DECL|member|rq_status
r_volatile
r_int
id|rq_status
suffix:semicolon
multiline_comment|/* should split this into a few status bits */
DECL|macro|RQ_INACTIVE
mdefine_line|#define RQ_INACTIVE&t;&t;(-1)
DECL|macro|RQ_ACTIVE
mdefine_line|#define RQ_ACTIVE&t;&t;1
DECL|macro|RQ_SCSI_BUSY
mdefine_line|#define RQ_SCSI_BUSY&t;&t;0xffff
DECL|macro|RQ_SCSI_DONE
mdefine_line|#define RQ_SCSI_DONE&t;&t;0xfffe
DECL|macro|RQ_SCSI_DISCONNECTING
mdefine_line|#define RQ_SCSI_DISCONNECTING&t;0xffe0
DECL|member|rq_dev
id|kdev_t
id|rq_dev
suffix:semicolon
DECL|member|cmd
r_int
id|cmd
suffix:semicolon
multiline_comment|/* READ or WRITE */
DECL|member|errors
r_int
id|errors
suffix:semicolon
DECL|member|sector
r_int
r_int
id|sector
suffix:semicolon
DECL|member|nr_sectors
r_int
r_int
id|nr_sectors
suffix:semicolon
DECL|member|current_nr_sectors
r_int
r_int
id|current_nr_sectors
suffix:semicolon
DECL|member|buffer
r_char
op_star
id|buffer
suffix:semicolon
DECL|member|sem
r_struct
id|semaphore
op_star
id|sem
suffix:semicolon
DECL|member|bh
r_struct
id|buffer_head
op_star
id|bh
suffix:semicolon
DECL|member|bhtail
r_struct
id|buffer_head
op_star
id|bhtail
suffix:semicolon
DECL|member|next
r_struct
id|request
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|blk_dev_struct
r_struct
id|blk_dev_struct
(brace
DECL|member|request_fn
r_void
(paren
op_star
id|request_fn
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|current_request
r_struct
id|request
op_star
id|current_request
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|sec_size
r_struct
id|sec_size
(brace
DECL|member|block_size
r_int
id|block_size
suffix:semicolon
DECL|member|block_size_bits
r_int
id|block_size_bits
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|sec_size
op_star
id|blk_sec
(braket
id|MAX_BLKDEV
)braket
suffix:semicolon
r_extern
r_struct
id|blk_dev_struct
id|blk_dev
(braket
id|MAX_BLKDEV
)braket
suffix:semicolon
r_extern
r_struct
id|wait_queue
op_star
id|wait_for_request
suffix:semicolon
r_extern
r_void
id|resetup_one_dev
c_func
(paren
r_struct
id|gendisk
op_star
id|dev
comma
r_int
id|drive
)paren
suffix:semicolon
multiline_comment|/* md needs those functions to requeue requests */
r_extern
r_void
id|add_request
c_func
(paren
r_struct
id|blk_dev_struct
op_star
id|dev
comma
r_struct
id|request
op_star
id|req
)paren
suffix:semicolon
r_extern
r_struct
id|request
op_star
id|get_md_request
(paren
r_int
id|max_req
comma
id|kdev_t
id|dev
)paren
suffix:semicolon
r_extern
r_int
op_star
id|blk_size
(braket
id|MAX_BLKDEV
)braket
suffix:semicolon
r_extern
r_int
op_star
id|blksize_size
(braket
id|MAX_BLKDEV
)braket
suffix:semicolon
r_extern
r_int
op_star
id|hardsect_size
(braket
id|MAX_BLKDEV
)braket
suffix:semicolon
macro_line|#endif
eof
