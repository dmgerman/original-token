multiline_comment|/*&n; * linux/include/linux/sunrpc/types.h&n; *&n; * Generic types and misc stuff for RPC.&n; *&n; * Copyright (C) 1996, Olaf Kirch &lt;okir@monad.swb.de&gt;&n; */
macro_line|#ifndef _LINUX_SUNRPC_TYPES_H_
DECL|macro|_LINUX_SUNRPC_TYPES_H_
mdefine_line|#define _LINUX_SUNRPC_TYPES_H_
macro_line|#include &lt;linux/timer.h&gt;
macro_line|#include &lt;linux/tqueue.h&gt;
macro_line|#include &lt;linux/sunrpc/debug.h&gt;
multiline_comment|/*&n; * These are the RPC list manipulation primitives used everywhere.&n; */
DECL|struct|rpc_listitem
r_struct
id|rpc_listitem
(brace
DECL|member|prev
r_struct
id|rpc_listitem
op_star
id|prev
suffix:semicolon
DECL|member|next
r_struct
id|rpc_listitem
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
r_extern
id|__inline__
r_void
DECL|function|__rpc_append_list
id|__rpc_append_list
c_func
(paren
r_struct
id|rpc_listitem
op_star
op_star
id|q
comma
r_struct
id|rpc_listitem
op_star
id|item
)paren
(brace
r_struct
id|rpc_listitem
op_star
id|next
comma
op_star
id|prev
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|next
op_assign
op_star
id|q
)paren
)paren
(brace
op_star
id|q
op_assign
id|item-&gt;next
op_assign
id|item-&gt;prev
op_assign
id|item
suffix:semicolon
)brace
r_else
(brace
id|prev
op_assign
id|next-&gt;prev
suffix:semicolon
id|prev-&gt;next
op_assign
id|item
suffix:semicolon
id|next-&gt;prev
op_assign
id|item
suffix:semicolon
id|item-&gt;next
op_assign
id|next
suffix:semicolon
id|item-&gt;prev
op_assign
id|prev
suffix:semicolon
)brace
)brace
r_extern
id|__inline__
r_void
DECL|function|__rpc_insert_list
id|__rpc_insert_list
c_func
(paren
r_struct
id|rpc_listitem
op_star
op_star
id|q
comma
r_struct
id|rpc_listitem
op_star
id|item
)paren
(brace
id|__rpc_append_list
c_func
(paren
id|q
comma
id|item
)paren
suffix:semicolon
op_star
id|q
op_assign
id|item
suffix:semicolon
)brace
r_extern
id|__inline__
r_void
DECL|function|__rpc_remove_list
id|__rpc_remove_list
c_func
(paren
r_struct
id|rpc_listitem
op_star
op_star
id|q
comma
r_struct
id|rpc_listitem
op_star
id|item
)paren
(brace
r_struct
id|rpc_listitem
op_star
id|prev
op_assign
id|item-&gt;prev
comma
op_star
id|next
op_assign
id|item-&gt;next
suffix:semicolon
r_if
c_cond
(paren
id|item
op_ne
id|prev
)paren
(brace
id|next-&gt;prev
op_assign
id|prev
suffix:semicolon
id|prev-&gt;next
op_assign
id|next
suffix:semicolon
)brace
r_else
(brace
id|next
op_assign
l_int|NULL
suffix:semicolon
)brace
r_if
c_cond
(paren
op_star
id|q
op_eq
id|item
)paren
op_star
id|q
op_assign
id|next
suffix:semicolon
)brace
DECL|macro|rpc_insert_list
mdefine_line|#define rpc_insert_list(q, i) &bslash;&n;      __rpc_insert_list((struct rpc_listitem **) q, (struct rpc_listitem *) i)
DECL|macro|rpc_append_list
mdefine_line|#define rpc_append_list(q, i) &bslash;&n;      __rpc_append_list((struct rpc_listitem **) q, (struct rpc_listitem *) i)
DECL|macro|rpc_remove_list
mdefine_line|#define rpc_remove_list(q, i) &bslash;&n;      __rpc_remove_list((struct rpc_listitem **) q, (struct rpc_listitem *) i)
multiline_comment|/*&n; * Shorthands&n; */
DECL|macro|signalled
mdefine_line|#define signalled()&t;&t;(signal_pending(current))
macro_line|#endif /* _LINUX_SUNRPC_TYPES_H_ */
eof
