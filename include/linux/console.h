multiline_comment|/*&n; *  linux/include/linux/console.h&n; *&n; *  Copyright (C) 1993        Hamish Macdonald&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file COPYING in the main directory of this archive&n; * for more details.&n; *&n; * Changed:&n; * 10-Mar-94: Arno Griffioen: Conversion for vt100 emulator port from PC LINUX&n; */
macro_line|#ifndef _LINUX_CONSOLE_H_
DECL|macro|_LINUX_CONSOLE_H_
mdefine_line|#define _LINUX_CONSOLE_H_ 1
DECL|macro|NPAR
mdefine_line|#define NPAR 16
r_struct
id|vc_data
suffix:semicolon
multiline_comment|/*&n; * this is what the terminal answers to a ESC-Z or csi0c query.&n; */
DECL|macro|VT100ID
mdefine_line|#define VT100ID &quot;&bslash;033[?1;2c&quot;
DECL|macro|VT102ID
mdefine_line|#define VT102ID &quot;&bslash;033[?6c&quot;
multiline_comment|/* DPC: 1994-04-13 !!! con_putcs is new entry !!! */
DECL|struct|consw
r_struct
id|consw
(brace
DECL|member|con_startup
r_int
r_int
(paren
op_star
id|con_startup
)paren
(paren
r_int
r_int
comma
r_char
op_star
op_star
)paren
suffix:semicolon
DECL|member|con_init
r_void
(paren
op_star
id|con_init
)paren
(paren
r_struct
id|vc_data
op_star
)paren
suffix:semicolon
DECL|member|con_deinit
r_int
(paren
op_star
id|con_deinit
)paren
(paren
r_struct
id|vc_data
op_star
)paren
suffix:semicolon
DECL|member|con_clear
r_int
(paren
op_star
id|con_clear
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|con_putc
r_int
(paren
op_star
id|con_putc
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|con_putcs
r_int
(paren
op_star
id|con_putcs
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|con_cursor
r_int
(paren
op_star
id|con_cursor
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|con_scroll
r_int
(paren
op_star
id|con_scroll
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|con_bmove
r_int
(paren
op_star
id|con_bmove
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
comma
r_int
comma
r_int
comma
r_int
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|con_switch
r_int
(paren
op_star
id|con_switch
)paren
(paren
r_struct
id|vc_data
op_star
)paren
suffix:semicolon
DECL|member|con_blank
r_int
(paren
op_star
id|con_blank
)paren
(paren
r_int
)paren
suffix:semicolon
DECL|member|con_get_font
r_int
(paren
op_star
id|con_get_font
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
op_star
comma
r_int
op_star
comma
r_char
op_star
)paren
suffix:semicolon
DECL|member|con_set_font
r_int
(paren
op_star
id|con_set_font
)paren
(paren
r_struct
id|vc_data
op_star
comma
r_int
comma
r_int
comma
r_char
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|consw
op_star
id|conswitchp
suffix:semicolon
multiline_comment|/* flag bits */
DECL|macro|CON_INITED
mdefine_line|#define CON_INITED  (1)
multiline_comment|/* scroll */
DECL|macro|SM_UP
mdefine_line|#define SM_UP       (1)
DECL|macro|SM_DOWN
mdefine_line|#define SM_DOWN     (2)
DECL|macro|SM_LEFT
mdefine_line|#define SM_LEFT     (3)
DECL|macro|SM_RIGHT
mdefine_line|#define SM_RIGHT    (4)
multiline_comment|/* cursor */
DECL|macro|CM_DRAW
mdefine_line|#define CM_DRAW     (1)
DECL|macro|CM_ERASE
mdefine_line|#define CM_ERASE    (2)
DECL|macro|CM_MOVE
mdefine_line|#define CM_MOVE     (3)
r_struct
id|tty_struct
suffix:semicolon
r_int
id|tioclinux
c_func
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
multiline_comment|/* The interface for /dev/console(s) and printk output */
DECL|struct|console
r_struct
id|console
(brace
multiline_comment|/*&n;&t; * This function should not return before the string is written.&n;&t; */
DECL|member|write
r_void
(paren
op_star
id|write
)paren
(paren
r_const
r_char
op_star
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* To unblank the console in case of panic */
DECL|member|unblank
r_void
(paren
op_star
id|unblank
)paren
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n;         * Only the console that was registered last with wait_key !=&n;&t; * NULL will be used. This blocks until there is a character&n;&t; * to give back, it does not schedule.&n;         */
DECL|member|wait_key
r_void
(paren
op_star
id|wait_key
)paren
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Return the device to use when opening /dev/console. Only the&n;&t; * last registered console will do.&n;&t; */
DECL|member|device
r_int
(paren
op_star
id|device
)paren
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* &n;&t; * For a linked list of consoles for multiple output. Any console&n;         * not at the head of the list is used only for output.&n;&t; */
DECL|member|next
r_struct
id|console
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_void
id|register_console
c_func
(paren
r_struct
id|console
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|console
op_star
id|console_drivers
suffix:semicolon
macro_line|#endif /* linux/console.h */
eof
