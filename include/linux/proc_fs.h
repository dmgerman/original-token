macro_line|#ifndef _LINUX_PROC_FS_H
DECL|macro|_LINUX_PROC_FS_H
mdefine_line|#define _LINUX_PROC_FS_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/malloc.h&gt;
multiline_comment|/*&n; * The proc filesystem constants/structures&n; */
multiline_comment|/*&n; * Offset of the first process in the /proc root directory..&n; */
DECL|macro|FIRST_PROCESS_ENTRY
mdefine_line|#define FIRST_PROCESS_ENTRY 256
multiline_comment|/*&n; * We always define these enumerators&n; */
r_enum
(brace
DECL|enumerator|PROC_ROOT_INO
id|PROC_ROOT_INO
op_assign
l_int|1
comma
)brace
suffix:semicolon
multiline_comment|/* Finally, the dynamically allocatable proc entries are reserved: */
DECL|macro|PROC_DYNAMIC_FIRST
mdefine_line|#define PROC_DYNAMIC_FIRST 4096
DECL|macro|PROC_NDYNAMIC
mdefine_line|#define PROC_NDYNAMIC      4096
DECL|macro|PROC_SUPER_MAGIC
mdefine_line|#define PROC_SUPER_MAGIC 0x9fa0
multiline_comment|/*&n; * This is not completely implemented yet. The idea is to&n; * create an in-memory tree (like the actual /proc filesystem&n; * tree) of these proc_dir_entries, so that we can dynamically&n; * add new files to /proc.&n; *&n; * The &quot;next&quot; pointer creates a linked list of one /proc directory,&n; * while parent/subdir create the directory structure (every&n; * /proc file has a parent, but &quot;subdir&quot; is NULL for all&n; * non-directory entries).&n; *&n; * &quot;get_info&quot; is called at &quot;read&quot;, while &quot;owner&quot; is used to protect module&n; * from unloading while proc_dir_entry is in use&n; */
DECL|typedef|read_proc_t
r_typedef
r_int
(paren
id|read_proc_t
)paren
(paren
r_char
op_star
id|page
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|off
comma
r_int
id|count
comma
r_int
op_star
id|eof
comma
r_void
op_star
id|data
)paren
suffix:semicolon
DECL|typedef|write_proc_t
r_typedef
r_int
(paren
id|write_proc_t
)paren
(paren
r_struct
id|file
op_star
id|file
comma
r_const
r_char
op_star
id|buffer
comma
r_int
r_int
id|count
comma
r_void
op_star
id|data
)paren
suffix:semicolon
DECL|typedef|get_info_t
r_typedef
r_int
(paren
id|get_info_t
)paren
(paren
r_char
op_star
comma
r_char
op_star
op_star
comma
id|off_t
comma
r_int
)paren
suffix:semicolon
DECL|struct|proc_dir_entry
r_struct
id|proc_dir_entry
(brace
DECL|member|low_ino
r_int
r_int
id|low_ino
suffix:semicolon
DECL|member|namelen
r_int
r_int
id|namelen
suffix:semicolon
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|mode
id|mode_t
id|mode
suffix:semicolon
DECL|member|nlink
id|nlink_t
id|nlink
suffix:semicolon
DECL|member|uid
id|uid_t
id|uid
suffix:semicolon
DECL|member|gid
id|gid_t
id|gid
suffix:semicolon
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|proc_iops
r_struct
id|inode_operations
op_star
id|proc_iops
suffix:semicolon
DECL|member|proc_fops
r_struct
id|file_operations
op_star
id|proc_fops
suffix:semicolon
DECL|member|get_info
id|get_info_t
op_star
id|get_info
suffix:semicolon
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|next
DECL|member|parent
DECL|member|subdir
r_struct
id|proc_dir_entry
op_star
id|next
comma
op_star
id|parent
comma
op_star
id|subdir
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
DECL|member|read_proc
id|read_proc_t
op_star
id|read_proc
suffix:semicolon
DECL|member|write_proc
id|write_proc_t
op_star
id|write_proc
suffix:semicolon
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
multiline_comment|/* use count */
DECL|member|deleted
r_int
id|deleted
suffix:semicolon
multiline_comment|/* delete flag */
DECL|member|rdev
id|kdev_t
id|rdev
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|PROC_INODE_PROPER
mdefine_line|#define PROC_INODE_PROPER(inode) ((inode)-&gt;i_ino &amp; ~0xffff)
macro_line|#ifdef CONFIG_PROC_FS
r_extern
r_struct
id|proc_dir_entry
id|proc_root
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_root_fs
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_net
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_bus
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_root_driver
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_root_kcore
suffix:semicolon
r_extern
r_void
id|proc_root_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|proc_misc_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_struct
id|dentry
op_star
id|proc_pid_lookup
c_func
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|dentry
op_star
id|dentry
)paren
suffix:semicolon
r_void
id|proc_pid_delete_inode
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_int
id|proc_pid_readdir
c_func
(paren
r_struct
id|file
op_star
id|filp
comma
r_void
op_star
id|dirent
comma
id|filldir_t
id|filldir
)paren
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|create_proc_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|parent
)paren
suffix:semicolon
r_extern
r_void
id|remove_proc_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|proc_dir_entry
op_star
id|parent
)paren
suffix:semicolon
r_extern
r_struct
id|vfsmount
op_star
id|proc_mnt
suffix:semicolon
r_extern
r_struct
id|super_block
op_star
id|proc_read_super
c_func
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|proc_get_inode
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
comma
r_struct
id|proc_dir_entry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|proc_match
c_func
(paren
r_int
comma
r_const
r_char
op_star
comma
r_struct
id|proc_dir_entry
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * These are generic /proc routines that use the internal&n; * &quot;struct proc_dir_entry&quot; tree to traverse the filesystem.&n; *&n; * The /proc root directory has extended versions to take care&n; * of the /proc/&lt;pid&gt; subdirectories.&n; */
r_extern
r_int
id|proc_readdir
c_func
(paren
r_struct
id|file
op_star
comma
r_void
op_star
comma
id|filldir_t
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|proc_lookup
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|proc_kcore_operations
suffix:semicolon
r_extern
r_struct
id|file_operations
id|proc_kmsg_operations
suffix:semicolon
r_extern
r_struct
id|file_operations
id|ppc_htab_operations
suffix:semicolon
multiline_comment|/*&n; * proc_tty.c&n; */
r_extern
r_void
id|proc_tty_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|proc_tty_register_driver
c_func
(paren
r_struct
id|tty_driver
op_star
id|driver
)paren
suffix:semicolon
r_extern
r_void
id|proc_tty_unregister_driver
c_func
(paren
r_struct
id|tty_driver
op_star
id|driver
)paren
suffix:semicolon
multiline_comment|/*&n; * proc_devtree.c&n; */
r_extern
r_void
id|proc_device_tree_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_symlink
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|proc_dir_entry
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_mknod
c_func
(paren
r_const
r_char
op_star
comma
id|mode_t
comma
r_struct
id|proc_dir_entry
op_star
comma
id|kdev_t
)paren
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
op_star
id|proc_mkdir
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|proc_dir_entry
op_star
)paren
suffix:semicolon
DECL|function|create_proc_read_entry
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|create_proc_read_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|base
comma
id|read_proc_t
op_star
id|read_proc
comma
r_void
op_star
id|data
)paren
(brace
r_struct
id|proc_dir_entry
op_star
id|res
op_assign
id|create_proc_entry
c_func
(paren
id|name
comma
id|mode
comma
id|base
)paren
suffix:semicolon
r_if
c_cond
(paren
id|res
)paren
(brace
id|res-&gt;read_proc
op_assign
id|read_proc
suffix:semicolon
id|res-&gt;data
op_assign
id|data
suffix:semicolon
)brace
r_return
id|res
suffix:semicolon
)brace
DECL|function|create_proc_info_entry
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|create_proc_info_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|base
comma
id|get_info_t
op_star
id|get_info
)paren
(brace
r_struct
id|proc_dir_entry
op_star
id|res
op_assign
id|create_proc_entry
c_func
(paren
id|name
comma
id|mode
comma
id|base
)paren
suffix:semicolon
r_if
c_cond
(paren
id|res
)paren
id|res-&gt;get_info
op_assign
id|get_info
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
DECL|function|proc_net_create
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|proc_net_create
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
id|get_info_t
op_star
id|get_info
)paren
(brace
r_return
id|create_proc_info_entry
c_func
(paren
id|name
comma
id|mode
comma
id|proc_net
comma
id|get_info
)paren
suffix:semicolon
)brace
DECL|function|proc_net_remove
r_extern
r_inline
r_void
id|proc_net_remove
c_func
(paren
r_const
r_char
op_star
id|name
)paren
(brace
id|remove_proc_entry
c_func
(paren
id|name
comma
id|proc_net
)paren
suffix:semicolon
)brace
macro_line|#else
DECL|function|proc_net_create
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|proc_net_create
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
id|get_info_t
op_star
id|get_info
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|proc_net_remove
r_extern
r_inline
r_void
id|proc_net_remove
c_func
(paren
r_const
r_char
op_star
id|name
)paren
(brace
)brace
DECL|function|create_proc_entry
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|create_proc_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|parent
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|remove_proc_entry
r_extern
r_inline
r_void
id|remove_proc_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|proc_dir_entry
op_star
id|parent
)paren
(brace
)brace
suffix:semicolon
DECL|function|proc_symlink
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|proc_symlink
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|proc_dir_entry
op_star
id|parent
comma
r_char
op_star
id|dest
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|proc_mknod
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|proc_mknod
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|parent
comma
id|kdev_t
id|rdev
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|proc_mkdir
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|proc_mkdir
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|proc_dir_entry
op_star
id|parent
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|create_proc_read_entry
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|create_proc_read_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|base
comma
r_int
(paren
op_star
id|read_proc
)paren
(paren
r_char
op_star
comma
r_char
op_star
op_star
comma
id|off_t
comma
r_int
comma
r_int
op_star
comma
r_void
op_star
)paren
comma
r_void
op_star
id|data
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|create_proc_info_entry
r_extern
r_inline
r_struct
id|proc_dir_entry
op_star
id|create_proc_info_entry
c_func
(paren
r_const
r_char
op_star
id|name
comma
id|mode_t
id|mode
comma
r_struct
id|proc_dir_entry
op_star
id|base
comma
id|get_info_t
op_star
id|get_info
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|proc_tty_register_driver
r_extern
r_inline
r_void
id|proc_tty_register_driver
c_func
(paren
r_struct
id|tty_driver
op_star
id|driver
)paren
(brace
)brace
suffix:semicolon
DECL|function|proc_tty_unregister_driver
r_extern
r_inline
r_void
id|proc_tty_unregister_driver
c_func
(paren
r_struct
id|tty_driver
op_star
id|driver
)paren
(brace
)brace
suffix:semicolon
r_extern
r_struct
id|proc_dir_entry
id|proc_root
suffix:semicolon
macro_line|#endif /* CONFIG_PROC_FS */
macro_line|#endif /* _LINUX_PROC_FS_H */
eof
