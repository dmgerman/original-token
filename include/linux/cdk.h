multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; *&t;cdk.h  -- CDK interface definitions.&n; *&n; *&t;Copyright (C) 1996-1998  Stallion Technologies (support@stallion.oz.au).&n; *&t;Copyright (C) 1994-1996  Greg Ungerer.&n; *&n; *&t;This program is free software; you can redistribute it and/or modify&n; *&t;it under the terms of the GNU General Public License as published by&n; *&t;the Free Software Foundation; either version 2 of the License, or&n; *&t;(at your option) any later version.&n; *&n; *&t;This program is distributed in the hope that it will be useful,&n; *&t;but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *&t;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *&t;GNU General Public License for more details.&n; *&n; *&t;You should have received a copy of the GNU General Public License&n; *&t;along with this program; if not, write to the Free Software&n; *&t;Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n; */
multiline_comment|/*****************************************************************************/
macro_line|#ifndef&t;_CDK_H
DECL|macro|_CDK_H
mdefine_line|#define&t;_CDK_H
multiline_comment|/*****************************************************************************/
macro_line|#pragma&t;pack(2)
multiline_comment|/*&n; *&t;The following set of definitions is used to communicate with the&n; *&t;shared memory interface of the Stallion intelligent multiport serial&n; *&t;boards. The definitions in this file are taken directly from the&n; *&t;document titled &quot;Generic Stackable Interface, Downloader and&n; *&t;Communications Development Kit&quot;.&n; */
multiline_comment|/*&n; *&t;Define the set of important shared memory addresses. These are&n; *&t;required to initialize the board and get things started. All of these&n; *&t;addresses are relative to the start of the shared memory.&n; */
DECL|macro|CDK_SIGADDR
mdefine_line|#define&t;CDK_SIGADDR&t;0x200
DECL|macro|CDK_FEATADDR
mdefine_line|#define&t;CDK_FEATADDR&t;0x280
DECL|macro|CDK_CDKADDR
mdefine_line|#define&t;CDK_CDKADDR&t;0x300
DECL|macro|CDK_RDYADDR
mdefine_line|#define&t;CDK_RDYADDR&t;0x262
DECL|macro|CDK_ALIVEMARKER
mdefine_line|#define&t;CDK_ALIVEMARKER&t;13
multiline_comment|/*&n; *&t;On hardware power up the ROMs located on the EasyConnection 8/64 will&n; *&t;fill out the following signature information into shared memory. This&n; *&t;way the host system can quickly determine that the board is present&n; *&t;and is operational.&n; */
DECL|struct|cdkecpsig
r_typedef
r_struct
id|cdkecpsig
(brace
DECL|member|magic
r_int
r_int
id|magic
suffix:semicolon
DECL|member|romver
r_int
r_int
id|romver
suffix:semicolon
DECL|member|cputype
r_int
r_int
id|cputype
suffix:semicolon
DECL|member|panelid
r_int
r_char
id|panelid
(braket
l_int|8
)braket
suffix:semicolon
DECL|typedef|cdkecpsig_t
)brace
id|cdkecpsig_t
suffix:semicolon
DECL|macro|ECP_MAGIC
mdefine_line|#define&t;ECP_MAGIC&t;0x21504345
multiline_comment|/*&n; *&t;On hardware power up the ROMs located on the ONboard, Stallion and&n; *&t;Brumbys will fill out the following signature information into shared&n; *&t;memory. This way the host system can quickly determine that the board&n; *&t;is present and is operational.&n; */
DECL|struct|cdkonbsig
r_typedef
r_struct
id|cdkonbsig
(brace
DECL|member|magic0
r_int
r_int
id|magic0
suffix:semicolon
DECL|member|magic1
r_int
r_int
id|magic1
suffix:semicolon
DECL|member|magic2
r_int
r_int
id|magic2
suffix:semicolon
DECL|member|magic3
r_int
r_int
id|magic3
suffix:semicolon
DECL|member|romver
r_int
r_int
id|romver
suffix:semicolon
DECL|member|memoff
r_int
r_int
id|memoff
suffix:semicolon
DECL|member|memseg
r_int
r_int
id|memseg
suffix:semicolon
DECL|member|amask0
r_int
r_int
id|amask0
suffix:semicolon
DECL|member|pic
r_int
r_int
id|pic
suffix:semicolon
DECL|member|status
r_int
r_int
id|status
suffix:semicolon
DECL|member|btype
r_int
r_int
id|btype
suffix:semicolon
DECL|member|clkticks
r_int
r_int
id|clkticks
suffix:semicolon
DECL|member|clkspeed
r_int
r_int
id|clkspeed
suffix:semicolon
DECL|member|amask1
r_int
r_int
id|amask1
suffix:semicolon
DECL|member|amask2
r_int
r_int
id|amask2
suffix:semicolon
DECL|typedef|cdkonbsig_t
)brace
id|cdkonbsig_t
suffix:semicolon
DECL|macro|ONB_MAGIC0
mdefine_line|#define&t;ONB_MAGIC0&t;0xf2a7
DECL|macro|ONB_MAGIC1
mdefine_line|#define&t;ONB_MAGIC1&t;0xa149
DECL|macro|ONB_MAGIC2
mdefine_line|#define&t;ONB_MAGIC2&t;0x6352
DECL|macro|ONB_MAGIC3
mdefine_line|#define&t;ONB_MAGIC3&t;0xf121
multiline_comment|/*&n; *&t;Define the feature area structure. The feature area is the set of&n; *&t;startup parameters used by the slave image when it starts executing.&n; *&t;They allow for the specification of buffer sizes, debug trace, etc.&n; */
DECL|struct|cdkfeature
r_typedef
r_struct
id|cdkfeature
(brace
DECL|member|debug
r_int
r_int
id|debug
suffix:semicolon
DECL|member|banner
r_int
r_int
id|banner
suffix:semicolon
DECL|member|etype
r_int
r_int
id|etype
suffix:semicolon
DECL|member|nrdevs
r_int
r_int
id|nrdevs
suffix:semicolon
DECL|member|brdspec
r_int
r_int
id|brdspec
suffix:semicolon
DECL|member|txrqsize
r_int
r_int
id|txrqsize
suffix:semicolon
DECL|member|rxrqsize
r_int
r_int
id|rxrqsize
suffix:semicolon
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
DECL|typedef|cdkfeature_t
)brace
id|cdkfeature_t
suffix:semicolon
DECL|macro|ETYP_DDK
mdefine_line|#define&t;ETYP_DDK&t;0
DECL|macro|ETYP_CDK
mdefine_line|#define&t;ETYP_CDK&t;1
multiline_comment|/*&n; *&t;Define the CDK header structure. This is the info that the slave&n; *&t;environment sets up after it has been downloaded and started. It&n; *&t;essentially provides a memory map for the shared memory interface.&n; */
DECL|struct|cdkhdr
r_typedef
r_struct
id|cdkhdr
(brace
DECL|member|command
r_int
r_int
id|command
suffix:semicolon
DECL|member|status
r_int
r_int
id|status
suffix:semicolon
DECL|member|port
r_int
r_int
id|port
suffix:semicolon
DECL|member|mode
r_int
r_int
id|mode
suffix:semicolon
DECL|member|cmd_buf
r_int
r_int
id|cmd_buf
(braket
l_int|14
)braket
suffix:semicolon
DECL|member|alive_cnt
r_int
r_int
id|alive_cnt
suffix:semicolon
DECL|member|intrpt_mode
r_int
r_int
id|intrpt_mode
suffix:semicolon
DECL|member|intrpt_id
r_int
r_char
id|intrpt_id
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|ver_release
r_int
r_char
id|ver_release
suffix:semicolon
DECL|member|ver_modification
r_int
r_char
id|ver_modification
suffix:semicolon
DECL|member|ver_fix
r_int
r_char
id|ver_fix
suffix:semicolon
DECL|member|deadman_restart
r_int
r_char
id|deadman_restart
suffix:semicolon
DECL|member|deadman
r_int
r_int
id|deadman
suffix:semicolon
DECL|member|nrdevs
r_int
r_int
id|nrdevs
suffix:semicolon
DECL|member|memp
r_int
r_int
id|memp
suffix:semicolon
DECL|member|hostp
r_int
r_int
id|hostp
suffix:semicolon
DECL|member|slavep
r_int
r_int
id|slavep
suffix:semicolon
DECL|member|hostreq
r_int
r_char
id|hostreq
suffix:semicolon
DECL|member|slavereq
r_int
r_char
id|slavereq
suffix:semicolon
DECL|member|cmd_reserved
r_int
r_char
id|cmd_reserved
(braket
l_int|30
)braket
suffix:semicolon
DECL|typedef|cdkhdr_t
)brace
id|cdkhdr_t
suffix:semicolon
DECL|macro|MODE_DDK
mdefine_line|#define&t;MODE_DDK&t;0
DECL|macro|MODE_CDK
mdefine_line|#define&t;MODE_CDK&t;1
DECL|macro|IMD_INTR
mdefine_line|#define&t;IMD_INTR&t;0x0
DECL|macro|IMD_PPINTR
mdefine_line|#define&t;IMD_PPINTR&t;0x1
DECL|macro|IMD_POLL
mdefine_line|#define&t;IMD_POLL&t;0xff
multiline_comment|/*&n; *&t;Define the memory mapping structure. This structure is pointed to by&n; *&t;the memp field in the stlcdkhdr struct. As many as these structures&n; *&t;as required are layed out in shared memory to define how the rest of&n; *&t;shared memory is divided up. There will be one for each port.&n; */
DECL|struct|cdkmem
r_typedef
r_struct
id|cdkmem
(brace
DECL|member|dtype
r_int
r_int
id|dtype
suffix:semicolon
DECL|member|offset
r_int
r_int
id|offset
suffix:semicolon
DECL|typedef|cdkmem_t
)brace
id|cdkmem_t
suffix:semicolon
DECL|macro|TYP_UNDEFINED
mdefine_line|#define&t;TYP_UNDEFINED&t;0x0
DECL|macro|TYP_ASYNCTRL
mdefine_line|#define&t;TYP_ASYNCTRL&t;0x1
DECL|macro|TYP_ASYNC
mdefine_line|#define&t;TYP_ASYNC&t;0x20
DECL|macro|TYP_PARALLEL
mdefine_line|#define&t;TYP_PARALLEL&t;0x40
DECL|macro|TYP_SYNCX21
mdefine_line|#define&t;TYP_SYNCX21&t;0x60
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; *&t;Following is a set of defines and structures used to actually deal&n; *&t;with the serial ports on the board. Firstly is the set of commands&n; *&t;that can be applied to ports.&n; */
DECL|macro|ASYCMD
mdefine_line|#define&t;ASYCMD&t;&t;(((unsigned long) &squot;a&squot;) &lt;&lt; 8)
DECL|macro|A_NULL
mdefine_line|#define&t;A_NULL&t;&t;(ASYCMD | 0)
DECL|macro|A_FLUSH
mdefine_line|#define&t;A_FLUSH&t;&t;(ASYCMD | 1)
DECL|macro|A_BREAK
mdefine_line|#define&t;A_BREAK&t;&t;(ASYCMD | 2)
DECL|macro|A_GETPORT
mdefine_line|#define&t;A_GETPORT&t;(ASYCMD | 3)
DECL|macro|A_SETPORT
mdefine_line|#define&t;A_SETPORT&t;(ASYCMD | 4)
DECL|macro|A_SETPORTF
mdefine_line|#define&t;A_SETPORTF&t;(ASYCMD | 5)
DECL|macro|A_SETPORTFTX
mdefine_line|#define&t;A_SETPORTFTX&t;(ASYCMD | 6)
DECL|macro|A_SETPORTFRX
mdefine_line|#define&t;A_SETPORTFRX&t;(ASYCMD | 7)
DECL|macro|A_GETSIGNALS
mdefine_line|#define&t;A_GETSIGNALS&t;(ASYCMD | 8)
DECL|macro|A_SETSIGNALS
mdefine_line|#define&t;A_SETSIGNALS&t;(ASYCMD | 9)
DECL|macro|A_SETSIGNALSF
mdefine_line|#define&t;A_SETSIGNALSF&t;(ASYCMD | 10)
DECL|macro|A_SETSIGNALSFTX
mdefine_line|#define&t;A_SETSIGNALSFTX&t;(ASYCMD | 11)
DECL|macro|A_SETSIGNALSFRX
mdefine_line|#define&t;A_SETSIGNALSFRX&t;(ASYCMD | 12)
DECL|macro|A_GETNOTIFY
mdefine_line|#define&t;A_GETNOTIFY&t;(ASYCMD | 13)
DECL|macro|A_SETNOTIFY
mdefine_line|#define&t;A_SETNOTIFY&t;(ASYCMD | 14)
DECL|macro|A_NOTIFY
mdefine_line|#define&t;A_NOTIFY&t;(ASYCMD | 15)
DECL|macro|A_PORTCTRL
mdefine_line|#define&t;A_PORTCTRL&t;(ASYCMD | 16)
DECL|macro|A_GETSTATS
mdefine_line|#define&t;A_GETSTATS&t;(ASYCMD | 17)
DECL|macro|A_RQSTATE
mdefine_line|#define&t;A_RQSTATE&t;(ASYCMD | 18)
DECL|macro|A_FLOWSTATE
mdefine_line|#define&t;A_FLOWSTATE&t;(ASYCMD | 19)
DECL|macro|A_CLEARSTATS
mdefine_line|#define&t;A_CLEARSTATS&t;(ASYCMD | 20)
multiline_comment|/*&n; *&t;Define those arguments used for simple commands.&n; */
DECL|macro|FLUSHRX
mdefine_line|#define&t;FLUSHRX&t;&t;0x1
DECL|macro|FLUSHTX
mdefine_line|#define&t;FLUSHTX&t;&t;0x2
DECL|macro|BREAKON
mdefine_line|#define&t;BREAKON&t;&t;-1
DECL|macro|BREAKOFF
mdefine_line|#define&t;BREAKOFF&t;-2
multiline_comment|/*&n; *&t;Define the port setting structure, and all those defines that go along&n; *&t;with it. Basically this structure defines the characteristics of this&n; *&t;port: baud rate, chars, parity, input/output char cooking etc.&n; */
DECL|struct|asyport
r_typedef
r_struct
id|asyport
(brace
DECL|member|baudout
r_int
r_int
id|baudout
suffix:semicolon
DECL|member|baudin
r_int
r_int
id|baudin
suffix:semicolon
DECL|member|iflag
r_int
r_int
id|iflag
suffix:semicolon
DECL|member|oflag
r_int
r_int
id|oflag
suffix:semicolon
DECL|member|lflag
r_int
r_int
id|lflag
suffix:semicolon
DECL|member|pflag
r_int
r_int
id|pflag
suffix:semicolon
DECL|member|flow
r_int
r_int
id|flow
suffix:semicolon
DECL|member|spare1
r_int
r_int
id|spare1
suffix:semicolon
DECL|member|vtime
r_int
r_int
id|vtime
suffix:semicolon
DECL|member|vmin
r_int
r_int
id|vmin
suffix:semicolon
DECL|member|txlo
r_int
r_int
id|txlo
suffix:semicolon
DECL|member|txhi
r_int
r_int
id|txhi
suffix:semicolon
DECL|member|rxlo
r_int
r_int
id|rxlo
suffix:semicolon
DECL|member|rxhi
r_int
r_int
id|rxhi
suffix:semicolon
DECL|member|rxhog
r_int
r_int
id|rxhog
suffix:semicolon
DECL|member|spare2
r_int
r_int
id|spare2
suffix:semicolon
DECL|member|csize
r_int
r_char
id|csize
suffix:semicolon
DECL|member|stopbs
r_int
r_char
id|stopbs
suffix:semicolon
DECL|member|parity
r_int
r_char
id|parity
suffix:semicolon
DECL|member|stopin
r_int
r_char
id|stopin
suffix:semicolon
DECL|member|startin
r_int
r_char
id|startin
suffix:semicolon
DECL|member|stopout
r_int
r_char
id|stopout
suffix:semicolon
DECL|member|startout
r_int
r_char
id|startout
suffix:semicolon
DECL|member|parmark
r_int
r_char
id|parmark
suffix:semicolon
DECL|member|brkmark
r_int
r_char
id|brkmark
suffix:semicolon
DECL|member|cc
r_int
r_char
id|cc
(braket
l_int|11
)braket
suffix:semicolon
DECL|typedef|asyport_t
)brace
id|asyport_t
suffix:semicolon
DECL|macro|PT_STOP1
mdefine_line|#define&t;PT_STOP1&t;0x0
DECL|macro|PT_STOP15
mdefine_line|#define&t;PT_STOP15&t;0x1
DECL|macro|PT_STOP2
mdefine_line|#define&t;PT_STOP2&t;0x2
DECL|macro|PT_NOPARITY
mdefine_line|#define&t;PT_NOPARITY&t;0x0
DECL|macro|PT_ODDPARITY
mdefine_line|#define&t;PT_ODDPARITY&t;0x1
DECL|macro|PT_EVENPARITY
mdefine_line|#define&t;PT_EVENPARITY&t;0x2
DECL|macro|PT_MARKPARITY
mdefine_line|#define&t;PT_MARKPARITY&t;0x3
DECL|macro|PT_SPACEPARITY
mdefine_line|#define&t;PT_SPACEPARITY&t;0x4
DECL|macro|F_NONE
mdefine_line|#define&t;F_NONE&t;&t;0x0
DECL|macro|F_IXON
mdefine_line|#define&t;F_IXON&t;&t;0x1
DECL|macro|F_IXOFF
mdefine_line|#define&t;F_IXOFF&t;&t;0x2
DECL|macro|F_IXANY
mdefine_line|#define&t;F_IXANY&t;&t;0x4
DECL|macro|F_IOXANY
mdefine_line|#define&t;F_IOXANY&t;0x8
DECL|macro|F_RTSFLOW
mdefine_line|#define&t;F_RTSFLOW&t;0x10
DECL|macro|F_CTSFLOW
mdefine_line|#define&t;F_CTSFLOW&t;0x20
DECL|macro|F_DTRFLOW
mdefine_line|#define&t;F_DTRFLOW&t;0x40
DECL|macro|F_DCDFLOW
mdefine_line|#define&t;F_DCDFLOW&t;0x80
DECL|macro|F_DSROFLOW
mdefine_line|#define&t;F_DSROFLOW&t;0x100
DECL|macro|F_DSRIFLOW
mdefine_line|#define&t;F_DSRIFLOW&t;0x200
DECL|macro|FI_NORX
mdefine_line|#define&t;FI_NORX&t;&t;0x1
DECL|macro|FI_RAW
mdefine_line|#define&t;FI_RAW&t;&t;0x2
DECL|macro|FI_ISTRIP
mdefine_line|#define&t;FI_ISTRIP&t;0x4
DECL|macro|FI_UCLC
mdefine_line|#define&t;FI_UCLC&t;&t;0x8
DECL|macro|FI_INLCR
mdefine_line|#define&t;FI_INLCR&t;0x10
DECL|macro|FI_ICRNL
mdefine_line|#define&t;FI_ICRNL&t;0x20
DECL|macro|FI_IGNCR
mdefine_line|#define&t;FI_IGNCR&t;0x40
DECL|macro|FI_IGNBREAK
mdefine_line|#define&t;FI_IGNBREAK&t;0x80
DECL|macro|FI_DSCRDBREAK
mdefine_line|#define&t;FI_DSCRDBREAK&t;0x100
DECL|macro|FI_1MARKBREAK
mdefine_line|#define&t;FI_1MARKBREAK&t;0x200
DECL|macro|FI_2MARKBREAK
mdefine_line|#define&t;FI_2MARKBREAK&t;0x400
DECL|macro|FI_XCHNGBREAK
mdefine_line|#define&t;FI_XCHNGBREAK&t;0x800
DECL|macro|FI_IGNRXERRS
mdefine_line|#define&t;FI_IGNRXERRS&t;0x1000
DECL|macro|FI_DSCDRXERRS
mdefine_line|#define&t;FI_DSCDRXERRS&t;0x2000
DECL|macro|FI_1MARKRXERRS
mdefine_line|#define&t;FI_1MARKRXERRS&t;0x4000
DECL|macro|FI_2MARKRXERRS
mdefine_line|#define&t;FI_2MARKRXERRS&t;0x8000
DECL|macro|FI_XCHNGRXERRS
mdefine_line|#define&t;FI_XCHNGRXERRS&t;0x10000
DECL|macro|FI_DSCRDNULL
mdefine_line|#define&t;FI_DSCRDNULL&t;0x20000
DECL|macro|FO_OLCUC
mdefine_line|#define&t;FO_OLCUC&t;0x1
DECL|macro|FO_ONLCR
mdefine_line|#define&t;FO_ONLCR&t;0x2
DECL|macro|FO_OOCRNL
mdefine_line|#define&t;FO_OOCRNL&t;0x4
DECL|macro|FO_ONOCR
mdefine_line|#define&t;FO_ONOCR&t;0x8
DECL|macro|FO_ONLRET
mdefine_line|#define&t;FO_ONLRET&t;0x10
DECL|macro|FO_ONL
mdefine_line|#define&t;FO_ONL&t;&t;0x20
DECL|macro|FO_OBS
mdefine_line|#define&t;FO_OBS&t;&t;0x40
DECL|macro|FO_OVT
mdefine_line|#define&t;FO_OVT&t;&t;0x80
DECL|macro|FO_OFF
mdefine_line|#define&t;FO_OFF&t;&t;0x100
DECL|macro|FO_OTAB1
mdefine_line|#define&t;FO_OTAB1&t;0x200
DECL|macro|FO_OTAB2
mdefine_line|#define&t;FO_OTAB2&t;0x400
DECL|macro|FO_OTAB3
mdefine_line|#define&t;FO_OTAB3&t;0x800
DECL|macro|FO_OCR1
mdefine_line|#define&t;FO_OCR1&t;&t;0x1000
DECL|macro|FO_OCR2
mdefine_line|#define&t;FO_OCR2&t;&t;0x2000
DECL|macro|FO_OCR3
mdefine_line|#define&t;FO_OCR3&t;&t;0x4000
DECL|macro|FO_OFILL
mdefine_line|#define&t;FO_OFILL&t;0x8000
DECL|macro|FO_ODELL
mdefine_line|#define&t;FO_ODELL&t;0x10000
DECL|macro|P_RTSLOCK
mdefine_line|#define&t;P_RTSLOCK&t;0x1
DECL|macro|P_CTSLOCK
mdefine_line|#define&t;P_CTSLOCK&t;0x2
DECL|macro|P_MAPRTS
mdefine_line|#define&t;P_MAPRTS&t;0x4
DECL|macro|P_MAPCTS
mdefine_line|#define&t;P_MAPCTS&t;0x8
DECL|macro|P_LOOPBACK
mdefine_line|#define&t;P_LOOPBACK&t;0x10
DECL|macro|P_DTRFOLLOW
mdefine_line|#define&t;P_DTRFOLLOW&t;0x20
DECL|macro|P_FAKEDCD
mdefine_line|#define&t;P_FAKEDCD&t;0x40
DECL|macro|P_RXIMIN
mdefine_line|#define&t;P_RXIMIN&t;0x10000
DECL|macro|P_RXITIME
mdefine_line|#define&t;P_RXITIME&t;0x20000
DECL|macro|P_RXTHOLD
mdefine_line|#define&t;P_RXTHOLD&t;0x40000
multiline_comment|/*&n; *&t;Define a structure to communicate serial port signal and data state&n; *&t;information.&n; */
DECL|struct|asysigs
r_typedef
r_struct
id|asysigs
(brace
DECL|member|data
r_int
r_int
id|data
suffix:semicolon
DECL|member|signal
r_int
r_int
id|signal
suffix:semicolon
DECL|member|sigvalue
r_int
r_int
id|sigvalue
suffix:semicolon
DECL|typedef|asysigs_t
)brace
id|asysigs_t
suffix:semicolon
DECL|macro|DT_TXBUSY
mdefine_line|#define&t;DT_TXBUSY&t;0x1
DECL|macro|DT_TXEMPTY
mdefine_line|#define&t;DT_TXEMPTY&t;0x2
DECL|macro|DT_TXLOW
mdefine_line|#define&t;DT_TXLOW&t;0x4
DECL|macro|DT_TXHIGH
mdefine_line|#define&t;DT_TXHIGH&t;0x8
DECL|macro|DT_TXFULL
mdefine_line|#define&t;DT_TXFULL&t;0x10
DECL|macro|DT_TXHOG
mdefine_line|#define&t;DT_TXHOG&t;0x20
DECL|macro|DT_TXFLOWED
mdefine_line|#define&t;DT_TXFLOWED&t;0x40
DECL|macro|DT_TXBREAK
mdefine_line|#define&t;DT_TXBREAK&t;0x80
DECL|macro|DT_RXBUSY
mdefine_line|#define&t;DT_RXBUSY&t;0x100
DECL|macro|DT_RXEMPTY
mdefine_line|#define&t;DT_RXEMPTY&t;0x200
DECL|macro|DT_RXLOW
mdefine_line|#define&t;DT_RXLOW&t;0x400
DECL|macro|DT_RXHIGH
mdefine_line|#define&t;DT_RXHIGH&t;0x800
DECL|macro|DT_RXFULL
mdefine_line|#define&t;DT_RXFULL&t;0x1000
DECL|macro|DT_RXHOG
mdefine_line|#define&t;DT_RXHOG&t;0x2000
DECL|macro|DT_RXFLOWED
mdefine_line|#define&t;DT_RXFLOWED&t;0x4000
DECL|macro|DT_RXBREAK
mdefine_line|#define&t;DT_RXBREAK&t;0x8000
DECL|macro|SG_DTR
mdefine_line|#define&t;SG_DTR&t;&t;0x1
DECL|macro|SG_DCD
mdefine_line|#define&t;SG_DCD&t;&t;0x2
DECL|macro|SG_RTS
mdefine_line|#define&t;SG_RTS&t;&t;0x4
DECL|macro|SG_CTS
mdefine_line|#define&t;SG_CTS&t;&t;0x8
DECL|macro|SG_DSR
mdefine_line|#define&t;SG_DSR&t;&t;0x10
DECL|macro|SG_RI
mdefine_line|#define&t;SG_RI&t;&t;0x20
multiline_comment|/*&n; *&t;Define the notification setting structure. This is used to tell the&n; *&t;port what events we want to be informed about. Fields here use the&n; *&t;same defines as for the asysigs structure above.&n; */
DECL|struct|asynotify
r_typedef
r_struct
id|asynotify
(brace
DECL|member|ctrl
r_int
r_int
id|ctrl
suffix:semicolon
DECL|member|data
r_int
r_int
id|data
suffix:semicolon
DECL|member|signal
r_int
r_int
id|signal
suffix:semicolon
DECL|member|sigvalue
r_int
r_int
id|sigvalue
suffix:semicolon
DECL|typedef|asynotify_t
)brace
id|asynotify_t
suffix:semicolon
multiline_comment|/*&n; *&t;Define the port control structure. It is used to do fine grain&n; *&t;control operations on the port.&n; */
r_typedef
r_struct
(brace
DECL|member|rxctrl
r_int
r_int
id|rxctrl
suffix:semicolon
DECL|member|txctrl
r_int
r_int
id|txctrl
suffix:semicolon
DECL|member|rximdch
r_char
id|rximdch
suffix:semicolon
DECL|member|tximdch
r_char
id|tximdch
suffix:semicolon
DECL|member|spare1
r_char
id|spare1
suffix:semicolon
DECL|member|spare2
r_char
id|spare2
suffix:semicolon
DECL|typedef|asyctrl_t
)brace
id|asyctrl_t
suffix:semicolon
DECL|macro|CT_ENABLE
mdefine_line|#define&t;CT_ENABLE&t;0x1
DECL|macro|CT_DISABLE
mdefine_line|#define&t;CT_DISABLE&t;0x2
DECL|macro|CT_STOP
mdefine_line|#define&t;CT_STOP&t;&t;0x4
DECL|macro|CT_START
mdefine_line|#define&t;CT_START&t;0x8
DECL|macro|CT_STARTFLOW
mdefine_line|#define&t;CT_STARTFLOW&t;0x10
DECL|macro|CT_STOPFLOW
mdefine_line|#define&t;CT_STOPFLOW&t;0x20
DECL|macro|CT_SENDCHR
mdefine_line|#define&t;CT_SENDCHR&t;0x40
multiline_comment|/*&n; *&t;Define the stats structure kept for each port. This is a useful set&n; *&t;of data collected for each port on the slave. The A_GETSTATS command&n; *&t;is used to retrieve this data from the slave.&n; */
DECL|struct|asystats
r_typedef
r_struct
id|asystats
(brace
DECL|member|opens
r_int
r_int
id|opens
suffix:semicolon
DECL|member|txchars
r_int
r_int
id|txchars
suffix:semicolon
DECL|member|rxchars
r_int
r_int
id|rxchars
suffix:semicolon
DECL|member|txringq
r_int
r_int
id|txringq
suffix:semicolon
DECL|member|rxringq
r_int
r_int
id|rxringq
suffix:semicolon
DECL|member|txmsgs
r_int
r_int
id|txmsgs
suffix:semicolon
DECL|member|rxmsgs
r_int
r_int
id|rxmsgs
suffix:semicolon
DECL|member|txflushes
r_int
r_int
id|txflushes
suffix:semicolon
DECL|member|rxflushes
r_int
r_int
id|rxflushes
suffix:semicolon
DECL|member|overruns
r_int
r_int
id|overruns
suffix:semicolon
DECL|member|framing
r_int
r_int
id|framing
suffix:semicolon
DECL|member|parity
r_int
r_int
id|parity
suffix:semicolon
DECL|member|ringover
r_int
r_int
id|ringover
suffix:semicolon
DECL|member|lost
r_int
r_int
id|lost
suffix:semicolon
DECL|member|rxstart
r_int
r_int
id|rxstart
suffix:semicolon
DECL|member|rxstop
r_int
r_int
id|rxstop
suffix:semicolon
DECL|member|txstart
r_int
r_int
id|txstart
suffix:semicolon
DECL|member|txstop
r_int
r_int
id|txstop
suffix:semicolon
DECL|member|dcdcnt
r_int
r_int
id|dcdcnt
suffix:semicolon
DECL|member|dtrcnt
r_int
r_int
id|dtrcnt
suffix:semicolon
DECL|member|ctscnt
r_int
r_int
id|ctscnt
suffix:semicolon
DECL|member|rtscnt
r_int
r_int
id|rtscnt
suffix:semicolon
DECL|member|dsrcnt
r_int
r_int
id|dsrcnt
suffix:semicolon
DECL|member|ricnt
r_int
r_int
id|ricnt
suffix:semicolon
DECL|member|txbreaks
r_int
r_int
id|txbreaks
suffix:semicolon
DECL|member|rxbreaks
r_int
r_int
id|rxbreaks
suffix:semicolon
DECL|member|signals
r_int
r_int
id|signals
suffix:semicolon
DECL|member|state
r_int
r_int
id|state
suffix:semicolon
DECL|member|hwid
r_int
r_int
id|hwid
suffix:semicolon
DECL|typedef|asystats_t
)brace
id|asystats_t
suffix:semicolon
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; *&t;All command and control communication with a device on the slave is&n; *&t;via a control block in shared memory. Each device has its own control&n; *&t;block, defined by the following structure. The control block allows&n; *&t;the host to open, close and control the device on the slave.&n; */
DECL|struct|cdkctrl
r_typedef
r_struct
id|cdkctrl
(brace
DECL|member|open
r_int
r_char
id|open
suffix:semicolon
DECL|member|close
r_int
r_char
id|close
suffix:semicolon
DECL|member|openarg
r_int
r_int
id|openarg
suffix:semicolon
DECL|member|closearg
r_int
r_int
id|closearg
suffix:semicolon
DECL|member|cmd
r_int
r_int
id|cmd
suffix:semicolon
DECL|member|status
r_int
r_int
id|status
suffix:semicolon
DECL|member|args
r_int
r_int
id|args
(braket
l_int|32
)braket
suffix:semicolon
DECL|typedef|cdkctrl_t
)brace
id|cdkctrl_t
suffix:semicolon
multiline_comment|/*&n; *&t;Each device on the slave passes data to and from the host via a ring&n; *&t;queue in shared memory. Define a ring queue structure to hold the&n; *&t;vital information about each ring queue. Two ring queues will be&n; *&t;allocated for each port, one for receive data and one for transmit&n; *&t;data.&n; */
DECL|struct|cdkasyrq
r_typedef
r_struct
id|cdkasyrq
(brace
DECL|member|offset
r_int
r_int
id|offset
suffix:semicolon
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|head
r_int
r_int
id|head
suffix:semicolon
DECL|member|tail
r_int
r_int
id|tail
suffix:semicolon
DECL|typedef|cdkasyrq_t
)brace
id|cdkasyrq_t
suffix:semicolon
multiline_comment|/*&n; *&t;Each asynchronous port is defined in shared memory by the following&n; *&t;structure. It contains a control block to command a device, and also&n; *&t;the necessary data channel information as well.&n; */
DECL|struct|cdkasy
r_typedef
r_struct
id|cdkasy
(brace
DECL|member|ctrl
id|cdkctrl_t
id|ctrl
suffix:semicolon
DECL|member|notify
r_int
r_int
id|notify
suffix:semicolon
DECL|member|changed
id|asynotify_t
id|changed
suffix:semicolon
DECL|member|receive
r_int
r_int
id|receive
suffix:semicolon
DECL|member|rxq
id|cdkasyrq_t
id|rxq
suffix:semicolon
DECL|member|transmit
r_int
r_int
id|transmit
suffix:semicolon
DECL|member|txq
id|cdkasyrq_t
id|txq
suffix:semicolon
DECL|typedef|cdkasy_t
)brace
id|cdkasy_t
suffix:semicolon
macro_line|#pragma&t;pack()
multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; *&t;Define the set of ioctls used by the driver to do special things&n; *&t;to the board. These include interrupting it, and initializing&n; *&t;the driver after board startup and shutdown.&n; */
macro_line|#include &lt;linux/ioctl.h&gt;
DECL|macro|STL_BINTR
mdefine_line|#define&t;STL_BINTR&t;_IO(&squot;s&squot;,20)
DECL|macro|STL_BSTART
mdefine_line|#define&t;STL_BSTART&t;_IO(&squot;s&squot;,21)
DECL|macro|STL_BSTOP
mdefine_line|#define&t;STL_BSTOP&t;_IO(&squot;s&squot;,22)
DECL|macro|STL_BRESET
mdefine_line|#define&t;STL_BRESET&t;_IO(&squot;s&squot;,23)
multiline_comment|/*&n; *&t;Define a set of ioctl extensions, used to get at special stuff.&n; */
DECL|macro|STL_GETPFLAG
mdefine_line|#define&t;STL_GETPFLAG&t;_IO(&squot;s&squot;,80)
DECL|macro|STL_SETPFLAG
mdefine_line|#define&t;STL_SETPFLAG&t;_IO(&squot;s&squot;,81)
multiline_comment|/*****************************************************************************/
macro_line|#endif
eof
