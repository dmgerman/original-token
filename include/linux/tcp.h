multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the TCP protocol.&n; *&n; * Version:&t;@(#)tcp.h&t;1.0.2&t;04/28/93&n; *&n; * Author:&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _LINUX_TCP_H
DECL|macro|_LINUX_TCP_H
mdefine_line|#define _LINUX_TCP_H
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
DECL|struct|tcphdr
r_struct
id|tcphdr
(brace
DECL|member|source
id|__u16
id|source
suffix:semicolon
DECL|member|dest
id|__u16
id|dest
suffix:semicolon
DECL|member|seq
id|__u32
id|seq
suffix:semicolon
DECL|member|ack_seq
id|__u32
id|ack_seq
suffix:semicolon
macro_line|#if defined(__LITTLE_ENDIAN_BITFIELD)
DECL|member|res1
id|__u16
id|res1
suffix:colon
l_int|4
comma
DECL|member|doff
id|doff
suffix:colon
l_int|4
comma
DECL|member|fin
id|fin
suffix:colon
l_int|1
comma
DECL|member|syn
id|syn
suffix:colon
l_int|1
comma
DECL|member|rst
id|rst
suffix:colon
l_int|1
comma
DECL|member|psh
id|psh
suffix:colon
l_int|1
comma
DECL|member|ack
id|ack
suffix:colon
l_int|1
comma
DECL|member|urg
id|urg
suffix:colon
l_int|1
comma
DECL|member|ece
id|ece
suffix:colon
l_int|1
comma
DECL|member|cwr
id|cwr
suffix:colon
l_int|1
suffix:semicolon
macro_line|#elif defined(__BIG_ENDIAN_BITFIELD)
DECL|member|doff
id|__u16
id|doff
suffix:colon
l_int|4
comma
DECL|member|res1
id|res1
suffix:colon
l_int|4
comma
DECL|member|cwr
id|cwr
suffix:colon
l_int|1
comma
DECL|member|ece
id|ece
suffix:colon
l_int|1
comma
DECL|member|urg
id|urg
suffix:colon
l_int|1
comma
DECL|member|ack
id|ack
suffix:colon
l_int|1
comma
DECL|member|psh
id|psh
suffix:colon
l_int|1
comma
DECL|member|rst
id|rst
suffix:colon
l_int|1
comma
DECL|member|syn
id|syn
suffix:colon
l_int|1
comma
DECL|member|fin
id|fin
suffix:colon
l_int|1
suffix:semicolon
macro_line|#else
macro_line|#error&t;&quot;Adjust your &lt;asm/byteorder.h&gt; defines&quot;
macro_line|#endif&t;
DECL|member|window
id|__u16
id|window
suffix:semicolon
DECL|member|check
id|__u16
id|check
suffix:semicolon
DECL|member|urg_ptr
id|__u16
id|urg_ptr
suffix:semicolon
)brace
suffix:semicolon
r_enum
(brace
DECL|enumerator|TCP_ESTABLISHED
id|TCP_ESTABLISHED
op_assign
l_int|1
comma
DECL|enumerator|TCP_SYN_SENT
id|TCP_SYN_SENT
comma
DECL|enumerator|TCP_SYN_RECV
id|TCP_SYN_RECV
comma
DECL|enumerator|TCP_FIN_WAIT1
id|TCP_FIN_WAIT1
comma
DECL|enumerator|TCP_FIN_WAIT2
id|TCP_FIN_WAIT2
comma
DECL|enumerator|TCP_TIME_WAIT
id|TCP_TIME_WAIT
comma
DECL|enumerator|TCP_CLOSE
id|TCP_CLOSE
comma
DECL|enumerator|TCP_CLOSE_WAIT
id|TCP_CLOSE_WAIT
comma
DECL|enumerator|TCP_LAST_ACK
id|TCP_LAST_ACK
comma
DECL|enumerator|TCP_LISTEN
id|TCP_LISTEN
comma
DECL|enumerator|TCP_CLOSING
id|TCP_CLOSING
comma
multiline_comment|/* now a valid state */
DECL|enumerator|TCP_MAX_STATES
id|TCP_MAX_STATES
multiline_comment|/* Leave at the end! */
)brace
suffix:semicolon
DECL|macro|TCP_STATE_MASK
mdefine_line|#define TCP_STATE_MASK&t;0xF
DECL|macro|TCP_ACTION_FIN
mdefine_line|#define TCP_ACTION_FIN&t;(1 &lt;&lt; 7)
r_enum
(brace
DECL|enumerator|TCPF_ESTABLISHED
id|TCPF_ESTABLISHED
op_assign
(paren
l_int|1
op_lshift
l_int|1
)paren
comma
DECL|enumerator|TCPF_SYN_SENT
id|TCPF_SYN_SENT
op_assign
(paren
l_int|1
op_lshift
l_int|2
)paren
comma
DECL|enumerator|TCPF_SYN_RECV
id|TCPF_SYN_RECV
op_assign
(paren
l_int|1
op_lshift
l_int|3
)paren
comma
DECL|enumerator|TCPF_FIN_WAIT1
id|TCPF_FIN_WAIT1
op_assign
(paren
l_int|1
op_lshift
l_int|4
)paren
comma
DECL|enumerator|TCPF_FIN_WAIT2
id|TCPF_FIN_WAIT2
op_assign
(paren
l_int|1
op_lshift
l_int|5
)paren
comma
DECL|enumerator|TCPF_TIME_WAIT
id|TCPF_TIME_WAIT
op_assign
(paren
l_int|1
op_lshift
l_int|6
)paren
comma
DECL|enumerator|TCPF_CLOSE
id|TCPF_CLOSE
op_assign
(paren
l_int|1
op_lshift
l_int|7
)paren
comma
DECL|enumerator|TCPF_CLOSE_WAIT
id|TCPF_CLOSE_WAIT
op_assign
(paren
l_int|1
op_lshift
l_int|8
)paren
comma
DECL|enumerator|TCPF_LAST_ACK
id|TCPF_LAST_ACK
op_assign
(paren
l_int|1
op_lshift
l_int|9
)paren
comma
DECL|enumerator|TCPF_LISTEN
id|TCPF_LISTEN
op_assign
(paren
l_int|1
op_lshift
l_int|10
)paren
comma
DECL|enumerator|TCPF_CLOSING
id|TCPF_CLOSING
op_assign
(paren
l_int|1
op_lshift
l_int|11
)paren
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;The union cast uses a gcc extension to avoid aliasing problems&n; *  (union is compatible to any of its members)&n; *  This means this part of the code is -fstrict-aliasing safe now.&n; */
DECL|union|tcp_word_hdr
r_union
id|tcp_word_hdr
(brace
DECL|member|hdr
r_struct
id|tcphdr
id|hdr
suffix:semicolon
DECL|member|words
id|__u32
id|words
(braket
l_int|5
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|tcp_flag_word
mdefine_line|#define tcp_flag_word(tp) ( ((union tcp_word_hdr *)(tp))-&gt;words [3]) 
r_enum
(brace
DECL|enumerator|TCP_FLAG_CWR
id|TCP_FLAG_CWR
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00800000
)paren
comma
DECL|enumerator|TCP_FLAG_ECE
id|TCP_FLAG_ECE
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00400000
)paren
comma
DECL|enumerator|TCP_FLAG_URG
id|TCP_FLAG_URG
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00200000
)paren
comma
DECL|enumerator|TCP_FLAG_ACK
id|TCP_FLAG_ACK
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00100000
)paren
comma
DECL|enumerator|TCP_FLAG_PSH
id|TCP_FLAG_PSH
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00080000
)paren
comma
DECL|enumerator|TCP_FLAG_RST
id|TCP_FLAG_RST
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00040000
)paren
comma
DECL|enumerator|TCP_FLAG_SYN
id|TCP_FLAG_SYN
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00020000
)paren
comma
DECL|enumerator|TCP_FLAG_FIN
id|TCP_FLAG_FIN
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x00010000
)paren
comma
DECL|enumerator|TCP_RESERVED_BITS
id|TCP_RESERVED_BITS
op_assign
id|__constant_htonl
c_func
(paren
l_int|0x0FC00000
)paren
comma
DECL|enumerator|TCP_DATA_OFFSET
id|TCP_DATA_OFFSET
op_assign
id|__constant_htonl
c_func
(paren
l_int|0xF0000000
)paren
)brace
suffix:semicolon
multiline_comment|/* TCP socket options */
DECL|macro|TCP_NODELAY
mdefine_line|#define TCP_NODELAY&t;&t;1&t;/* Turn off Nagle&squot;s algorithm. */
DECL|macro|TCP_MAXSEG
mdefine_line|#define TCP_MAXSEG&t;&t;2&t;/* Limit MSS */
DECL|macro|TCP_CORK
mdefine_line|#define TCP_CORK&t;&t;3&t;/* Never send partially complete segments */
DECL|macro|TCP_KEEPIDLE
mdefine_line|#define TCP_KEEPIDLE&t;&t;4&t;/* Start keeplives after this period */
DECL|macro|TCP_KEEPINTVL
mdefine_line|#define TCP_KEEPINTVL&t;&t;5&t;/* Interval between keepalives */
DECL|macro|TCP_KEEPCNT
mdefine_line|#define TCP_KEEPCNT&t;&t;6&t;/* Number of keepalives before death */
DECL|macro|TCP_SYNCNT
mdefine_line|#define TCP_SYNCNT&t;&t;7&t;/* Number of SYN retransmits */
DECL|macro|TCP_LINGER2
mdefine_line|#define TCP_LINGER2&t;&t;8&t;/* Life time of orphaned FIN-WAIT-2 state */
DECL|macro|TCP_DEFER_ACCEPT
mdefine_line|#define TCP_DEFER_ACCEPT&t;9&t;/* Wake up listener only when data arrive */
DECL|macro|TCP_WINDOW_CLAMP
mdefine_line|#define TCP_WINDOW_CLAMP&t;10&t;/* Bound advertised window */
DECL|macro|TCP_INFO
mdefine_line|#define TCP_INFO&t;&t;11&t;/* Information about this connection. */
DECL|macro|TCPI_OPT_TIMESTAMPS
mdefine_line|#define TCPI_OPT_TIMESTAMPS&t;1
DECL|macro|TCPI_OPT_SACK
mdefine_line|#define TCPI_OPT_SACK&t;&t;2
DECL|macro|TCPI_OPT_WSCALE
mdefine_line|#define TCPI_OPT_WSCALE&t;&t;4
DECL|macro|TCPI_OPT_ECN
mdefine_line|#define TCPI_OPT_ECN&t;&t;8
DECL|enum|tcp_ca_state
r_enum
id|tcp_ca_state
(brace
DECL|enumerator|TCP_CA_Open
id|TCP_CA_Open
op_assign
l_int|0
comma
DECL|macro|TCPF_CA_Open
mdefine_line|#define TCPF_CA_Open&t;(1&lt;&lt;TCP_CA_Open)
DECL|enumerator|TCP_CA_Disorder
id|TCP_CA_Disorder
op_assign
l_int|1
comma
DECL|macro|TCPF_CA_Disorder
mdefine_line|#define TCPF_CA_Disorder (1&lt;&lt;TCP_CA_Disorder)
DECL|enumerator|TCP_CA_CWR
id|TCP_CA_CWR
op_assign
l_int|2
comma
DECL|macro|TCPF_CA_CWR
mdefine_line|#define TCPF_CA_CWR&t;(1&lt;&lt;TCP_CA_CWR)
DECL|enumerator|TCP_CA_Recovery
id|TCP_CA_Recovery
op_assign
l_int|3
comma
DECL|macro|TCPF_CA_Recovery
mdefine_line|#define TCPF_CA_Recovery (1&lt;&lt;TCP_CA_Recovery)
DECL|enumerator|TCP_CA_Loss
id|TCP_CA_Loss
op_assign
l_int|4
DECL|macro|TCPF_CA_Loss
mdefine_line|#define TCPF_CA_Loss&t;(1&lt;&lt;TCP_CA_Loss)
)brace
suffix:semicolon
DECL|struct|tcp_info
r_struct
id|tcp_info
(brace
DECL|member|tcpi_state
id|__u8
id|tcpi_state
suffix:semicolon
DECL|member|tcpi_ca_state
id|__u8
id|tcpi_ca_state
suffix:semicolon
DECL|member|tcpi_retransmits
id|__u8
id|tcpi_retransmits
suffix:semicolon
DECL|member|tcpi_probes
id|__u8
id|tcpi_probes
suffix:semicolon
DECL|member|tcpi_backoff
id|__u8
id|tcpi_backoff
suffix:semicolon
DECL|member|tcpi_options
id|__u8
id|tcpi_options
suffix:semicolon
DECL|member|tcpi_snd_wscale
DECL|member|tcpi_rcv_wscale
id|__u8
id|tcpi_snd_wscale
suffix:colon
l_int|4
comma
id|tcpi_rcv_wscale
suffix:colon
l_int|4
suffix:semicolon
DECL|member|tcpi_rto
id|__u32
id|tcpi_rto
suffix:semicolon
DECL|member|tcpi_ato
id|__u32
id|tcpi_ato
suffix:semicolon
DECL|member|tcpi_snd_mss
id|__u32
id|tcpi_snd_mss
suffix:semicolon
DECL|member|tcpi_rcv_mss
id|__u32
id|tcpi_rcv_mss
suffix:semicolon
DECL|member|tcpi_unacked
id|__u32
id|tcpi_unacked
suffix:semicolon
DECL|member|tcpi_sacked
id|__u32
id|tcpi_sacked
suffix:semicolon
DECL|member|tcpi_lost
id|__u32
id|tcpi_lost
suffix:semicolon
DECL|member|tcpi_retrans
id|__u32
id|tcpi_retrans
suffix:semicolon
DECL|member|tcpi_fackets
id|__u32
id|tcpi_fackets
suffix:semicolon
multiline_comment|/* Times. */
DECL|member|tcpi_last_data_sent
id|__u32
id|tcpi_last_data_sent
suffix:semicolon
DECL|member|tcpi_last_ack_sent
id|__u32
id|tcpi_last_ack_sent
suffix:semicolon
multiline_comment|/* Not remembered, sorry. */
DECL|member|tcpi_last_data_recv
id|__u32
id|tcpi_last_data_recv
suffix:semicolon
DECL|member|tcpi_last_ack_recv
id|__u32
id|tcpi_last_ack_recv
suffix:semicolon
multiline_comment|/* Metrics. */
DECL|member|tcpi_pmtu
id|__u32
id|tcpi_pmtu
suffix:semicolon
DECL|member|tcpi_rcv_ssthresh
id|__u32
id|tcpi_rcv_ssthresh
suffix:semicolon
DECL|member|tcpi_rtt
id|__u32
id|tcpi_rtt
suffix:semicolon
DECL|member|tcpi_rttvar
id|__u32
id|tcpi_rttvar
suffix:semicolon
DECL|member|tcpi_snd_ssthresh
id|__u32
id|tcpi_snd_ssthresh
suffix:semicolon
DECL|member|tcpi_snd_cwnd
id|__u32
id|tcpi_snd_cwnd
suffix:semicolon
DECL|member|tcpi_advmss
id|__u32
id|tcpi_advmss
suffix:semicolon
DECL|member|tcpi_reordering
id|__u32
id|tcpi_reordering
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif&t;/* _LINUX_TCP_H */
eof
