macro_line|#ifndef DALLOC_H
DECL|macro|DALLOC_H
mdefine_line|#define DALLOC_H
multiline_comment|/*&n; * $Id: dalloc.h,v 1.3 1997/06/13 04:39:34 davem Exp $&n; *&n; * include/linux/dalloc.h - alloc routines for dcache&n; * alloc / free space for pathname strings&n; * Copyright (C) 1997, Thomas Schoebel-Theuer,&n; * &lt;schoebel@informatik.uni-stuttgart.de&gt;.&n; */
DECL|macro|D_MAXLEN
mdefine_line|#define D_MAXLEN 1024
multiline_comment|/* public flags for d_add() */
DECL|macro|D_NORMAL
mdefine_line|#define D_NORMAL     0
DECL|macro|D_BASKET
mdefine_line|#define D_BASKET     1 /* put into basket (deleted/unref&squot;d files) */
DECL|macro|D_DUPLICATE
mdefine_line|#define D_DUPLICATE  2 /* allow duplicate entries */
DECL|macro|D_NOCHECKDUP
mdefine_line|#define D_NOCHECKDUP 4 /* no not check for duplicates */
multiline_comment|/* public flags for d_flag */
DECL|macro|D_PRELOADED
mdefine_line|#define D_PRELOADED 8
multiline_comment|/* public flags for d_del() */
DECL|macro|D_REMOVE
mdefine_line|#define D_REMOVE         0
DECL|macro|D_NO_CLEAR_INODE
mdefine_line|#define D_NO_CLEAR_INODE 1
DECL|macro|IS_ROOT
mdefine_line|#define IS_ROOT(x) ((x) == (x)-&gt;d_parent)
multiline_comment|/* &quot;quick string&quot; -- I introduced this to shorten the parameter list&n; * of many routines. Think of it as a (str,stlen) pair.&n; * Storing the len instead of doing strlen() very often is performance&n; * critical.&n; */
DECL|struct|qstr
r_struct
id|qstr
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|len
r_int
id|len
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|dentry
r_struct
id|dentry
(brace
r_union
(brace
DECL|member|d_inode
r_struct
id|inode
op_star
id|d_inode
suffix:semicolon
multiline_comment|/* Where the name belongs to */
DECL|member|d_ino
r_int
r_int
id|d_ino
suffix:semicolon
multiline_comment|/* for preliminary entries */
DECL|member|u
)brace
id|u
suffix:semicolon
DECL|member|d_parent
r_struct
id|dentry
op_star
id|d_parent
suffix:semicolon
multiline_comment|/* parent directory */
DECL|member|d_next
r_struct
id|dentry
op_star
id|d_next
suffix:semicolon
multiline_comment|/* hardlink aliasname / empty list */
DECL|member|d_prev
r_struct
id|dentry
op_star
id|d_prev
suffix:semicolon
multiline_comment|/* hardlink aliasname */
DECL|member|d_hash_next
r_struct
id|dentry
op_star
id|d_hash_next
suffix:semicolon
DECL|member|d_hash_prev
r_struct
id|dentry
op_star
id|d_hash_prev
suffix:semicolon
DECL|member|d_basket_next
r_struct
id|dentry
op_star
id|d_basket_next
suffix:semicolon
DECL|member|d_basket_prev
r_struct
id|dentry
op_star
id|d_basket_prev
suffix:semicolon
DECL|member|d_name
r_struct
id|qstr
id|d_name
suffix:semicolon
DECL|member|d_flag
r_int
r_int
id|d_flag
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|the_root
suffix:semicolon
multiline_comment|/* Note that all these routines must be called with vfs_lock() held */
multiline_comment|/* get inode, if necessary retrieve it with iget() */
r_extern
id|blocking
r_struct
id|inode
op_star
id|d_inode
c_func
(paren
r_struct
id|dentry
op_star
op_star
id|changing_entry
)paren
suffix:semicolon
multiline_comment|/* allocate proper space for the len */
r_extern
r_struct
id|dentry
op_star
id|d_alloc
c_func
(paren
r_struct
id|dentry
op_star
id|parent
comma
r_int
id|len
comma
r_int
id|isdir
)paren
suffix:semicolon
multiline_comment|/* only used once at mount_root() */
r_extern
id|blocking
r_struct
id|dentry
op_star
id|d_alloc_root
c_func
(paren
r_struct
id|inode
op_star
id|root_inode
)paren
suffix:semicolon
multiline_comment|/* d_inode is connected with inode, and d_name is copied from ininame.&n; * either of them may be NULL, but when ininame is NULL, dname must be&n; * set by the caller prior to calling this. */
r_extern
id|blocking
r_void
id|d_add
c_func
(paren
r_struct
id|dentry
op_star
id|entry
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|qstr
op_star
id|ininame
comma
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* combination of d_alloc() and d_add(), less lookup overhead */
r_extern
id|blocking
r_struct
id|dentry
op_star
id|d_entry
c_func
(paren
r_struct
id|dentry
op_star
id|parent
comma
r_struct
id|qstr
op_star
id|name
comma
r_struct
id|inode
op_star
id|inode
)paren
suffix:semicolon
r_extern
id|blocking
r_void
id|d_entry_preliminary
c_func
(paren
r_struct
id|dentry
op_star
id|parent
comma
r_struct
id|qstr
op_star
id|name
comma
r_int
r_int
id|ino
)paren
suffix:semicolon
multiline_comment|/* recursive d_del() all successors */
r_extern
id|blocking
r_void
id|d_del
c_func
(paren
r_struct
id|dentry
op_star
id|entry
comma
r_int
id|flags
)paren
suffix:semicolon
multiline_comment|/* used for rename() and baskets */
r_extern
id|blocking
r_void
id|d_move
c_func
(paren
r_struct
id|dentry
op_star
id|entry
comma
r_struct
id|inode
op_star
id|newdir
comma
r_struct
id|qstr
op_star
id|newname
comma
r_struct
id|qstr
op_star
id|newapp
)paren
suffix:semicolon
multiline_comment|/* appendix may either be NULL or be used for transname suffixes */
r_extern
r_struct
id|dentry
op_star
id|d_lookup
c_func
(paren
r_struct
id|inode
op_star
id|dir
comma
r_struct
id|qstr
op_star
id|name
comma
r_struct
id|qstr
op_star
id|appendix
)paren
suffix:semicolon
multiline_comment|/* write full pathname into buffer and return length */
r_extern
r_int
id|d_path
c_func
(paren
r_struct
id|dentry
op_star
id|entry
comma
r_struct
id|inode
op_star
id|chroot
comma
r_char
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|d_basket
c_func
(paren
r_struct
id|dentry
op_star
id|dir_entry
)paren
suffix:semicolon
r_extern
r_int
id|d_isbasket
c_func
(paren
r_struct
id|dentry
op_star
id|entry
)paren
suffix:semicolon
macro_line|#endif
eof
