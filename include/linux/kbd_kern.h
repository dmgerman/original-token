macro_line|#ifndef _KBD_KERN_H
DECL|macro|_KBD_KERN_H
mdefine_line|#define _KBD_KERN_H
macro_line|#include &lt;linux/interrupt.h&gt;
macro_line|#include &lt;linux/keyboard.h&gt;
r_extern
r_struct
id|tasklet_struct
id|keyboard_tasklet
suffix:semicolon
r_extern
r_int
id|shift_state
suffix:semicolon
r_extern
r_char
op_star
id|func_table
(braket
id|MAX_NR_FUNC
)braket
suffix:semicolon
r_extern
r_char
id|func_buf
(braket
)braket
suffix:semicolon
r_extern
r_char
op_star
id|funcbufptr
suffix:semicolon
r_extern
r_int
id|funcbufsize
comma
id|funcbufleft
suffix:semicolon
multiline_comment|/*&n; * kbd-&gt;xxx contains the VC-local things (flag settings etc..)&n; *&n; * Note: externally visible are LED_SCR, LED_NUM, LED_CAP defined in kd.h&n; *       The code in KDGETLED / KDSETLED depends on the internal and&n; *       external order being the same.&n; *&n; * Note: lockstate is used as index in the array key_map.&n; */
DECL|struct|kbd_struct
r_struct
id|kbd_struct
(brace
DECL|member|lockstate
r_int
r_char
id|lockstate
suffix:semicolon
multiline_comment|/* 8 modifiers - the names do not have any meaning at all;&n;   they can be associated to arbitrarily chosen keys */
DECL|macro|VC_SHIFTLOCK
mdefine_line|#define VC_SHIFTLOCK&t;KG_SHIFT&t;/* shift lock mode */
DECL|macro|VC_ALTGRLOCK
mdefine_line|#define VC_ALTGRLOCK&t;KG_ALTGR&t;/* altgr lock mode */
DECL|macro|VC_CTRLLOCK
mdefine_line|#define VC_CTRLLOCK&t;KG_CTRL &t;/* control lock mode */
DECL|macro|VC_ALTLOCK
mdefine_line|#define VC_ALTLOCK&t;KG_ALT  &t;/* alt lock mode */
DECL|macro|VC_SHIFTLLOCK
mdefine_line|#define VC_SHIFTLLOCK&t;KG_SHIFTL&t;/* shiftl lock mode */
DECL|macro|VC_SHIFTRLOCK
mdefine_line|#define VC_SHIFTRLOCK&t;KG_SHIFTR&t;/* shiftr lock mode */
DECL|macro|VC_CTRLLLOCK
mdefine_line|#define VC_CTRLLLOCK&t;KG_CTRLL &t;/* ctrll lock mode */
DECL|macro|VC_CTRLRLOCK
mdefine_line|#define VC_CTRLRLOCK&t;KG_CTRLR &t;/* ctrlr lock mode */
DECL|member|slockstate
r_int
r_char
id|slockstate
suffix:semicolon
multiline_comment|/* for `sticky&squot; Shift, Ctrl, etc. */
DECL|member|ledmode
r_int
r_char
id|ledmode
suffix:colon
l_int|2
suffix:semicolon
multiline_comment|/* one 2-bit value */
DECL|macro|LED_SHOW_FLAGS
mdefine_line|#define LED_SHOW_FLAGS 0        /* traditional state */
DECL|macro|LED_SHOW_IOCTL
mdefine_line|#define LED_SHOW_IOCTL 1        /* only change leds upon ioctl */
DECL|macro|LED_SHOW_MEM
mdefine_line|#define LED_SHOW_MEM 2          /* `heartbeat&squot;: peek into memory */
DECL|member|ledflagstate
r_int
r_char
id|ledflagstate
suffix:colon
l_int|3
suffix:semicolon
multiline_comment|/* flags, not lights */
DECL|member|default_ledflagstate
r_int
r_char
id|default_ledflagstate
suffix:colon
l_int|3
suffix:semicolon
DECL|macro|VC_SCROLLOCK
mdefine_line|#define VC_SCROLLOCK&t;0&t;/* scroll-lock mode */
DECL|macro|VC_NUMLOCK
mdefine_line|#define VC_NUMLOCK&t;1&t;/* numeric lock mode */
DECL|macro|VC_CAPSLOCK
mdefine_line|#define VC_CAPSLOCK&t;2&t;/* capslock mode */
DECL|member|kbdmode
r_int
r_char
id|kbdmode
suffix:colon
l_int|2
suffix:semicolon
multiline_comment|/* one 2-bit value */
DECL|macro|VC_XLATE
mdefine_line|#define VC_XLATE&t;0&t;/* translate keycodes using keymap */
DECL|macro|VC_MEDIUMRAW
mdefine_line|#define VC_MEDIUMRAW&t;1&t;/* medium raw (keycode) mode */
DECL|macro|VC_RAW
mdefine_line|#define VC_RAW&t;&t;2&t;/* raw (scancode) mode */
DECL|macro|VC_UNICODE
mdefine_line|#define VC_UNICODE&t;3&t;/* Unicode mode */
DECL|member|modeflags
r_int
r_char
id|modeflags
suffix:colon
l_int|5
suffix:semicolon
DECL|macro|VC_APPLIC
mdefine_line|#define VC_APPLIC&t;0&t;/* application key mode */
DECL|macro|VC_CKMODE
mdefine_line|#define VC_CKMODE&t;1&t;/* cursor key mode */
DECL|macro|VC_REPEAT
mdefine_line|#define VC_REPEAT&t;2&t;/* keyboard repeat */
DECL|macro|VC_CRLF
mdefine_line|#define VC_CRLF&t;&t;3&t;/* 0 - enter sends CR, 1 - enter sends CRLF */
DECL|macro|VC_META
mdefine_line|#define VC_META&t;&t;4&t;/* 0 - meta, 1 - meta=prefix with ESC */
)brace
suffix:semicolon
r_extern
r_struct
id|kbd_struct
id|kbd_table
(braket
)braket
suffix:semicolon
r_extern
r_int
id|kbd_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_char
id|getledstate
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|setledstate
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
r_int
id|led
)paren
suffix:semicolon
r_extern
r_struct
id|tasklet_struct
id|console_tasklet
suffix:semicolon
r_extern
r_int
id|do_poke_blanked_console
suffix:semicolon
r_extern
r_void
(paren
op_star
id|kbd_ledfunc
)paren
(paren
r_int
r_int
id|led
)paren
suffix:semicolon
DECL|function|show_console
r_extern
r_inline
r_void
id|show_console
c_func
(paren
r_void
)paren
(brace
id|do_poke_blanked_console
op_assign
l_int|1
suffix:semicolon
id|tasklet_schedule
c_func
(paren
op_amp
id|console_tasklet
)paren
suffix:semicolon
)brace
DECL|function|set_console
r_extern
r_inline
r_void
id|set_console
c_func
(paren
r_int
id|nr
)paren
(brace
id|want_console
op_assign
id|nr
suffix:semicolon
id|tasklet_schedule
c_func
(paren
op_amp
id|console_tasklet
)paren
suffix:semicolon
)brace
DECL|function|set_leds
r_extern
r_inline
r_void
id|set_leds
c_func
(paren
r_void
)paren
(brace
id|tasklet_schedule
c_func
(paren
op_amp
id|keyboard_tasklet
)paren
suffix:semicolon
)brace
DECL|function|vc_kbd_mode
r_extern
r_inline
r_int
id|vc_kbd_mode
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
r_return
(paren
(paren
id|kbd-&gt;modeflags
op_rshift
id|flag
)paren
op_amp
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|vc_kbd_led
r_extern
r_inline
r_int
id|vc_kbd_led
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
r_return
(paren
(paren
id|kbd-&gt;ledflagstate
op_rshift
id|flag
)paren
op_amp
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|set_vc_kbd_mode
r_extern
r_inline
r_void
id|set_vc_kbd_mode
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;modeflags
op_or_assign
l_int|1
op_lshift
id|flag
suffix:semicolon
)brace
DECL|function|set_vc_kbd_led
r_extern
r_inline
r_void
id|set_vc_kbd_led
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;ledflagstate
op_or_assign
l_int|1
op_lshift
id|flag
suffix:semicolon
)brace
DECL|function|clr_vc_kbd_mode
r_extern
r_inline
r_void
id|clr_vc_kbd_mode
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;modeflags
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|flag
)paren
suffix:semicolon
)brace
DECL|function|clr_vc_kbd_led
r_extern
r_inline
r_void
id|clr_vc_kbd_led
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;ledflagstate
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|flag
)paren
suffix:semicolon
)brace
DECL|function|chg_vc_kbd_lock
r_extern
r_inline
r_void
id|chg_vc_kbd_lock
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;lockstate
op_xor_assign
l_int|1
op_lshift
id|flag
suffix:semicolon
)brace
DECL|function|chg_vc_kbd_slock
r_extern
r_inline
r_void
id|chg_vc_kbd_slock
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;slockstate
op_xor_assign
l_int|1
op_lshift
id|flag
suffix:semicolon
)brace
DECL|function|chg_vc_kbd_mode
r_extern
r_inline
r_void
id|chg_vc_kbd_mode
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;modeflags
op_xor_assign
l_int|1
op_lshift
id|flag
suffix:semicolon
)brace
DECL|function|chg_vc_kbd_led
r_extern
r_inline
r_void
id|chg_vc_kbd_led
c_func
(paren
r_struct
id|kbd_struct
op_star
id|kbd
comma
r_int
id|flag
)paren
(brace
id|kbd-&gt;ledflagstate
op_xor_assign
l_int|1
op_lshift
id|flag
suffix:semicolon
)brace
DECL|macro|U
mdefine_line|#define U(x) ((x) ^ 0xf000)
multiline_comment|/* keyboard.c */
r_struct
id|console
suffix:semicolon
r_int
id|getkeycode
c_func
(paren
r_int
r_int
id|scancode
)paren
suffix:semicolon
r_int
id|setkeycode
c_func
(paren
r_int
r_int
id|scancode
comma
r_int
r_int
id|keycode
)paren
suffix:semicolon
r_void
id|compute_shiftstate
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|keyboard_wait_for_keypress
c_func
(paren
r_struct
id|console
op_star
)paren
suffix:semicolon
multiline_comment|/* defkeymap.c */
r_extern
r_int
r_int
id|keymap_count
suffix:semicolon
multiline_comment|/* console.c */
r_extern
id|task_queue
id|con_task_queue
suffix:semicolon
DECL|function|con_schedule_flip
r_extern
r_inline
r_void
id|con_schedule_flip
c_func
(paren
r_struct
id|tty_struct
op_star
id|t
)paren
(brace
id|queue_task
c_func
(paren
op_amp
id|t-&gt;flip.tqueue
comma
op_amp
id|con_task_queue
)paren
suffix:semicolon
id|tasklet_schedule
c_func
(paren
op_amp
id|console_tasklet
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
