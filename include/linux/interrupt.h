multiline_comment|/* interrupt.h */
macro_line|#ifndef _LINUX_INTERRUPT_H
DECL|macro|_LINUX_INTERRUPT_H
mdefine_line|#define _LINUX_INTERRUPT_H
macro_line|#include &lt;asm/bitops.h&gt;
DECL|struct|bh_struct
r_struct
id|bh_struct
(brace
DECL|member|routine
r_void
(paren
op_star
id|routine
)paren
(paren
r_void
op_star
)paren
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_int
r_int
id|bh_active
suffix:semicolon
r_extern
r_int
r_int
id|bh_mask
suffix:semicolon
r_extern
r_struct
id|bh_struct
id|bh_base
(braket
l_int|32
)braket
suffix:semicolon
multiline_comment|/* Who gets which entry in bh_base.  Things which will occur most often&n;   should come first - in which case NET should be up the top with SERIAL/TQUEUE! */
r_enum
(brace
DECL|enumerator|TIMER_BH
id|TIMER_BH
op_assign
l_int|0
comma
DECL|enumerator|CONSOLE_BH
id|CONSOLE_BH
comma
DECL|enumerator|TQUEUE_BH
id|TQUEUE_BH
comma
DECL|enumerator|SERIAL_BH
id|SERIAL_BH
comma
DECL|enumerator|NET_BH
id|NET_BH
comma
DECL|enumerator|IMMEDIATE_BH
id|IMMEDIATE_BH
comma
DECL|enumerator|KEYBOARD_BH
id|KEYBOARD_BH
comma
DECL|enumerator|CYCLADES_BH
id|CYCLADES_BH
)brace
suffix:semicolon
DECL|function|mark_bh
r_extern
r_inline
r_void
id|mark_bh
c_func
(paren
r_int
id|nr
)paren
(brace
id|set_bit
c_func
(paren
id|nr
comma
op_amp
id|bh_active
)paren
suffix:semicolon
)brace
DECL|function|disable_bh
r_extern
r_inline
r_void
id|disable_bh
c_func
(paren
r_int
id|nr
)paren
(brace
id|clear_bit
c_func
(paren
id|nr
comma
op_amp
id|bh_mask
)paren
suffix:semicolon
)brace
DECL|function|enable_bh
r_extern
r_inline
r_void
id|enable_bh
c_func
(paren
r_int
id|nr
)paren
(brace
id|set_bit
c_func
(paren
id|nr
comma
op_amp
id|bh_mask
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
