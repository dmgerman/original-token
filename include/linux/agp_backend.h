multiline_comment|/*&n; * AGPGART module version 0.99&n; * Copyright (C) 1999 Jeff Hartmann&n; * Copyright (C) 1999 Precision Insight, Inc.&n; * Copyright (C) 1999 Xi Graphics, Inc.&n; *&n; * Permission is hereby granted, free of charge, to any person obtaining a&n; * copy of this software and associated documentation files (the &quot;Software&quot;),&n; * to deal in the Software without restriction, including without limitation&n; * the rights to use, copy, modify, merge, publish, distribute, sublicense,&n; * and/or sell copies of the Software, and to permit persons to whom the&n; * Software is furnished to do so, subject to the following conditions:&n; *&n; * The above copyright notice and this permission notice shall be included&n; * in all copies or substantial portions of the Software.&n; *&n; * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&n; * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&n; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL&n; * JEFF HARTMANN, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM, &n; * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR &n; * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE &n; * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&n; *&n; */
macro_line|#ifndef _AGP_BACKEND_H
DECL|macro|_AGP_BACKEND_H
mdefine_line|#define _AGP_BACKEND_H 1
macro_line|#ifndef TRUE
DECL|macro|TRUE
mdefine_line|#define TRUE 1
macro_line|#endif
macro_line|#ifndef FALSE
DECL|macro|FALSE
mdefine_line|#define FALSE 0
macro_line|#endif
DECL|macro|AGPGART_VERSION_MAJOR
mdefine_line|#define AGPGART_VERSION_MAJOR 0
DECL|macro|AGPGART_VERSION_MINOR
mdefine_line|#define AGPGART_VERSION_MINOR 99
DECL|enum|chipset_type
r_enum
id|chipset_type
(brace
DECL|enumerator|NOT_SUPPORTED
id|NOT_SUPPORTED
comma
DECL|enumerator|INTEL_GENERIC
id|INTEL_GENERIC
comma
DECL|enumerator|INTEL_LX
id|INTEL_LX
comma
DECL|enumerator|INTEL_BX
id|INTEL_BX
comma
DECL|enumerator|INTEL_GX
id|INTEL_GX
comma
DECL|enumerator|INTEL_I810
id|INTEL_I810
comma
DECL|enumerator|INTEL_I815
id|INTEL_I815
comma
DECL|enumerator|INTEL_I840
id|INTEL_I840
comma
DECL|enumerator|INTEL_I850
id|INTEL_I850
comma
DECL|enumerator|VIA_GENERIC
id|VIA_GENERIC
comma
DECL|enumerator|VIA_VP3
id|VIA_VP3
comma
DECL|enumerator|VIA_MVP3
id|VIA_MVP3
comma
DECL|enumerator|VIA_MVP4
id|VIA_MVP4
comma
DECL|enumerator|VIA_APOLLO_PRO
id|VIA_APOLLO_PRO
comma
DECL|enumerator|VIA_APOLLO_KX133
id|VIA_APOLLO_KX133
comma
DECL|enumerator|VIA_APOLLO_KT133
id|VIA_APOLLO_KT133
comma
DECL|enumerator|SIS_GENERIC
id|SIS_GENERIC
comma
DECL|enumerator|AMD_GENERIC
id|AMD_GENERIC
comma
DECL|enumerator|AMD_IRONGATE
id|AMD_IRONGATE
comma
DECL|enumerator|ALI_M1541
id|ALI_M1541
comma
DECL|enumerator|ALI_GENERIC
id|ALI_GENERIC
)brace
suffix:semicolon
DECL|struct|_agp_version
r_typedef
r_struct
id|_agp_version
(brace
DECL|member|major
id|u16
id|major
suffix:semicolon
DECL|member|minor
id|u16
id|minor
suffix:semicolon
DECL|typedef|agp_version
)brace
id|agp_version
suffix:semicolon
DECL|struct|_agp_kern_info
r_typedef
r_struct
id|_agp_kern_info
(brace
DECL|member|version
id|agp_version
id|version
suffix:semicolon
DECL|member|device
r_struct
id|pci_dev
op_star
id|device
suffix:semicolon
DECL|member|chipset
r_enum
id|chipset_type
id|chipset
suffix:semicolon
DECL|member|mode
r_int
r_int
id|mode
suffix:semicolon
DECL|member|aper_base
id|off_t
id|aper_base
suffix:semicolon
DECL|member|aper_size
r_int
id|aper_size
suffix:semicolon
DECL|member|max_memory
r_int
id|max_memory
suffix:semicolon
multiline_comment|/* In pages */
DECL|member|current_memory
r_int
id|current_memory
suffix:semicolon
DECL|typedef|agp_kern_info
)brace
id|agp_kern_info
suffix:semicolon
multiline_comment|/* &n; * The agp_memory structure has information&n; * about the block of agp memory allocated.&n; * A caller may manipulate the next and prev&n; * pointers to link each allocated item into&n; * a list.  These pointers are ignored by the &n; * backend.  Everything else should never be&n; * written to, but the caller may read any of&n; * the items to detrimine the status of this&n; * block of agp memory.&n; * &n; */
DECL|struct|_agp_memory
r_typedef
r_struct
id|_agp_memory
(brace
DECL|member|key
r_int
id|key
suffix:semicolon
DECL|member|next
r_struct
id|_agp_memory
op_star
id|next
suffix:semicolon
DECL|member|prev
r_struct
id|_agp_memory
op_star
id|prev
suffix:semicolon
DECL|member|page_count
r_int
id|page_count
suffix:semicolon
DECL|member|num_scratch_pages
r_int
id|num_scratch_pages
suffix:semicolon
DECL|member|memory
r_int
r_int
op_star
id|memory
suffix:semicolon
DECL|member|pg_start
id|off_t
id|pg_start
suffix:semicolon
DECL|member|type
id|u32
id|type
suffix:semicolon
DECL|member|physical
id|u32
id|physical
suffix:semicolon
DECL|member|is_bound
id|u8
id|is_bound
suffix:semicolon
DECL|member|is_flushed
id|u8
id|is_flushed
suffix:semicolon
DECL|typedef|agp_memory
)brace
id|agp_memory
suffix:semicolon
DECL|macro|AGP_NORMAL_MEMORY
mdefine_line|#define AGP_NORMAL_MEMORY 0
r_extern
r_void
id|agp_free_memory
c_func
(paren
id|agp_memory
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * agp_free_memory :&n; * &n; * This function frees memory associated with&n; * an agp_memory pointer.  It is the only function&n; * that can be called when the backend is not owned&n; * by the caller.  (So it can free memory on client&n; * death.)&n; * &n; * It takes an agp_memory pointer as an argument.&n; * &n; */
r_extern
id|agp_memory
op_star
id|agp_allocate_memory
c_func
(paren
r_int
comma
id|u32
)paren
suffix:semicolon
multiline_comment|/*&n; * agp_allocate_memory :&n; * &n; * This function allocates a group of pages of&n; * a certain type.&n; * &n; * It takes a size_t argument of the number of pages, and&n; * an u32 argument of the type of memory to be allocated.  &n; * Every agp bridge device will allow you to allocate &n; * AGP_NORMAL_MEMORY which maps to physical ram.  Any other&n; * type is device dependant.&n; * &n; * It returns NULL whenever memory is unavailable.&n; * &n; */
r_extern
r_void
id|agp_copy_info
c_func
(paren
id|agp_kern_info
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * agp_copy_info :&n; * &n; * This function copies information about the&n; * agp bridge device and the state of the agp&n; * backend into an agp_kern_info pointer.&n; * &n; * It takes an agp_kern_info pointer as an&n; * argument.  The caller should insure that&n; * this pointer is valid.&n; * &n; */
r_extern
r_int
id|agp_bind_memory
c_func
(paren
id|agp_memory
op_star
comma
id|off_t
)paren
suffix:semicolon
multiline_comment|/*&n; * agp_bind_memory :&n; * &n; * This function binds an agp_memory structure&n; * into the graphics aperture translation table.&n; * &n; * It takes an agp_memory pointer and an offset into&n; * the graphics aperture translation table as arguments&n; * &n; * It returns -EINVAL if the pointer == NULL.&n; * It returns -EBUSY if the area of the table&n; * requested is already in use.&n; * &n; */
r_extern
r_int
id|agp_unbind_memory
c_func
(paren
id|agp_memory
op_star
)paren
suffix:semicolon
multiline_comment|/* &n; * agp_unbind_memory :&n; * &n; * This function removes an agp_memory structure&n; * from the graphics aperture translation table.&n; * &n; * It takes an agp_memory pointer as an argument.&n; * &n; * It returns -EINVAL if this piece of agp_memory&n; * is not currently bound to the graphics aperture&n; * translation table or if the agp_memory &n; * pointer == NULL&n; * &n; */
r_extern
r_void
id|agp_enable
c_func
(paren
id|u32
)paren
suffix:semicolon
multiline_comment|/* &n; * agp_enable :&n; * &n; * This function initializes the agp point-to-point&n; * connection.&n; * &n; * It takes an agp mode register as an argument&n; * &n; */
r_extern
r_int
id|agp_backend_acquire
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * agp_backend_acquire :&n; * &n; * This Function attempts to acquire the agp&n; * backend.&n; * &n; * returns -EBUSY if agp is in use,&n; * returns 0 if the caller owns the agp backend&n; */
r_extern
r_void
id|agp_backend_release
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * agp_backend_release :&n; * &n; * This Function releases the lock on the agp&n; * backend.&n; * &n; * The caller must insure that the graphics&n; * aperture translation table is read for use&n; * by another entity.  (Ensure that all memory&n; * it bound is unbound.)&n; * &n; */
r_typedef
r_struct
(brace
DECL|member|free_memory
r_void
(paren
op_star
id|free_memory
)paren
(paren
id|agp_memory
op_star
)paren
suffix:semicolon
DECL|member|allocate_memory
id|agp_memory
op_star
(paren
op_star
id|allocate_memory
)paren
(paren
r_int
comma
id|u32
)paren
suffix:semicolon
DECL|member|bind_memory
r_int
(paren
op_star
id|bind_memory
)paren
(paren
id|agp_memory
op_star
comma
id|off_t
)paren
suffix:semicolon
DECL|member|unbind_memory
r_int
(paren
op_star
id|unbind_memory
)paren
(paren
id|agp_memory
op_star
)paren
suffix:semicolon
DECL|member|enable
r_void
(paren
op_star
id|enable
)paren
(paren
id|u32
)paren
suffix:semicolon
DECL|member|acquire
r_int
(paren
op_star
id|acquire
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|release
r_void
(paren
op_star
id|release
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|copy_info
r_void
(paren
op_star
id|copy_info
)paren
(paren
id|agp_kern_info
op_star
)paren
suffix:semicolon
DECL|typedef|drm_agp_t
)brace
id|drm_agp_t
suffix:semicolon
r_extern
r_const
id|drm_agp_t
op_star
id|drm_agp_p
suffix:semicolon
multiline_comment|/*&n; * Interface between drm and agp code.  When agp initializes, it makes&n; * the above structure available via inter_module_register(), drm might&n; * use it.  Keith Owens &lt;kaos@ocs.com.au&gt; 28 Oct 2000.&n; */
macro_line|#endif&t;&t;&t;&t;/* _AGP_BACKEND_H */
eof
