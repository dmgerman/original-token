macro_line|#ifndef __LINUX_PARPORT_PC_H
DECL|macro|__LINUX_PARPORT_PC_H
mdefine_line|#define __LINUX_PARPORT_PC_H
macro_line|#include &lt;asm/io.h&gt;
multiline_comment|/* --- register definitions ------------------------------- */
DECL|macro|ECONTROL
mdefine_line|#define ECONTROL(p) ((p)-&gt;base_hi + 0x2)
DECL|macro|CONFIGB
mdefine_line|#define CONFIGB(p)  ((p)-&gt;base_hi + 0x1)
DECL|macro|CONFIGA
mdefine_line|#define CONFIGA(p)  ((p)-&gt;base_hi + 0x0)
DECL|macro|FIFO
mdefine_line|#define FIFO(p)     ((p)-&gt;base_hi + 0x0)
DECL|macro|EPPDATA
mdefine_line|#define EPPDATA(p)  ((p)-&gt;base    + 0x4)
DECL|macro|EPPADDR
mdefine_line|#define EPPADDR(p)  ((p)-&gt;base    + 0x3)
DECL|macro|CONTROL
mdefine_line|#define CONTROL(p)  ((p)-&gt;base    + 0x2)
DECL|macro|STATUS
mdefine_line|#define STATUS(p)   ((p)-&gt;base    + 0x1)
DECL|macro|DATA
mdefine_line|#define DATA(p)     ((p)-&gt;base    + 0x0)
DECL|struct|parport_pc_private
r_struct
id|parport_pc_private
(brace
multiline_comment|/* Contents of CTR. */
DECL|member|ctr
r_int
r_char
id|ctr
suffix:semicolon
multiline_comment|/* Bitmask of writable CTR bits. */
DECL|member|ctr_writable
r_int
r_char
id|ctr_writable
suffix:semicolon
multiline_comment|/* Whether or not there&squot;s an ECR. */
DECL|member|ecr
r_int
id|ecr
suffix:semicolon
multiline_comment|/* Number of PWords that FIFO will hold. */
DECL|member|fifo_depth
r_int
id|fifo_depth
suffix:semicolon
multiline_comment|/* Number of bytes per portword. */
DECL|member|pword
r_int
id|pword
suffix:semicolon
multiline_comment|/* Not used yet. */
DECL|member|readIntrThreshold
r_int
id|readIntrThreshold
suffix:semicolon
DECL|member|writeIntrThreshold
r_int
id|writeIntrThreshold
suffix:semicolon
multiline_comment|/* buffer suitable for DMA, if DMA enabled */
DECL|member|dma_buf
r_char
op_star
id|dma_buf
suffix:semicolon
)brace
suffix:semicolon
DECL|function|parport_pc_write_data
r_extern
id|__inline__
r_void
id|parport_pc_write_data
c_func
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|d
)paren
(brace
id|outb
c_func
(paren
id|d
comma
id|DATA
c_func
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_read_data
r_extern
id|__inline__
r_int
r_char
id|parport_pc_read_data
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
r_return
id|inb
c_func
(paren
id|DATA
c_func
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|__frob_control
r_extern
id|__inline__
r_int
r_char
id|__frob_control
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|mask
comma
r_int
r_char
id|val
)paren
(brace
r_struct
id|parport_pc_private
op_star
id|priv
op_assign
id|p-&gt;physport-&gt;private_data
suffix:semicolon
r_int
r_char
id|ctr
op_assign
id|priv-&gt;ctr
suffix:semicolon
id|ctr
op_assign
(paren
id|ctr
op_amp
op_complement
id|mask
)paren
op_xor
id|val
suffix:semicolon
id|ctr
op_and_assign
id|priv-&gt;ctr_writable
suffix:semicolon
multiline_comment|/* only write writable bits. */
id|outb
(paren
id|ctr
comma
id|CONTROL
(paren
id|p
)paren
)paren
suffix:semicolon
r_return
id|priv-&gt;ctr
op_assign
id|ctr
suffix:semicolon
multiline_comment|/* update soft copy */
)brace
DECL|function|parport_pc_data_reverse
r_extern
id|__inline__
r_void
id|parport_pc_data_reverse
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__frob_control
(paren
id|p
comma
l_int|0x20
comma
l_int|0x20
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_write_control
r_extern
id|__inline__
r_void
id|parport_pc_write_control
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|d
)paren
(brace
r_const
r_int
r_char
id|wm
op_assign
(paren
id|PARPORT_CONTROL_STROBE
op_or
id|PARPORT_CONTROL_AUTOFD
op_or
id|PARPORT_CONTROL_INIT
op_or
id|PARPORT_CONTROL_SELECT
)paren
suffix:semicolon
multiline_comment|/* Take this out when drivers have adapted to newer interface. */
r_if
c_cond
(paren
id|d
op_amp
l_int|0x20
)paren
(brace
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;%s (%s): use data_reverse for this!&bslash;n&quot;
comma
id|p-&gt;name
comma
id|p-&gt;cad-&gt;name
)paren
suffix:semicolon
id|parport_pc_data_reverse
(paren
id|p
)paren
suffix:semicolon
)brace
id|__frob_control
(paren
id|p
comma
id|wm
comma
id|d
op_amp
id|wm
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_read_control
r_extern
id|__inline__
r_int
r_char
id|parport_pc_read_control
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
r_const
r_struct
id|parport_pc_private
op_star
id|priv
op_assign
id|p-&gt;physport-&gt;private_data
suffix:semicolon
r_return
id|priv-&gt;ctr
suffix:semicolon
multiline_comment|/* Use soft copy */
)brace
DECL|function|parport_pc_frob_control
r_extern
id|__inline__
r_int
r_char
id|parport_pc_frob_control
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|mask
comma
r_int
r_char
id|val
)paren
(brace
r_const
r_int
r_char
id|wm
op_assign
(paren
id|PARPORT_CONTROL_STROBE
op_or
id|PARPORT_CONTROL_AUTOFD
op_or
id|PARPORT_CONTROL_INIT
op_or
id|PARPORT_CONTROL_SELECT
)paren
suffix:semicolon
multiline_comment|/* Take this out when drivers have adapted to newer interface. */
r_if
c_cond
(paren
id|mask
op_amp
l_int|0x20
)paren
(brace
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;%s (%s): use data_reverse for this!&bslash;n&quot;
comma
id|p-&gt;name
comma
id|p-&gt;cad-&gt;name
)paren
suffix:semicolon
id|parport_pc_data_reverse
(paren
id|p
)paren
suffix:semicolon
)brace
multiline_comment|/* Restrict mask and val to control lines. */
id|mask
op_and_assign
id|wm
suffix:semicolon
id|val
op_and_assign
id|wm
suffix:semicolon
r_return
id|__frob_control
(paren
id|p
comma
id|mask
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_read_status
r_extern
id|__inline__
r_int
r_char
id|parport_pc_read_status
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
r_return
id|inb
c_func
(paren
id|STATUS
c_func
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_data_forward
r_extern
id|__inline__
r_void
id|parport_pc_data_forward
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__frob_control
(paren
id|p
comma
l_int|0x20
comma
l_int|0x00
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_disable_irq
r_extern
id|__inline__
r_void
id|parport_pc_disable_irq
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__frob_control
(paren
id|p
comma
l_int|0x10
comma
l_int|0x00
)paren
suffix:semicolon
)brace
DECL|function|parport_pc_enable_irq
r_extern
id|__inline__
r_void
id|parport_pc_enable_irq
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__frob_control
(paren
id|p
comma
l_int|0x10
comma
l_int|0x10
)paren
suffix:semicolon
)brace
r_extern
r_void
id|parport_pc_release_resources
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
suffix:semicolon
r_extern
r_int
id|parport_pc_claim_resources
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
suffix:semicolon
r_extern
r_void
id|parport_pc_init_state
c_func
(paren
r_struct
id|pardevice
op_star
comma
r_struct
id|parport_state
op_star
id|s
)paren
suffix:semicolon
r_extern
r_void
id|parport_pc_save_state
c_func
(paren
r_struct
id|parport
op_star
id|p
comma
r_struct
id|parport_state
op_star
id|s
)paren
suffix:semicolon
r_extern
r_void
id|parport_pc_restore_state
c_func
(paren
r_struct
id|parport
op_star
id|p
comma
r_struct
id|parport_state
op_star
id|s
)paren
suffix:semicolon
r_extern
r_void
id|parport_pc_inc_use_count
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|parport_pc_dec_use_count
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* PCMCIA code will want to get us to look at a port.  Provide a mechanism. */
r_extern
r_struct
id|parport
op_star
id|parport_pc_probe_port
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|base_hi
comma
r_int
id|irq
comma
r_int
id|dma
)paren
suffix:semicolon
macro_line|#endif
eof
