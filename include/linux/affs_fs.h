macro_line|#ifndef _AFFS_FS_H
DECL|macro|_AFFS_FS_H
mdefine_line|#define _AFFS_FS_H
macro_line|#include &lt;linux/types.h&gt;
multiline_comment|/*&n; * The affs filesystem constants/structures&n; */
DECL|macro|AFFS_BLOCK_BITS
mdefine_line|#define AFFS_BLOCK_BITS 9
DECL|macro|AFFS_BLOCK_SIZE
mdefine_line|#define AFFS_BLOCK_SIZE 512
DECL|macro|AFFS_BUFFER_BITS
mdefine_line|#define AFFS_BUFFER_BITS 9
DECL|macro|AFFS_BUFFER_SIZE
mdefine_line|#define AFFS_BUFFER_SIZE 512
DECL|macro|AFFS_BLOCK_NUMBER
mdefine_line|#define AFFS_BLOCK_NUMBER(X) (X&lt;&lt;1)
DECL|macro|AFFS_SUPER_MAGIC
mdefine_line|#define AFFS_SUPER_MAGIC 0xadff
multiline_comment|/* Get the filesystem block size given an inode. */
DECL|macro|AFFS_I2BSIZE
mdefine_line|#define AFFS_I2BSIZE(inode) ((inode)-&gt;i_sb-&gt;u.affs_sb.s_block_size)
multiline_comment|/* Read the device block that contains filesystem block (&quot;sector&quot;). */
DECL|function|affs_sread
r_static
r_inline
r_struct
id|buffer_head
op_star
id|affs_sread
c_func
(paren
r_int
id|dev
comma
r_int
id|sector
comma
r_void
op_star
op_star
id|start
)paren
(brace
r_struct
id|buffer_head
op_star
id|bh
suffix:semicolon
r_int
id|mask
suffix:semicolon
id|bh
op_assign
id|bread
(paren
id|dev
comma
id|sector
op_rshift
(paren
id|BLOCK_SIZE_BITS
op_minus
id|AFFS_BLOCK_BITS
)paren
comma
l_int|1024
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|bh
)paren
r_return
l_int|NULL
suffix:semicolon
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|BLOCK_SIZE_BITS
op_minus
id|AFFS_BLOCK_BITS
)paren
)paren
op_minus
l_int|1
suffix:semicolon
op_star
id|start
op_assign
id|bh-&gt;b_data
op_plus
(paren
(paren
id|sector
op_amp
id|mask
)paren
op_lshift
id|AFFS_BLOCK_BITS
)paren
suffix:semicolon
r_return
id|bh
suffix:semicolon
)brace
multiline_comment|/* Use affs_sread() to read a &quot;sector&quot;, but take the filesystems partition&n;   offset into account. */
DECL|function|affs_pread
r_static
r_inline
r_struct
id|buffer_head
op_star
id|affs_pread
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
id|sector
comma
r_void
op_star
op_star
id|start
)paren
(brace
r_int
id|offset
op_assign
id|inode-&gt;i_sb-&gt;u.affs_sb.s_partition_offset
suffix:semicolon
r_return
id|affs_sread
(paren
id|inode-&gt;i_dev
comma
id|sector
op_plus
id|offset
comma
id|start
)paren
suffix:semicolon
)brace
multiline_comment|/* amigaffs.c prototypes */
r_extern
r_int
id|affs_get_key_entry
(paren
r_int
id|bsize
comma
r_void
op_star
id|data
comma
r_int
id|entry_pos
)paren
suffix:semicolon
r_extern
r_int
id|affs_find_next_hash_entry
(paren
r_int
id|bsize
comma
r_void
op_star
id|dir_data
comma
r_int
op_star
id|hash_pos
)paren
suffix:semicolon
r_extern
r_int
id|affs_get_fh_hash_link
(paren
r_int
id|bsize
comma
r_void
op_star
id|fh_data
)paren
suffix:semicolon
r_extern
r_int
id|affs_get_file_name
(paren
r_int
id|bsize
comma
r_void
op_star
id|fh_data
comma
r_char
op_star
op_star
id|name
)paren
suffix:semicolon
r_extern
r_int
id|affs_get_extension
(paren
r_int
id|bsize
comma
r_void
op_star
id|fh_data
)paren
suffix:semicolon
r_extern
r_int
id|affs_checksum_block
(paren
r_int
id|bsize
comma
r_void
op_star
id|data
comma
r_int
op_star
id|ptype
comma
r_int
op_star
id|stype
)paren
suffix:semicolon
multiline_comment|/* The stuff that follows may be totally unneeded. I have not checked to see &n; which prototypes we are still using.  */
r_extern
r_int
id|affs_open
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_extern
r_void
id|affs_release
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_extern
r_int
id|affs_lookup
c_func
(paren
r_struct
id|inode
op_star
id|dir
comma
r_const
r_char
op_star
id|name
comma
r_int
id|len
comma
r_struct
id|inode
op_star
op_star
id|result
)paren
suffix:semicolon
r_extern
r_int
r_int
id|affs_count_free_inodes
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
suffix:semicolon
r_extern
r_int
id|affs_new_block
c_func
(paren
r_int
id|dev
)paren
suffix:semicolon
r_extern
r_int
id|affs_free_block
c_func
(paren
r_int
id|dev
comma
r_int
id|block
)paren
suffix:semicolon
r_extern
r_int
id|affs_bmap
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|affs_put_super
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|super_block
op_star
id|affs_read_super
c_func
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|affs_read_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|affs_put_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|affs_statfs
c_func
(paren
r_struct
id|super_block
op_star
comma
r_struct
id|statfs
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|affs_parent_ino
c_func
(paren
r_struct
id|inode
op_star
id|dir
)paren
suffix:semicolon
r_extern
r_int
id|affs_lseek
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
id|off_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|affs_read
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|affs_file_read
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|init_affs_fs
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|affs_file_inode_operations
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|affs_dir_inode_operations
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|affs_symlink_inode_operations
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|affs_chrdev_inode_operations
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|affs_blkdev_inode_operations
suffix:semicolon
r_extern
r_struct
id|file_operations
id|affs_file_operations
suffix:semicolon
r_extern
r_struct
id|file_operations
id|affs_dir_operations
suffix:semicolon
multiline_comment|/* The following macros are used to check for memory leaks. */
macro_line|#ifdef LEAK_CHECK
DECL|macro|free_s
mdefine_line|#define free_s leak_check_free_s
DECL|macro|malloc
mdefine_line|#define malloc leak_check_malloc
DECL|macro|bread
mdefine_line|#define bread leak_check_bread
DECL|macro|brelse
mdefine_line|#define brelse leak_check_brelse
r_extern
r_void
op_star
id|leak_check_malloc
c_func
(paren
r_int
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|leak_check_free_s
c_func
(paren
r_void
op_star
id|obj
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_struct
id|buffer_head
op_star
id|leak_check_bread
c_func
(paren
r_int
id|dev
comma
r_int
id|block
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|leak_check_brelse
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
suffix:semicolon
macro_line|#endif /* LEAK_CHECK */
macro_line|#endif
eof
