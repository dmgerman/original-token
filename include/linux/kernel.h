multiline_comment|/*&n; * &squot;kernel.h&squot; contains some often-used function prototypes etc&n; */
r_void
id|verify_area
c_func
(paren
r_void
op_star
id|addr
comma
r_int
id|count
)paren
suffix:semicolon
r_volatile
r_void
id|panic
c_func
(paren
r_const
r_char
op_star
id|str
)paren
suffix:semicolon
r_volatile
r_void
id|do_exit
c_func
(paren
r_int
id|error_code
)paren
suffix:semicolon
r_int
id|printf
c_func
(paren
r_const
r_char
op_star
id|fmt
comma
dot
dot
dot
)paren
suffix:semicolon
r_int
id|printk
c_func
(paren
r_const
r_char
op_star
id|fmt
comma
dot
dot
dot
)paren
suffix:semicolon
r_void
id|console_print
c_func
(paren
r_const
r_char
op_star
id|str
)paren
suffix:semicolon
r_int
id|tty_write
c_func
(paren
r_int
id|ch
comma
r_char
op_star
id|buf
comma
r_int
id|count
)paren
suffix:semicolon
r_void
op_star
id|malloc
c_func
(paren
r_int
r_int
id|size
)paren
suffix:semicolon
r_void
id|free_s
c_func
(paren
r_void
op_star
id|obj
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|hd_times_out
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|sysbeepstop
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|blank_screen
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|unblank_screen
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|beepcount
suffix:semicolon
r_extern
r_int
id|hd_timeout
suffix:semicolon
r_extern
r_int
id|blankinterval
suffix:semicolon
r_extern
r_int
id|blankcount
suffix:semicolon
DECL|macro|free
mdefine_line|#define free(x) free_s((x), 0)
multiline_comment|/*&n; * This is defined as a macro, but at some point this might become a&n; * real subroutine that sets a flag if it returns true (to do&n; * BSD-style accounting where the process is flagged if it uses root&n; * privs).  The implication of this is that you should do normal&n; * permissions checks first, and check suser() last.&n; */
DECL|macro|suser
mdefine_line|#define suser() (current-&gt;euid == 0)
eof
