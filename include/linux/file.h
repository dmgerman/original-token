multiline_comment|/*&n; * Wrapper functions for accessing the file_struct fd array.&n; */
macro_line|#ifndef __LINUX_FILE_H
DECL|macro|__LINUX_FILE_H
mdefine_line|#define __LINUX_FILE_H
r_extern
r_void
id|_fput
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Check whether the specified task has the fd open. Since the task&n; * may not have a files_struct, we must test for p-&gt;files != NULL.&n; */
DECL|function|fcheck_task
r_extern
r_inline
r_struct
id|file
op_star
id|fcheck_task
c_func
(paren
r_struct
id|task_struct
op_star
id|p
comma
r_int
r_int
id|fd
)paren
(brace
r_struct
id|file
op_star
id|file
op_assign
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|fd
OL
id|p-&gt;files-&gt;max_fds
)paren
id|file
op_assign
id|p-&gt;files-&gt;fd
(braket
id|fd
)braket
suffix:semicolon
r_return
id|file
suffix:semicolon
)brace
multiline_comment|/*&n; * Check whether the specified fd has an open file.&n; */
DECL|function|fcheck
r_extern
r_inline
r_struct
id|file
op_star
id|fcheck
c_func
(paren
r_int
r_int
id|fd
)paren
(brace
r_struct
id|file
op_star
id|file
op_assign
l_int|NULL
suffix:semicolon
r_struct
id|files_struct
op_star
id|files
op_assign
id|current-&gt;files
suffix:semicolon
r_if
c_cond
(paren
id|fd
OL
id|files-&gt;max_fds
)paren
id|file
op_assign
id|files-&gt;fd
(braket
id|fd
)braket
suffix:semicolon
r_return
id|file
suffix:semicolon
)brace
DECL|function|frip
r_extern
r_inline
r_struct
id|file
op_star
id|frip
c_func
(paren
r_struct
id|files_struct
op_star
id|files
comma
r_int
r_int
id|fd
)paren
(brace
r_struct
id|file
op_star
id|file
op_assign
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|fd
OL
id|files-&gt;max_fds
)paren
id|file
op_assign
id|xchg
c_func
(paren
op_amp
id|files-&gt;fd
(braket
id|fd
)braket
comma
l_int|NULL
)paren
suffix:semicolon
r_return
id|file
suffix:semicolon
)brace
DECL|function|fget
r_extern
r_inline
r_struct
id|file
op_star
id|fget
c_func
(paren
r_int
r_int
id|fd
)paren
(brace
r_struct
id|file
op_star
id|file
op_assign
l_int|NULL
suffix:semicolon
r_struct
id|files_struct
op_star
id|files
op_assign
id|current-&gt;files
suffix:semicolon
id|read_lock
c_func
(paren
op_amp
id|files-&gt;file_lock
)paren
suffix:semicolon
id|file
op_assign
id|fcheck
c_func
(paren
id|fd
)paren
suffix:semicolon
r_if
c_cond
(paren
id|file
)paren
id|get_file
c_func
(paren
id|file
)paren
suffix:semicolon
id|read_unlock
c_func
(paren
op_amp
id|files-&gt;file_lock
)paren
suffix:semicolon
r_return
id|file
suffix:semicolon
)brace
multiline_comment|/*&n; * 23/12/1998 Marcin Dalecki &lt;dalecki@cs.net.pl&gt;: &n; * &n; * Since those functions where calling other functions, it was compleatly &n; * bogous to make them all &quot;extern inline&quot;.&n; *&n; * The removal of this pseudo optimization saved me scandaleous:&n; *&n; * &t;&t;3756 (i386 arch) &n; *&n; * precious bytes from my kernel, even without counting all the code compiled&n; * as module!&n; *&n; * I suspect there are many other similar &quot;optimizations&quot; across the&n; * kernel...&n; */
DECL|function|fput
r_extern
r_inline
r_void
id|fput
c_func
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_if
c_cond
(paren
id|atomic_dec_and_test
c_func
(paren
op_amp
id|file-&gt;f_count
)paren
)paren
id|_fput
c_func
(paren
id|file
)paren
suffix:semicolon
)brace
r_extern
r_void
id|put_filp
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Install a file pointer in the fd array.  &n; *&n; * The VFS is full of places where we drop the files lock between&n; * setting the open_fds bitmap and installing the file in the file&n; * array.  At any such point, we are vulnerable to a dup2() race&n; * installing a file in the array before us.  We need to detect this and&n; * fput() the struct file we are about to overwrite in this case.&n; */
DECL|function|fd_install
r_extern
r_inline
r_void
id|fd_install
c_func
(paren
r_int
r_int
id|fd
comma
r_struct
id|file
op_star
id|file
)paren
(brace
r_struct
id|files_struct
op_star
id|files
op_assign
id|current-&gt;files
suffix:semicolon
r_struct
id|file
op_star
id|result
suffix:semicolon
id|write_lock
c_func
(paren
op_amp
id|files-&gt;file_lock
)paren
suffix:semicolon
id|result
op_assign
id|xchg
c_func
(paren
op_amp
id|files-&gt;fd
(braket
id|fd
)braket
comma
id|file
)paren
suffix:semicolon
id|write_unlock
c_func
(paren
op_amp
id|files-&gt;file_lock
)paren
suffix:semicolon
r_if
c_cond
(paren
id|result
)paren
id|fput
c_func
(paren
id|result
)paren
suffix:semicolon
)brace
macro_line|#endif /* __LINUX_FILE_H */
eof
