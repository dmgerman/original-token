singleline_comment|// -*- mode: cpp; mode: fold -*-
singleline_comment|// Description                                                          /*{{{*/
singleline_comment|// $Id: mapped.h,v 1.2 2000/03/14 17:13:12 dwmw2 Exp $
multiline_comment|/* ######################################################################&n;&n;   Memory Mapped  MTD Routines&n;   &n;   These routines are support routines for memory mapped chips, with&n;   routines to support common sorts of flash. For devices that are based&n;   on a memory mapped interface these routines provide everything necessary,&n;   only a window changing function is required by the low level implementation.&n;   &n;   The entry point to setup and register a memory mapped MTD device, &n;   mtd_mapped_setup will perform a detection sequence that can determine&n;   the type size and configuration of many sorts of chip setups. &n;&n;   ROMs and RAMs are detected and passed off to very simple routines, Flash&n;   writing and erasing is handled as well.&n;   &n;   ##################################################################### */
multiline_comment|/*}}}*/
macro_line|#ifndef __MTD_FLASH_H__
DECL|macro|__MTD_FLASH_H__
mdefine_line|#define __MTD_FLASH_H__
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/mtd/mtd.h&gt;
singleline_comment|// MTD flags for ordinary flash
DECL|struct|JEDECTable
r_struct
id|JEDECTable
(brace
DECL|member|jedec
id|u_short
id|jedec
suffix:semicolon
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|size
id|u_long
id|size
suffix:semicolon
DECL|member|sectorsize
id|u_long
id|sectorsize
suffix:semicolon
DECL|member|capabilities
id|u_long
id|capabilities
suffix:semicolon
)brace
suffix:semicolon
singleline_comment|// JEDEC being 0 is the end of the chip array
DECL|struct|flash_chip
r_struct
id|flash_chip
(brace
DECL|member|jedec
id|u_short
id|jedec
suffix:semicolon
DECL|member|size
id|u_long
id|size
suffix:semicolon
DECL|member|sectorsize
id|u_long
id|sectorsize
suffix:semicolon
DECL|member|base
id|u_long
id|base
suffix:semicolon
DECL|member|capabilities
id|u_long
id|capabilities
suffix:semicolon
singleline_comment|// These markers are filled in by the flash_chip_scan function
DECL|member|start
id|u_long
id|start
suffix:semicolon
DECL|member|length
id|u_long
id|length
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mapped_mtd_info
r_struct
id|mapped_mtd_info
(brace
DECL|member|mtd
r_struct
id|mtd_info
id|mtd
suffix:semicolon
DECL|member|pagesize
id|u_long
id|pagesize
suffix:semicolon
singleline_comment|// Size of the memory window
DECL|member|maxsize
id|u_long
id|maxsize
suffix:semicolon
singleline_comment|// Maximum MTD size in pages
DECL|member|mfr
DECL|member|id
id|u_char
id|mfr
comma
id|id
suffix:semicolon
DECL|member|part
r_char
id|part
(braket
l_int|100
)braket
suffix:semicolon
singleline_comment|// Part Catalogue number if available
DECL|member|lock
r_int
op_star
id|lock
suffix:semicolon
singleline_comment|// Multiple chip support, only used if this is type MTD_FLASH
DECL|member|interleve
id|u_char
id|interleve
suffix:semicolon
singleline_comment|// Address chip interleve (0 = concatination)
DECL|member|chips
r_struct
id|flash_chip
id|chips
(braket
l_int|5
)braket
suffix:semicolon
singleline_comment|// Operations
DECL|member|page
r_int
r_int
(paren
op_star
id|page
)paren
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
comma
r_int
r_int
id|page
)paren
suffix:semicolon
DECL|member|jedec_sense
r_int
(paren
op_star
id|jedec_sense
)paren
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|JEDECTable
id|mtd_JEDEC_table
(braket
)braket
suffix:semicolon
singleline_comment|// Automatic configurators
r_extern
r_int
id|mtd_mapped_setup
c_func
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
)paren
suffix:semicolon
r_extern
r_int
id|mtd_mapped_remove
c_func
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
)paren
suffix:semicolon
singleline_comment|// Generic functions
r_extern
r_int
id|flash_jedec
c_func
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
)paren
suffix:semicolon
r_extern
r_int
id|flash_erase
c_func
(paren
r_struct
id|mtd_info
op_star
id|map
comma
r_struct
id|erase_info
op_star
id|instr
)paren
suffix:semicolon
r_extern
r_int
id|flash_write
c_func
(paren
r_struct
id|mtd_info
op_star
id|map
comma
id|loff_t
id|start
comma
r_int
id|len
comma
r_int
op_star
id|retlen
comma
r_const
id|u_char
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_int
id|rom_read
c_func
(paren
r_struct
id|mtd_info
op_star
id|map
comma
id|loff_t
id|start
comma
r_int
id|len
comma
r_int
op_star
id|retlen
comma
id|u_char
op_star
id|buf
)paren
suffix:semicolon
r_extern
r_int
id|ram_write
c_func
(paren
r_struct
id|mtd_info
op_star
id|map
comma
id|loff_t
id|start
comma
r_int
id|len
comma
r_int
op_star
id|retlen
comma
r_const
id|u_char
op_star
id|buf
)paren
suffix:semicolon
singleline_comment|// Helpers
r_extern
r_int
id|page_jump
c_func
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
comma
r_int
r_int
id|start
comma
r_int
r_int
id|len
comma
r_int
r_int
op_star
id|buffer
comma
r_int
r_int
op_star
id|size
)paren
suffix:semicolon
r_extern
r_void
id|flash_chip_scan
c_func
(paren
r_struct
id|mapped_mtd_info
op_star
id|map
comma
r_int
r_int
id|start
comma
r_int
r_int
id|len
)paren
suffix:semicolon
macro_line|#endif /* __MTD_FLASH_H__ */
eof
