macro_line|#ifndef _LINUX_LOCKS_H
DECL|macro|_LINUX_LOCKS_H
mdefine_line|#define _LINUX_LOCKS_H
macro_line|#ifndef _LINUX_MM_H
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#endif
macro_line|#ifndef _LINUX_PAGEMAP_H
macro_line|#include &lt;linux/pagemap.h&gt;
macro_line|#endif
multiline_comment|/*&n; * Buffer cache locking - note that interrupts may only unlock, not&n; * lock buffers.&n; */
r_extern
r_void
id|__wait_on_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
)paren
suffix:semicolon
DECL|function|wait_on_buffer
r_extern
r_inline
r_void
id|wait_on_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
r_if
c_cond
(paren
id|test_bit
c_func
(paren
id|BH_Lock
comma
op_amp
id|bh-&gt;b_state
)paren
)paren
id|__wait_on_buffer
c_func
(paren
id|bh
)paren
suffix:semicolon
)brace
DECL|function|lock_buffer
r_extern
r_inline
r_void
id|lock_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
r_while
c_loop
(paren
id|test_and_set_bit
c_func
(paren
id|BH_Lock
comma
op_amp
id|bh-&gt;b_state
)paren
)paren
id|__wait_on_buffer
c_func
(paren
id|bh
)paren
suffix:semicolon
)brace
DECL|function|unlock_buffer
r_extern
r_inline
r_void
id|unlock_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
id|clear_bit
c_func
(paren
id|BH_Lock
comma
op_amp
id|bh-&gt;b_state
)paren
suffix:semicolon
id|smp_mb__after_clear_bit
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|waitqueue_active
c_func
(paren
op_amp
id|bh-&gt;b_wait
)paren
)paren
id|wake_up
c_func
(paren
op_amp
id|bh-&gt;b_wait
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * super-block locking. Again, interrupts may only unlock&n; * a super-block (although even this isn&squot;t done right now.&n; * nfs may need it).&n; */
r_extern
r_void
id|__wait_on_super
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|function|wait_on_super
r_extern
r_inline
r_void
id|wait_on_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_if
c_cond
(paren
id|sb-&gt;s_lock
)paren
id|__wait_on_super
c_func
(paren
id|sb
)paren
suffix:semicolon
)brace
DECL|function|lock_super
r_extern
r_inline
r_void
id|lock_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_if
c_cond
(paren
id|sb-&gt;s_lock
)paren
id|__wait_on_super
c_func
(paren
id|sb
)paren
suffix:semicolon
id|sb-&gt;s_lock
op_assign
l_int|1
suffix:semicolon
)brace
DECL|function|unlock_super
r_extern
r_inline
r_void
id|unlock_super
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
id|sb-&gt;s_lock
op_assign
l_int|0
suffix:semicolon
multiline_comment|/*&n;&t; * No need of any barrier, we&squot;re protected by&n;&t; * the big kernel lock here... unfortunately :)&n;&t; */
r_if
c_cond
(paren
id|waitqueue_active
c_func
(paren
op_amp
id|sb-&gt;s_wait
)paren
)paren
id|wake_up
c_func
(paren
op_amp
id|sb-&gt;s_wait
)paren
suffix:semicolon
)brace
macro_line|#endif /* _LINUX_LOCKS_H */
eof
