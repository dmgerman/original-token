macro_line|#ifndef _LINUX_LIST_H
DECL|macro|_LINUX_LIST_H
mdefine_line|#define _LINUX_LIST_H
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * Simple doubly linked list implementation.&n; *&n; * Some of the internal functions (&quot;__xxx&quot;) are useful when&n; * manipulating whole lists rather than single entries, as&n; * sometimes we already know the next/prev entries and we can&n; * generate better code by using them directly rather than&n; * using the generic single-entry routines.&n; */
DECL|struct|list_head
r_struct
id|list_head
(brace
DECL|member|next
DECL|member|prev
r_struct
id|list_head
op_star
id|next
comma
op_star
id|prev
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|LIST_HEAD_INIT
mdefine_line|#define LIST_HEAD_INIT(name) { &amp;(name), &amp;(name) }
DECL|macro|LIST_HEAD
mdefine_line|#define LIST_HEAD(name) &bslash;&n;&t;struct list_head name = LIST_HEAD_INIT(name)
DECL|macro|INIT_LIST_HEAD
mdefine_line|#define INIT_LIST_HEAD(ptr) do { &bslash;&n;&t;(ptr)-&gt;next = (ptr); (ptr)-&gt;prev = (ptr); &bslash;&n;} while (0)
multiline_comment|/*&n; * Insert a new entry between two known consecutive entries. &n; *&n; * This is only for internal list manipulation where we know&n; * the prev/next entries already!&n; */
DECL|function|__list_add
r_static
id|__inline__
r_void
id|__list_add
c_func
(paren
r_struct
id|list_head
op_star
r_new
comma
r_struct
id|list_head
op_star
id|prev
comma
r_struct
id|list_head
op_star
id|next
)paren
(brace
id|next-&gt;prev
op_assign
r_new
suffix:semicolon
r_new
op_member_access_from_pointer
id|next
op_assign
id|next
suffix:semicolon
r_new
op_member_access_from_pointer
id|prev
op_assign
id|prev
suffix:semicolon
id|prev-&gt;next
op_assign
r_new
suffix:semicolon
)brace
multiline_comment|/*&n; * Insert a new entry after the specified head..&n; */
DECL|function|list_add
r_static
id|__inline__
r_void
id|list_add
c_func
(paren
r_struct
id|list_head
op_star
r_new
comma
r_struct
id|list_head
op_star
id|head
)paren
(brace
id|__list_add
c_func
(paren
r_new
comma
id|head
comma
id|head-&gt;next
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Insert a new entry before the specified head..&n; */
DECL|function|list_add_tail
r_static
id|__inline__
r_void
id|list_add_tail
c_func
(paren
r_struct
id|list_head
op_star
r_new
comma
r_struct
id|list_head
op_star
id|head
)paren
(brace
id|__list_add
c_func
(paren
r_new
comma
id|head-&gt;prev
comma
id|head
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Delete a list entry by making the prev/next entries&n; * point to each other.&n; *&n; * This is only for internal list manipulation where we know&n; * the prev/next entries already!&n; */
DECL|function|__list_del
r_static
id|__inline__
r_void
id|__list_del
c_func
(paren
r_struct
id|list_head
op_star
id|prev
comma
r_struct
id|list_head
op_star
id|next
)paren
(brace
id|next-&gt;prev
op_assign
id|prev
suffix:semicolon
id|prev-&gt;next
op_assign
id|next
suffix:semicolon
)brace
DECL|function|list_del
r_static
id|__inline__
r_void
id|list_del
c_func
(paren
r_struct
id|list_head
op_star
id|entry
)paren
(brace
id|__list_del
c_func
(paren
id|entry-&gt;prev
comma
id|entry-&gt;next
)paren
suffix:semicolon
)brace
DECL|function|list_empty
r_static
id|__inline__
r_int
id|list_empty
c_func
(paren
r_struct
id|list_head
op_star
id|head
)paren
(brace
r_return
id|head-&gt;next
op_eq
id|head
suffix:semicolon
)brace
multiline_comment|/*&n; * Splice in &quot;list&quot; into &quot;head&quot;&n; */
DECL|function|list_splice
r_static
id|__inline__
r_void
id|list_splice
c_func
(paren
r_struct
id|list_head
op_star
id|list
comma
r_struct
id|list_head
op_star
id|head
)paren
(brace
r_struct
id|list_head
op_star
id|first
op_assign
id|list-&gt;next
suffix:semicolon
r_if
c_cond
(paren
id|first
op_ne
id|list
)paren
(brace
r_struct
id|list_head
op_star
id|last
op_assign
id|list-&gt;prev
suffix:semicolon
r_struct
id|list_head
op_star
id|at
op_assign
id|head-&gt;next
suffix:semicolon
id|first-&gt;prev
op_assign
id|head
suffix:semicolon
id|head-&gt;next
op_assign
id|first
suffix:semicolon
id|last-&gt;next
op_assign
id|at
suffix:semicolon
id|at-&gt;prev
op_assign
id|last
suffix:semicolon
)brace
)brace
DECL|macro|list_entry
mdefine_line|#define list_entry(ptr, type, member) &bslash;&n;&t;((type *)((char *)(ptr)-(unsigned long)(&amp;((type *)0)-&gt;member)))
macro_line|#endif /* __KERNEL__ */
macro_line|#endif
eof
