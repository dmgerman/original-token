macro_line|#ifndef _LINUX_LIST_H
DECL|macro|_LINUX_LIST_H
mdefine_line|#define _LINUX_LIST_H
multiline_comment|/*&n; * Simple doubly linked list implementation.&n; */
DECL|struct|list_head
r_struct
id|list_head
(brace
DECL|member|next
DECL|member|prev
r_struct
id|list_head
op_star
id|next
comma
op_star
id|prev
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|LIST_HEAD
mdefine_line|#define LIST_HEAD(name) &bslash;&n;&t;struct list_head name = { &amp;name, &amp;name }
DECL|macro|INIT_LIST_HEAD
mdefine_line|#define INIT_LIST_HEAD(ptr) do { &bslash;&n;&t;(ptr)-&gt;next = (ptr); (ptr)-&gt;prev = (ptr); &bslash;&n;} while (0)
DECL|function|list_add
r_static
r_inline
r_void
id|list_add
c_func
(paren
r_struct
id|list_head
op_star
r_new
comma
r_struct
id|list_head
op_star
id|head
)paren
(brace
r_struct
id|list_head
op_star
id|next
op_assign
id|head-&gt;next
suffix:semicolon
id|next-&gt;prev
op_assign
r_new
suffix:semicolon
r_new
op_member_access_from_pointer
id|next
op_assign
id|next
suffix:semicolon
r_new
op_member_access_from_pointer
id|prev
op_assign
id|head
suffix:semicolon
id|head-&gt;next
op_assign
r_new
suffix:semicolon
)brace
DECL|function|list_del
r_static
r_inline
r_void
id|list_del
c_func
(paren
r_struct
id|list_head
op_star
id|entry
)paren
(brace
r_struct
id|list_head
op_star
id|next
comma
op_star
id|prev
suffix:semicolon
id|next
op_assign
id|entry-&gt;next
suffix:semicolon
id|prev
op_assign
id|entry-&gt;prev
suffix:semicolon
id|next-&gt;prev
op_assign
id|prev
suffix:semicolon
id|prev-&gt;next
op_assign
id|next
suffix:semicolon
)brace
DECL|macro|list_entry
mdefine_line|#define list_entry(ptr, type, member) &bslash;&n;&t;((type *)((char *)(ptr)-(unsigned long)(&amp;((type *)0)-&gt;member)))
macro_line|#endif
eof
