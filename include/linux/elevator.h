macro_line|#ifndef _LINUX_ELEVATOR_H
DECL|macro|_LINUX_ELEVATOR_H
mdefine_line|#define _LINUX_ELEVATOR_H
DECL|macro|ELEVATOR_DEBUG
mdefine_line|#define ELEVATOR_DEBUG
r_struct
id|elevator_s
suffix:semicolon
DECL|typedef|elevator_t
r_typedef
r_struct
id|elevator_s
id|elevator_t
suffix:semicolon
DECL|typedef|elevator_fn
r_typedef
r_void
(paren
id|elevator_fn
)paren
(paren
r_struct
id|request
op_star
comma
id|elevator_t
op_star
comma
r_struct
id|list_head
op_star
comma
r_struct
id|list_head
op_star
comma
r_int
)paren
suffix:semicolon
DECL|struct|elevator_s
r_struct
id|elevator_s
(brace
DECL|member|sequence
r_int
id|sequence
suffix:semicolon
DECL|member|read_latency
r_int
id|read_latency
suffix:semicolon
DECL|member|write_latency
r_int
id|write_latency
suffix:semicolon
DECL|member|max_bomb_segments
r_int
id|max_bomb_segments
suffix:semicolon
DECL|member|nr_segments
r_int
r_int
id|nr_segments
suffix:semicolon
DECL|member|read_pendings
r_int
id|read_pendings
suffix:semicolon
DECL|member|elevator_fn
id|elevator_fn
op_star
id|elevator_fn
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|ELEVATOR_DEFAULTS
mdefine_line|#define ELEVATOR_DEFAULTS&t;&t;&t;&t;&bslash;&n;((elevator_t) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;/* sequence */&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;128,&t;&t;&t;/* read_latency */&t;&bslash;&n;&t;8192,&t;&t;&t;/* write_latency */&t;&bslash;&n;&t;4,&t;&t;&t;/* max_bomb_segments */&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;/* nr_segments */&t;&bslash;&n;&t;0,&t;&t;&t;/* read_pendings */&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;elevator_default,&t;/* elevator_fn */&t;&bslash;&n;&t;})
DECL|struct|blkelv_ioctl_arg_s
r_typedef
r_struct
id|blkelv_ioctl_arg_s
(brace
DECL|member|queue_ID
r_void
op_star
id|queue_ID
suffix:semicolon
DECL|member|read_latency
r_int
id|read_latency
suffix:semicolon
DECL|member|write_latency
r_int
id|write_latency
suffix:semicolon
DECL|member|max_bomb_segments
r_int
id|max_bomb_segments
suffix:semicolon
DECL|typedef|blkelv_ioctl_arg_t
)brace
id|blkelv_ioctl_arg_t
suffix:semicolon
DECL|macro|BLKELVGET
mdefine_line|#define BLKELVGET   _IO(0x12,106)
DECL|macro|BLKELVSET
mdefine_line|#define BLKELVSET   _IO(0x12,107)
r_extern
r_int
id|blkelvget_ioctl
c_func
(paren
id|elevator_t
op_star
comma
id|blkelv_ioctl_arg_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|blkelvset_ioctl
c_func
(paren
id|elevator_t
op_star
comma
r_const
id|blkelv_ioctl_arg_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|elevator_init
c_func
(paren
id|elevator_t
op_star
)paren
suffix:semicolon
macro_line|#ifdef ELEVATOR_DEBUG
r_extern
r_void
id|elevator_debug
c_func
(paren
id|request_queue_t
op_star
comma
id|kdev_t
)paren
suffix:semicolon
macro_line|#else
DECL|macro|elevator_debug
mdefine_line|#define elevator_debug(a,b) do { } while(0)
macro_line|#endif
DECL|macro|elevator_sequence_after
mdefine_line|#define elevator_sequence_after(a,b) ((int)((b)-(a)) &lt; 0)
DECL|macro|elevator_sequence_before
mdefine_line|#define elevator_sequence_before(a,b) elevator_sequence_after(b,a)
DECL|macro|elevator_sequence_after_eq
mdefine_line|#define elevator_sequence_after_eq(a,b) ((int)((b)-(a)) &lt;= 0)
DECL|macro|elevator_sequence_before_eq
mdefine_line|#define elevator_sequence_before_eq(a,b) elevator_sequence_after_eq(b,a)
multiline_comment|/*&n; * This is used in the elevator algorithm.  We don&squot;t prioritise reads&n; * over writes any more --- although reads are more time-critical than&n; * writes, by treating them equally we increase filesystem throughput.&n; * This turns out to give better overall performance.  -- sct&n; */
DECL|macro|IN_ORDER
mdefine_line|#define IN_ORDER(s1,s2)&t;&t;&t;&t;&bslash;&n;&t;((((s1)-&gt;rq_dev == (s2)-&gt;rq_dev &amp;&amp;&t;&bslash;&n;&t;   (s1)-&gt;sector &lt; (s2)-&gt;sector)) ||&t;&bslash;&n;&t; (s1)-&gt;rq_dev &lt; (s2)-&gt;rq_dev)
DECL|function|elevator_merge_requests
r_static
r_inline
r_void
id|elevator_merge_requests
c_func
(paren
id|elevator_t
op_star
id|e
comma
r_struct
id|request
op_star
id|req
comma
r_struct
id|request
op_star
id|next
)paren
(brace
r_if
c_cond
(paren
id|elevator_sequence_before
c_func
(paren
id|next-&gt;elevator_sequence
comma
id|req-&gt;elevator_sequence
)paren
)paren
id|req-&gt;elevator_sequence
op_assign
id|next-&gt;elevator_sequence
suffix:semicolon
r_if
c_cond
(paren
id|req-&gt;cmd
op_eq
id|READ
)paren
id|e-&gt;read_pendings
op_decrement
suffix:semicolon
)brace
DECL|function|elevator_sequence
r_static
r_inline
r_int
id|elevator_sequence
c_func
(paren
id|elevator_t
op_star
id|e
comma
r_int
id|latency
)paren
(brace
r_return
id|latency
op_plus
id|e-&gt;sequence
suffix:semicolon
)brace
DECL|macro|elevator_merge_before
mdefine_line|#define elevator_merge_before(q, req, lat)&t;__elevator_merge((q), (req), (lat), 0)
DECL|macro|elevator_merge_after
mdefine_line|#define elevator_merge_after(q, req, lat)&t;__elevator_merge((q), (req), (lat), 1)
DECL|function|__elevator_merge
r_static
r_inline
r_void
id|__elevator_merge
c_func
(paren
id|elevator_t
op_star
id|elevator
comma
r_struct
id|request
op_star
id|req
comma
r_int
id|latency
comma
r_int
id|after
)paren
(brace
r_int
id|sequence
op_assign
id|elevator_sequence
c_func
(paren
id|elevator
comma
id|latency
)paren
suffix:semicolon
r_if
c_cond
(paren
id|after
)paren
id|sequence
op_sub_assign
id|req-&gt;nr_segments
suffix:semicolon
r_if
c_cond
(paren
id|elevator_sequence_before
c_func
(paren
id|sequence
comma
id|req-&gt;elevator_sequence
)paren
)paren
id|req-&gt;elevator_sequence
op_assign
id|sequence
suffix:semicolon
)brace
DECL|function|elevator_account_request
r_static
r_inline
r_void
id|elevator_account_request
c_func
(paren
id|elevator_t
op_star
id|elevator
comma
r_struct
id|request
op_star
id|req
)paren
(brace
id|elevator-&gt;sequence
op_increment
suffix:semicolon
r_if
c_cond
(paren
id|req-&gt;cmd
op_eq
id|READ
)paren
id|elevator-&gt;read_pendings
op_increment
suffix:semicolon
id|elevator-&gt;nr_segments
op_increment
suffix:semicolon
)brace
DECL|function|elevator_request_latency
r_static
r_inline
r_int
id|elevator_request_latency
c_func
(paren
id|elevator_t
op_star
id|elevator
comma
r_int
id|rw
)paren
(brace
r_int
id|latency
suffix:semicolon
id|latency
op_assign
id|elevator-&gt;read_latency
suffix:semicolon
r_if
c_cond
(paren
id|rw
op_ne
id|READ
)paren
id|latency
op_assign
id|elevator-&gt;write_latency
suffix:semicolon
r_return
id|latency
suffix:semicolon
)brace
macro_line|#endif
eof
