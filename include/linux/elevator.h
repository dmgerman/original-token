macro_line|#ifndef _LINUX_ELEVATOR_H
DECL|macro|_LINUX_ELEVATOR_H
mdefine_line|#define _LINUX_ELEVATOR_H
DECL|macro|ELEVATOR_DEBUG
mdefine_line|#define ELEVATOR_DEBUG
DECL|typedef|elevator_fn
r_typedef
r_void
(paren
id|elevator_fn
)paren
(paren
r_struct
id|request
op_star
comma
id|elevator_t
op_star
comma
r_struct
id|list_head
op_star
comma
r_struct
id|list_head
op_star
comma
r_int
)paren
suffix:semicolon
DECL|typedef|elevator_merge_fn
r_typedef
r_int
(paren
id|elevator_merge_fn
)paren
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
op_star
comma
r_struct
id|buffer_head
op_star
comma
r_int
comma
r_int
op_star
comma
r_int
op_star
)paren
suffix:semicolon
DECL|typedef|elevator_dequeue_fn
r_typedef
r_void
(paren
id|elevator_dequeue_fn
)paren
(paren
r_struct
id|request
op_star
)paren
suffix:semicolon
DECL|struct|elevator_s
r_struct
id|elevator_s
(brace
DECL|member|sequence
r_int
id|sequence
suffix:semicolon
DECL|member|read_latency
r_int
id|read_latency
suffix:semicolon
DECL|member|write_latency
r_int
id|write_latency
suffix:semicolon
DECL|member|max_bomb_segments
r_int
id|max_bomb_segments
suffix:semicolon
DECL|member|nr_segments
r_int
r_int
id|nr_segments
suffix:semicolon
DECL|member|read_pendings
r_int
id|read_pendings
suffix:semicolon
DECL|member|elevator_fn
id|elevator_fn
op_star
id|elevator_fn
suffix:semicolon
DECL|member|elevator_merge_fn
id|elevator_merge_fn
op_star
id|elevator_merge_fn
suffix:semicolon
DECL|member|dequeue_fn
id|elevator_dequeue_fn
op_star
id|dequeue_fn
suffix:semicolon
DECL|member|queue_ID
r_int
r_int
id|queue_ID
suffix:semicolon
)brace
suffix:semicolon
r_void
id|elevator_noop
c_func
(paren
r_struct
id|request
op_star
comma
id|elevator_t
op_star
comma
r_struct
id|list_head
op_star
comma
r_struct
id|list_head
op_star
comma
r_int
)paren
suffix:semicolon
r_int
id|elevator_noop_merge
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
op_star
comma
r_struct
id|buffer_head
op_star
comma
r_int
comma
r_int
op_star
comma
r_int
op_star
)paren
suffix:semicolon
r_void
id|elevator_noop_dequeue
c_func
(paren
r_struct
id|request
op_star
)paren
suffix:semicolon
r_void
id|elevator_linus
c_func
(paren
r_struct
id|request
op_star
comma
id|elevator_t
op_star
comma
r_struct
id|list_head
op_star
comma
r_struct
id|list_head
op_star
comma
r_int
)paren
suffix:semicolon
r_int
id|elevator_linus_merge
c_func
(paren
id|request_queue_t
op_star
comma
r_struct
id|request
op_star
op_star
comma
r_struct
id|buffer_head
op_star
comma
r_int
comma
r_int
op_star
comma
r_int
op_star
)paren
suffix:semicolon
DECL|struct|blkelv_ioctl_arg_s
r_typedef
r_struct
id|blkelv_ioctl_arg_s
(brace
DECL|member|queue_ID
r_int
id|queue_ID
suffix:semicolon
DECL|member|read_latency
r_int
id|read_latency
suffix:semicolon
DECL|member|write_latency
r_int
id|write_latency
suffix:semicolon
DECL|member|max_bomb_segments
r_int
id|max_bomb_segments
suffix:semicolon
DECL|typedef|blkelv_ioctl_arg_t
)brace
id|blkelv_ioctl_arg_t
suffix:semicolon
DECL|macro|BLKELVGET
mdefine_line|#define BLKELVGET   _IOR(0x12,106,sizeof(blkelv_ioctl_arg_t))
DECL|macro|BLKELVSET
mdefine_line|#define BLKELVSET   _IOW(0x12,107,sizeof(blkelv_ioctl_arg_t))
r_extern
r_int
id|blkelvget_ioctl
c_func
(paren
id|elevator_t
op_star
comma
id|blkelv_ioctl_arg_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|blkelvset_ioctl
c_func
(paren
id|elevator_t
op_star
comma
r_const
id|blkelv_ioctl_arg_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|elevator_init
c_func
(paren
id|elevator_t
op_star
comma
id|elevator_t
)paren
suffix:semicolon
multiline_comment|/*&n; * Return values from elevator merger&n; */
DECL|macro|ELEVATOR_NO_MERGE
mdefine_line|#define ELEVATOR_NO_MERGE&t;0
DECL|macro|ELEVATOR_FRONT_MERGE
mdefine_line|#define ELEVATOR_FRONT_MERGE&t;1
DECL|macro|ELEVATOR_BACK_MERGE
mdefine_line|#define ELEVATOR_BACK_MERGE&t;2
multiline_comment|/*&n; * This is used in the elevator algorithm.  We don&squot;t prioritise reads&n; * over writes any more --- although reads are more time-critical than&n; * writes, by treating them equally we increase filesystem throughput.&n; * This turns out to give better overall performance.  -- sct&n; */
DECL|macro|IN_ORDER
mdefine_line|#define IN_ORDER(s1,s2)&t;&t;&t;&t;&bslash;&n;&t;((((s1)-&gt;rq_dev == (s2)-&gt;rq_dev &amp;&amp;&t;&bslash;&n;&t;   (s1)-&gt;sector &lt; (s2)-&gt;sector)) ||&t;&bslash;&n;&t; (s1)-&gt;rq_dev &lt; (s2)-&gt;rq_dev)
DECL|function|elevator_request_latency
r_static
r_inline
r_int
id|elevator_request_latency
c_func
(paren
id|elevator_t
op_star
id|elevator
comma
r_int
id|rw
)paren
(brace
r_int
id|latency
suffix:semicolon
id|latency
op_assign
id|elevator-&gt;read_latency
suffix:semicolon
r_if
c_cond
(paren
id|rw
op_ne
id|READ
)paren
id|latency
op_assign
id|elevator-&gt;write_latency
suffix:semicolon
r_return
id|latency
suffix:semicolon
)brace
DECL|macro|ELEVATOR_NOOP
mdefine_line|#define ELEVATOR_NOOP&t;&t;&t;&t;&t;&t;&bslash;&n;((elevator_t) {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* sequence */&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* read_latency */&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* write_latency */&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* max_bomb_segments */&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* nr_segments */&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* read_pendings */&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;elevator_noop,&t;&t;&t;/* elevator_fn */&t;&bslash;&n;&t;elevator_noop_merge,&t;&t;/* elevator_merge_fn */ &bslash;&n;&t;elevator_noop_dequeue,&t;&t;/* dequeue_fn */&t;&bslash;&n;&t;})
DECL|macro|ELEVATOR_LINUS
mdefine_line|#define ELEVATOR_LINUS&t;&t;&t;&t;&t;&t;&bslash;&n;((elevator_t) {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* not used */&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;1000000,&t;&t;&t;&t;/* read passovers */&t;&bslash;&n;&t;2000000,&t;&t;&t;&t;/* write passovers */&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* max_bomb_segments */&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* not used */&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;/* not used */&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;elevator_linus,&t;&t;&t;/* elevator_fn */&t;&bslash;&n;&t;elevator_linus_merge,&t;&t;/* elevator_merge_fn */ &bslash;&n;&t;elevator_noop_dequeue,&t;&t;/* dequeue_fn */&t;&bslash;&n;&t;})
macro_line|#endif
eof
