macro_line|#ifndef _LINUX_FS_H
DECL|macro|_LINUX_FS_H
mdefine_line|#define _LINUX_FS_H
multiline_comment|/*&n; * This file has definitions for some important file table&n; * structures etc.&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/linkage.h&gt;
macro_line|#include &lt;linux/limits.h&gt;
macro_line|#include &lt;linux/wait.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/vfs.h&gt;
macro_line|#include &lt;linux/net.h&gt;
macro_line|#include &lt;linux/kdev_t.h&gt;
macro_line|#include &lt;linux/ioctl.h&gt;
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/dcache.h&gt;
macro_line|#include &lt;linux/stat.h&gt;
macro_line|#include &lt;linux/cache.h&gt;
macro_line|#include &lt;linux/stddef.h&gt;
macro_line|#include &lt;linux/string.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/bitops.h&gt;
r_struct
id|poll_table_struct
suffix:semicolon
multiline_comment|/*&n; * It&squot;s silly to have NR_OPEN bigger than NR_FILE, but you can change&n; * the file limit at runtime and only root can increase the per-process&n; * nr_file rlimit, so it&squot;s safe to set up a ridiculously high absolute&n; * upper limit on files-per-process.&n; *&n; * Some programs (notably those using select()) may have to be &n; * recompiled to take full advantage of the new limits..  &n; */
multiline_comment|/* Fixed constants first: */
DECL|macro|NR_OPEN
macro_line|#undef NR_OPEN
DECL|macro|NR_OPEN
mdefine_line|#define NR_OPEN (1024*1024)&t;/* Absolute upper limit on fd num */
DECL|macro|INR_OPEN
mdefine_line|#define INR_OPEN 1024&t;&t;/* Initial setting for nfile rlimits */
DECL|macro|BLOCK_SIZE_BITS
mdefine_line|#define BLOCK_SIZE_BITS 10
DECL|macro|BLOCK_SIZE
mdefine_line|#define BLOCK_SIZE (1&lt;&lt;BLOCK_SIZE_BITS)
multiline_comment|/* And dynamically-tunable limits and defaults: */
DECL|struct|files_stat_struct
r_struct
id|files_stat_struct
(brace
DECL|member|nr_files
r_int
id|nr_files
suffix:semicolon
multiline_comment|/* read only */
DECL|member|nr_free_files
r_int
id|nr_free_files
suffix:semicolon
multiline_comment|/* read only */
DECL|member|max_files
r_int
id|max_files
suffix:semicolon
multiline_comment|/* tunable */
)brace
suffix:semicolon
r_extern
r_struct
id|files_stat_struct
id|files_stat
suffix:semicolon
r_extern
r_int
id|max_super_blocks
comma
id|nr_super_blocks
suffix:semicolon
r_extern
r_int
id|leases_enable
comma
id|dir_notify_enable
comma
id|lease_break_time
suffix:semicolon
DECL|macro|NR_FILE
mdefine_line|#define NR_FILE  8192&t;/* this can well be larger on a larger system */
DECL|macro|NR_RESERVED_FILES
mdefine_line|#define NR_RESERVED_FILES 10 /* reserved for root */
DECL|macro|NR_SUPER
mdefine_line|#define NR_SUPER 256
DECL|macro|MAY_EXEC
mdefine_line|#define MAY_EXEC 1
DECL|macro|MAY_WRITE
mdefine_line|#define MAY_WRITE 2
DECL|macro|MAY_READ
mdefine_line|#define MAY_READ 4
DECL|macro|FMODE_READ
mdefine_line|#define FMODE_READ 1
DECL|macro|FMODE_WRITE
mdefine_line|#define FMODE_WRITE 2
DECL|macro|READ
mdefine_line|#define READ 0
DECL|macro|WRITE
mdefine_line|#define WRITE 1
DECL|macro|READA
mdefine_line|#define READA 2&t;&t;/* read-ahead  - don&squot;t block if no resources */
DECL|macro|SPECIAL
mdefine_line|#define SPECIAL 4&t;/* For non-blockdevice requests in request queue */
DECL|macro|SEL_IN
mdefine_line|#define SEL_IN&t;&t;1
DECL|macro|SEL_OUT
mdefine_line|#define SEL_OUT&t;&t;2
DECL|macro|SEL_EX
mdefine_line|#define SEL_EX&t;&t;4
multiline_comment|/* public flags for file_system_type */
DECL|macro|FS_REQUIRES_DEV
mdefine_line|#define FS_REQUIRES_DEV 1 
DECL|macro|FS_NO_DCACHE
mdefine_line|#define FS_NO_DCACHE&t;2 /* Only dcache the necessary things. */
DECL|macro|FS_NO_PRELIM
mdefine_line|#define FS_NO_PRELIM&t;4 /* prevent preloading of dentries, even if&n;&t;&t;&t;   * FS_NO_DCACHE is not set.&n;&t;&t;&t;   */
DECL|macro|FS_SINGLE
mdefine_line|#define FS_SINGLE&t;8 /*&n;&t;&t;&t;   * Filesystem that can have only one superblock;&n;&t;&t;&t;   * kernel-wide vfsmnt is placed in -&gt;kern_mnt by&n;&t;&t;&t;   * kern_mount() which must be called _after_&n;&t;&t;&t;   * register_filesystem().&n;&t;&t;&t;   */
DECL|macro|FS_NOMOUNT
mdefine_line|#define FS_NOMOUNT&t;16 /* Never mount from userland */
DECL|macro|FS_LITTER
mdefine_line|#define FS_LITTER&t;32 /* Keeps the tree in dcache */
DECL|macro|FS_ODD_RENAME
mdefine_line|#define FS_ODD_RENAME&t;32768&t;/* Temporary stuff; will go away as soon&n;&t;&t;&t;&t;  * as nfs_rename() will be cleaned up&n;&t;&t;&t;&t;  */
multiline_comment|/*&n; * These are the fs-independent mount-flags: up to 32 flags are supported&n; */
DECL|macro|MS_RDONLY
mdefine_line|#define MS_RDONLY&t; 1&t;/* Mount read-only */
DECL|macro|MS_NOSUID
mdefine_line|#define MS_NOSUID&t; 2&t;/* Ignore suid and sgid bits */
DECL|macro|MS_NODEV
mdefine_line|#define MS_NODEV&t; 4&t;/* Disallow access to device special files */
DECL|macro|MS_NOEXEC
mdefine_line|#define MS_NOEXEC&t; 8&t;/* Disallow program execution */
DECL|macro|MS_SYNCHRONOUS
mdefine_line|#define MS_SYNCHRONOUS&t;16&t;/* Writes are synced at once */
DECL|macro|MS_REMOUNT
mdefine_line|#define MS_REMOUNT&t;32&t;/* Alter flags of a mounted FS */
DECL|macro|MS_MANDLOCK
mdefine_line|#define MS_MANDLOCK&t;64&t;/* Allow mandatory locks on an FS */
DECL|macro|MS_NOATIME
mdefine_line|#define MS_NOATIME&t;1024&t;/* Do not update access times. */
DECL|macro|MS_NODIRATIME
mdefine_line|#define MS_NODIRATIME&t;2048&t;/* Do not update directory access times */
DECL|macro|MS_BIND
mdefine_line|#define MS_BIND&t;&t;4096
multiline_comment|/*&n; * Flags that can be altered by MS_REMOUNT&n; */
DECL|macro|MS_RMT_MASK
mdefine_line|#define MS_RMT_MASK&t;(MS_RDONLY|MS_NOSUID|MS_NODEV|MS_NOEXEC|&bslash;&n;&t;&t;&t;MS_SYNCHRONOUS|MS_MANDLOCK|MS_NOATIME|MS_NODIRATIME)
multiline_comment|/*&n; * Magic mount flag number. Has to be or-ed to the flag values.&n; */
DECL|macro|MS_MGC_VAL
mdefine_line|#define MS_MGC_VAL 0xC0ED0000&t;/* magic flag number to indicate &quot;new&quot; flags */
DECL|macro|MS_MGC_MSK
mdefine_line|#define MS_MGC_MSK 0xffff0000&t;/* magic flag number mask */
multiline_comment|/* Inode flags - they have nothing to superblock flags now */
DECL|macro|S_SYNC
mdefine_line|#define S_SYNC&t;&t;1&t;/* Writes are synced at once */
DECL|macro|S_NOATIME
mdefine_line|#define S_NOATIME&t;2&t;/* Do not update access times */
DECL|macro|S_QUOTA
mdefine_line|#define S_QUOTA&t;&t;4&t;/* Quota initialized for file */
DECL|macro|S_APPEND
mdefine_line|#define S_APPEND&t;8&t;/* Append-only file */
DECL|macro|S_IMMUTABLE
mdefine_line|#define S_IMMUTABLE&t;16&t;/* Immutable file */
DECL|macro|S_DEAD
mdefine_line|#define S_DEAD&t;&t;32&t;/* removed, but still open directory */
multiline_comment|/*&n; * Note that nosuid etc flags are inode-specific: setting some file-system&n; * flags just means all the inodes inherit those flags by default. It might be&n; * possible to override it selectively if you really wanted to with some&n; * ioctl() that is not currently implemented.&n; *&n; * Exception: MS_RDONLY is always applied to the entire file system.&n; *&n; * Unfortunately, it is possible to change a filesystems flags with it mounted&n; * with files in use.  This means that all of the inodes will not have their&n; * i_flags updated.  Hence, i_flags no longer inherit the superblock mount&n; * flags, so these have to be checked separately. -- rmk@arm.uk.linux.org&n; */
DECL|macro|__IS_FLG
mdefine_line|#define __IS_FLG(inode,flg) ((inode)-&gt;i_sb-&gt;s_flags &amp; (flg))
DECL|macro|IS_RDONLY
mdefine_line|#define IS_RDONLY(inode) ((inode)-&gt;i_sb-&gt;s_flags &amp; MS_RDONLY)
DECL|macro|IS_NOSUID
mdefine_line|#define IS_NOSUID(inode)&t;__IS_FLG(inode, MS_NOSUID)
DECL|macro|IS_NODEV
mdefine_line|#define IS_NODEV(inode)&t;&t;__IS_FLG(inode, MS_NODEV)
DECL|macro|IS_NOEXEC
mdefine_line|#define IS_NOEXEC(inode)&t;__IS_FLG(inode, MS_NOEXEC)
DECL|macro|IS_SYNC
mdefine_line|#define IS_SYNC(inode)&t;&t;(__IS_FLG(inode, MS_SYNCHRONOUS) || ((inode)-&gt;i_flags &amp; S_SYNC))
DECL|macro|IS_MANDLOCK
mdefine_line|#define IS_MANDLOCK(inode)&t;__IS_FLG(inode, MS_MANDLOCK)
DECL|macro|IS_QUOTAINIT
mdefine_line|#define IS_QUOTAINIT(inode)&t;((inode)-&gt;i_flags &amp; S_QUOTA)
DECL|macro|IS_APPEND
mdefine_line|#define IS_APPEND(inode)&t;((inode)-&gt;i_flags &amp; S_APPEND)
DECL|macro|IS_IMMUTABLE
mdefine_line|#define IS_IMMUTABLE(inode)&t;((inode)-&gt;i_flags &amp; S_IMMUTABLE)
DECL|macro|IS_NOATIME
mdefine_line|#define IS_NOATIME(inode)&t;(__IS_FLG(inode, MS_NOATIME) || ((inode)-&gt;i_flags &amp; S_NOATIME))
DECL|macro|IS_NODIRATIME
mdefine_line|#define IS_NODIRATIME(inode)&t;__IS_FLG(inode, MS_NODIRATIME)
DECL|macro|IS_DEADDIR
mdefine_line|#define IS_DEADDIR(inode)&t;((inode)-&gt;i_flags &amp; S_DEAD)
multiline_comment|/* the read-only stuff doesn&squot;t really belong here, but any other place is&n;   probably as bad and I don&squot;t want to create yet another include file. */
DECL|macro|BLKROSET
mdefine_line|#define BLKROSET   _IO(0x12,93)&t;/* set device read-only (0 = read-write) */
DECL|macro|BLKROGET
mdefine_line|#define BLKROGET   _IO(0x12,94)&t;/* get read-only status (0 = read_write) */
DECL|macro|BLKRRPART
mdefine_line|#define BLKRRPART  _IO(0x12,95)&t;/* re-read partition table */
DECL|macro|BLKGETSIZE
mdefine_line|#define BLKGETSIZE _IO(0x12,96)&t;/* return device size */
DECL|macro|BLKFLSBUF
mdefine_line|#define BLKFLSBUF  _IO(0x12,97)&t;/* flush buffer cache */
DECL|macro|BLKRASET
mdefine_line|#define BLKRASET   _IO(0x12,98)&t;/* Set read ahead for block device */
DECL|macro|BLKRAGET
mdefine_line|#define BLKRAGET   _IO(0x12,99)&t;/* get current read ahead setting */
DECL|macro|BLKFRASET
mdefine_line|#define BLKFRASET  _IO(0x12,100)/* set filesystem (mm/filemap.c) read-ahead */
DECL|macro|BLKFRAGET
mdefine_line|#define BLKFRAGET  _IO(0x12,101)/* get filesystem (mm/filemap.c) read-ahead */
DECL|macro|BLKSECTSET
mdefine_line|#define BLKSECTSET _IO(0x12,102)/* set max sectors per request (ll_rw_blk.c) */
DECL|macro|BLKSECTGET
mdefine_line|#define BLKSECTGET _IO(0x12,103)/* get max sectors per request (ll_rw_blk.c) */
DECL|macro|BLKSSZGET
mdefine_line|#define BLKSSZGET  _IO(0x12,104)/* get block device sector size */
macro_line|#if 0
mdefine_line|#define BLKPG      _IO(0x12,105)/* See blkpg.h */
mdefine_line|#define BLKELVGET  _IOR(0x12,106,sizeof(blkelv_ioctl_arg_t))/* elevator get */
mdefine_line|#define BLKELVSET  _IOW(0x12,107,sizeof(blkelv_ioctl_arg_t))/* elevator set */
multiline_comment|/* This was here just to show that the number is taken -&n;   probably all these _IO(0x12,*) ioctls should be moved to blkpg.h. */
macro_line|#endif
DECL|macro|BMAP_IOCTL
mdefine_line|#define BMAP_IOCTL 1&t;&t;/* obsolete - kept for compatibility */
DECL|macro|FIBMAP
mdefine_line|#define FIBMAP&t;   _IO(0x00,1)&t;/* bmap access */
DECL|macro|FIGETBSZ
mdefine_line|#define FIGETBSZ   _IO(0x00,2)&t;/* get the block size used for bmap */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;asm/semaphore.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
r_extern
r_void
id|update_atime
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|macro|UPDATE_ATIME
mdefine_line|#define UPDATE_ATIME(inode) update_atime (inode)
r_extern
r_void
id|buffer_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|inode_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* bh state bits */
DECL|macro|BH_Uptodate
mdefine_line|#define BH_Uptodate&t;0&t;/* 1 if the buffer contains valid data */
DECL|macro|BH_Dirty
mdefine_line|#define BH_Dirty&t;1&t;/* 1 if the buffer is dirty */
DECL|macro|BH_Lock
mdefine_line|#define BH_Lock&t;&t;2&t;/* 1 if the buffer is locked */
DECL|macro|BH_Req
mdefine_line|#define BH_Req&t;&t;3&t;/* 0 if the buffer has been invalidated */
DECL|macro|BH_Mapped
mdefine_line|#define BH_Mapped&t;4&t;/* 1 if the buffer has a disk mapping */
DECL|macro|BH_New
mdefine_line|#define BH_New&t;&t;5&t;/* 1 if the buffer is new and not yet written out */
DECL|macro|BH_Protected
mdefine_line|#define BH_Protected&t;6&t;/* 1 if the buffer is protected */
multiline_comment|/*&n; * Try to keep the most commonly used fields in single cache lines (16&n; * bytes) to improve performance.  This ordering should be&n; * particularly beneficial on 32-bit processors.&n; * &n; * We use the first 16 bytes for the data which is used in searches&n; * over the block hash lists (ie. getblk() and friends).&n; * &n; * The second 16 bytes we use for lru buffer scans, as used by&n; * sync_buffers() and refill_freelist().  -- sct&n; */
DECL|struct|buffer_head
r_struct
id|buffer_head
(brace
multiline_comment|/* First cache line: */
DECL|member|b_next
r_struct
id|buffer_head
op_star
id|b_next
suffix:semicolon
multiline_comment|/* Hash queue list */
DECL|member|b_blocknr
r_int
r_int
id|b_blocknr
suffix:semicolon
multiline_comment|/* block number */
DECL|member|b_size
r_int
r_int
id|b_size
suffix:semicolon
multiline_comment|/* block size */
DECL|member|b_list
r_int
r_int
id|b_list
suffix:semicolon
multiline_comment|/* List that this buffer appears */
DECL|member|b_dev
id|kdev_t
id|b_dev
suffix:semicolon
multiline_comment|/* device (B_FREE = free) */
DECL|member|b_count
id|atomic_t
id|b_count
suffix:semicolon
multiline_comment|/* users using this block */
DECL|member|b_rdev
id|kdev_t
id|b_rdev
suffix:semicolon
multiline_comment|/* Real device */
DECL|member|b_state
r_int
r_int
id|b_state
suffix:semicolon
multiline_comment|/* buffer state bitmap (see above) */
DECL|member|b_flushtime
r_int
r_int
id|b_flushtime
suffix:semicolon
multiline_comment|/* Time when (dirty) buffer should be written */
DECL|member|b_next_free
r_struct
id|buffer_head
op_star
id|b_next_free
suffix:semicolon
multiline_comment|/* lru/free list linkage */
DECL|member|b_prev_free
r_struct
id|buffer_head
op_star
id|b_prev_free
suffix:semicolon
multiline_comment|/* doubly linked list of buffers */
DECL|member|b_this_page
r_struct
id|buffer_head
op_star
id|b_this_page
suffix:semicolon
multiline_comment|/* circular list of buffers in one page */
DECL|member|b_reqnext
r_struct
id|buffer_head
op_star
id|b_reqnext
suffix:semicolon
multiline_comment|/* request queue */
DECL|member|b_pprev
r_struct
id|buffer_head
op_star
op_star
id|b_pprev
suffix:semicolon
multiline_comment|/* doubly linked list of hash-queue */
DECL|member|b_data
r_char
op_star
id|b_data
suffix:semicolon
multiline_comment|/* pointer to data block (512 byte) */
DECL|member|b_page
r_struct
id|page
op_star
id|b_page
suffix:semicolon
multiline_comment|/* the page this bh is mapped to */
DECL|member|b_end_io
r_void
(paren
op_star
id|b_end_io
)paren
(paren
r_struct
id|buffer_head
op_star
id|bh
comma
r_int
id|uptodate
)paren
suffix:semicolon
multiline_comment|/* I/O completion */
DECL|member|b_private
r_void
op_star
id|b_private
suffix:semicolon
multiline_comment|/* reserved for b_end_io */
DECL|member|b_rsector
r_int
r_int
id|b_rsector
suffix:semicolon
multiline_comment|/* Real buffer location on disk */
DECL|member|b_wait
id|wait_queue_head_t
id|b_wait
suffix:semicolon
DECL|member|b_inode
r_struct
id|inode
op_star
id|b_inode
suffix:semicolon
DECL|member|b_inode_buffers
r_struct
id|list_head
id|b_inode_buffers
suffix:semicolon
multiline_comment|/* doubly linked list of inode dirty buffers */
)brace
suffix:semicolon
DECL|typedef|bh_end_io_t
r_typedef
r_void
(paren
id|bh_end_io_t
)paren
(paren
r_struct
id|buffer_head
op_star
id|bh
comma
r_int
id|uptodate
)paren
suffix:semicolon
r_void
id|init_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
comma
id|bh_end_io_t
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|macro|__buffer_state
mdefine_line|#define __buffer_state(bh, state)&t;(((bh)-&gt;b_state &amp; (1UL &lt;&lt; BH_##state)) != 0)
DECL|macro|buffer_uptodate
mdefine_line|#define buffer_uptodate(bh)&t;__buffer_state(bh,Uptodate)
DECL|macro|buffer_dirty
mdefine_line|#define buffer_dirty(bh)&t;__buffer_state(bh,Dirty)
DECL|macro|buffer_locked
mdefine_line|#define buffer_locked(bh)&t;__buffer_state(bh,Lock)
DECL|macro|buffer_req
mdefine_line|#define buffer_req(bh)&t;&t;__buffer_state(bh,Req)
DECL|macro|buffer_mapped
mdefine_line|#define buffer_mapped(bh)&t;__buffer_state(bh,Mapped)
DECL|macro|buffer_new
mdefine_line|#define buffer_new(bh)&t;&t;__buffer_state(bh,New)
DECL|macro|buffer_protected
mdefine_line|#define buffer_protected(bh)&t;__buffer_state(bh,Protected)
DECL|macro|bh_offset
mdefine_line|#define bh_offset(bh)&t;&t;((unsigned long)(bh)-&gt;b_data &amp; ~PAGE_MASK)
r_extern
r_void
id|set_bh_page
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
comma
r_struct
id|page
op_star
id|page
comma
r_int
r_int
id|offset
)paren
suffix:semicolon
DECL|macro|touch_buffer
mdefine_line|#define touch_buffer(bh)&t;SetPageReferenced(bh-&gt;b_page)
macro_line|#include &lt;linux/pipe_fs_i.h&gt;
macro_line|#include &lt;linux/minix_fs_i.h&gt;
macro_line|#include &lt;linux/ext2_fs_i.h&gt;
macro_line|#include &lt;linux/hpfs_fs_i.h&gt;
macro_line|#include &lt;linux/ntfs_fs_i.h&gt;
macro_line|#include &lt;linux/msdos_fs_i.h&gt;
macro_line|#include &lt;linux/umsdos_fs_i.h&gt;
macro_line|#include &lt;linux/iso_fs_i.h&gt;
macro_line|#include &lt;linux/nfs_fs_i.h&gt;
macro_line|#include &lt;linux/sysv_fs_i.h&gt;
macro_line|#include &lt;linux/affs_fs_i.h&gt;
macro_line|#include &lt;linux/ufs_fs_i.h&gt;
macro_line|#include &lt;linux/efs_fs_i.h&gt;
macro_line|#include &lt;linux/coda_fs_i.h&gt;
macro_line|#include &lt;linux/romfs_fs_i.h&gt;
macro_line|#include &lt;linux/shmem_fs.h&gt;
macro_line|#include &lt;linux/smb_fs_i.h&gt;
macro_line|#include &lt;linux/hfs_fs_i.h&gt;
macro_line|#include &lt;linux/adfs_fs_i.h&gt;
macro_line|#include &lt;linux/qnx4_fs_i.h&gt;
macro_line|#include &lt;linux/bfs_fs_i.h&gt;
macro_line|#include &lt;linux/udf_fs_i.h&gt;
macro_line|#include &lt;linux/ncp_fs_i.h&gt;
macro_line|#include &lt;linux/proc_fs_i.h&gt;
macro_line|#include &lt;linux/usbdev_fs_i.h&gt;
multiline_comment|/*&n; * Attribute flags.  These should be or-ed together to figure out what&n; * has been changed!&n; */
DECL|macro|ATTR_MODE
mdefine_line|#define ATTR_MODE&t;1
DECL|macro|ATTR_UID
mdefine_line|#define ATTR_UID&t;2
DECL|macro|ATTR_GID
mdefine_line|#define ATTR_GID&t;4
DECL|macro|ATTR_SIZE
mdefine_line|#define ATTR_SIZE&t;8
DECL|macro|ATTR_ATIME
mdefine_line|#define ATTR_ATIME&t;16
DECL|macro|ATTR_MTIME
mdefine_line|#define ATTR_MTIME&t;32
DECL|macro|ATTR_CTIME
mdefine_line|#define ATTR_CTIME&t;64
DECL|macro|ATTR_ATIME_SET
mdefine_line|#define ATTR_ATIME_SET&t;128
DECL|macro|ATTR_MTIME_SET
mdefine_line|#define ATTR_MTIME_SET&t;256
DECL|macro|ATTR_FORCE
mdefine_line|#define ATTR_FORCE&t;512&t;/* Not a change, but a change it */
DECL|macro|ATTR_ATTR_FLAG
mdefine_line|#define ATTR_ATTR_FLAG&t;1024
multiline_comment|/*&n; * This is the Inode Attributes structure, used for notify_change().  It&n; * uses the above definitions as flags, to know which values have changed.&n; * Also, in this manner, a Filesystem can look at only the values it cares&n; * about.  Basically, these are the attributes that the VFS layer can&n; * request to change from the FS layer.&n; *&n; * Derek Atkins &lt;warlord@MIT.EDU&gt; 94-10-20&n; */
DECL|struct|iattr
r_struct
id|iattr
(brace
DECL|member|ia_valid
r_int
r_int
id|ia_valid
suffix:semicolon
DECL|member|ia_mode
id|umode_t
id|ia_mode
suffix:semicolon
DECL|member|ia_uid
id|uid_t
id|ia_uid
suffix:semicolon
DECL|member|ia_gid
id|gid_t
id|ia_gid
suffix:semicolon
DECL|member|ia_size
id|loff_t
id|ia_size
suffix:semicolon
DECL|member|ia_atime
id|time_t
id|ia_atime
suffix:semicolon
DECL|member|ia_mtime
id|time_t
id|ia_mtime
suffix:semicolon
DECL|member|ia_ctime
id|time_t
id|ia_ctime
suffix:semicolon
DECL|member|ia_attr_flags
r_int
r_int
id|ia_attr_flags
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This is the inode attributes flag definitions&n; */
DECL|macro|ATTR_FLAG_SYNCRONOUS
mdefine_line|#define ATTR_FLAG_SYNCRONOUS&t;1 &t;/* Syncronous write */
DECL|macro|ATTR_FLAG_NOATIME
mdefine_line|#define ATTR_FLAG_NOATIME&t;2 &t;/* Don&squot;t update atime */
DECL|macro|ATTR_FLAG_APPEND
mdefine_line|#define ATTR_FLAG_APPEND&t;4 &t;/* Append-only file */
DECL|macro|ATTR_FLAG_IMMUTABLE
mdefine_line|#define ATTR_FLAG_IMMUTABLE&t;8 &t;/* Immutable file */
DECL|macro|ATTR_FLAG_NODIRATIME
mdefine_line|#define ATTR_FLAG_NODIRATIME&t;16 &t;/* Don&squot;t update atime for directory */
multiline_comment|/*&n; * Includes for diskquotas and mount structures.&n; */
macro_line|#include &lt;linux/quota.h&gt;
macro_line|#include &lt;linux/mount.h&gt;
multiline_comment|/*&n; * oh the beauties of C type declarations.&n; */
r_struct
id|page
suffix:semicolon
r_struct
id|address_space
suffix:semicolon
DECL|struct|address_space_operations
r_struct
id|address_space_operations
(brace
DECL|member|writepage
r_int
(paren
op_star
id|writepage
)paren
(paren
r_struct
id|page
op_star
)paren
suffix:semicolon
DECL|member|readpage
r_int
(paren
op_star
id|readpage
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
)paren
suffix:semicolon
DECL|member|sync_page
r_int
(paren
op_star
id|sync_page
)paren
(paren
r_struct
id|page
op_star
)paren
suffix:semicolon
DECL|member|prepare_write
r_int
(paren
op_star
id|prepare_write
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|commit_write
r_int
(paren
op_star
id|commit_write
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* Unfortunately this kludge is needed for FIBMAP. Don&squot;t use it */
DECL|member|bmap
r_int
(paren
op_star
id|bmap
)paren
(paren
r_struct
id|address_space
op_star
comma
r_int
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|address_space
r_struct
id|address_space
(brace
DECL|member|clean_pages
r_struct
id|list_head
id|clean_pages
suffix:semicolon
multiline_comment|/* list of clean pages */
DECL|member|dirty_pages
r_struct
id|list_head
id|dirty_pages
suffix:semicolon
multiline_comment|/* list of dirty pages */
DECL|member|locked_pages
r_struct
id|list_head
id|locked_pages
suffix:semicolon
multiline_comment|/* list of locked pages */
DECL|member|nrpages
r_int
r_int
id|nrpages
suffix:semicolon
multiline_comment|/* number of total pages */
DECL|member|a_ops
r_struct
id|address_space_operations
op_star
id|a_ops
suffix:semicolon
multiline_comment|/* methods */
DECL|member|host
r_struct
id|inode
op_star
id|host
suffix:semicolon
multiline_comment|/* owner: inode, block_device */
DECL|member|i_mmap
r_struct
id|vm_area_struct
op_star
id|i_mmap
suffix:semicolon
multiline_comment|/* list of private mappings */
DECL|member|i_mmap_shared
r_struct
id|vm_area_struct
op_star
id|i_mmap_shared
suffix:semicolon
multiline_comment|/* list of shared mappings */
DECL|member|i_shared_lock
id|spinlock_t
id|i_shared_lock
suffix:semicolon
multiline_comment|/* and spinlock protecting it */
)brace
suffix:semicolon
DECL|struct|block_device
r_struct
id|block_device
(brace
DECL|member|bd_hash
r_struct
id|list_head
id|bd_hash
suffix:semicolon
DECL|member|bd_count
id|atomic_t
id|bd_count
suffix:semicolon
multiline_comment|/*&t;struct address_space&t;bd_data; */
DECL|member|bd_dev
id|dev_t
id|bd_dev
suffix:semicolon
multiline_comment|/* not a kdev_t - it&squot;s a search key */
DECL|member|bd_openers
id|atomic_t
id|bd_openers
suffix:semicolon
DECL|member|bd_op
r_const
r_struct
id|block_device_operations
op_star
id|bd_op
suffix:semicolon
DECL|member|bd_sem
r_struct
id|semaphore
id|bd_sem
suffix:semicolon
multiline_comment|/* open/close mutex */
)brace
suffix:semicolon
DECL|struct|inode
r_struct
id|inode
(brace
DECL|member|i_hash
r_struct
id|list_head
id|i_hash
suffix:semicolon
DECL|member|i_list
r_struct
id|list_head
id|i_list
suffix:semicolon
DECL|member|i_dentry
r_struct
id|list_head
id|i_dentry
suffix:semicolon
DECL|member|i_dirty_buffers
r_struct
id|list_head
id|i_dirty_buffers
suffix:semicolon
DECL|member|i_ino
r_int
r_int
id|i_ino
suffix:semicolon
DECL|member|i_count
id|atomic_t
id|i_count
suffix:semicolon
DECL|member|i_dev
id|kdev_t
id|i_dev
suffix:semicolon
DECL|member|i_mode
id|umode_t
id|i_mode
suffix:semicolon
DECL|member|i_nlink
id|nlink_t
id|i_nlink
suffix:semicolon
DECL|member|i_uid
id|uid_t
id|i_uid
suffix:semicolon
DECL|member|i_gid
id|gid_t
id|i_gid
suffix:semicolon
DECL|member|i_rdev
id|kdev_t
id|i_rdev
suffix:semicolon
DECL|member|i_size
id|loff_t
id|i_size
suffix:semicolon
DECL|member|i_atime
id|time_t
id|i_atime
suffix:semicolon
DECL|member|i_mtime
id|time_t
id|i_mtime
suffix:semicolon
DECL|member|i_ctime
id|time_t
id|i_ctime
suffix:semicolon
DECL|member|i_blksize
r_int
r_int
id|i_blksize
suffix:semicolon
DECL|member|i_blocks
r_int
r_int
id|i_blocks
suffix:semicolon
DECL|member|i_version
r_int
r_int
id|i_version
suffix:semicolon
DECL|member|i_sem
r_struct
id|semaphore
id|i_sem
suffix:semicolon
DECL|member|i_zombie
r_struct
id|semaphore
id|i_zombie
suffix:semicolon
DECL|member|i_op
r_struct
id|inode_operations
op_star
id|i_op
suffix:semicolon
DECL|member|i_fop
r_struct
id|file_operations
op_star
id|i_fop
suffix:semicolon
multiline_comment|/* former -&gt;i_op-&gt;default_file_ops */
DECL|member|i_sb
r_struct
id|super_block
op_star
id|i_sb
suffix:semicolon
DECL|member|i_wait
id|wait_queue_head_t
id|i_wait
suffix:semicolon
DECL|member|i_flock
r_struct
id|file_lock
op_star
id|i_flock
suffix:semicolon
DECL|member|i_mapping
r_struct
id|address_space
op_star
id|i_mapping
suffix:semicolon
DECL|member|i_data
r_struct
id|address_space
id|i_data
suffix:semicolon
DECL|member|i_dquot
r_struct
id|dquot
op_star
id|i_dquot
(braket
id|MAXQUOTAS
)braket
suffix:semicolon
DECL|member|i_pipe
r_struct
id|pipe_inode_info
op_star
id|i_pipe
suffix:semicolon
DECL|member|i_bdev
r_struct
id|block_device
op_star
id|i_bdev
suffix:semicolon
DECL|member|i_dnotify_mask
r_int
r_int
id|i_dnotify_mask
suffix:semicolon
multiline_comment|/* Directory notify events */
DECL|member|i_dnotify
r_struct
id|dnotify_struct
op_star
id|i_dnotify
suffix:semicolon
multiline_comment|/* for directory notifications */
DECL|member|i_state
r_int
r_int
id|i_state
suffix:semicolon
DECL|member|i_flags
r_int
r_int
id|i_flags
suffix:semicolon
DECL|member|i_sock
r_int
r_char
id|i_sock
suffix:semicolon
DECL|member|i_writecount
id|atomic_t
id|i_writecount
suffix:semicolon
DECL|member|i_attr_flags
r_int
r_int
id|i_attr_flags
suffix:semicolon
DECL|member|i_generation
id|__u32
id|i_generation
suffix:semicolon
r_union
(brace
DECL|member|minix_i
r_struct
id|minix_inode_info
id|minix_i
suffix:semicolon
DECL|member|ext2_i
r_struct
id|ext2_inode_info
id|ext2_i
suffix:semicolon
DECL|member|hpfs_i
r_struct
id|hpfs_inode_info
id|hpfs_i
suffix:semicolon
DECL|member|ntfs_i
r_struct
id|ntfs_inode_info
id|ntfs_i
suffix:semicolon
DECL|member|msdos_i
r_struct
id|msdos_inode_info
id|msdos_i
suffix:semicolon
DECL|member|umsdos_i
r_struct
id|umsdos_inode_info
id|umsdos_i
suffix:semicolon
DECL|member|isofs_i
r_struct
id|iso_inode_info
id|isofs_i
suffix:semicolon
DECL|member|nfs_i
r_struct
id|nfs_inode_info
id|nfs_i
suffix:semicolon
DECL|member|sysv_i
r_struct
id|sysv_inode_info
id|sysv_i
suffix:semicolon
DECL|member|affs_i
r_struct
id|affs_inode_info
id|affs_i
suffix:semicolon
DECL|member|ufs_i
r_struct
id|ufs_inode_info
id|ufs_i
suffix:semicolon
DECL|member|efs_i
r_struct
id|efs_inode_info
id|efs_i
suffix:semicolon
DECL|member|romfs_i
r_struct
id|romfs_inode_info
id|romfs_i
suffix:semicolon
DECL|member|shmem_i
r_struct
id|shmem_inode_info
id|shmem_i
suffix:semicolon
DECL|member|coda_i
r_struct
id|coda_inode_info
id|coda_i
suffix:semicolon
DECL|member|smbfs_i
r_struct
id|smb_inode_info
id|smbfs_i
suffix:semicolon
DECL|member|hfs_i
r_struct
id|hfs_inode_info
id|hfs_i
suffix:semicolon
DECL|member|adfs_i
r_struct
id|adfs_inode_info
id|adfs_i
suffix:semicolon
DECL|member|qnx4_i
r_struct
id|qnx4_inode_info
id|qnx4_i
suffix:semicolon
DECL|member|bfs_i
r_struct
id|bfs_inode_info
id|bfs_i
suffix:semicolon
DECL|member|udf_i
r_struct
id|udf_inode_info
id|udf_i
suffix:semicolon
DECL|member|ncpfs_i
r_struct
id|ncp_inode_info
id|ncpfs_i
suffix:semicolon
DECL|member|proc_i
r_struct
id|proc_inode_info
id|proc_i
suffix:semicolon
DECL|member|socket_i
r_struct
id|socket
id|socket_i
suffix:semicolon
DECL|member|usbdev_i
r_struct
id|usbdev_inode_info
id|usbdev_i
suffix:semicolon
DECL|member|generic_ip
r_void
op_star
id|generic_ip
suffix:semicolon
DECL|member|u
)brace
id|u
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Inode state bits.. */
DECL|macro|I_DIRTY_SYNC
mdefine_line|#define I_DIRTY_SYNC&t;&t;1 /* Not dirty enough for O_DATASYNC */
DECL|macro|I_DIRTY_DATASYNC
mdefine_line|#define I_DIRTY_DATASYNC&t;2 /* Data-related inode changes pending */
DECL|macro|I_DIRTY_PAGES
mdefine_line|#define I_DIRTY_PAGES&t;&t;4 /* Data-related inode changes pending */
DECL|macro|I_LOCK
mdefine_line|#define I_LOCK&t;&t;&t;8
DECL|macro|I_FREEING
mdefine_line|#define I_FREEING&t;&t;16
DECL|macro|I_CLEAR
mdefine_line|#define I_CLEAR&t;&t;&t;32
DECL|macro|I_DIRTY
mdefine_line|#define I_DIRTY (I_DIRTY_SYNC | I_DIRTY_DATASYNC | I_DIRTY_PAGES)
r_extern
r_void
id|__mark_inode_dirty
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|mark_inode_dirty
r_static
r_inline
r_void
id|mark_inode_dirty
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_if
c_cond
(paren
(paren
id|inode-&gt;i_state
op_amp
id|I_DIRTY
)paren
op_ne
id|I_DIRTY
)paren
id|__mark_inode_dirty
c_func
(paren
id|inode
comma
id|I_DIRTY
)paren
suffix:semicolon
)brace
DECL|function|mark_inode_dirty_sync
r_static
r_inline
r_void
id|mark_inode_dirty_sync
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|inode-&gt;i_state
op_amp
id|I_DIRTY_SYNC
)paren
)paren
id|__mark_inode_dirty
c_func
(paren
id|inode
comma
id|I_DIRTY_SYNC
)paren
suffix:semicolon
)brace
DECL|function|mark_inode_dirty_pages
r_static
r_inline
r_void
id|mark_inode_dirty_pages
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_if
c_cond
(paren
id|inode
op_logical_and
op_logical_neg
(paren
id|inode-&gt;i_state
op_amp
id|I_DIRTY_PAGES
)paren
)paren
id|__mark_inode_dirty
c_func
(paren
id|inode
comma
id|I_DIRTY_PAGES
)paren
suffix:semicolon
)brace
DECL|struct|fown_struct
r_struct
id|fown_struct
(brace
DECL|member|pid
r_int
id|pid
suffix:semicolon
multiline_comment|/* pid or -pgrp where SIGIO should be sent */
DECL|member|uid
DECL|member|euid
id|uid_t
id|uid
comma
id|euid
suffix:semicolon
multiline_comment|/* uid/euid of process setting the owner */
DECL|member|signum
r_int
id|signum
suffix:semicolon
multiline_comment|/* posix.1b rt signal to be delivered on IO */
)brace
suffix:semicolon
DECL|struct|file
r_struct
id|file
(brace
DECL|member|f_list
r_struct
id|list_head
id|f_list
suffix:semicolon
DECL|member|f_dentry
r_struct
id|dentry
op_star
id|f_dentry
suffix:semicolon
DECL|member|f_vfsmnt
r_struct
id|vfsmount
op_star
id|f_vfsmnt
suffix:semicolon
DECL|member|f_op
r_struct
id|file_operations
op_star
id|f_op
suffix:semicolon
DECL|member|f_count
id|atomic_t
id|f_count
suffix:semicolon
DECL|member|f_flags
r_int
r_int
id|f_flags
suffix:semicolon
DECL|member|f_mode
id|mode_t
id|f_mode
suffix:semicolon
DECL|member|f_pos
id|loff_t
id|f_pos
suffix:semicolon
DECL|member|f_reada
DECL|member|f_ramax
DECL|member|f_raend
DECL|member|f_ralen
DECL|member|f_rawin
r_int
r_int
id|f_reada
comma
id|f_ramax
comma
id|f_raend
comma
id|f_ralen
comma
id|f_rawin
suffix:semicolon
DECL|member|f_owner
r_struct
id|fown_struct
id|f_owner
suffix:semicolon
DECL|member|f_uid
DECL|member|f_gid
r_int
r_int
id|f_uid
comma
id|f_gid
suffix:semicolon
DECL|member|f_error
r_int
id|f_error
suffix:semicolon
DECL|member|f_version
r_int
r_int
id|f_version
suffix:semicolon
multiline_comment|/* needed for tty driver, and maybe others */
DECL|member|private_data
r_void
op_star
id|private_data
suffix:semicolon
)brace
suffix:semicolon
r_extern
id|spinlock_t
id|files_lock
suffix:semicolon
DECL|macro|file_list_lock
mdefine_line|#define file_list_lock() spin_lock(&amp;files_lock);
DECL|macro|file_list_unlock
mdefine_line|#define file_list_unlock() spin_unlock(&amp;files_lock);
DECL|macro|get_file
mdefine_line|#define get_file(x)&t;atomic_inc(&amp;(x)-&gt;f_count)
DECL|macro|file_count
mdefine_line|#define file_count(x)&t;atomic_read(&amp;(x)-&gt;f_count)
r_extern
r_int
id|init_private_file
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
DECL|macro|FL_POSIX
mdefine_line|#define FL_POSIX&t;1
DECL|macro|FL_FLOCK
mdefine_line|#define FL_FLOCK&t;2
DECL|macro|FL_BROKEN
mdefine_line|#define FL_BROKEN&t;4&t;/* broken flock() emulation */
DECL|macro|FL_ACCESS
mdefine_line|#define FL_ACCESS&t;8&t;/* for processes suspended by mandatory locking */
DECL|macro|FL_LOCKD
mdefine_line|#define FL_LOCKD&t;16&t;/* lock held by rpc.lockd */
DECL|macro|FL_LEASE
mdefine_line|#define FL_LEASE&t;32&t;/* lease held on this file */
multiline_comment|/*&n; * The POSIX file lock owner is determined by&n; * the &quot;struct files_struct&quot; in the thread group&n; * (or NULL for no owner - BSD locks).&n; *&n; * Lockd stuffs a &quot;host&quot; pointer into this.&n; */
DECL|typedef|fl_owner_t
r_typedef
r_struct
id|files_struct
op_star
id|fl_owner_t
suffix:semicolon
DECL|struct|file_lock
r_struct
id|file_lock
(brace
DECL|member|fl_next
r_struct
id|file_lock
op_star
id|fl_next
suffix:semicolon
multiline_comment|/* singly linked list for this inode  */
DECL|member|fl_link
r_struct
id|list_head
id|fl_link
suffix:semicolon
multiline_comment|/* doubly linked list of all locks */
DECL|member|fl_block
r_struct
id|list_head
id|fl_block
suffix:semicolon
multiline_comment|/* circular list of blocked processes */
DECL|member|fl_owner
id|fl_owner_t
id|fl_owner
suffix:semicolon
DECL|member|fl_pid
r_int
r_int
id|fl_pid
suffix:semicolon
DECL|member|fl_wait
id|wait_queue_head_t
id|fl_wait
suffix:semicolon
DECL|member|fl_file
r_struct
id|file
op_star
id|fl_file
suffix:semicolon
DECL|member|fl_flags
r_int
r_char
id|fl_flags
suffix:semicolon
DECL|member|fl_type
r_int
r_char
id|fl_type
suffix:semicolon
DECL|member|fl_start
id|loff_t
id|fl_start
suffix:semicolon
DECL|member|fl_end
id|loff_t
id|fl_end
suffix:semicolon
DECL|member|fl_notify
r_void
(paren
op_star
id|fl_notify
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
multiline_comment|/* unblock callback */
DECL|member|fl_insert
r_void
(paren
op_star
id|fl_insert
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
multiline_comment|/* lock insertion callback */
DECL|member|fl_remove
r_void
(paren
op_star
id|fl_remove
)paren
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
multiline_comment|/* lock removal callback */
DECL|member|fl_fasync
r_struct
id|fasync_struct
op_star
id|fl_fasync
suffix:semicolon
multiline_comment|/* for lease break notifications */
r_union
(brace
DECL|member|nfs_fl
r_struct
id|nfs_lock_info
id|nfs_fl
suffix:semicolon
DECL|member|fl_u
)brace
id|fl_u
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* The following constant reflects the upper bound of the file/locking space */
macro_line|#ifndef OFFSET_MAX
DECL|macro|INT_LIMIT
mdefine_line|#define INT_LIMIT(x)&t;(~((x)1 &lt;&lt; (sizeof(x)*8 - 1)))
DECL|macro|OFFSET_MAX
mdefine_line|#define OFFSET_MAX&t;INT_LIMIT(loff_t)
DECL|macro|OFFT_OFFSET_MAX
mdefine_line|#define OFFT_OFFSET_MAX&t;INT_LIMIT(off_t)
macro_line|#endif
r_extern
r_struct
id|list_head
id|file_lock_list
suffix:semicolon
macro_line|#include &lt;linux/fcntl.h&gt;
r_extern
r_int
id|fcntl_getlk
c_func
(paren
r_int
r_int
comma
r_struct
id|flock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_setlk
c_func
(paren
r_int
r_int
comma
r_int
r_int
comma
r_struct
id|flock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_getlk64
c_func
(paren
r_int
r_int
comma
r_struct
id|flock64
op_star
)paren
suffix:semicolon
r_extern
r_int
id|fcntl_setlk64
c_func
(paren
r_int
r_int
comma
r_int
r_int
comma
r_struct
id|flock64
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/locks.c */
r_extern
r_void
id|locks_init_lock
c_func
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|locks_copy_lock
c_func
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|locks_remove_posix
c_func
(paren
r_struct
id|file
op_star
comma
id|fl_owner_t
)paren
suffix:semicolon
r_extern
r_void
id|locks_remove_flock
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_lock
op_star
id|posix_test_lock
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|posix_lock_file
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|file_lock
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|posix_block_lock
c_func
(paren
r_struct
id|file_lock
op_star
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|posix_unblock_lock
c_func
(paren
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
r_extern
r_int
id|__get_lease
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
r_int
id|flags
)paren
suffix:semicolon
r_extern
id|time_t
id|lease_get_mtime
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|lock_may_read
c_func
(paren
r_struct
id|inode
op_star
comma
id|loff_t
id|start
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_int
id|lock_may_write
c_func
(paren
r_struct
id|inode
op_star
comma
id|loff_t
id|start
comma
r_int
r_int
id|count
)paren
suffix:semicolon
DECL|struct|fasync_struct
r_struct
id|fasync_struct
(brace
DECL|member|magic
r_int
id|magic
suffix:semicolon
DECL|member|fa_fd
r_int
id|fa_fd
suffix:semicolon
DECL|member|fa_next
r_struct
id|fasync_struct
op_star
id|fa_next
suffix:semicolon
multiline_comment|/* singly linked list */
DECL|member|fa_file
r_struct
id|file
op_star
id|fa_file
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|FASYNC_MAGIC
mdefine_line|#define FASYNC_MAGIC 0x4601
multiline_comment|/* SMP safe fasync helpers: */
r_extern
r_int
id|fasync_helper
c_func
(paren
r_int
comma
r_struct
id|file
op_star
comma
r_int
comma
r_struct
id|fasync_struct
op_star
op_star
)paren
suffix:semicolon
multiline_comment|/* can be called from interrupts */
r_extern
r_void
id|kill_fasync
c_func
(paren
r_struct
id|fasync_struct
op_star
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* only for net: no internal synchronization */
r_extern
r_void
id|__kill_fasync
c_func
(paren
r_struct
id|fasync_struct
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|struct|nameidata
r_struct
id|nameidata
(brace
DECL|member|dentry
r_struct
id|dentry
op_star
id|dentry
suffix:semicolon
DECL|member|mnt
r_struct
id|vfsmount
op_star
id|mnt
suffix:semicolon
DECL|member|last
r_struct
id|qstr
id|last
suffix:semicolon
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
DECL|member|last_type
r_int
id|last_type
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|DQUOT_USR_ENABLED
mdefine_line|#define DQUOT_USR_ENABLED&t;0x01&t;&t;/* User diskquotas enabled */
DECL|macro|DQUOT_GRP_ENABLED
mdefine_line|#define DQUOT_GRP_ENABLED&t;0x02&t;&t;/* Group diskquotas enabled */
DECL|struct|quota_mount_options
r_struct
id|quota_mount_options
(brace
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
multiline_comment|/* Flags for diskquotas on this device */
DECL|member|dqio_sem
r_struct
id|semaphore
id|dqio_sem
suffix:semicolon
multiline_comment|/* lock device while I/O in progress */
DECL|member|dqoff_sem
r_struct
id|semaphore
id|dqoff_sem
suffix:semicolon
multiline_comment|/* serialize quota_off() and quota_on() on device */
DECL|member|files
r_struct
id|file
op_star
id|files
(braket
id|MAXQUOTAS
)braket
suffix:semicolon
multiline_comment|/* fp&squot;s to quotafiles */
DECL|member|inode_expire
id|time_t
id|inode_expire
(braket
id|MAXQUOTAS
)braket
suffix:semicolon
multiline_comment|/* expiretime for inode-quota */
DECL|member|block_expire
id|time_t
id|block_expire
(braket
id|MAXQUOTAS
)braket
suffix:semicolon
multiline_comment|/* expiretime for block-quota */
DECL|member|rsquash
r_char
id|rsquash
(braket
id|MAXQUOTAS
)braket
suffix:semicolon
multiline_comment|/* for quotas threat root as any other user */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;Umount options&n; */
DECL|macro|MNT_FORCE
mdefine_line|#define MNT_FORCE&t;0x00000001&t;/* Attempt to forcibily umount */
macro_line|#include &lt;linux/minix_fs_sb.h&gt;
macro_line|#include &lt;linux/ext2_fs_sb.h&gt;
macro_line|#include &lt;linux/hpfs_fs_sb.h&gt;
macro_line|#include &lt;linux/ntfs_fs_sb.h&gt;
macro_line|#include &lt;linux/msdos_fs_sb.h&gt;
macro_line|#include &lt;linux/iso_fs_sb.h&gt;
macro_line|#include &lt;linux/nfs_fs_sb.h&gt;
macro_line|#include &lt;linux/sysv_fs_sb.h&gt;
macro_line|#include &lt;linux/affs_fs_sb.h&gt;
macro_line|#include &lt;linux/ufs_fs_sb.h&gt;
macro_line|#include &lt;linux/efs_fs_sb.h&gt;
macro_line|#include &lt;linux/romfs_fs_sb.h&gt;
macro_line|#include &lt;linux/smb_fs_sb.h&gt;
macro_line|#include &lt;linux/hfs_fs_sb.h&gt;
macro_line|#include &lt;linux/adfs_fs_sb.h&gt;
macro_line|#include &lt;linux/qnx4_fs_sb.h&gt;
macro_line|#include &lt;linux/bfs_fs_sb.h&gt;
macro_line|#include &lt;linux/udf_fs_sb.h&gt;
macro_line|#include &lt;linux/ncp_fs_sb.h&gt;
macro_line|#include &lt;linux/usbdev_fs_sb.h&gt;
r_extern
r_struct
id|list_head
id|super_blocks
suffix:semicolon
DECL|macro|sb_entry
mdefine_line|#define sb_entry(list)&t;list_entry((list), struct super_block, s_list)
DECL|struct|super_block
r_struct
id|super_block
(brace
DECL|member|s_list
r_struct
id|list_head
id|s_list
suffix:semicolon
multiline_comment|/* Keep this first */
DECL|member|s_dev
id|kdev_t
id|s_dev
suffix:semicolon
DECL|member|s_blocksize
r_int
r_int
id|s_blocksize
suffix:semicolon
DECL|member|s_blocksize_bits
r_int
r_char
id|s_blocksize_bits
suffix:semicolon
DECL|member|s_lock
r_int
r_char
id|s_lock
suffix:semicolon
DECL|member|s_dirt
r_int
r_char
id|s_dirt
suffix:semicolon
DECL|member|s_type
r_struct
id|file_system_type
op_star
id|s_type
suffix:semicolon
DECL|member|s_op
r_struct
id|super_operations
op_star
id|s_op
suffix:semicolon
DECL|member|dq_op
r_struct
id|dquot_operations
op_star
id|dq_op
suffix:semicolon
DECL|member|s_flags
r_int
r_int
id|s_flags
suffix:semicolon
DECL|member|s_magic
r_int
r_int
id|s_magic
suffix:semicolon
DECL|member|s_root
r_struct
id|dentry
op_star
id|s_root
suffix:semicolon
DECL|member|s_wait
id|wait_queue_head_t
id|s_wait
suffix:semicolon
DECL|member|s_dirty
r_struct
id|list_head
id|s_dirty
suffix:semicolon
multiline_comment|/* dirty inodes */
DECL|member|s_files
r_struct
id|list_head
id|s_files
suffix:semicolon
DECL|member|s_bdev
r_struct
id|block_device
op_star
id|s_bdev
suffix:semicolon
DECL|member|s_mounts
r_struct
id|list_head
id|s_mounts
suffix:semicolon
multiline_comment|/* vfsmount(s) of this one */
DECL|member|s_dquot
r_struct
id|quota_mount_options
id|s_dquot
suffix:semicolon
multiline_comment|/* Diskquota specific options */
r_union
(brace
DECL|member|minix_sb
r_struct
id|minix_sb_info
id|minix_sb
suffix:semicolon
DECL|member|ext2_sb
r_struct
id|ext2_sb_info
id|ext2_sb
suffix:semicolon
DECL|member|hpfs_sb
r_struct
id|hpfs_sb_info
id|hpfs_sb
suffix:semicolon
DECL|member|ntfs_sb
r_struct
id|ntfs_sb_info
id|ntfs_sb
suffix:semicolon
DECL|member|msdos_sb
r_struct
id|msdos_sb_info
id|msdos_sb
suffix:semicolon
DECL|member|isofs_sb
r_struct
id|isofs_sb_info
id|isofs_sb
suffix:semicolon
DECL|member|nfs_sb
r_struct
id|nfs_sb_info
id|nfs_sb
suffix:semicolon
DECL|member|sysv_sb
r_struct
id|sysv_sb_info
id|sysv_sb
suffix:semicolon
DECL|member|affs_sb
r_struct
id|affs_sb_info
id|affs_sb
suffix:semicolon
DECL|member|ufs_sb
r_struct
id|ufs_sb_info
id|ufs_sb
suffix:semicolon
DECL|member|efs_sb
r_struct
id|efs_sb_info
id|efs_sb
suffix:semicolon
DECL|member|shmem_sb
r_struct
id|shmem_sb_info
id|shmem_sb
suffix:semicolon
DECL|member|romfs_sb
r_struct
id|romfs_sb_info
id|romfs_sb
suffix:semicolon
DECL|member|smbfs_sb
r_struct
id|smb_sb_info
id|smbfs_sb
suffix:semicolon
DECL|member|hfs_sb
r_struct
id|hfs_sb_info
id|hfs_sb
suffix:semicolon
DECL|member|adfs_sb
r_struct
id|adfs_sb_info
id|adfs_sb
suffix:semicolon
DECL|member|qnx4_sb
r_struct
id|qnx4_sb_info
id|qnx4_sb
suffix:semicolon
DECL|member|bfs_sb
r_struct
id|bfs_sb_info
id|bfs_sb
suffix:semicolon
DECL|member|udf_sb
r_struct
id|udf_sb_info
id|udf_sb
suffix:semicolon
DECL|member|ncpfs_sb
r_struct
id|ncp_sb_info
id|ncpfs_sb
suffix:semicolon
DECL|member|usbdevfs_sb
r_struct
id|usbdev_sb_info
id|usbdevfs_sb
suffix:semicolon
DECL|member|generic_sbp
r_void
op_star
id|generic_sbp
suffix:semicolon
DECL|member|u
)brace
id|u
suffix:semicolon
multiline_comment|/*&n;&t; * The next field is for VFS *only*. No filesystems have any business&n;&t; * even looking at it. You had been warned.&n;&t; */
DECL|member|s_vfs_rename_sem
r_struct
id|semaphore
id|s_vfs_rename_sem
suffix:semicolon
multiline_comment|/* Kludge */
multiline_comment|/* The next field is used by knfsd when converting a (inode number based)&n;&t; * file handle into a dentry. As it builds a path in the dcache tree from&n;&t; * the bottom up, there may for a time be a subpath of dentrys which is not&n;&t; * connected to the main tree.  This semaphore ensure that there is only ever&n;&t; * one such free path per filesystem.  Note that unconnected files (or other&n;&t; * non-directories) are allowed, but not unconnected diretories.&n;&t; */
DECL|member|s_nfsd_free_path_sem
r_struct
id|semaphore
id|s_nfsd_free_path_sem
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * VFS helper functions..&n; */
r_extern
r_int
id|vfs_create
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|vfs_mkdir
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|vfs_mknod
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
comma
id|dev_t
)paren
suffix:semicolon
r_extern
r_int
id|vfs_symlink
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_link
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_rmdir
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_unlink
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_rename
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * File types&n; */
DECL|macro|DT_UNKNOWN
mdefine_line|#define DT_UNKNOWN&t;0
DECL|macro|DT_FIFO
mdefine_line|#define DT_FIFO&t;&t;1
DECL|macro|DT_CHR
mdefine_line|#define DT_CHR&t;&t;2
DECL|macro|DT_DIR
mdefine_line|#define DT_DIR&t;&t;4
DECL|macro|DT_BLK
mdefine_line|#define DT_BLK&t;&t;6
DECL|macro|DT_REG
mdefine_line|#define DT_REG&t;&t;8
DECL|macro|DT_LNK
mdefine_line|#define DT_LNK&t;&t;10
DECL|macro|DT_SOCK
mdefine_line|#define DT_SOCK&t;&t;12
DECL|macro|DT_WHT
mdefine_line|#define DT_WHT&t;&t;14
multiline_comment|/*&n; * This is the &quot;filldir&quot; function type, used by readdir() to let&n; * the kernel specify what kind of dirent layout it wants to have.&n; * This allows the kernel to read directories into kernel space or&n; * to have different dirent layouts depending on the binary type.&n; */
DECL|typedef|filldir_t
r_typedef
r_int
(paren
op_star
id|filldir_t
)paren
(paren
r_void
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
id|off_t
comma
id|ino_t
comma
r_int
)paren
suffix:semicolon
DECL|struct|block_device_operations
r_struct
id|block_device_operations
(brace
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|release
r_int
(paren
op_star
id|release
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|check_media_change
r_int
(paren
op_star
id|check_media_change
)paren
(paren
id|kdev_t
)paren
suffix:semicolon
DECL|member|revalidate
r_int
(paren
op_star
id|revalidate
)paren
(paren
id|kdev_t
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * NOTE:&n; * read, write, poll, fsync, readv, writev can be called&n; *   without the big kernel lock held in all filesystems.&n; */
DECL|struct|file_operations
r_struct
id|file_operations
(brace
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|llseek
id|loff_t
(paren
op_star
id|llseek
)paren
(paren
r_struct
id|file
op_star
comma
id|loff_t
comma
r_int
)paren
suffix:semicolon
DECL|member|read
id|ssize_t
(paren
op_star
id|read
)paren
(paren
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|write
id|ssize_t
(paren
op_star
id|write
)paren
(paren
r_struct
id|file
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|readdir
r_int
(paren
op_star
id|readdir
)paren
(paren
r_struct
id|file
op_star
comma
r_void
op_star
comma
id|filldir_t
)paren
suffix:semicolon
DECL|member|poll
r_int
r_int
(paren
op_star
id|poll
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|poll_table_struct
op_star
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|mmap
r_int
(paren
op_star
id|mmap
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|vm_area_struct
op_star
)paren
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|flush
r_int
(paren
op_star
id|flush
)paren
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|release
r_int
(paren
op_star
id|release
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|member|fsync
r_int
(paren
op_star
id|fsync
)paren
(paren
r_struct
id|file
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
id|datasync
)paren
suffix:semicolon
DECL|member|fasync
r_int
(paren
op_star
id|fasync
)paren
(paren
r_int
comma
r_struct
id|file
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|lock
r_int
(paren
op_star
id|lock
)paren
(paren
r_struct
id|file
op_star
comma
r_int
comma
r_struct
id|file_lock
op_star
)paren
suffix:semicolon
DECL|member|readv
id|ssize_t
(paren
op_star
id|readv
)paren
(paren
r_struct
id|file
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
DECL|member|writev
id|ssize_t
(paren
op_star
id|writev
)paren
(paren
r_struct
id|file
op_star
comma
r_const
r_struct
id|iovec
op_star
comma
r_int
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|inode_operations
r_struct
id|inode_operations
(brace
DECL|member|create
r_int
(paren
op_star
id|create
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|lookup
r_struct
id|dentry
op_star
(paren
op_star
id|lookup
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|link
r_int
(paren
op_star
id|link
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|unlink
r_int
(paren
op_star
id|unlink
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|symlink
r_int
(paren
op_star
id|symlink
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
DECL|member|mkdir
r_int
(paren
op_star
id|mkdir
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|rmdir
r_int
(paren
op_star
id|rmdir
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|mknod
r_int
(paren
op_star
id|mknod
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|member|rename
r_int
(paren
op_star
id|rename
)paren
(paren
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
comma
r_struct
id|inode
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|readlink
r_int
(paren
op_star
id|readlink
)paren
(paren
r_struct
id|dentry
op_star
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|follow_link
r_int
(paren
op_star
id|follow_link
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
DECL|member|truncate
r_void
(paren
op_star
id|truncate
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|permission
r_int
(paren
op_star
id|permission
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|revalidate
r_int
(paren
op_star
id|revalidate
)paren
(paren
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|member|setattr
r_int
(paren
op_star
id|setattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
DECL|member|getattr
r_int
(paren
op_star
id|getattr
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * NOTE: write_inode, delete_inode, clear_inode, put_inode can be called&n; * without the big kernel lock held in all filesystems.&n; */
DECL|struct|super_operations
r_struct
id|super_operations
(brace
DECL|member|read_inode
r_void
(paren
op_star
id|read_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|write_inode
r_void
(paren
op_star
id|write_inode
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|put_inode
r_void
(paren
op_star
id|put_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|delete_inode
r_void
(paren
op_star
id|delete_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|put_super
r_void
(paren
op_star
id|put_super
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|write_super
r_void
(paren
op_star
id|write_super
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
DECL|member|statfs
r_int
(paren
op_star
id|statfs
)paren
(paren
r_struct
id|super_block
op_star
comma
r_struct
id|statfs
op_star
)paren
suffix:semicolon
DECL|member|remount_fs
r_int
(paren
op_star
id|remount_fs
)paren
(paren
r_struct
id|super_block
op_star
comma
r_int
op_star
comma
r_char
op_star
)paren
suffix:semicolon
DECL|member|clear_inode
r_void
(paren
op_star
id|clear_inode
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|umount_begin
r_void
(paren
op_star
id|umount_begin
)paren
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|dquot_operations
r_struct
id|dquot_operations
(brace
DECL|member|initialize
r_void
(paren
op_star
id|initialize
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|drop
r_void
(paren
op_star
id|drop
)paren
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|member|alloc_block
r_int
(paren
op_star
id|alloc_block
)paren
(paren
r_const
r_struct
id|inode
op_star
comma
r_int
r_int
comma
r_char
)paren
suffix:semicolon
DECL|member|alloc_inode
r_int
(paren
op_star
id|alloc_inode
)paren
(paren
r_const
r_struct
id|inode
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|free_block
r_void
(paren
op_star
id|free_block
)paren
(paren
r_const
r_struct
id|inode
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|free_inode
r_void
(paren
op_star
id|free_inode
)paren
(paren
r_const
r_struct
id|inode
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|transfer
r_int
(paren
op_star
id|transfer
)paren
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|file_system_type
r_struct
id|file_system_type
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|fs_flags
r_int
id|fs_flags
suffix:semicolon
DECL|member|read_super
r_struct
id|super_block
op_star
(paren
op_star
id|read_super
)paren
(paren
r_struct
id|super_block
op_star
comma
r_void
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|owner
r_struct
id|module
op_star
id|owner
suffix:semicolon
DECL|member|kern_mnt
r_struct
id|vfsmount
op_star
id|kern_mnt
suffix:semicolon
multiline_comment|/* For kernel mount, if it&squot;s FS_SINGLE fs */
DECL|member|next
r_struct
id|file_system_type
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|DECLARE_FSTYPE
mdefine_line|#define DECLARE_FSTYPE(var,type,read,flags) &bslash;&n;struct file_system_type var = { &bslash;&n;&t;name:&t;&t;type, &bslash;&n;&t;read_super:&t;read, &bslash;&n;&t;fs_flags:&t;flags, &bslash;&n;&t;owner:&t;&t;THIS_MODULE, &bslash;&n;}
DECL|macro|DECLARE_FSTYPE_DEV
mdefine_line|#define DECLARE_FSTYPE_DEV(var,type,read) &bslash;&n;&t;DECLARE_FSTYPE(var,type,read,FS_REQUIRES_DEV)
multiline_comment|/* Alas, no aliases. Too much hassle with bringing module.h everywhere */
DECL|macro|fops_get
mdefine_line|#define fops_get(fops) &bslash;&n;&t;(((fops) &amp;&amp; (fops)-&gt;owner)&t;&bslash;&n;&t;&t;? ( try_inc_mod_count((fops)-&gt;owner) ? (fops) : NULL ) &bslash;&n;&t;&t;: (fops))
DECL|macro|fops_put
mdefine_line|#define fops_put(fops) &bslash;&n;do {&t;&bslash;&n;&t;if ((fops) &amp;&amp; (fops)-&gt;owner) &bslash;&n;&t;&t;__MOD_DEC_USE_COUNT((fops)-&gt;owner);&t;&bslash;&n;} while(0)
r_extern
r_int
id|register_filesystem
c_func
(paren
r_struct
id|file_system_type
op_star
)paren
suffix:semicolon
r_extern
r_int
id|unregister_filesystem
c_func
(paren
r_struct
id|file_system_type
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|vfsmount
op_star
id|kern_mount
c_func
(paren
r_struct
id|file_system_type
op_star
)paren
suffix:semicolon
r_extern
r_void
id|kern_umount
c_func
(paren
r_struct
id|vfsmount
op_star
)paren
suffix:semicolon
r_extern
r_int
id|may_umount
c_func
(paren
r_struct
id|vfsmount
op_star
)paren
suffix:semicolon
r_extern
r_int
id|do_mount
c_func
(paren
r_char
op_star
comma
r_char
op_star
comma
r_char
op_star
comma
r_int
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_statfs
c_func
(paren
r_struct
id|super_block
op_star
comma
r_struct
id|statfs
op_star
)paren
suffix:semicolon
multiline_comment|/* Return value for VFS lock functions - tells locks.c to lock conventionally&n; * REALLY kosha for root NFS and nfs_lock&n; */
DECL|macro|LOCK_USE_CLNT
mdefine_line|#define LOCK_USE_CLNT 1
DECL|macro|FLOCK_VERIFY_READ
mdefine_line|#define FLOCK_VERIFY_READ  1
DECL|macro|FLOCK_VERIFY_WRITE
mdefine_line|#define FLOCK_VERIFY_WRITE 2
r_extern
r_int
id|locks_mandatory_locked
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|locks_mandatory_area
c_func
(paren
r_int
comma
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
comma
id|loff_t
comma
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * Candidates for mandatory locking have the setgid bit set&n; * but no group execute bit -  an otherwise meaningless combination.&n; */
DECL|macro|MANDATORY_LOCK
mdefine_line|#define MANDATORY_LOCK(inode) &bslash;&n;&t;(IS_MANDLOCK(inode) &amp;&amp; ((inode)-&gt;i_mode &amp; (S_ISGID | S_IXGRP)) == S_ISGID)
DECL|function|locks_verify_locked
r_static
r_inline
r_int
id|locks_verify_locked
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
r_if
c_cond
(paren
id|MANDATORY_LOCK
c_func
(paren
id|inode
)paren
)paren
r_return
id|locks_mandatory_locked
c_func
(paren
id|inode
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|locks_verify_area
r_static
r_inline
r_int
id|locks_verify_area
c_func
(paren
r_int
id|read_write
comma
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
id|loff_t
id|offset
comma
r_int
id|count
)paren
(brace
r_if
c_cond
(paren
id|inode-&gt;i_flock
op_logical_and
id|MANDATORY_LOCK
c_func
(paren
id|inode
)paren
)paren
r_return
id|locks_mandatory_area
c_func
(paren
id|read_write
comma
id|inode
comma
id|filp
comma
id|offset
comma
id|count
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|locks_verify_truncate
r_static
r_inline
r_int
id|locks_verify_truncate
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_struct
id|file
op_star
id|filp
comma
id|loff_t
id|size
)paren
(brace
r_if
c_cond
(paren
id|inode-&gt;i_flock
op_logical_and
id|MANDATORY_LOCK
c_func
(paren
id|inode
)paren
)paren
r_return
id|locks_mandatory_area
c_func
(paren
id|FLOCK_VERIFY_WRITE
comma
id|inode
comma
id|filp
comma
id|size
OL
id|inode-&gt;i_size
ques
c_cond
id|size
suffix:colon
id|inode-&gt;i_size
comma
(paren
id|size
OL
id|inode-&gt;i_size
ques
c_cond
id|inode-&gt;i_size
op_minus
id|size
suffix:colon
id|size
op_minus
id|inode-&gt;i_size
)paren
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_lease
r_extern
r_inline
r_int
id|get_lease
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
r_int
id|mode
)paren
(brace
r_if
c_cond
(paren
id|inode-&gt;i_flock
op_logical_and
(paren
id|inode-&gt;i_flock-&gt;fl_flags
op_amp
id|FL_LEASE
)paren
)paren
r_return
id|__get_lease
c_func
(paren
id|inode
comma
id|mode
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/* fs/open.c */
id|asmlinkage
r_int
id|sys_open
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
id|asmlinkage
r_int
id|sys_close
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* yes, it&squot;s really unsigned */
r_extern
r_int
id|do_truncate
c_func
(paren
r_struct
id|dentry
op_star
comma
id|loff_t
id|start
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|filp_open
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|dentry_open
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|vfsmount
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|filp_close
c_func
(paren
r_struct
id|file
op_star
comma
id|fl_owner_t
id|id
)paren
suffix:semicolon
r_extern
r_char
op_star
id|getname
c_func
(paren
r_const
r_char
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/dcache.c */
r_extern
r_void
id|vfs_caches_init
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
DECL|macro|__getname
mdefine_line|#define __getname()&t;kmem_cache_alloc(names_cachep, SLAB_KERNEL)
DECL|macro|putname
mdefine_line|#define putname(name)&t;kmem_cache_free(names_cachep, (void *)(name))
DECL|enumerator|BDEV_FILE
DECL|enumerator|BDEV_SWAP
DECL|enumerator|BDEV_FS
DECL|enumerator|BDEV_RAW
r_enum
(brace
id|BDEV_FILE
comma
id|BDEV_SWAP
comma
id|BDEV_FS
comma
id|BDEV_RAW
)brace
suffix:semicolon
r_extern
r_int
id|register_blkdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
comma
r_struct
id|block_device_operations
op_star
)paren
suffix:semicolon
r_extern
r_int
id|unregister_blkdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|block_device
op_star
id|bdget
c_func
(paren
id|dev_t
)paren
suffix:semicolon
r_extern
r_void
id|bdput
c_func
(paren
r_struct
id|block_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|blkdev_open
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|def_blk_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|def_fifo_fops
suffix:semicolon
r_extern
r_int
id|ioctl_by_bdev
c_func
(paren
r_struct
id|block_device
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|blkdev_get
c_func
(paren
r_struct
id|block_device
op_star
comma
id|mode_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|blkdev_put
c_func
(paren
r_struct
id|block_device
op_star
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* fs/devices.c */
r_extern
r_const
r_struct
id|block_device_operations
op_star
id|get_blkfops
c_func
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|register_chrdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
comma
r_struct
id|file_operations
op_star
)paren
suffix:semicolon
r_extern
r_int
id|unregister_chrdev
c_func
(paren
r_int
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|chrdev_open
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|file
op_star
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|bdevname
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|cdevname
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|kdevname
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_void
id|init_special_inode
c_func
(paren
r_struct
id|inode
op_star
comma
id|umode_t
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* Invalid inode operations -- fs/bad_inode.c */
r_extern
r_void
id|make_bad_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|is_bad_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|read_fifo_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|write_fifo_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|rdwr_fifo_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|read_pipe_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|write_pipe_fops
suffix:semicolon
r_extern
r_struct
id|file_operations
id|rdwr_pipe_fops
suffix:semicolon
r_extern
r_int
id|fs_may_remount_ro
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
r_extern
r_int
id|try_to_free_buffers
c_func
(paren
r_struct
id|page
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|refile_buffer
c_func
(paren
r_struct
id|buffer_head
op_star
id|buf
)paren
suffix:semicolon
DECL|macro|BUF_CLEAN
mdefine_line|#define BUF_CLEAN&t;0
DECL|macro|BUF_LOCKED
mdefine_line|#define BUF_LOCKED&t;1&t;/* Buffers scheduled for write */
DECL|macro|BUF_DIRTY
mdefine_line|#define BUF_DIRTY&t;2&t;/* Dirty buffers, not yet scheduled for write */
DECL|macro|BUF_PROTECTED
mdefine_line|#define BUF_PROTECTED&t;3&t;/* Ramdisk persistent storage */
DECL|macro|NR_LIST
mdefine_line|#define NR_LIST&t;&t;4
multiline_comment|/*&n; * This is called by bh-&gt;b_end_io() handlers when I/O has completed.&n; */
DECL|function|mark_buffer_uptodate
r_static
r_inline
r_void
id|mark_buffer_uptodate
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
comma
r_int
id|on
)paren
(brace
r_if
c_cond
(paren
id|on
)paren
id|set_bit
c_func
(paren
id|BH_Uptodate
comma
op_amp
id|bh-&gt;b_state
)paren
suffix:semicolon
r_else
id|clear_bit
c_func
(paren
id|BH_Uptodate
comma
op_amp
id|bh-&gt;b_state
)paren
suffix:semicolon
)brace
DECL|macro|atomic_set_buffer_clean
mdefine_line|#define atomic_set_buffer_clean(bh) test_and_clear_bit(BH_Dirty, &amp;(bh)-&gt;b_state)
DECL|function|__mark_buffer_clean
r_static
r_inline
r_void
id|__mark_buffer_clean
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
id|refile_buffer
c_func
(paren
id|bh
)paren
suffix:semicolon
)brace
DECL|function|mark_buffer_clean
r_static
r_inline
r_void
id|mark_buffer_clean
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
r_if
c_cond
(paren
id|atomic_set_buffer_clean
c_func
(paren
id|bh
)paren
)paren
id|__mark_buffer_clean
c_func
(paren
id|bh
)paren
suffix:semicolon
)brace
DECL|macro|atomic_set_buffer_protected
mdefine_line|#define atomic_set_buffer_protected(bh) test_and_set_bit(BH_Protected, &amp;(bh)-&gt;b_state)
DECL|function|__mark_buffer_protected
r_static
r_inline
r_void
id|__mark_buffer_protected
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
id|refile_buffer
c_func
(paren
id|bh
)paren
suffix:semicolon
)brace
DECL|function|mark_buffer_protected
r_static
r_inline
r_void
id|mark_buffer_protected
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|atomic_set_buffer_protected
c_func
(paren
id|bh
)paren
)paren
id|__mark_buffer_protected
c_func
(paren
id|bh
)paren
suffix:semicolon
)brace
r_extern
r_void
id|FASTCALL
c_func
(paren
id|__mark_buffer_dirty
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
)paren
suffix:semicolon
r_extern
r_void
id|FASTCALL
c_func
(paren
id|mark_buffer_dirty
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
)paren
suffix:semicolon
DECL|macro|atomic_set_buffer_dirty
mdefine_line|#define atomic_set_buffer_dirty(bh) test_and_set_bit(BH_Dirty, &amp;(bh)-&gt;b_state)
multiline_comment|/*&n; * If an error happens during the make_request, this function&n; * has to be recalled. It marks the buffer as clean and not&n; * uptodate, and it notifys the upper layer about the end&n; * of the I/O.&n; */
DECL|function|buffer_IO_error
r_static
r_inline
r_void
id|buffer_IO_error
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
)paren
(brace
id|mark_buffer_clean
c_func
(paren
id|bh
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * b_end_io has to clear the BH_Uptodate bitflag in the error case!&n;&t; */
id|bh
op_member_access_from_pointer
id|b_end_io
c_func
(paren
id|bh
comma
l_int|0
)paren
suffix:semicolon
)brace
r_extern
r_void
id|buffer_insert_inode_queue
c_func
(paren
r_struct
id|buffer_head
op_star
comma
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|function|mark_buffer_dirty_inode
r_static
r_inline
r_void
id|mark_buffer_dirty_inode
c_func
(paren
r_struct
id|buffer_head
op_star
id|bh
comma
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|mark_buffer_dirty
c_func
(paren
id|bh
)paren
suffix:semicolon
id|buffer_insert_inode_queue
c_func
(paren
id|bh
comma
id|inode
)paren
suffix:semicolon
)brace
r_extern
r_void
id|balance_dirty
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_int
id|check_disk_change
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_int
id|invalidate_inodes
c_func
(paren
r_struct
id|super_block
op_star
)paren
suffix:semicolon
r_extern
r_void
id|invalidate_inode_pages
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|invalidate_inode_buffers
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
DECL|macro|invalidate_buffers
mdefine_line|#define invalidate_buffers(dev)&t;__invalidate_buffers((dev), 0)
DECL|macro|destroy_buffers
mdefine_line|#define destroy_buffers(dev)&t;__invalidate_buffers((dev), 1)
r_extern
r_void
id|__invalidate_buffers
c_func
(paren
id|kdev_t
id|dev
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|sync_inodes
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_void
id|write_inode_now
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|sync_dev
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_int
id|fsync_dev
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_int
id|fsync_inode_buffers
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|osync_inode_buffers
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|inode_has_buffers
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|filemap_fdatasync
c_func
(paren
r_struct
id|address_space
op_star
)paren
suffix:semicolon
r_extern
r_void
id|filemap_fdatawait
c_func
(paren
r_struct
id|address_space
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sync_supers
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_int
id|bmap
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|notify_change
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
r_extern
r_int
id|permission
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|vfs_permission
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|get_write_access
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_int
id|deny_write_access
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
DECL|function|put_write_access
r_static
r_inline
r_void
id|put_write_access
c_func
(paren
r_struct
id|inode
op_star
id|inode
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|inode-&gt;i_writecount
)paren
suffix:semicolon
)brace
DECL|function|allow_write_access
r_static
r_inline
r_void
id|allow_write_access
c_func
(paren
r_struct
id|file
op_star
id|file
)paren
(brace
r_if
c_cond
(paren
id|file
)paren
id|atomic_inc
c_func
(paren
op_amp
id|file-&gt;f_dentry-&gt;d_inode-&gt;i_writecount
)paren
suffix:semicolon
)brace
r_extern
r_int
id|do_pipe
c_func
(paren
r_int
op_star
)paren
suffix:semicolon
r_extern
r_int
id|open_namei
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|kernel_read
c_func
(paren
r_struct
id|file
op_star
comma
r_int
r_int
comma
r_char
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|open_exec
c_func
(paren
r_const
r_char
op_star
)paren
suffix:semicolon
multiline_comment|/* fs/dcache.c -- generic fs support functions */
r_extern
r_int
id|is_subdir
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
id|ino_t
id|find_inode_number
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|qstr
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Kernel pointers have redundant information, so we can use a&n; * scheme where we can return either an error code or a dentry&n; * pointer with the same return value.&n; *&n; * This should be a per-architecture thing, to allow different&n; * error and pointer decisions.&n; */
DECL|function|ERR_PTR
r_static
r_inline
r_void
op_star
id|ERR_PTR
c_func
(paren
r_int
id|error
)paren
(brace
r_return
(paren
r_void
op_star
)paren
id|error
suffix:semicolon
)brace
DECL|function|PTR_ERR
r_static
r_inline
r_int
id|PTR_ERR
c_func
(paren
r_const
r_void
op_star
id|ptr
)paren
(brace
r_return
(paren
r_int
)paren
id|ptr
suffix:semicolon
)brace
DECL|function|IS_ERR
r_static
r_inline
r_int
id|IS_ERR
c_func
(paren
r_const
r_void
op_star
id|ptr
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|ptr
OG
(paren
r_int
r_int
)paren
op_minus
l_int|1000L
suffix:semicolon
)brace
multiline_comment|/*&n; * The bitmask for a lookup event:&n; *  - follow links at the end&n; *  - require a directory&n; *  - ending slashes ok even for nonexistent files&n; *  - internal &quot;there are more path compnents&quot; flag&n; */
DECL|macro|LOOKUP_FOLLOW
mdefine_line|#define LOOKUP_FOLLOW&t;&t;(1)
DECL|macro|LOOKUP_DIRECTORY
mdefine_line|#define LOOKUP_DIRECTORY&t;(2)
DECL|macro|LOOKUP_CONTINUE
mdefine_line|#define LOOKUP_CONTINUE&t;&t;(4)
DECL|macro|LOOKUP_POSITIVE
mdefine_line|#define LOOKUP_POSITIVE&t;&t;(8)
DECL|macro|LOOKUP_PARENT
mdefine_line|#define LOOKUP_PARENT&t;&t;(16)
DECL|macro|LOOKUP_NOALT
mdefine_line|#define LOOKUP_NOALT&t;&t;(32)
multiline_comment|/*&n; * Type of the last component on LOOKUP_PARENT&n; */
DECL|enumerator|LAST_NORM
DECL|enumerator|LAST_ROOT
DECL|enumerator|LAST_DOT
DECL|enumerator|LAST_DOTDOT
DECL|enumerator|LAST_BIND
r_enum
(brace
id|LAST_NORM
comma
id|LAST_ROOT
comma
id|LAST_DOT
comma
id|LAST_DOTDOT
comma
id|LAST_BIND
)brace
suffix:semicolon
multiline_comment|/*&n; * &quot;descriptor&quot; for what we&squot;re up to with a read for sendfile().&n; * This allows us to use the same read code yet&n; * have multiple different users of the data that&n; * we read from a file.&n; *&n; * The simplest case just copies the data to user&n; * mode.&n; */
r_typedef
r_struct
(brace
DECL|member|written
r_int
id|written
suffix:semicolon
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|member|buf
r_char
op_star
id|buf
suffix:semicolon
DECL|member|error
r_int
id|error
suffix:semicolon
DECL|typedef|read_descriptor_t
)brace
id|read_descriptor_t
suffix:semicolon
DECL|typedef|read_actor_t
r_typedef
r_int
(paren
op_star
id|read_actor_t
)paren
(paren
id|read_descriptor_t
op_star
comma
r_struct
id|page
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* needed for stackable file system support */
r_extern
id|loff_t
id|default_llseek
c_func
(paren
r_struct
id|file
op_star
id|file
comma
id|loff_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_extern
r_int
id|__user_walk
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|path_init
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|path_walk
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_void
id|path_release
c_func
(paren
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_int
id|follow_down
c_func
(paren
r_struct
id|vfsmount
op_star
op_star
comma
r_struct
id|dentry
op_star
op_star
)paren
suffix:semicolon
r_extern
r_int
id|follow_up
c_func
(paren
r_struct
id|vfsmount
op_star
op_star
comma
r_struct
id|dentry
op_star
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|lookup_one
c_func
(paren
r_const
r_char
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|dentry
op_star
id|lookup_hash
c_func
(paren
r_struct
id|qstr
op_star
comma
r_struct
id|dentry
op_star
)paren
suffix:semicolon
DECL|macro|user_path_walk
mdefine_line|#define user_path_walk(name,nd)&t; __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd)
DECL|macro|user_path_walk_link
mdefine_line|#define user_path_walk_link(name,nd) __user_walk(name, LOOKUP_POSITIVE, nd)
r_extern
r_void
id|iput
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|force_delete
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|igrab
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
id|ino_t
id|iunique
c_func
(paren
r_struct
id|super_block
op_star
comma
id|ino_t
)paren
suffix:semicolon
DECL|typedef|find_inode_t
r_typedef
r_int
(paren
op_star
id|find_inode_t
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|iget4
c_func
(paren
r_struct
id|super_block
op_star
comma
r_int
r_int
comma
id|find_inode_t
comma
r_void
op_star
)paren
suffix:semicolon
DECL|function|iget
r_static
r_inline
r_struct
id|inode
op_star
id|iget
c_func
(paren
r_struct
id|super_block
op_star
id|sb
comma
r_int
r_int
id|ino
)paren
(brace
r_return
id|iget4
c_func
(paren
id|sb
comma
id|ino
comma
l_int|NULL
comma
l_int|NULL
)paren
suffix:semicolon
)brace
r_extern
r_void
id|clear_inode
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode
op_star
id|get_empty_inode
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|new_inode
r_static
r_inline
r_struct
id|inode
op_star
id|new_inode
c_func
(paren
r_struct
id|super_block
op_star
id|sb
)paren
(brace
r_struct
id|inode
op_star
id|inode
op_assign
id|get_empty_inode
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|inode
)paren
(brace
id|inode-&gt;i_sb
op_assign
id|sb
suffix:semicolon
id|inode-&gt;i_dev
op_assign
id|sb-&gt;s_dev
suffix:semicolon
)brace
r_return
id|inode
suffix:semicolon
)brace
r_extern
r_void
id|insert_inode_hash
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_void
id|remove_inode_hash
c_func
(paren
r_struct
id|inode
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file
op_star
id|get_empty_filp
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|file_move
c_func
(paren
r_struct
id|file
op_star
id|f
comma
r_struct
id|list_head
op_star
id|list
)paren
suffix:semicolon
r_extern
r_void
id|file_moveto
c_func
(paren
r_struct
id|file
op_star
r_new
comma
r_struct
id|file
op_star
id|old
)paren
suffix:semicolon
r_extern
r_struct
id|buffer_head
op_star
id|get_hash_table
c_func
(paren
id|kdev_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_struct
id|buffer_head
op_star
id|getblk
c_func
(paren
id|kdev_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|ll_rw_block
c_func
(paren
r_int
comma
r_int
comma
r_struct
id|buffer_head
op_star
id|bh
(braket
)braket
)paren
suffix:semicolon
r_extern
r_void
id|submit_bh
c_func
(paren
r_int
comma
r_struct
id|buffer_head
op_star
)paren
suffix:semicolon
r_extern
r_int
id|is_read_only
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_void
id|__brelse
c_func
(paren
r_struct
id|buffer_head
op_star
)paren
suffix:semicolon
DECL|function|brelse
r_static
r_inline
r_void
id|brelse
c_func
(paren
r_struct
id|buffer_head
op_star
id|buf
)paren
(brace
r_if
c_cond
(paren
id|buf
)paren
id|__brelse
c_func
(paren
id|buf
)paren
suffix:semicolon
)brace
r_extern
r_void
id|__bforget
c_func
(paren
r_struct
id|buffer_head
op_star
)paren
suffix:semicolon
DECL|function|bforget
r_static
r_inline
r_void
id|bforget
c_func
(paren
r_struct
id|buffer_head
op_star
id|buf
)paren
(brace
r_if
c_cond
(paren
id|buf
)paren
id|__bforget
c_func
(paren
id|buf
)paren
suffix:semicolon
)brace
r_extern
r_void
id|set_blocksize
c_func
(paren
id|kdev_t
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|get_hardblocksize
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_extern
r_struct
id|buffer_head
op_star
id|bread
c_func
(paren
id|kdev_t
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|wakeup_bdflush
c_func
(paren
r_int
id|wait
)paren
suffix:semicolon
r_extern
r_int
id|brw_page
c_func
(paren
r_int
comma
r_struct
id|page
op_star
comma
id|kdev_t
comma
r_int
(braket
)braket
comma
r_int
)paren
suffix:semicolon
DECL|typedef|get_block_t
r_typedef
r_int
(paren
id|get_block_t
)paren
(paren
r_struct
id|inode
op_star
comma
r_int
comma
r_struct
id|buffer_head
op_star
comma
r_int
)paren
suffix:semicolon
multiline_comment|/* Generic buffer handling for block filesystems.. */
r_extern
r_int
id|block_flushpage
c_func
(paren
r_struct
id|page
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|block_symlink
c_func
(paren
r_struct
id|inode
op_star
comma
r_const
r_char
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|block_write_full_page
c_func
(paren
r_struct
id|page
op_star
comma
id|get_block_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|block_read_full_page
c_func
(paren
r_struct
id|page
op_star
comma
id|get_block_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|block_prepare_write
c_func
(paren
r_struct
id|page
op_star
comma
r_int
comma
r_int
comma
id|get_block_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|cont_prepare_write
c_func
(paren
r_struct
id|page
op_star
comma
r_int
comma
r_int
comma
id|get_block_t
op_star
comma
r_int
r_int
op_star
)paren
suffix:semicolon
r_extern
r_int
id|block_sync_page
c_func
(paren
r_struct
id|page
op_star
)paren
suffix:semicolon
r_int
id|generic_block_bmap
c_func
(paren
r_struct
id|address_space
op_star
comma
r_int
comma
id|get_block_t
op_star
)paren
suffix:semicolon
r_int
id|generic_commit_write
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|page
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_int
id|block_truncate_page
c_func
(paren
r_struct
id|address_space
op_star
comma
id|loff_t
comma
id|get_block_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|generic_file_mmap
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|vm_area_struct
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_read
c_func
(paren
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_file_write
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
r_void
id|do_generic_file_read
c_func
(paren
r_struct
id|file
op_star
comma
id|loff_t
op_star
comma
id|read_descriptor_t
op_star
comma
id|read_actor_t
)paren
suffix:semicolon
r_extern
id|ssize_t
id|generic_read_dir
c_func
(paren
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|file_operations
id|generic_ro_fops
suffix:semicolon
r_extern
r_int
id|vfs_readlink
c_func
(paren
r_struct
id|dentry
op_star
comma
r_char
op_star
comma
r_int
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|vfs_follow_link
c_func
(paren
r_struct
id|nameidata
op_star
comma
r_const
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|page_readlink
c_func
(paren
r_struct
id|dentry
op_star
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|page_follow_link
c_func
(paren
r_struct
id|dentry
op_star
comma
r_struct
id|nameidata
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|inode_operations
id|page_symlink_inode_operations
suffix:semicolon
r_extern
r_int
id|vfs_readdir
c_func
(paren
r_struct
id|file
op_star
comma
id|filldir_t
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_int
id|dcache_readdir
c_func
(paren
r_struct
id|file
op_star
comma
r_void
op_star
comma
id|filldir_t
)paren
suffix:semicolon
r_extern
r_struct
id|file_system_type
op_star
id|get_fs_type
c_func
(paren
r_const
r_char
op_star
id|name
)paren
suffix:semicolon
r_extern
r_struct
id|super_block
op_star
id|get_super
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_struct
id|super_block
op_star
id|get_empty_super
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|put_super
c_func
(paren
id|kdev_t
)paren
suffix:semicolon
r_int
r_int
id|generate_cluster
c_func
(paren
id|kdev_t
comma
r_int
id|b
(braket
)braket
comma
r_int
)paren
suffix:semicolon
r_int
r_int
id|generate_cluster_swab32
c_func
(paren
id|kdev_t
comma
r_int
id|b
(braket
)braket
comma
r_int
)paren
suffix:semicolon
r_extern
id|kdev_t
id|ROOT_DEV
suffix:semicolon
r_extern
r_char
id|root_device_name
(braket
)braket
suffix:semicolon
r_extern
r_void
id|show_buffers
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|mount_root
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_BLK_DEV_INITRD
r_extern
id|kdev_t
id|real_root_dev
suffix:semicolon
r_extern
r_int
id|change_root
c_func
(paren
id|kdev_t
comma
r_const
r_char
op_star
)paren
suffix:semicolon
macro_line|#endif
r_extern
id|ssize_t
id|char_read
c_func
(paren
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|block_read
c_func
(paren
r_struct
id|file
op_star
comma
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|read_ahead
(braket
)braket
suffix:semicolon
r_extern
id|ssize_t
id|char_write
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
id|ssize_t
id|block_write
c_func
(paren
r_struct
id|file
op_star
comma
r_const
r_char
op_star
comma
r_int
comma
id|loff_t
op_star
)paren
suffix:semicolon
r_extern
r_int
id|file_fsync
c_func
(paren
r_struct
id|file
op_star
comma
r_struct
id|dentry
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|generic_buffer_fdatasync
c_func
(paren
r_struct
id|inode
op_star
id|inode
comma
r_int
r_int
id|start_idx
comma
r_int
r_int
id|end_idx
)paren
suffix:semicolon
r_extern
r_int
id|generic_osync_inode
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|inode_change_ok
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
r_extern
r_void
id|inode_setattr
c_func
(paren
r_struct
id|inode
op_star
comma
r_struct
id|iattr
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Common dentry functions for inclusion in the VFS&n; * or in other stackable file systems.  Some of these&n; * functions were in linux/fs/ C (VFS) files.&n; *&n; */
multiline_comment|/*&n; * Locking the parent is needed to:&n; *  - serialize directory operations&n; *  - make sure the parent doesn&squot;t change from&n; *    under us in the middle of an operation.&n; *&n; * NOTE! Right now we&squot;d rather use a &quot;struct inode&quot;&n; * for this, but as I expect things to move toward&n; * using dentries instead for most things it is&n; * probably better to start with the conceptually&n; * better interface of relying on a path of dentries.&n; */
DECL|function|lock_parent
r_static
r_inline
r_struct
id|dentry
op_star
id|lock_parent
c_func
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_struct
id|dentry
op_star
id|dir
op_assign
id|dget
c_func
(paren
id|dentry-&gt;d_parent
)paren
suffix:semicolon
id|down
c_func
(paren
op_amp
id|dir-&gt;d_inode-&gt;i_sem
)paren
suffix:semicolon
r_return
id|dir
suffix:semicolon
)brace
DECL|function|get_parent
r_static
r_inline
r_struct
id|dentry
op_star
id|get_parent
c_func
(paren
r_struct
id|dentry
op_star
id|dentry
)paren
(brace
r_return
id|dget
c_func
(paren
id|dentry-&gt;d_parent
)paren
suffix:semicolon
)brace
DECL|function|unlock_dir
r_static
r_inline
r_void
id|unlock_dir
c_func
(paren
r_struct
id|dentry
op_star
id|dir
)paren
(brace
id|up
c_func
(paren
op_amp
id|dir-&gt;d_inode-&gt;i_sem
)paren
suffix:semicolon
id|dput
c_func
(paren
id|dir
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Whee.. Deadlock country. Happily there are only two VFS&n; * operations that does this..&n; */
DECL|function|double_down
r_static
r_inline
r_void
id|double_down
c_func
(paren
r_struct
id|semaphore
op_star
id|s1
comma
r_struct
id|semaphore
op_star
id|s2
)paren
(brace
r_if
c_cond
(paren
id|s1
op_ne
id|s2
)paren
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s1
OL
(paren
r_int
r_int
)paren
id|s2
)paren
(brace
r_struct
id|semaphore
op_star
id|tmp
op_assign
id|s2
suffix:semicolon
id|s2
op_assign
id|s1
suffix:semicolon
id|s1
op_assign
id|tmp
suffix:semicolon
)brace
id|down
c_func
(paren
id|s1
)paren
suffix:semicolon
)brace
id|down
c_func
(paren
id|s2
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Ewwwwwwww... _triple_ lock. We are guaranteed that the 3rd argument is&n; * not equal to 1st and not equal to 2nd - the first case (target is parent of&n; * source) would be already caught, the second is plain impossible (target is&n; * its own parent and that case would be caught even earlier). Very messy.&n; * I _think_ that it works, but no warranties - please, look it through.&n; * Pox on bloody lusers who mandated overwriting rename() for directories...&n; */
DECL|function|triple_down
r_static
r_inline
r_void
id|triple_down
c_func
(paren
r_struct
id|semaphore
op_star
id|s1
comma
r_struct
id|semaphore
op_star
id|s2
comma
r_struct
id|semaphore
op_star
id|s3
)paren
(brace
r_if
c_cond
(paren
id|s1
op_ne
id|s2
)paren
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s1
OL
(paren
r_int
r_int
)paren
id|s2
)paren
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s1
OL
(paren
r_int
r_int
)paren
id|s3
)paren
(brace
r_struct
id|semaphore
op_star
id|tmp
op_assign
id|s3
suffix:semicolon
id|s3
op_assign
id|s1
suffix:semicolon
id|s1
op_assign
id|tmp
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s1
OL
(paren
r_int
r_int
)paren
id|s2
)paren
(brace
r_struct
id|semaphore
op_star
id|tmp
op_assign
id|s2
suffix:semicolon
id|s2
op_assign
id|s1
suffix:semicolon
id|s1
op_assign
id|tmp
suffix:semicolon
)brace
)brace
r_else
(brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s1
OL
(paren
r_int
r_int
)paren
id|s3
)paren
(brace
r_struct
id|semaphore
op_star
id|tmp
op_assign
id|s3
suffix:semicolon
id|s3
op_assign
id|s1
suffix:semicolon
id|s1
op_assign
id|tmp
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s2
OL
(paren
r_int
r_int
)paren
id|s3
)paren
(brace
r_struct
id|semaphore
op_star
id|tmp
op_assign
id|s3
suffix:semicolon
id|s3
op_assign
id|s2
suffix:semicolon
id|s2
op_assign
id|tmp
suffix:semicolon
)brace
)brace
id|down
c_func
(paren
id|s1
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
(paren
r_int
r_int
)paren
id|s2
OL
(paren
r_int
r_int
)paren
id|s3
)paren
(brace
r_struct
id|semaphore
op_star
id|tmp
op_assign
id|s3
suffix:semicolon
id|s3
op_assign
id|s2
suffix:semicolon
id|s2
op_assign
id|tmp
suffix:semicolon
)brace
id|down
c_func
(paren
id|s2
)paren
suffix:semicolon
id|down
c_func
(paren
id|s3
)paren
suffix:semicolon
)brace
DECL|function|double_up
r_static
r_inline
r_void
id|double_up
c_func
(paren
r_struct
id|semaphore
op_star
id|s1
comma
r_struct
id|semaphore
op_star
id|s2
)paren
(brace
id|up
c_func
(paren
id|s1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|s1
op_ne
id|s2
)paren
id|up
c_func
(paren
id|s2
)paren
suffix:semicolon
)brace
DECL|function|triple_up
r_static
r_inline
r_void
id|triple_up
c_func
(paren
r_struct
id|semaphore
op_star
id|s1
comma
r_struct
id|semaphore
op_star
id|s2
comma
r_struct
id|semaphore
op_star
id|s3
)paren
(brace
id|up
c_func
(paren
id|s1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|s1
op_ne
id|s2
)paren
id|up
c_func
(paren
id|s2
)paren
suffix:semicolon
id|up
c_func
(paren
id|s3
)paren
suffix:semicolon
)brace
DECL|function|double_lock
r_static
r_inline
r_void
id|double_lock
c_func
(paren
r_struct
id|dentry
op_star
id|d1
comma
r_struct
id|dentry
op_star
id|d2
)paren
(brace
id|double_down
c_func
(paren
op_amp
id|d1-&gt;d_inode-&gt;i_sem
comma
op_amp
id|d2-&gt;d_inode-&gt;i_sem
)paren
suffix:semicolon
)brace
DECL|function|double_unlock
r_static
r_inline
r_void
id|double_unlock
c_func
(paren
r_struct
id|dentry
op_star
id|d1
comma
r_struct
id|dentry
op_star
id|d2
)paren
(brace
id|double_up
c_func
(paren
op_amp
id|d1-&gt;d_inode-&gt;i_sem
comma
op_amp
id|d2-&gt;d_inode-&gt;i_sem
)paren
suffix:semicolon
id|dput
c_func
(paren
id|d1
)paren
suffix:semicolon
id|dput
c_func
(paren
id|d2
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _LINUX_FS_H */
eof
