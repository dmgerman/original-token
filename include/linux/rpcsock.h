multiline_comment|/*&n; *  rpcsock.h&t;Declarations for the RPC call interface.&n; *&n; *  Copyright (C) 1995, 1996 Olaf Kirch &lt;okir@monad.swb.de&gt;&n; */
macro_line|#ifndef _LINUX_RPCSOCK_H
DECL|macro|_LINUX_RPCSOCK_H
mdefine_line|#define _LINUX_RPCSOCK_H
multiline_comment|/*&n; * The rpcsock code maintains an estimate on the maximum number of out-&n; * standing RPC requests, using the congestion avoidance implemented in&n; * 44BSD. This is basically the Van Jacobson slow start algorithm: If a&n; * retransmit occurs, the congestion window is halved; otherwise, it is&n; * incremented by 1/cwnd when a reply is received and a full number of&n; * requests are outstanding.&n; *&n; * Upper procedures may check whether a request would block waiting for&n; * a free RPC slot by using the RPC_CONGESTED() macro.&n; *&n; * Note: on machines with low memory we should probably use a smaller&n; * MAXREQS value: At 32 outstanding reqs with 8 megs of RAM, fragment&n; * reassembly will frequently run out of memory.&n; */
DECL|macro|RPC_MAXREQS
mdefine_line|#define RPC_MAXREQS&t;&t;32
DECL|macro|RPC_CWNDSCALE
mdefine_line|#define RPC_CWNDSCALE&t;&t;256
DECL|macro|RPC_MAXCWND
mdefine_line|#define RPC_MAXCWND&t;&t;(RPC_MAXREQS * RPC_CWNDSCALE)
multiline_comment|/* #define RPC_INITCWND&t;&t;(RPC_MAXCWND / 2) */
DECL|macro|RPC_INITCWND
mdefine_line|#define RPC_INITCWND&t;&t;RPC_CWNDSCALE
DECL|macro|RPC_CONGESTED
mdefine_line|#define RPC_CONGESTED(rsock)&t;((rsock)-&gt;cong &gt;= (rsock)-&gt;cwnd)
multiline_comment|/* RPC reply header size: xid, direction, status, accept_status (verifier&n; * size computed separately)&n; */
DECL|macro|RPC_HDRSIZE
mdefine_line|#define RPC_HDRSIZE&t;&t;(4 * 4)
multiline_comment|/*&n; * This describes a timeout strategy&n; */
DECL|struct|rpc_timeout
r_struct
id|rpc_timeout
(brace
DECL|member|to_initval
r_int
r_int
id|to_initval
comma
DECL|member|to_maxval
id|to_maxval
comma
DECL|member|to_increment
id|to_increment
suffix:semicolon
DECL|member|to_retries
r_int
id|to_retries
suffix:semicolon
DECL|member|to_exponential
r_char
id|to_exponential
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This describes a complete RPC request&n; */
DECL|struct|rpc_ioreq
r_struct
id|rpc_ioreq
(brace
DECL|member|rq_slot
r_struct
id|rpc_wait
op_star
id|rq_slot
suffix:semicolon
DECL|member|rq_addr
r_struct
id|sockaddr
op_star
id|rq_addr
suffix:semicolon
DECL|member|rq_alen
r_int
id|rq_alen
suffix:semicolon
DECL|member|rq_svec
r_struct
id|iovec
id|rq_svec
(braket
id|UIO_FASTIOV
)braket
suffix:semicolon
DECL|member|rq_snr
r_int
r_int
id|rq_snr
suffix:semicolon
DECL|member|rq_slen
r_int
r_int
id|rq_slen
suffix:semicolon
DECL|member|rq_rvec
r_struct
id|iovec
id|rq_rvec
(braket
id|UIO_FASTIOV
)braket
suffix:semicolon
DECL|member|rq_rnr
r_int
r_int
id|rq_rnr
suffix:semicolon
DECL|member|rq_rlen
r_int
r_int
id|rq_rlen
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This is the callback handler for async RPC.&n; */
r_struct
id|rpc_wait
suffix:semicolon
DECL|typedef|rpc_callback_fn_t
r_typedef
r_void
(paren
op_star
id|rpc_callback_fn_t
)paren
(paren
r_int
comma
r_struct
id|rpc_wait
op_star
comma
r_void
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Wait information. This struct defines all the state of an RPC&n; * request currently in flight.&n; */
DECL|struct|rpc_wait
r_struct
id|rpc_wait
(brace
DECL|member|w_sock
r_struct
id|rpc_sock
op_star
id|w_sock
suffix:semicolon
DECL|member|w_prev
r_struct
id|rpc_wait
op_star
id|w_prev
suffix:semicolon
DECL|member|w_next
r_struct
id|rpc_wait
op_star
id|w_next
suffix:semicolon
DECL|member|w_req
r_struct
id|rpc_ioreq
op_star
id|w_req
suffix:semicolon
DECL|member|w_result
r_int
id|w_result
suffix:semicolon
DECL|member|w_wait
id|wait_queue_head_t
id|w_wait
suffix:semicolon
DECL|member|w_handler
id|rpc_callback_fn_t
id|w_handler
suffix:semicolon
DECL|member|w_cdata
r_void
op_star
id|w_cdata
suffix:semicolon
DECL|member|w_queued
r_char
id|w_queued
suffix:semicolon
DECL|member|w_gotit
r_char
id|w_gotit
suffix:semicolon
DECL|member|w_xid
id|__u32
id|w_xid
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|rpc_sock
r_struct
id|rpc_sock
(brace
DECL|member|file
r_struct
id|file
op_star
id|file
suffix:semicolon
DECL|member|sock
r_struct
id|socket
op_star
id|sock
suffix:semicolon
DECL|member|inet
r_struct
id|sock
op_star
id|inet
suffix:semicolon
DECL|member|waiting
r_struct
id|rpc_wait
id|waiting
(braket
id|RPC_MAXREQS
)braket
suffix:semicolon
DECL|member|cong
r_int
r_int
id|cong
suffix:semicolon
DECL|member|cwnd
r_int
r_int
id|cwnd
suffix:semicolon
DECL|member|pending
r_struct
id|rpc_wait
op_star
id|pending
suffix:semicolon
DECL|member|free
r_struct
id|rpc_wait
op_star
id|free
suffix:semicolon
DECL|member|backlog
id|wait_queue_head_t
id|backlog
suffix:semicolon
DECL|member|shutwait
id|wait_queue_head_t
id|shutwait
suffix:semicolon
DECL|member|shutdown
r_int
id|shutdown
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifdef __KERNEL__
multiline_comment|/* rpc_call: Call synchronously */
r_int
id|rpc_call
c_func
(paren
r_struct
id|rpc_sock
op_star
comma
r_struct
id|rpc_ioreq
op_star
comma
r_struct
id|rpc_timeout
op_star
)paren
suffix:semicolon
multiline_comment|/* These implement asynch calls for nfsiod: Process calls rpc_reserve and&n; * rpc_transmits, then passes the request to nfsiod, which collects the&n; * results via rpc_doio&n; */
r_int
id|rpc_reserve
c_func
(paren
r_struct
id|rpc_sock
op_star
comma
r_struct
id|rpc_ioreq
op_star
comma
r_int
)paren
suffix:semicolon
r_void
id|rpc_release
c_func
(paren
r_struct
id|rpc_sock
op_star
comma
r_struct
id|rpc_ioreq
op_star
)paren
suffix:semicolon
r_int
id|rpc_transmit
c_func
(paren
r_struct
id|rpc_sock
op_star
comma
r_struct
id|rpc_ioreq
op_star
)paren
suffix:semicolon
r_int
id|rpc_doio
c_func
(paren
r_struct
id|rpc_sock
op_star
comma
r_struct
id|rpc_ioreq
op_star
comma
r_struct
id|rpc_timeout
op_star
comma
r_int
)paren
suffix:semicolon
r_struct
id|rpc_sock
op_star
id|rpc_makesock
c_func
(paren
r_struct
id|file
op_star
)paren
suffix:semicolon
r_int
id|rpc_closesock
c_func
(paren
r_struct
id|rpc_sock
op_star
)paren
suffix:semicolon
macro_line|#endif /* __KERNEL__*/
macro_line|#endif /* _LINUX_RPCSOCK_H */
eof
