multiline_comment|/*&n; * linux/include/asm-arm/arch-shark/time.h&n; *&n; * by Alexander.Schulz@stud.uni-karlsruhe.de&n; *&n; * Uses the real time clock because you can&squot;t run&n; * the timer with level triggered interrupts and&n; * you can&squot;t run the shark with edge triggered&n; * inetrrupts (loses ints and hangs).&n; *&n; * derived from linux/drivers/char/rtc.c and:&n; * linux/include/asm-arm/arch-ebsa110/time.h&n; * Copyright (c) 1996,1997,1998 Russell King.&n; */
macro_line|#include &lt;asm/leds.h&gt;
macro_line|#include &lt;linux/mc146818rtc.h&gt;
DECL|macro|IRQ_TIMER
mdefine_line|#define IRQ_TIMER 8
r_extern
r_void
id|get_rtc_time
c_func
(paren
r_struct
id|rtc_time
op_star
id|rtc_tm
)paren
suffix:semicolon
r_extern
r_void
id|set_rtc_irq_bit
c_func
(paren
r_int
r_char
id|bit
)paren
suffix:semicolon
r_extern
r_int
r_int
id|epoch
suffix:semicolon
DECL|function|timer_interrupt
r_static
r_void
id|timer_interrupt
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
id|CMOS_READ
c_func
(paren
id|RTC_INTR_FLAGS
)paren
suffix:semicolon
id|do_leds
c_func
(paren
)paren
suffix:semicolon
(brace
macro_line|#ifdef DIVISOR
r_static
r_int
r_int
id|divisor
suffix:semicolon
r_if
c_cond
(paren
id|divisor
op_decrement
op_eq
l_int|0
)paren
(brace
id|divisor
op_assign
id|DIVISOR
op_minus
l_int|1
suffix:semicolon
macro_line|#else
(brace
macro_line|#endif
id|do_timer
c_func
(paren
id|regs
)paren
suffix:semicolon
)brace
)brace
)brace
multiline_comment|/*&n; * Set up timer interrupt, and return the current time in seconds.&n; */
DECL|function|setup_timer
r_extern
id|__inline__
r_void
id|setup_timer
c_func
(paren
r_void
)paren
(brace
r_struct
id|rtc_time
id|r_time
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
r_int
id|tmp
op_assign
l_int|0
suffix:semicolon
r_int
r_char
id|val
suffix:semicolon
multiline_comment|/*&n;&t; * Set the clock to 128 Hz, we already have a valid&n;&t; * vector now:&n;&t; */
r_while
c_loop
(paren
id|HZ
OG
(paren
l_int|1
op_lshift
id|tmp
)paren
)paren
id|tmp
op_increment
suffix:semicolon
multiline_comment|/*&n;&t; * Check that the input was really a power of 2.&n;&t; */
r_if
c_cond
(paren
id|HZ
op_ne
(paren
l_int|1
op_lshift
id|tmp
)paren
)paren
id|panic
c_func
(paren
l_string|&quot;Please set HZ to a power of 2!&quot;
)paren
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|val
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_FREQ_SELECT
)paren
op_amp
l_int|0xf0
suffix:semicolon
id|val
op_or_assign
(paren
l_int|16
op_minus
id|tmp
)paren
suffix:semicolon
id|CMOS_WRITE
c_func
(paren
id|val
comma
id|RTC_FREQ_SELECT
)paren
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|set_rtc_irq_bit
c_func
(paren
id|RTC_PIE
)paren
suffix:semicolon
id|get_rtc_time
c_func
(paren
op_amp
id|r_time
)paren
suffix:semicolon
id|xtime.tv_sec
op_assign
id|mktime
c_func
(paren
id|r_time.tm_year
op_plus
id|epoch
comma
id|r_time.tm_mon
op_plus
l_int|1
comma
id|r_time.tm_mday
comma
id|r_time.tm_hour
comma
id|r_time.tm_min
comma
id|r_time.tm_sec
)paren
suffix:semicolon
id|timer_irq.handler
op_assign
id|timer_interrupt
suffix:semicolon
id|timer_irq.flags
op_assign
id|SA_INTERRUPT
suffix:semicolon
multiline_comment|/* FIXME: really? */
id|setup_arm_irq
c_func
(paren
id|IRQ_TIMER
comma
op_amp
id|timer_irq
)paren
suffix:semicolon
)brace
eof
