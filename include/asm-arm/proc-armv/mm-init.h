multiline_comment|/*&n; * linux/include/asm-arm/proc-armv/mm-init.h&n; *&n; * Copyright (C) 1996 Russell King&n; *&n; * This contains the code to setup the memory map on an ARM v3 or v4 machine.&n; * This is both processor &amp; architecture specific, and requires some&n; * more work to get it to fit into our separate processor and architecture&n; * structure.&n; */
multiline_comment|/*&n; * On ebsa, we want the memory map set up so:&n; *&n; *   PHYS&t;  VIRT&n; * 00000000&t;00000000&t;Zero page&n; * 000003ff&t;000003ff&t;Zero page end&n; * 00000000&t;c0000000&t;Kernel and all physical memory&n; * 01ffffff&t;c1ffffff&t;End of physical (32MB)&n; * e0000000&t;e0000000&t;IO start&n; * ffffffff&t;ffffffff&t;IO end&n; *&n; * On rpc, we want:&n; *&n; *   PHYS&t;  VIRT&n; * 10000000&t;00000000&t;Zero page&n; * 100003ff&t;000003ff&t;Zero page end&n; * 10000000&t;c0000000&t;Kernel and all physical memory&n; * 1fffffff&t;cfffffff&t;End of physical (32MB)&n; * 02000000&t;d?000000&t;Screen memory (first image)&n; * 02000000&t;d8000000&t;Screen memory (second image)&n; * 00000000&t;df000000&t;StrongARM cache invalidation area&n; * 03000000&t;e0000000&t;IO start&n; * 03ffffff&t;e0ffffff&t;IO end&n; *&n; * We set it up using the section page table entries.&n; */
macro_line|#include &lt;asm/arch/mmap.h&gt;
macro_line|#include &lt;asm/pgtable.h&gt;
DECL|macro|V2P
mdefine_line|#define V2P(x)&t;virt_to_phys(x)
DECL|macro|PTE_SIZE
mdefine_line|#define PTE_SIZE (PTRS_PER_PTE * 4)
DECL|macro|PMD_SECT
mdefine_line|#define PMD_SECT&t;(PMD_TYPE_SECT | PMD_DOMAIN(DOMAIN_KERNEL) | PMD_SECT_CACHEABLE)
DECL|function|setup_swapper_dir
r_static
r_inline
r_void
id|setup_swapper_dir
(paren
r_int
id|index
comma
r_int
r_int
id|entry
)paren
(brace
id|pmd_t
id|pmd
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
)paren
op_assign
id|entry
suffix:semicolon
id|set_pmd
(paren
id|pmd_offset
(paren
id|swapper_pg_dir
op_plus
id|index
comma
l_int|0
)paren
comma
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|setup_pagetables
r_static
r_inline
r_int
r_int
id|setup_pagetables
c_func
(paren
r_int
r_int
id|start_mem
comma
r_int
r_int
id|end_mem
)paren
(brace
r_int
r_int
id|address
suffix:semicolon
r_int
r_int
id|spi
suffix:semicolon
r_union
(brace
r_int
r_int
id|l
suffix:semicolon
r_int
r_int
op_star
id|p
suffix:semicolon
)brace
id|u
suffix:semicolon
multiline_comment|/* map in zero page */
id|u.l
op_assign
(paren
(paren
id|start_mem
op_plus
(paren
id|PTE_SIZE
op_minus
l_int|1
)paren
)paren
op_amp
op_complement
(paren
id|PTE_SIZE
op_minus
l_int|1
)paren
)paren
suffix:semicolon
id|start_mem
op_assign
id|u.l
op_plus
id|PTE_SIZE
suffix:semicolon
id|memzero
(paren
id|u.p
comma
id|PTE_SIZE
)paren
suffix:semicolon
op_star
id|u.p
op_assign
id|V2P
c_func
(paren
id|PAGE_OFFSET
)paren
op_or
id|PTE_CACHEABLE
op_or
id|PTE_TYPE_SMALL
suffix:semicolon
id|setup_swapper_dir
(paren
l_int|0
comma
id|V2P
c_func
(paren
id|u.l
)paren
op_or
id|PMD_TYPE_TABLE
op_or
id|PMD_DOMAIN
c_func
(paren
id|DOMAIN_USER
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|spi
op_assign
l_int|1
suffix:semicolon
id|spi
OL
(paren
id|PAGE_OFFSET
op_rshift
id|PGDIR_SHIFT
)paren
suffix:semicolon
id|spi
op_increment
)paren
id|pgd_val
c_func
(paren
id|swapper_pg_dir
(braket
id|spi
)braket
)paren
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* map in physical ram &amp; kernel */
id|address
op_assign
id|PAGE_OFFSET
suffix:semicolon
r_while
c_loop
(paren
id|spi
OL
id|end_mem
op_rshift
id|PGDIR_SHIFT
)paren
(brace
id|setup_swapper_dir
(paren
id|spi
op_increment
comma
id|V2P
c_func
(paren
id|address
)paren
op_or
id|PMD_SECT
op_or
id|PMD_SECT_BUFFERABLE
op_or
id|PMD_SECT_AP_WRITE
)paren
suffix:semicolon
id|address
op_add_assign
id|PGDIR_SIZE
suffix:semicolon
)brace
r_while
c_loop
(paren
id|spi
OL
id|PTRS_PER_PGD
)paren
id|pgd_val
c_func
(paren
id|swapper_pg_dir
(braket
id|spi
op_increment
)braket
)paren
op_assign
l_int|0
suffix:semicolon
multiline_comment|/*&n;&t; * An area to invalidate the cache&n;&t; */
id|setup_swapper_dir
(paren
l_int|0xdf0
comma
id|SAFE_ADDR
op_or
id|PMD_SECT
op_or
id|PMD_SECT_AP_READ
)paren
suffix:semicolon
multiline_comment|/* map in IO */
id|address
op_assign
id|IO_START
suffix:semicolon
id|spi
op_assign
id|IO_BASE
op_rshift
id|PGDIR_SHIFT
suffix:semicolon
id|pgd_val
c_func
(paren
id|swapper_pg_dir
(braket
id|spi
op_minus
l_int|1
)braket
)paren
op_assign
l_int|0xc0000000
op_or
id|PMD_TYPE_SECT
op_or
id|PMD_DOMAIN
c_func
(paren
id|DOMAIN_KERNEL
)paren
op_or
id|PMD_SECT_AP_WRITE
suffix:semicolon
r_while
c_loop
(paren
id|address
OL
id|IO_START
op_plus
id|IO_SIZE
op_logical_and
id|address
)paren
(brace
id|pgd_val
c_func
(paren
id|swapper_pg_dir
(braket
id|spi
op_increment
)braket
)paren
op_assign
id|address
op_or
id|PMD_TYPE_SECT
op_or
id|PMD_DOMAIN
c_func
(paren
id|DOMAIN_IO
)paren
op_or
id|PMD_SECT_AP_WRITE
suffix:semicolon
id|address
op_add_assign
id|PGDIR_SIZE
suffix:semicolon
)brace
macro_line|#ifdef HAVE_MAP_VID_MEM
id|map_screen_mem
c_func
(paren
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
macro_line|#endif
id|flush_cache_all
c_func
(paren
)paren
suffix:semicolon
r_return
id|start_mem
suffix:semicolon
)brace
DECL|function|mark_usable_memory_areas
r_static
r_inline
r_void
id|mark_usable_memory_areas
c_func
(paren
r_int
r_int
op_star
id|start_mem
comma
r_int
r_int
id|end_mem
)paren
(brace
r_int
r_int
id|smem
suffix:semicolon
op_star
id|start_mem
op_assign
id|smem
op_assign
id|PAGE_ALIGN
c_func
(paren
op_star
id|start_mem
)paren
suffix:semicolon
r_while
c_loop
(paren
id|smem
OL
id|end_mem
)paren
(brace
id|clear_bit
c_func
(paren
id|PG_reserved
comma
op_amp
id|mem_map
(braket
id|MAP_NR
c_func
(paren
id|smem
)paren
)braket
dot
id|flags
)paren
suffix:semicolon
id|smem
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
)brace
eof
