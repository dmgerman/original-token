multiline_comment|/*&n; * linux/include/asm-arm/proc-armv/mm-init.h&n; *&n; * Copyright (C) 1996 Russell King&n; *&n; * This contains the code to setup the memory map on an ARM v3 or v4 machine.&n; * This is both processor &amp; architecture specific, and requires some&n; * more work to get it to fit into our separate processor and architecture&n; * structure.&n; */
multiline_comment|/*&n; * On ebsa, we want the memory map set up so:&n; *&n; *   PHYS&t;  VIRT&n; * 00000000&t;00000000&t;Zero page&n; * 000003ff&t;000003ff&t;Zero page end&n; * 00000000&t;c0000000&t;Kernel and all physical memory&n; * 01ffffff&t;c1ffffff&t;End of physical (32MB)&n; * e0000000&t;e0000000&t;IO start&n; * ffffffff&t;ffffffff&t;IO end&n; *&n; * On rpc, we want:&n; *&n; *   PHYS&t;  VIRT&n; * 10000000&t;00000000&t;Zero page&n; * 100003ff&t;000003ff&t;Zero page end&n; * 10000000&t;c0000000&t;Kernel and all physical memory&n; * 1fffffff&t;cfffffff&t;End of physical (32MB)&n; * 02000000&t;d?000000&t;Screen memory (first image)&n; * 02000000&t;d8000000&t;Screen memory (second image)&n; * 00000000&t;df000000&t;StrongARM cache invalidation area&n; * 03000000&t;e0000000&t;IO start&n; * 03ffffff&t;e0ffffff&t;IO end&n; *&n; * We set it up using the section page table entries.&n; */
macro_line|#include &lt;asm/pgtable.h&gt;
DECL|macro|PTE_SIZE
mdefine_line|#define PTE_SIZE (PTRS_PER_PTE * BYTES_PER_PTR)
r_extern
r_int
r_int
id|setup_io_pagetables
c_func
(paren
r_int
r_int
id|start_mem
)paren
suffix:semicolon
multiline_comment|/*&n; * Add a SECTION mapping between VIRT and PHYS in domain DOMAIN with protection PROT&n; */
r_static
r_inline
r_void
DECL|function|alloc_init_section
id|alloc_init_section
c_func
(paren
r_int
r_int
op_star
id|mem
comma
r_int
r_int
id|virt
comma
r_int
r_int
id|phys
comma
r_int
id|domain
comma
r_int
id|prot
)paren
(brace
id|pgd_t
op_star
id|pgdp
suffix:semicolon
id|pmd_t
op_star
id|pmdp
comma
id|pmd
suffix:semicolon
id|pgdp
op_assign
id|pgd_offset_k
c_func
(paren
id|virt
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|pgdp
comma
id|virt
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
)paren
op_assign
id|phys
op_or
id|PMD_TYPE_SECT
op_or
id|PMD_DOMAIN
c_func
(paren
id|domain
)paren
op_or
id|prot
suffix:semicolon
id|set_pmd
c_func
(paren
id|pmdp
comma
id|pmd
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Clear any mapping&n; */
r_static
r_inline
r_void
DECL|function|free_init_section
id|free_init_section
c_func
(paren
r_int
r_int
id|virt
)paren
(brace
id|pgd_t
op_star
id|pgdp
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
id|pgdp
op_assign
id|pgd_offset_k
c_func
(paren
id|virt
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|pgdp
comma
id|virt
)paren
suffix:semicolon
id|pmd_clear
c_func
(paren
id|pmdp
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Add a PAGE mapping between VIRT and PHYS in domain DOMAIN with protection PROT&n; */
r_static
r_inline
r_void
DECL|function|alloc_init_page
id|alloc_init_page
c_func
(paren
r_int
r_int
op_star
id|mem
comma
r_int
r_int
id|virt
comma
r_int
r_int
id|phys
comma
r_int
id|domain
comma
r_int
id|prot
)paren
(brace
id|pgd_t
op_star
id|pgdp
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
id|pte_t
op_star
id|ptep
suffix:semicolon
id|pgdp
op_assign
id|pgd_offset_k
c_func
(paren
id|virt
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|pgdp
comma
id|virt
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmdp
)paren
)paren
(brace
r_int
r_int
id|memory
op_assign
op_star
id|mem
suffix:semicolon
id|memory
op_assign
(paren
id|memory
op_plus
id|PTE_SIZE
op_minus
l_int|1
)paren
op_amp
op_complement
(paren
id|PTE_SIZE
op_minus
l_int|1
)paren
suffix:semicolon
id|ptep
op_assign
(paren
id|pte_t
op_star
)paren
id|memory
suffix:semicolon
id|memzero
c_func
(paren
id|ptep
comma
id|PTE_SIZE
)paren
suffix:semicolon
id|memory
op_add_assign
id|PTE_SIZE
suffix:semicolon
id|ptep
op_assign
(paren
id|pte_t
op_star
)paren
id|memory
suffix:semicolon
id|memzero
c_func
(paren
id|ptep
comma
id|PTE_SIZE
)paren
suffix:semicolon
id|set_pmd
c_func
(paren
id|pmdp
comma
id|__mk_pmd
c_func
(paren
id|ptep
comma
id|PMD_TYPE_TABLE
op_or
id|PMD_DOMAIN
c_func
(paren
id|domain
)paren
)paren
)paren
suffix:semicolon
op_star
id|mem
op_assign
id|memory
op_plus
id|PTE_SIZE
suffix:semicolon
)brace
id|ptep
op_assign
id|pte_offset
c_func
(paren
id|pmdp
comma
id|virt
)paren
suffix:semicolon
id|set_pte
c_func
(paren
id|ptep
comma
id|mk_pte_phys
c_func
(paren
id|phys
comma
id|__pgprot
c_func
(paren
id|prot
)paren
)paren
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|setup_pagetables
id|setup_pagetables
c_func
(paren
r_int
r_int
id|start_mem
comma
r_int
r_int
id|end_mem
)paren
(brace
r_int
r_int
id|address
op_assign
l_int|0
suffix:semicolon
r_do
(brace
r_if
c_cond
(paren
id|address
op_ge
id|PAGE_OFFSET
op_logical_and
id|address
OL
id|end_mem
)paren
multiline_comment|/*&n;&t;&t;&t; * map in physical ram &amp; kernel&n;&t;&t;&t; */
id|alloc_init_section
c_func
(paren
op_amp
id|start_mem
comma
id|address
comma
id|__virt_to_phys
c_func
(paren
id|address
)paren
comma
id|DOMAIN_KERNEL
comma
id|PMD_SECT_CACHEABLE
op_or
id|PMD_SECT_BUFFERABLE
op_or
id|PMD_SECT_AP_WRITE
)paren
suffix:semicolon
r_else
multiline_comment|/*&n;&t;&t;&t; * unmap everything else&n;&t;&t;&t; */
id|free_init_section
c_func
(paren
id|address
)paren
suffix:semicolon
id|address
op_add_assign
id|PGDIR_SIZE
suffix:semicolon
)brace
r_while
c_loop
(paren
id|address
op_ne
l_int|0
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * An area to invalidate the cache&n;&t; */
id|alloc_init_section
c_func
(paren
op_amp
id|start_mem
comma
id|FLUSH_BASE
comma
id|FLUSH_BASE_PHYS
comma
id|DOMAIN_KERNEL
comma
id|PMD_SECT_CACHEABLE
op_or
id|PMD_SECT_AP_READ
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Now set up our IO mappings&n;&t; */
id|start_mem
op_assign
id|setup_io_pagetables
c_func
(paren
id|start_mem
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * map in zero page&n;&t; */
id|alloc_init_page
c_func
(paren
op_amp
id|start_mem
comma
l_int|0
comma
id|__virt_to_phys
c_func
(paren
id|PAGE_OFFSET
)paren
comma
id|DOMAIN_USER
comma
id|L_PTE_CACHEABLE
op_or
id|L_PTE_YOUNG
op_or
id|L_PTE_PRESENT
)paren
suffix:semicolon
id|flush_cache_all
c_func
(paren
)paren
suffix:semicolon
r_return
id|start_mem
suffix:semicolon
)brace
r_static
r_inline
DECL|function|mark_usable_memory_areas
r_void
id|mark_usable_memory_areas
c_func
(paren
r_int
r_int
op_star
id|start_mem
comma
r_int
r_int
id|end_mem
)paren
(brace
r_int
r_int
id|smem
suffix:semicolon
op_star
id|start_mem
op_assign
id|smem
op_assign
id|PAGE_ALIGN
c_func
(paren
op_star
id|start_mem
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Mark all of memory from the end of kernel to end of memory&n;&t; */
r_while
c_loop
(paren
id|smem
OL
id|end_mem
)paren
(brace
id|clear_bit
c_func
(paren
id|PG_reserved
comma
op_amp
id|mem_map
(braket
id|MAP_NR
c_func
(paren
id|smem
)paren
)braket
dot
id|flags
)paren
suffix:semicolon
id|smem
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Mark memory from page 1 to start of the swapper page directory&n;&t; */
id|smem
op_assign
id|PAGE_OFFSET
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|smem
OL
(paren
r_int
r_int
)paren
op_amp
id|swapper_pg_dir
)paren
(brace
id|clear_bit
c_func
(paren
id|PG_reserved
comma
op_amp
id|mem_map
(braket
id|MAP_NR
c_func
(paren
id|smem
)paren
)braket
dot
id|flags
)paren
suffix:semicolon
id|smem
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
)brace
eof
