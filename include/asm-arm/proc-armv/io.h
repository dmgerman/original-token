multiline_comment|/*&n; * linux/include/asm-arm/proc-armv/io.h&n; */
multiline_comment|/*&n; * The caches on some architectures aren&squot;t dma-coherent and have need to&n; * handle this in software.  There are two types of operations that&n; * can be applied to dma buffers.&n; *&n; *  - dma_cache_wback_inv(start, size) makes caches and RAM coherent by&n; *    writing the content of the caches back to memory, if necessary.&n; *    The function also invalidates the affected part of the caches as&n; *    necessary before DMA transfers from outside to memory.&n; *  - dma_cache_inv(start, size) invalidates the affected parts of the&n; *    caches.  Dirty lines of the caches may be written back or simply&n; *    be discarded.  This operation is necessary before dma operations&n; *    to the memory.&n; *  - dma_cache_wback(start, size) writes back any dirty lines but does&n; *    not invalidate the cache.  This can be used before DMA reads from&n; *    memory,&n; */
macro_line|#include &lt;asm/proc-fns.h&gt;
DECL|function|dma_cache_inv
r_extern
r_inline
r_void
id|dma_cache_inv
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|size
)paren
(brace
id|processor.u.armv3v4
dot
id|_cache_purge_area
c_func
(paren
id|start
comma
id|start
op_plus
id|size
)paren
suffix:semicolon
)brace
DECL|function|dma_cache_wback
r_extern
r_inline
r_void
id|dma_cache_wback
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|size
)paren
(brace
id|processor.u.armv3v4
dot
id|_cache_wback_area
c_func
(paren
id|start
comma
id|start
op_plus
id|size
)paren
suffix:semicolon
)brace
DECL|function|dma_cache_wback_inv
r_extern
r_inline
r_void
id|dma_cache_wback_inv
c_func
(paren
r_int
r_int
id|start
comma
r_int
r_int
id|size
)paren
(brace
id|processor.u.armv3v4
dot
id|_flush_cache_area
c_func
(paren
id|start
comma
id|start
op_plus
id|size
comma
l_int|0
)paren
suffix:semicolon
)brace
eof
