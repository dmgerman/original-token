multiline_comment|/*&n; * linux/include/asm-arm/proc-armv/processor.h&n; *&n; * Copyright (c) 1996 Russell King.&n; *&n; * Changelog:&n; *  20-09-1996&t;RMK&t;Created&n; *  26-09-1996&t;RMK&t;Added &squot;EXTRA_THREAD_STRUCT*&squot;&n; *  28-09-1996&t;RMK&t;Moved start_thread into the processor dependencies&n; */
macro_line|#ifndef __ASM_PROC_PROCESSOR_H
DECL|macro|__ASM_PROC_PROCESSOR_H
mdefine_line|#define __ASM_PROC_PROCESSOR_H
macro_line|#ifdef __KERNEL__
DECL|macro|KERNEL_STACK_SIZE
mdefine_line|#define KERNEL_STACK_SIZE&t;PAGE_SIZE
multiline_comment|/*&n; * on arm2,3 wp does not work&n; */
DECL|macro|wp_works_ok
mdefine_line|#define wp_works_ok 0
DECL|macro|wp_works_ok__is_a_macro
mdefine_line|#define wp_works_ok__is_a_macro /* for versions in ksyms.c */
DECL|struct|context_save_struct
r_struct
id|context_save_struct
(brace
DECL|member|cpsr
r_int
r_int
id|cpsr
suffix:semicolon
DECL|member|r4
r_int
r_int
id|r4
suffix:semicolon
DECL|member|r5
r_int
r_int
id|r5
suffix:semicolon
DECL|member|r6
r_int
r_int
id|r6
suffix:semicolon
DECL|member|r7
r_int
r_int
id|r7
suffix:semicolon
DECL|member|r8
r_int
r_int
id|r8
suffix:semicolon
DECL|member|r9
r_int
r_int
id|r9
suffix:semicolon
DECL|member|fp
r_int
r_int
id|fp
suffix:semicolon
DECL|member|pc
r_int
r_int
id|pc
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|EXTRA_THREAD_STRUCT
mdefine_line|#define EXTRA_THREAD_STRUCT&t;&t;&t;&t;&bslash;&n;&t;struct context_save_struct *save;&t;&t;&bslash;&n;&t;unsigned long memmap;
DECL|macro|EXTRA_THREAD_STRUCT_INIT
mdefine_line|#define EXTRA_THREAD_STRUCT_INIT&t;&t;&t;&bslash;&n;&t;0,&t;&t;&t;&t;&t;&t;&bslash;&n;&t;((unsigned long) swapper_pg_dir) - PAGE_OFFSET
id|DECLARE_THREAD_STRUCT
suffix:semicolon
multiline_comment|/*&n; * Return saved PC of a blocked thread.&n; */
DECL|function|thread_saved_pc
r_extern
id|__inline__
r_int
r_int
id|thread_saved_pc
(paren
r_struct
id|thread_struct
op_star
id|t
)paren
(brace
r_if
c_cond
(paren
id|t-&gt;save
)paren
r_return
id|t-&gt;save-&gt;pc
suffix:semicolon
r_else
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_css_fp
r_extern
id|__inline__
r_int
r_int
id|get_css_fp
(paren
r_struct
id|thread_struct
op_star
id|t
)paren
(brace
r_if
c_cond
(paren
id|t-&gt;save
)paren
r_return
id|t-&gt;save-&gt;fp
suffix:semicolon
r_else
r_return
l_int|0
suffix:semicolon
)brace
id|asmlinkage
r_void
id|ret_from_sys_call
c_func
(paren
r_void
)paren
id|__asm__
(paren
l_string|&quot;ret_from_sys_call&quot;
)paren
suffix:semicolon
DECL|function|copy_thread_css
r_extern
id|__inline__
r_void
id|copy_thread_css
(paren
r_struct
id|context_save_struct
op_star
id|save
)paren
(brace
id|save-&gt;cpsr
op_assign
id|SVC_MODE
suffix:semicolon
id|save-&gt;r4
op_assign
id|save-&gt;r5
op_assign
id|save-&gt;r6
op_assign
id|save-&gt;r7
op_assign
id|save-&gt;r8
op_assign
id|save-&gt;r9
op_assign
id|save-&gt;fp
op_assign
l_int|0
suffix:semicolon
id|save-&gt;pc
op_assign
(paren
r_int
r_int
)paren
id|ret_from_sys_call
suffix:semicolon
)brace
DECL|macro|start_thread
mdefine_line|#define start_thread(regs,pc,sp)&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;unsigned long *stack = (unsigned long *)sp;&t;&t;&t;&bslash;&n;&t;set_fs(USER_DS);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;memzero(regs-&gt;uregs, sizeof(regs-&gt;uregs));&t;&t;&t;&bslash;&n;&t;if (current-&gt;personality == PER_LINUX_32BIT)&t;&t;&t;&bslash;&n;&t;&t;regs-&gt;ARM_cpsr = USR_MODE;&t;&t;&t;&t;&bslash;&n;&t;else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;regs-&gt;ARM_cpsr = USR26_MODE;&t;&t;&t;&t;&bslash;&n;&t;regs-&gt;ARM_pc = pc;&t;&t;/* pc */&t;&t;&t;&bslash;&n;&t;regs-&gt;ARM_sp = sp;&t;&t;/* sp */&t;&t;&t;&bslash;&n;&t;regs-&gt;ARM_r2 = stack[2];&t;/* r2 (envp) */&t;&t;&t;&bslash;&n;&t;regs-&gt;ARM_r1 = stack[1];&t;/* r1 (argv) */&t;&t;&t;&bslash;&n;&t;regs-&gt;ARM_r0 = stack[0];&t;/* r0 (argc) */&t;&t;&t;&bslash;&n;})
multiline_comment|/* Allocation and freeing of basic task resources. */
multiline_comment|/*&n; * NOTE! The task struct and the stack go together&n; */
DECL|macro|alloc_task_struct
mdefine_line|#define alloc_task_struct() &bslash;&n;&t;((struct task_struct *) __get_free_pages(GFP_KERNEL,1))
DECL|macro|free_task_struct
mdefine_line|#define free_task_struct(p)&t;free_pages((unsigned long)(p),1)
macro_line|#endif
macro_line|#endif
eof
