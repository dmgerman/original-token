multiline_comment|/*&n; * Copyright 1995, Russell King.&n; * Various bits and pieces copyrights include:&n; *  Linus Torvalds (test_bit).&n; *&n; * bit 0 is the LSB of addr; bit 32 is the LSB of (addr+1).&n; *&n; * Please note that the code in this file should never be included&n; * from user space.  Many of these are not implemented in assembler&n; * since they would be too costly.  Also, they require priviledged&n; * instructions (which are not available from user mode) to ensure&n; * that they are atomic.&n; */
macro_line|#ifndef __ASM_ARM_BITOPS_H
DECL|macro|__ASM_ARM_BITOPS_H
mdefine_line|#define __ASM_ARM_BITOPS_H
macro_line|#ifdef __KERNEL__
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;do { } while (0)
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;do { } while (0)
multiline_comment|/*&n; * Function prototypes to keep gcc -Wall happy.&n; */
r_extern
r_void
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|test_and_set_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|test_and_clear_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|test_and_change_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|find_first_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_int
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
id|size
comma
r_int
id|offset
)paren
suffix:semicolon
multiline_comment|/*&n; * This routine doesn&squot;t need to be atomic.&n; */
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_const
r_void
op_star
id|addr
)paren
(brace
r_return
(paren
(paren
r_int
r_char
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|3
)braket
op_amp
(paren
l_int|1U
op_lshift
(paren
id|nr
op_amp
l_int|7
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * ffz = Find First Zero in word. Undefined if no zero exists,&n; * so code should check against ~0UL first..&n; */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
id|k
suffix:semicolon
id|word
op_assign
op_complement
id|word
suffix:semicolon
id|k
op_assign
l_int|31
suffix:semicolon
r_if
c_cond
(paren
id|word
op_amp
l_int|0x0000ffff
)paren
(brace
id|k
op_sub_assign
l_int|16
suffix:semicolon
id|word
op_lshift_assign
l_int|16
suffix:semicolon
)brace
r_if
c_cond
(paren
id|word
op_amp
l_int|0x00ff0000
)paren
(brace
id|k
op_sub_assign
l_int|8
suffix:semicolon
id|word
op_lshift_assign
l_int|8
suffix:semicolon
)brace
r_if
c_cond
(paren
id|word
op_amp
l_int|0x0f000000
)paren
(brace
id|k
op_sub_assign
l_int|4
suffix:semicolon
id|word
op_lshift_assign
l_int|4
suffix:semicolon
)brace
r_if
c_cond
(paren
id|word
op_amp
l_int|0x30000000
)paren
(brace
id|k
op_sub_assign
l_int|2
suffix:semicolon
id|word
op_lshift_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
id|word
op_amp
l_int|0x40000000
)paren
(brace
id|k
op_sub_assign
l_int|1
suffix:semicolon
)brace
r_return
id|k
suffix:semicolon
)brace
multiline_comment|/*&n; * ffs: find first bit set. This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|macro|ffs
mdefine_line|#define ffs(x) generic_ffs(x)
multiline_comment|/*&n; * hweightN: returns the hamming weight (i.e. the number&n; * of bits set) of a N-bit word&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x) generic_hweight8(x)
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit&t;&t;&t;test_and_set_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit&t;&t;&t;test_and_clear_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit&t;&t;&t;test_bit
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit&t;find_first_zero_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit&t;&t;find_next_zero_bit
multiline_comment|/* Bitmap functions for the minix filesystem. */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr)&t;test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr)&t;&t;set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr)&t;test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr)&t;&t;test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size)&t;find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ARM_BITOPS_H */
eof
