multiline_comment|/*&n; * linux/include/asm-arm/arch-ebsa285/time.h&n; *&n; * Copyright (c) 1998 Russell King.&n; * Copyright (c) 1998 Phil Blundell&n; *&n; * CATS has a real-time clock, though the evaluation board doesn&squot;t.&n; *&n; * Changelog:&n; *  21-Mar-1998&t;RMK&t;Created&n; *  27-Aug-1998&t;PJB&t;CATS support&n; */
DECL|macro|RTC_PORT
mdefine_line|#define RTC_PORT(x)&t;&t;(0x72+(x))
DECL|macro|RTC_ALWAYS_BCD
mdefine_line|#define RTC_ALWAYS_BCD&t;&t;1
macro_line|#include &lt;asm/leds.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;linux/mc146818rtc.h&gt;
DECL|function|gettimeoffset
r_extern
id|__inline__
r_int
r_int
id|gettimeoffset
(paren
r_void
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|reset_timer
r_extern
id|__inline__
r_int
id|reset_timer
(paren
r_void
)paren
(brace
op_star
id|CSR_TIMER1_CLR
op_assign
l_int|0
suffix:semicolon
multiline_comment|/*&n;&t; * Do the LEDs thing on EBSA-285 hardware.&n;&t; */
r_if
c_cond
(paren
op_logical_neg
id|machine_is_cats
c_func
(paren
)paren
)paren
(brace
r_static
r_int
r_int
id|count
op_assign
l_int|50
suffix:semicolon
r_static
r_int
id|last_pid
suffix:semicolon
r_if
c_cond
(paren
id|current-&gt;pid
op_ne
id|last_pid
)paren
(brace
id|last_pid
op_assign
id|current-&gt;pid
suffix:semicolon
r_if
c_cond
(paren
id|last_pid
)paren
id|leds_event
c_func
(paren
id|led_idle_end
)paren
suffix:semicolon
r_else
id|leds_event
c_func
(paren
id|led_idle_start
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
op_decrement
id|count
op_eq
l_int|0
)paren
(brace
id|count
op_assign
l_int|50
suffix:semicolon
id|leds_event
c_func
(paren
id|led_timer
)paren
suffix:semicolon
)brace
)brace
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/*&n; * We don&squot;t have a RTC to update!&n; */
DECL|macro|update_rtc
mdefine_line|#define update_rtc()
multiline_comment|/*&n; * Set up timer interrupt, and return the current time in seconds.&n; */
DECL|function|setup_timer
r_extern
id|__inline__
r_int
r_int
id|setup_timer
(paren
r_void
)paren
(brace
r_int
id|year
comma
id|mon
comma
id|day
comma
id|hour
comma
id|min
comma
id|sec
suffix:semicolon
multiline_comment|/*&n;&t; * Default the date to 1 Jan 1970 0:0:0&n;&t; */
id|year
op_assign
l_int|1970
suffix:semicolon
id|mon
op_assign
l_int|1
suffix:semicolon
id|day
op_assign
l_int|1
suffix:semicolon
id|hour
op_assign
l_int|0
suffix:semicolon
id|min
op_assign
l_int|0
suffix:semicolon
id|sec
op_assign
l_int|0
suffix:semicolon
op_star
id|CSR_TIMER1_CLR
op_assign
l_int|0
suffix:semicolon
op_star
id|CSR_TIMER1_LOAD
op_assign
id|LATCH
suffix:semicolon
op_star
id|CSR_TIMER1_CNTL
op_assign
id|TIMER_CNTL_ENABLE
op_or
id|TIMER_CNTL_AUTORELOAD
op_or
id|TIMER_CNTL_DIV16
suffix:semicolon
r_if
c_cond
(paren
id|machine_is_cats
c_func
(paren
)paren
)paren
(brace
r_int
id|i
suffix:semicolon
multiline_comment|/*&n;&t;&t; * Read the real time from the Dallas chip.  (Code borrowed&n;&t;&t; * from arch/i386/kernel/time.c).&n;&t;&t; */
multiline_comment|/* The Linux interpretation of the CMOS clock register contents:&n;&t;&t; * When the Update-In-Progress (UIP) flag goes from 1 to 0, the&n;&t;&t; * RTC registers show the second which has precisely just started.&n;&t;&t; * Let&squot;s hope other operating systems interpret the RTC the same way.&n;&t;&t; */
multiline_comment|/* read RTC exactly on falling edge of update flag */
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|1000000
suffix:semicolon
id|i
op_increment
)paren
multiline_comment|/* may take up to 1 second... */
r_if
c_cond
(paren
id|CMOS_READ
c_func
(paren
id|RTC_FREQ_SELECT
)paren
op_amp
id|RTC_UIP
)paren
r_break
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|1000000
suffix:semicolon
id|i
op_increment
)paren
multiline_comment|/* must try at least 2.228 ms */
r_if
c_cond
(paren
op_logical_neg
(paren
id|CMOS_READ
c_func
(paren
id|RTC_FREQ_SELECT
)paren
op_amp
id|RTC_UIP
)paren
)paren
r_break
suffix:semicolon
r_do
(brace
multiline_comment|/* Isn&squot;t this overkill ? UIP above should guarantee consistency */
id|sec
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_SECONDS
)paren
suffix:semicolon
id|min
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_MINUTES
)paren
suffix:semicolon
id|hour
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_HOURS
)paren
suffix:semicolon
id|day
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_DAY_OF_MONTH
)paren
suffix:semicolon
id|mon
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_MONTH
)paren
suffix:semicolon
id|year
op_assign
id|CMOS_READ
c_func
(paren
id|RTC_YEAR
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|sec
op_ne
id|CMOS_READ
c_func
(paren
id|RTC_SECONDS
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|CMOS_READ
c_func
(paren
id|RTC_CONTROL
)paren
op_amp
id|RTC_DM_BINARY
)paren
op_logical_or
id|RTC_ALWAYS_BCD
)paren
(brace
id|BCD_TO_BIN
c_func
(paren
id|sec
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|min
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|hour
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|day
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|mon
)paren
suffix:semicolon
id|BCD_TO_BIN
c_func
(paren
id|year
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
id|year
op_add_assign
l_int|1900
)paren
OL
l_int|1970
)paren
id|year
op_add_assign
l_int|100
suffix:semicolon
)brace
r_return
id|mktime
c_func
(paren
id|year
comma
id|mon
comma
id|day
comma
id|hour
comma
id|min
comma
id|sec
)paren
suffix:semicolon
)brace
eof
