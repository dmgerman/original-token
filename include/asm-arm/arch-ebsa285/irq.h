multiline_comment|/*&n; *  linux/include/asm-arm/arch-ebsa285/irq.h&n; *&n; *  Copyright (C) 1996-1998 Russell King&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; *&n; *  Changelog:&n; *   22-Aug-1998 RMK&t;Restructured IRQ routines&n; *   03-Sep-1998 PJB&t;Merged CATS support&n; *   20-Jan-1998 RMK&t;Started merge of EBSA286, CATS and NetWinder&n; *   26-Jan-1999 PJB&t;Don&squot;t use IACK on CATS&n; *   16-Mar-1999 RMK&t;Added autodetect of ISA PICs&n; */
macro_line|#include &lt;asm/hardware.h&gt;
macro_line|#include &lt;asm/hardware/dec21285.h&gt;
macro_line|#include &lt;asm/irq.h&gt;
macro_line|#include &lt;asm/mach-types.h&gt;
multiline_comment|/*&n; * Footbridge IRQ translation table&n; *  Converts from our IRQ numbers into FootBridge masks&n; */
DECL|variable|dc21285_irq_mask
r_static
r_const
r_int
id|dc21285_irq_mask
(braket
)braket
op_assign
(brace
id|IRQ_MASK_UART_RX
comma
multiline_comment|/*  0 */
id|IRQ_MASK_UART_TX
comma
multiline_comment|/*  1 */
id|IRQ_MASK_TIMER1
comma
multiline_comment|/*  2 */
id|IRQ_MASK_TIMER2
comma
multiline_comment|/*  3 */
id|IRQ_MASK_TIMER3
comma
multiline_comment|/*  4 */
id|IRQ_MASK_IN0
comma
multiline_comment|/*  5 */
id|IRQ_MASK_IN1
comma
multiline_comment|/*  6 */
id|IRQ_MASK_IN2
comma
multiline_comment|/*  7 */
id|IRQ_MASK_IN3
comma
multiline_comment|/*  8 */
id|IRQ_MASK_DOORBELLHOST
comma
multiline_comment|/*  9 */
id|IRQ_MASK_DMA1
comma
multiline_comment|/* 10 */
id|IRQ_MASK_DMA2
comma
multiline_comment|/* 11 */
id|IRQ_MASK_PCI
comma
multiline_comment|/* 12 */
id|IRQ_MASK_SDRAMPARITY
comma
multiline_comment|/* 13 */
id|IRQ_MASK_I2OINPOST
comma
multiline_comment|/* 14 */
id|IRQ_MASK_PCI_ABORT
comma
multiline_comment|/* 15 */
id|IRQ_MASK_PCI_SERR
comma
multiline_comment|/* 16 */
id|IRQ_MASK_DISCARD_TIMER
comma
multiline_comment|/* 17 */
id|IRQ_MASK_PCI_DPERR
comma
multiline_comment|/* 18 */
id|IRQ_MASK_PCI_PERR
comma
multiline_comment|/* 19 */
)brace
suffix:semicolon
DECL|variable|isa_irq
r_static
r_int
id|isa_irq
op_assign
op_minus
l_int|1
suffix:semicolon
DECL|function|fixup_irq
r_static
r_inline
r_int
id|fixup_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
macro_line|#ifdef PCIIACK_BASE
r_if
c_cond
(paren
id|irq
op_eq
id|isa_irq
)paren
id|irq
op_assign
op_star
(paren
r_int
r_char
op_star
)paren
id|PCIIACK_BASE
suffix:semicolon
macro_line|#endif
r_return
id|irq
suffix:semicolon
)brace
DECL|function|dc21285_mask_irq
r_static
r_void
id|dc21285_mask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
op_star
id|CSR_IRQ_DISABLE
op_assign
id|dc21285_irq_mask
(braket
id|_DC21285_INR
c_func
(paren
id|irq
)paren
)braket
suffix:semicolon
)brace
DECL|function|dc21285_unmask_irq
r_static
r_void
id|dc21285_unmask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
op_star
id|CSR_IRQ_ENABLE
op_assign
id|dc21285_irq_mask
(braket
id|_DC21285_INR
c_func
(paren
id|irq
)paren
)braket
suffix:semicolon
)brace
DECL|function|isa_mask_pic_lo_irq
r_static
r_void
id|isa_mask_pic_lo_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|PIC_MASK_LO
)paren
op_or
id|mask
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
)brace
DECL|function|isa_mask_ack_pic_lo_irq
r_static
r_void
id|isa_mask_ack_pic_lo_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|PIC_MASK_LO
)paren
op_or
id|mask
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0x20
comma
id|PIC_LO
)paren
suffix:semicolon
)brace
DECL|function|isa_unmask_pic_lo_irq
r_static
r_void
id|isa_unmask_pic_lo_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|PIC_MASK_LO
)paren
op_amp
op_complement
id|mask
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
)brace
DECL|function|isa_mask_pic_hi_irq
r_static
r_void
id|isa_mask_pic_hi_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|PIC_MASK_HI
)paren
op_or
id|mask
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
)brace
DECL|function|isa_mask_ack_pic_hi_irq
r_static
r_void
id|isa_mask_ack_pic_hi_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|PIC_MASK_HI
)paren
op_or
id|mask
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0x62
comma
id|PIC_LO
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0x20
comma
id|PIC_HI
)paren
suffix:semicolon
)brace
DECL|function|isa_unmask_pic_hi_irq
r_static
r_void
id|isa_unmask_pic_hi_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|PIC_MASK_HI
)paren
op_amp
op_complement
id|mask
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
)brace
DECL|function|no_action
r_static
r_void
id|no_action
c_func
(paren
r_int
id|cpl
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
)brace
DECL|variable|irq_cascade
r_static
r_struct
id|irqaction
id|irq_cascade
op_assign
(brace
id|no_action
comma
l_int|0
comma
l_int|0
comma
l_string|&quot;cascade&quot;
comma
l_int|NULL
comma
l_int|NULL
)brace
suffix:semicolon
DECL|variable|pic1_resource
r_static
r_struct
id|resource
id|pic1_resource
op_assign
(brace
l_string|&quot;pic1&quot;
comma
l_int|0x20
comma
l_int|0x3f
)brace
suffix:semicolon
DECL|variable|pic2_resource
r_static
r_struct
id|resource
id|pic2_resource
op_assign
(brace
l_string|&quot;pic2&quot;
comma
l_int|0xa0
comma
l_int|0xbf
)brace
suffix:semicolon
DECL|function|irq_init_irq
r_static
id|__inline__
r_void
id|irq_init_irq
c_func
(paren
r_void
)paren
(brace
r_int
id|irq
suffix:semicolon
multiline_comment|/*&n;&t; * setup DC21285 IRQs&n;&t; */
op_star
id|CSR_IRQ_DISABLE
op_assign
op_minus
l_int|1
suffix:semicolon
op_star
id|CSR_FIQ_DISABLE
op_assign
op_minus
l_int|1
suffix:semicolon
r_for
c_loop
(paren
id|irq
op_assign
id|_DC21285_IRQ
c_func
(paren
l_int|0
)paren
suffix:semicolon
id|irq
OL
id|_DC21285_IRQ
c_func
(paren
l_int|20
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|dc21285_mask_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|dc21285_mask_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|dc21285_unmask_irq
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Determine the ISA settings for&n;&t; * the machine we&squot;re running on.&n;&t; */
id|isa_irq
op_assign
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|footbridge_cfn_mode
c_func
(paren
)paren
)paren
(brace
r_if
c_cond
(paren
id|machine_is_ebsa285
c_func
(paren
)paren
)paren
multiline_comment|/* The following is dependent on which slot&n;&t;&t;&t; * you plug the Southbridge card into.  We&n;&t;&t;&t; * currently assume that you plug it into&n;&t;&t;&t; * the right-hand most slot.&n;&t;&t;&t; */
id|isa_irq
op_assign
id|IRQ_PCI
suffix:semicolon
r_if
c_cond
(paren
id|machine_is_cats
c_func
(paren
)paren
)paren
id|isa_irq
op_assign
id|IRQ_IN2
suffix:semicolon
r_if
c_cond
(paren
id|machine_is_netwinder
c_func
(paren
)paren
)paren
id|isa_irq
op_assign
id|IRQ_IN3
suffix:semicolon
)brace
r_if
c_cond
(paren
id|isa_irq
op_ne
op_minus
l_int|1
)paren
(brace
multiline_comment|/*&n;&t;&t; * Setup, and then probe for an ISA PIC&n;&t;&t; * If the PIC is not there, then we&n;&t;&t; * ignore the PIC.&n;&t;&t; */
id|outb
c_func
(paren
l_int|0x11
comma
id|PIC_LO
)paren
suffix:semicolon
id|outb
c_func
(paren
id|_ISA_IRQ
c_func
(paren
l_int|0
)paren
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
multiline_comment|/* IRQ number&t;&t;*/
id|outb
c_func
(paren
l_int|0x04
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
multiline_comment|/* Slave on Ch2&t;&t;*/
id|outb
c_func
(paren
l_int|0x01
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
multiline_comment|/* x86&t;&t;&t;*/
id|outb
c_func
(paren
l_int|0xf5
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
multiline_comment|/* pattern: 11110101&t;*/
id|outb
c_func
(paren
l_int|0x11
comma
id|PIC_HI
)paren
suffix:semicolon
id|outb
c_func
(paren
id|_ISA_IRQ
c_func
(paren
l_int|8
)paren
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
multiline_comment|/* IRQ number&t;&t;*/
id|outb
c_func
(paren
l_int|0x02
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
multiline_comment|/* Slave on Ch1&t;&t;*/
id|outb
c_func
(paren
l_int|0x01
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
multiline_comment|/* x86&t;&t;&t;*/
id|outb
c_func
(paren
l_int|0xfa
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
multiline_comment|/* pattern: 11111010&t;*/
id|outb
c_func
(paren
l_int|0x0b
comma
id|PIC_LO
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0x0b
comma
id|PIC_HI
)paren
suffix:semicolon
r_if
c_cond
(paren
id|inb
c_func
(paren
id|PIC_MASK_LO
)paren
op_eq
l_int|0xf5
op_logical_and
id|inb
c_func
(paren
id|PIC_MASK_HI
)paren
op_eq
l_int|0xfa
)paren
(brace
id|outb
c_func
(paren
l_int|0xff
comma
id|PIC_MASK_LO
)paren
suffix:semicolon
multiline_comment|/* mask all IRQs&t;*/
id|outb
c_func
(paren
l_int|0xff
comma
id|PIC_MASK_HI
)paren
suffix:semicolon
multiline_comment|/* mask all IRQs&t;*/
)brace
r_else
id|isa_irq
op_assign
op_minus
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
id|isa_irq
op_ne
op_minus
l_int|1
)paren
(brace
r_for
c_loop
(paren
id|irq
op_assign
id|_ISA_IRQ
c_func
(paren
l_int|0
)paren
suffix:semicolon
id|irq
OL
id|_ISA_IRQ
c_func
(paren
l_int|8
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|isa_mask_ack_pic_lo_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|isa_mask_pic_lo_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|isa_unmask_pic_lo_irq
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
id|_ISA_IRQ
c_func
(paren
l_int|8
)paren
suffix:semicolon
id|irq
OL
id|_ISA_IRQ
c_func
(paren
l_int|16
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|isa_mask_ack_pic_hi_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|isa_mask_pic_hi_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|isa_unmask_pic_hi_irq
suffix:semicolon
)brace
id|request_resource
c_func
(paren
op_amp
id|ioport_resource
comma
op_amp
id|pic1_resource
)paren
suffix:semicolon
id|request_resource
c_func
(paren
op_amp
id|ioport_resource
comma
op_amp
id|pic2_resource
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
id|IRQ_ISA_CASCADE
comma
op_amp
id|irq_cascade
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
id|isa_irq
comma
op_amp
id|irq_cascade
)paren
suffix:semicolon
multiline_comment|/*&n;&t;&t; * On the NetWinder, don&squot;t automatically&n;&t;&t; * enable ISA IRQ11 when it is requested.&n;&t;&t; * There appears to be a missing pull-up&n;&t;&t; * resistor on this line.&n;&t;&t; */
r_if
c_cond
(paren
id|machine_is_netwinder
c_func
(paren
)paren
)paren
id|irq_desc
(braket
id|_ISA_IRQ
c_func
(paren
l_int|11
)paren
)braket
dot
id|noautoenable
op_assign
l_int|1
suffix:semicolon
)brace
)brace
eof
