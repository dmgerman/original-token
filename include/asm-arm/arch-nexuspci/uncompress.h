multiline_comment|/*&n; * linux/include/asm-arm/arch-nexuspci/uncompress.h&n; *&n; * Copyright (C) 1998, 1999, 2000 Philip Blundell&n; */
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or&n; * modify it under the terms of the GNU General Public License&n; * as published by the Free Software Foundation; either version&n; * 2 of the License, or (at your option) any later version.&n; */
macro_line|#include &lt;asm/hardware.h&gt;
macro_line|#include &lt;asm/io.h&gt;
multiline_comment|/*&n; * Write a character to the UART&n; */
DECL|function|_ll_write_char
r_void
id|_ll_write_char
c_func
(paren
r_char
id|c
)paren
(brace
r_while
c_loop
(paren
op_logical_neg
(paren
id|__raw_readb
c_func
(paren
id|DUART_START
op_plus
l_int|0x4
)paren
op_amp
l_int|0x4
)paren
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
id|c
comma
id|DUART_START
op_plus
l_int|0xc
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * This does not append a newline&n; */
DECL|function|puts
r_static
r_void
id|puts
c_func
(paren
r_const
r_char
op_star
id|s
)paren
(brace
r_while
c_loop
(paren
op_star
id|s
)paren
(brace
r_if
c_cond
(paren
op_star
id|s
op_eq
l_char|&squot;&bslash;n&squot;
)paren
id|_ll_write_char
c_func
(paren
l_char|&squot;&bslash;r&squot;
)paren
suffix:semicolon
id|_ll_write_char
c_func
(paren
op_star
(paren
id|s
op_increment
)paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * Set up for decompression&n; */
DECL|function|arch_decomp_setup
r_static
r_void
id|arch_decomp_setup
c_func
(paren
r_void
)paren
(brace
multiline_comment|/* LED off */
id|__raw_writel
c_func
(paren
id|INTCONT_LED
comma
id|INTCONT_START
)paren
suffix:semicolon
multiline_comment|/* Set up SCC */
id|__raw_writeb
c_func
(paren
l_int|42
comma
id|DUART_START
op_plus
l_int|8
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|48
comma
id|DUART_START
op_plus
l_int|8
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|16
comma
id|DUART_START
op_plus
l_int|8
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|0x93
comma
id|DUART_START
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|0x17
comma
id|DUART_START
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|0xbb
comma
id|DUART_START
op_plus
l_int|4
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|0x78
comma
id|DUART_START
op_plus
l_int|16
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|0xa0
comma
id|DUART_START
op_plus
l_int|8
)paren
suffix:semicolon
id|__raw_writeb
c_func
(paren
l_int|5
comma
id|DUART_START
op_plus
l_int|8
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Stroke the watchdog so we don&squot;t get reset during decompression.&n; */
DECL|function|arch_decomp_wdog
r_static
r_inline
r_void
id|arch_decomp_wdog
c_func
(paren
r_void
)paren
(brace
id|__raw_writel
c_func
(paren
id|INTCONT_WATCHDOG
comma
id|INTCONT_START
)paren
suffix:semicolon
id|__raw_writel
c_func
(paren
id|INTCONT_WATCHDOG
op_or
l_int|1
comma
id|INTCONT_START
)paren
suffix:semicolon
)brace
eof
