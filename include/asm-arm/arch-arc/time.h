multiline_comment|/*&n; * linux/include/asm-arm/arch-arc/time.h&n; *&n; * Copyright (c) 1996 Russell King.&n; *&n; * Changelog:&n; *  24-Sep-1996&t;RMK&t;Created&n; *  10-Oct-1996&t;RMK&t;Brought up to date with arch-sa110eval&n; *  04-Dec-1997&t;RMK&t;Updated for new arch/arm/time.c&n; */
macro_line|#include &lt;asm/ioc.h&gt;
DECL|variable|last_rtc_update
r_static
r_int
id|last_rtc_update
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* last time the cmos clock got updated */
DECL|function|gettimeoffset
r_extern
id|__inline__
r_int
r_int
id|gettimeoffset
(paren
r_void
)paren
(brace
r_int
r_int
id|count1
comma
id|count2
comma
id|status1
comma
id|status2
suffix:semicolon
r_int
r_int
id|offset
op_assign
l_int|0
suffix:semicolon
id|status1
op_assign
id|inb
c_func
(paren
id|IOC_IRQREQA
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|outb
(paren
l_int|0
comma
id|IOC_T0LATCH
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|count1
op_assign
id|inb
c_func
(paren
id|IOC_T0CNTL
)paren
op_or
(paren
id|inb
c_func
(paren
id|IOC_T0CNTH
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|status2
op_assign
id|inb
c_func
(paren
id|IOC_IRQREQA
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|outb
(paren
l_int|0
comma
id|IOC_T0LATCH
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|count2
op_assign
id|inb
c_func
(paren
id|IOC_T0CNTL
)paren
op_or
(paren
id|inb
c_func
(paren
id|IOC_T0CNTH
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
r_if
c_cond
(paren
id|count2
OL
id|count1
)paren
(brace
multiline_comment|/*&n;&t;&t; * This means that we haven&squot;t just had an interrupt&n;&t;&t; * while reading into status2.&n;&t;&t; */
r_if
c_cond
(paren
id|status2
op_amp
(paren
l_int|1
op_lshift
l_int|5
)paren
)paren
id|offset
op_assign
id|tick
suffix:semicolon
id|count1
op_assign
id|count2
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|count2
OG
id|count1
)paren
(brace
multiline_comment|/*&n;&t;&t; * We have just had another interrupt while reading&n;&t;&t; * status2.&n;&t;&t; */
id|offset
op_add_assign
id|tick
suffix:semicolon
id|count1
op_assign
id|count2
suffix:semicolon
)brace
id|count1
op_assign
id|LATCH
op_minus
id|count1
suffix:semicolon
multiline_comment|/*&n;&t; * count1 = number of clock ticks since last interrupt&n;&t; */
id|offset
op_add_assign
id|count1
op_star
id|tick
op_div
id|LATCH
suffix:semicolon
r_return
id|offset
suffix:semicolon
)brace
r_extern
r_int
id|iic_control
(paren
r_int
r_char
comma
r_int
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|set_rtc_time
r_static
r_int
id|set_rtc_time
c_func
(paren
r_int
r_int
id|nowtime
)paren
(brace
r_char
id|buf
(braket
l_int|5
)braket
comma
id|ctrl
suffix:semicolon
r_if
c_cond
(paren
id|iic_control
c_func
(paren
l_int|0xa1
comma
l_int|0
comma
op_amp
id|ctrl
comma
l_int|1
)paren
op_ne
l_int|0
)paren
id|printk
c_func
(paren
l_string|&quot;RTC: failed to read control reg&bslash;n&quot;
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Reset divider&n;&t; */
id|ctrl
op_or_assign
l_int|0x80
suffix:semicolon
r_if
c_cond
(paren
id|iic_control
c_func
(paren
l_int|0xa0
comma
l_int|0
comma
op_amp
id|ctrl
comma
l_int|1
)paren
op_ne
l_int|0
)paren
id|printk
c_func
(paren
l_string|&quot;RTC: failed to stop the clock&bslash;n&quot;
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * We only set the time - we don&squot;t set the date.&n;&t; * This means that there is the possibility once&n;&t; * a day for the correction to disrupt the date.&n;&t; * We really ought to write the time and date, or&n;&t; * nothing at all.&n;&t; */
id|buf
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|buf
(braket
l_int|1
)braket
op_assign
id|nowtime
op_mod
l_int|60
suffix:semicolon
id|nowtime
op_div_assign
l_int|60
suffix:semicolon
id|buf
(braket
l_int|2
)braket
op_assign
id|nowtime
op_mod
l_int|60
suffix:semicolon
id|nowtime
op_div_assign
l_int|60
suffix:semicolon
id|buf
(braket
l_int|3
)braket
op_assign
id|nowtime
op_mod
l_int|24
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|buf
(braket
l_int|1
)braket
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|buf
(braket
l_int|2
)braket
)paren
suffix:semicolon
id|BIN_TO_BCD
c_func
(paren
id|buf
(braket
l_int|3
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|iic_control
c_func
(paren
l_int|0xa0
comma
l_int|1
comma
id|buf
comma
l_int|4
)paren
op_ne
l_int|0
)paren
id|printk
c_func
(paren
l_string|&quot;RTC: Failed to set the time&bslash;n&quot;
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Re-enable divider&n;&t; */
id|ctrl
op_and_assign
op_complement
l_int|0x80
suffix:semicolon
r_if
c_cond
(paren
id|iic_control
c_func
(paren
l_int|0xa0
comma
l_int|0
comma
op_amp
id|ctrl
comma
l_int|1
)paren
op_ne
l_int|0
)paren
id|printk
c_func
(paren
l_string|&quot;RTC: failed to start the clock&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|get_rtc_time
r_extern
id|__inline__
r_int
r_int
id|get_rtc_time
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|year
comma
id|i
suffix:semicolon
r_char
id|buf
(braket
l_int|8
)braket
suffix:semicolon
multiline_comment|/*&n;&t; * The year is not part of the RTC counter&n;&t; * registers, and is stored in RAM.  This&n;&t; * means that it will not be automatically&n;&t; * updated.&n;&t; */
r_if
c_cond
(paren
id|iic_control
c_func
(paren
l_int|0xa1
comma
l_int|0xc0
comma
id|buf
comma
l_int|1
)paren
op_ne
l_int|0
)paren
id|printk
c_func
(paren
l_string|&quot;RTC: failed to read the year&bslash;n&quot;
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * If the year is before 1970, then the year&n;&t; * is actually 100 in advance.  This gives us&n;&t; * a year 2070 bug...&n;&t; */
id|year
op_assign
l_int|1900
op_plus
id|buf
(braket
l_int|0
)braket
suffix:semicolon
r_if
c_cond
(paren
id|year
OL
l_int|1970
)paren
id|year
op_add_assign
l_int|100
suffix:semicolon
multiline_comment|/*&n;&t; * Read the time and date in one go - this&n;&t; * will ensure that we don&squot;t get any effects&n;&t; * due to carry (the RTC latches the counters&n;&t; * during a read).&n;&t; */
r_if
c_cond
(paren
id|iic_control
c_func
(paren
l_int|0xa1
comma
l_int|2
comma
id|buf
comma
l_int|5
)paren
op_ne
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;RTC: failed to read the time and date&bslash;n&quot;
)paren
suffix:semicolon
id|memset
c_func
(paren
id|buf
comma
l_int|0
comma
r_sizeof
(paren
id|buf
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * The RTC combines years with date and weekday&n;&t; * with month.  We need to mask off this extra&n;&t; * information before converting the date to&n;&t; * binary.&n;&t; */
id|buf
(braket
l_int|4
)braket
op_and_assign
l_int|0x1f
suffix:semicolon
id|buf
(braket
l_int|3
)braket
op_and_assign
l_int|0x3f
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|5
suffix:semicolon
id|i
op_increment
)paren
id|BCD_TO_BIN
c_func
(paren
id|buf
(braket
id|i
)braket
)paren
suffix:semicolon
r_return
id|mktime
c_func
(paren
id|year
comma
id|buf
(braket
l_int|4
)braket
comma
id|buf
(braket
l_int|3
)braket
comma
id|buf
(braket
l_int|2
)braket
comma
id|buf
(braket
l_int|1
)braket
comma
id|buf
(braket
l_int|0
)braket
)paren
suffix:semicolon
)brace
DECL|function|timer_interrupt
r_static
r_void
id|timer_interrupt
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
id|do_timer
c_func
(paren
id|regs
)paren
suffix:semicolon
multiline_comment|/* If we have an externally synchronized linux clock, then update&n;&t; * CMOS clock accordingly every ~11 minutes.  Set_rtc_mmss() has to be&n;&t; * called as close as possible to 500 ms before the new second starts.&n;&t; */
r_if
c_cond
(paren
(paren
id|time_status
op_amp
id|STA_UNSYNC
)paren
op_eq
l_int|0
op_logical_and
id|xtime.tv_sec
OG
id|last_rtc_update
op_plus
l_int|660
op_logical_and
id|xtime.tv_usec
op_ge
l_int|50000
op_minus
(paren
id|tick
op_rshift
l_int|1
)paren
op_logical_and
id|xtime.tv_usec
OL
l_int|50000
op_plus
(paren
id|tick
op_rshift
l_int|1
)paren
)paren
(brace
r_if
c_cond
(paren
id|set_rtc_time
c_func
(paren
id|xtime.tv_sec
)paren
op_eq
l_int|0
)paren
id|last_rtc_update
op_assign
id|xtime.tv_sec
suffix:semicolon
r_else
id|last_rtc_update
op_assign
id|xtime.tv_sec
op_minus
l_int|600
suffix:semicolon
multiline_comment|/* do it again in 60 s */
)brace
)brace
DECL|variable|timerirq
r_static
r_struct
id|irqaction
id|timerirq
op_assign
(brace
id|timer_interrupt
comma
l_int|0
comma
l_int|0
comma
l_string|&quot;timer&quot;
comma
l_int|NULL
comma
l_int|NULL
)brace
suffix:semicolon
multiline_comment|/*&n; * Set up timer interrupt, and return the current time in seconds.&n; */
DECL|function|setup_timer
r_extern
id|__inline__
r_void
id|setup_timer
c_func
(paren
r_void
)paren
(brace
id|outb
c_func
(paren
id|LATCH
op_amp
l_int|255
comma
id|IOC_T0LTCHL
)paren
suffix:semicolon
id|outb
c_func
(paren
id|LATCH
op_rshift
l_int|8
comma
id|IOC_T0LTCHH
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOC_T0GO
)paren
suffix:semicolon
id|xtime.tv_sec
op_assign
id|get_rtc_time
c_func
(paren
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
id|IRQ_TIMER
comma
op_amp
id|timerirq
)paren
suffix:semicolon
)brace
eof
