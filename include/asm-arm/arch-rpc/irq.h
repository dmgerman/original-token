multiline_comment|/*&n; * include/asm-arm/arch-rpc/irq.h&n; *&n; * Copyright (C) 1996 Russell King&n; *&n; * Changelog:&n; *   10-10-1996&t;RMK&t;Brought up to date with arch-sa110eval&n; */
DECL|macro|BUILD_IRQ
mdefine_line|#define BUILD_IRQ(s,n,m) &bslash;&n;&t;void IRQ##n##_interrupt(void); &bslash;&n;&t;void fast_IRQ##n##_interrupt(void); &bslash;&n;&t;void bad_IRQ##n##_interrupt(void); &bslash;&n;&t;void probe_IRQ##n##_interrupt(void);
multiline_comment|/*&n; * The timer is a special interrupt&n; */
DECL|macro|IRQ5_interrupt
mdefine_line|#define IRQ5_interrupt&t;&t;timer_IRQ_interrupt
DECL|macro|IRQ_INTERRUPT
mdefine_line|#define IRQ_INTERRUPT(n)&t;IRQ##n##_interrupt
DECL|macro|FAST_INTERRUPT
mdefine_line|#define FAST_INTERRUPT(n)&t;fast_IRQ##n##_interrupt
DECL|macro|BAD_INTERRUPT
mdefine_line|#define BAD_INTERRUPT(n)&t;bad_IRQ##n##_interrupt
DECL|macro|PROBE_INTERRUPT
mdefine_line|#define PROBE_INTERRUPT(n)&t;probe_IRQ##n##_interrupt
DECL|macro|X
mdefine_line|#define X(x) (x)|0x01, (x)|0x02, (x)|0x04, (x)|0x08, (x)|0x10, (x)|0x20, (x)|0x40, (x)|0x80
DECL|macro|Z
mdefine_line|#define Z(x) (x), (x), (x), (x), (x), (x), (x), (x)
DECL|function|mask_and_ack_irq
r_static
id|__inline__
r_void
id|mask_and_ack_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_static
r_const
r_int
id|addrmasks
(braket
)braket
op_assign
(brace
id|X
c_func
(paren
(paren
id|IOMD_IRQMASKA
op_minus
id|IOMD_BASE
)paren
op_lshift
l_int|18
op_or
(paren
l_int|1
op_lshift
l_int|15
)paren
)paren
comma
id|X
c_func
(paren
(paren
id|IOMD_IRQMASKB
op_minus
id|IOMD_BASE
)paren
op_lshift
l_int|18
)paren
comma
id|X
c_func
(paren
(paren
id|IOMD_DMAMASK
op_minus
id|IOMD_BASE
)paren
op_lshift
l_int|18
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|X
c_func
(paren
(paren
id|IOMD_FIQMASK
op_minus
id|IOMD_BASE
)paren
op_lshift
l_int|18
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
comma
id|Z
c_func
(paren
l_int|0
)paren
)brace
suffix:semicolon
r_int
r_int
id|temp1
comma
id|temp2
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;ldr&t;%1, [%5, %3, lsl #2]&bslash;n&quot;
l_string|&quot;&t;teq&t;%1, #0&bslash;n&quot;
l_string|&quot;&t;beq&t;2f&bslash;n&quot;
l_string|&quot;&t;ldrb&t;%0, [%2, %1, lsr #16]&bslash;n&quot;
l_string|&quot;&t;bic&t;%0, %0, %1&bslash;n&quot;
l_string|&quot;&t;strb&t;%0, [%2, %1, lsr #16]&bslash;n&quot;
l_string|&quot;&t;tst&t;%1, #0x8000&bslash;n&quot;
multiline_comment|/* do we need an IRQ clear? */
l_string|&quot;&t;strneb&t;%1, [%2, %4]&bslash;n&quot;
l_string|&quot;2:&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp1
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp2
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|ioaddr
c_func
(paren
id|IOMD_BASE
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|irq
)paren
comma
l_string|&quot;I&quot;
(paren
(paren
id|IOMD_IRQCLRA
op_minus
id|IOMD_BASE
)paren
op_lshift
l_int|2
)paren
comma
l_string|&quot;r&quot;
(paren
id|addrmasks
)paren
)paren
suffix:semicolon
)brace
DECL|macro|X
macro_line|#undef X
DECL|macro|Z
macro_line|#undef Z
DECL|function|mask_irq
r_static
id|__inline__
r_void
id|mask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_extern
r_void
id|ecard_disableirq
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|ecard_disablefiq
(paren
r_int
r_int
)paren
suffix:semicolon
r_int
r_char
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|irq
op_rshift
l_int|3
)paren
(brace
r_case
l_int|0
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_IRQMASKA
)paren
op_amp
op_complement
id|mask
comma
id|IOMD_IRQMASKA
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_IRQMASKB
)paren
op_amp
op_complement
id|mask
comma
id|IOMD_IRQMASKB
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_DMAMASK
)paren
op_amp
op_complement
id|mask
comma
id|IOMD_DMAMASK
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|ecard_disableirq
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_FIQMASK
)paren
op_amp
op_complement
id|mask
comma
id|IOMD_FIQMASK
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|12
suffix:colon
id|ecard_disablefiq
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
)brace
)brace
DECL|function|unmask_irq
r_static
id|__inline__
r_void
id|unmask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_extern
r_void
id|ecard_enableirq
(paren
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|ecard_enablefiq
(paren
r_int
r_int
)paren
suffix:semicolon
r_int
r_char
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|irq
op_rshift
l_int|3
)paren
(brace
r_case
l_int|0
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_IRQMASKA
)paren
op_or
id|mask
comma
id|IOMD_IRQMASKA
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_IRQMASKB
)paren
op_or
id|mask
comma
id|IOMD_IRQMASKB
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_DMAMASK
)paren
op_or
id|mask
comma
id|IOMD_DMAMASK
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|ecard_enableirq
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|outb
c_func
(paren
id|inb
c_func
(paren
id|IOMD_FIQMASK
)paren
op_or
id|mask
comma
id|IOMD_FIQMASK
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|12
suffix:colon
id|ecard_enablefiq
(paren
id|irq
op_amp
l_int|7
)paren
suffix:semicolon
)brace
)brace
DECL|function|get_enabled_irqs
r_static
id|__inline__
r_int
r_int
id|get_enabled_irqs
c_func
(paren
r_void
)paren
(brace
r_return
id|inb
c_func
(paren
id|IOMD_IRQMASKA
)paren
op_or
id|inb
c_func
(paren
id|IOMD_IRQMASKB
)paren
op_lshift
l_int|8
op_or
id|inb
c_func
(paren
id|IOMD_DMAMASK
)paren
op_lshift
l_int|16
suffix:semicolon
)brace
DECL|function|irq_init_irq
r_static
id|__inline__
r_void
id|irq_init_irq
c_func
(paren
r_void
)paren
(brace
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_IRQMASKA
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_IRQMASKB
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_FIQMASK
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_DMAMASK
)paren
suffix:semicolon
)brace
eof
