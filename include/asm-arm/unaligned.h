macro_line|#ifndef __ASM_ARM_UNALIGNED_H
DECL|macro|__ASM_ARM_UNALIGNED_H
mdefine_line|#define __ASM_ARM_UNALIGNED_H
macro_line|#include &lt;linux/types.h&gt;
DECL|macro|get_unaligned
mdefine_line|#define get_unaligned(ptr) &bslash;&n;&t;((__typeof__(*(ptr)))__get_unaligned_size((ptr), sizeof(*(ptr))))
DECL|macro|put_unaligned
mdefine_line|#define put_unaligned(val, ptr) &bslash;&n;&t;__put_unaligned_size((unsigned long)(val), (ptr), sizeof(*(ptr)))
multiline_comment|/*&n; * We use a similar method to the uaccess.h badness detection.&n; *&n; * These are actually never defined anywhere, and therefore&n; * catch errors at compile/link time.  Don&squot;t be tempted to&n; * provide a declaration for them; doing so will mask the&n; * errors.&n; */
r_extern
r_int
r_int
id|__get_unaligned_bad
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__put_unaligned_bad
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|__get_unaligned_size
r_extern
id|__inline__
r_int
r_int
id|__get_unaligned_size
c_func
(paren
r_const
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_const
r_int
r_char
op_star
id|p
op_assign
(paren
r_const
r_int
r_char
op_star
)paren
id|ptr
suffix:semicolon
r_int
r_int
id|val
op_assign
l_int|0
suffix:semicolon
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|4
suffix:colon
id|val
op_assign
id|p
(braket
l_int|2
)braket
op_lshift
l_int|16
op_or
id|p
(braket
l_int|3
)braket
op_lshift
l_int|24
suffix:semicolon
r_case
l_int|2
suffix:colon
id|val
op_or_assign
id|p
(braket
l_int|1
)braket
op_lshift
l_int|8
suffix:semicolon
r_case
l_int|1
suffix:colon
id|val
op_or_assign
id|p
(braket
l_int|0
)braket
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|val
op_assign
id|__get_unaligned_bad
c_func
(paren
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
r_return
id|val
suffix:semicolon
)brace
DECL|function|__put_unaligned_size
r_extern
id|__inline__
r_void
id|__put_unaligned_size
c_func
(paren
r_int
r_int
id|val
comma
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|4
suffix:colon
(paren
(paren
r_int
r_char
op_star
)paren
id|ptr
)paren
(braket
l_int|3
)braket
op_assign
id|val
op_rshift
l_int|24
suffix:semicolon
(paren
(paren
r_int
r_char
op_star
)paren
id|ptr
)paren
(braket
l_int|2
)braket
op_assign
id|val
op_rshift
l_int|16
suffix:semicolon
r_case
l_int|2
suffix:colon
(paren
(paren
r_int
r_char
op_star
)paren
id|ptr
)paren
(braket
l_int|1
)braket
op_assign
id|val
op_rshift
l_int|8
suffix:semicolon
r_case
l_int|1
suffix:colon
(paren
(paren
r_int
r_char
op_star
)paren
id|ptr
)paren
(braket
l_int|0
)braket
op_assign
id|val
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|__put_unaligned_bad
c_func
(paren
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
macro_line|#endif
eof
