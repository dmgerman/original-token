multiline_comment|/*&n; * linux/include/asm-arm/arch-ebsa110/dma.h&n; *&n; * Architecture DMA routes&n; *&n; * Copyright (C) 1997.1998 Russell King&n; */
macro_line|#ifndef __ASM_ARCH_DMA_H
DECL|macro|__ASM_ARCH_DMA_H
mdefine_line|#define __ASM_ARCH_DMA_H
macro_line|#ifdef KERNEL_ARCH_DMA
DECL|function|arch_disable_dma
r_static
r_inline
r_void
id|arch_disable_dma
(paren
r_int
id|dmanr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;arch_disable_dma&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
DECL|function|arch_enable_dma
r_static
r_inline
r_void
id|arch_enable_dma
(paren
r_int
id|dmanr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;arch_enable_dma&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
DECL|function|arch_set_dma_addr
r_static
r_inline
r_void
id|arch_set_dma_addr
(paren
r_int
id|dmanr
comma
r_int
r_int
id|addr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;arch_set_dma_addr&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
DECL|function|arch_set_dma_count
r_static
r_inline
r_void
id|arch_set_dma_count
(paren
r_int
id|dmanr
comma
r_int
r_int
id|count
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;arch_set_dma_count&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
DECL|function|arch_set_dma_mode
r_static
r_inline
r_void
id|arch_set_dma_mode
(paren
r_int
id|dmanr
comma
r_char
id|mode
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;arch_set_dma_mode&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
DECL|function|arch_dma_count
r_static
r_inline
r_int
id|arch_dma_count
(paren
r_int
id|dmanr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;arch_dma_count&quot;
comma
id|dmanr
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* enable/disable a specific DMA channel */
r_extern
r_void
id|enable_dma
c_func
(paren
r_int
r_int
id|dmanr
)paren
suffix:semicolon
DECL|function|disable_dma
r_static
id|__inline__
r_void
id|disable_dma
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;disable_dma&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
multiline_comment|/* Clear the &squot;DMA Pointer Flip Flop&squot;.&n; * Write 0 for LSB/MSB, 1 for MSB/LSB access.&n; * Use this once to initialize the FF to a known state.&n; * After that, keep track of it. :-)&n; * --- In order to do that, the DMA routines below should ---&n; * --- only be used while interrupts are disabled! ---&n; */
DECL|function|clear_dma_ff
r_static
id|__inline__
r_void
id|clear_dma_ff
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;clear_dma_ff&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
multiline_comment|/* set mode (above) for a specific DMA channel */
r_extern
r_void
id|set_dma_mode
c_func
(paren
r_int
r_int
id|dmanr
comma
r_char
id|mode
)paren
suffix:semicolon
multiline_comment|/* Set only the page register bits of the transfer address.&n; * This is used for successive transfers when we know the contents of&n; * the lower 16 bits of the DMA current address register, but a 64k boundary&n; * may have been crossed.&n; */
DECL|function|set_dma_page
r_static
id|__inline__
r_void
id|set_dma_page
c_func
(paren
r_int
r_int
id|dmanr
comma
r_char
id|pagenr
)paren
(brace
id|printk
(paren
id|dma_str
comma
l_string|&quot;set_dma_page&quot;
comma
id|dmanr
)paren
suffix:semicolon
)brace
multiline_comment|/* Set transfer address &amp; page bits for specific DMA channel.&n; * Assumes dma flipflop is clear.&n; */
r_extern
r_void
id|set_dma_addr
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|addr
)paren
suffix:semicolon
multiline_comment|/* Set transfer size for a specific DMA channel.&n; */
r_extern
r_void
id|set_dma_count
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|count
)paren
suffix:semicolon
multiline_comment|/* Get DMA residue count. After a DMA transfer, this&n; * should return zero. Reading this while a DMA transfer is&n; * still in progress will return unpredictable results.&n; * If called before the channel has been used, it may return 1.&n; * Otherwise, it returns the number of _bytes_ left to transfer.&n; *&n; * Assumes DMA flip-flop is clear.&n; */
r_extern
r_int
id|get_dma_residue
c_func
(paren
r_int
r_int
id|dmanr
)paren
suffix:semicolon
macro_line|#endif /* _ASM_ARCH_DMA_H */
eof
