multiline_comment|/*&n; *  linux/include/asm-arm/arch-ebsa110/system.h&n; *&n; *  Copyright (C) 1996-2000 Russell King.&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; */
macro_line|#ifndef __ASM_ARCH_SYSTEM_H
DECL|macro|__ASM_ARCH_SYSTEM_H
mdefine_line|#define __ASM_ARCH_SYSTEM_H
multiline_comment|/*&n; * EBSA110 idling methodology:&n; *&n; * We can not execute the &quot;wait for interrupt&quot; instruction since that&n; * will stop our MCLK signal (which provides the clock for the glue&n; * logic, and therefore the timer interrupt).&n; *&n; * Instead, we spin, waiting for either hlt_counter or need_resched&n; * to be set.  If we have been spinning for 2cs, then we drop the&n; * core clock down to the memory clock.&n; */
DECL|function|arch_idle
r_static
r_void
id|arch_idle
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|start_idle
suffix:semicolon
id|start_idle
op_assign
id|jiffies
suffix:semicolon
r_do
(brace
r_if
c_cond
(paren
id|current-&gt;need_resched
op_logical_or
id|hlt_counter
)paren
r_goto
id|slow_out
suffix:semicolon
)brace
r_while
c_loop
(paren
id|time_before
c_func
(paren
id|jiffies
comma
id|start_idle
op_plus
id|HZ
op_div
l_int|50
)paren
)paren
suffix:semicolon
id|cpu_do_idle
c_func
(paren
id|IDLE_CLOCK_SLOW
)paren
suffix:semicolon
r_while
c_loop
(paren
op_logical_neg
id|current-&gt;need_resched
op_logical_and
op_logical_neg
id|hlt_counter
)paren
(brace
multiline_comment|/* do nothing slowly */
)brace
id|cpu_do_idle
c_func
(paren
id|IDLE_CLOCK_FAST
)paren
suffix:semicolon
id|slow_out
suffix:colon
)brace
DECL|macro|arch_reset
mdefine_line|#define arch_reset(mode)&t;cpu_reset(0x80000000)
macro_line|#endif
eof
