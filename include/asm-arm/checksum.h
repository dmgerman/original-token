multiline_comment|/*&n; * linux/include/asm-arm/checksum.h&n; *&n; * IP checksum routines&n; *&n; * Copyright (C) Original authors of ../asm-i386/checksum.h&n; * Copyright (C) 1996,1997,1998 Russell King&n; */
macro_line|#ifndef __ASM_ARM_CHECKSUM_H
DECL|macro|__ASM_ARM_CHECKSUM_H
mdefine_line|#define __ASM_ARM_CHECKSUM_H
macro_line|#ifndef __ASM_ARM_SEGMENT_H
macro_line|#include &lt;asm/segment.h&gt;
macro_line|#endif
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
r_int
r_int
id|csum_partial
c_func
(paren
r_const
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from src while it&n; * checksums, and handles user-space pointer exceptions correctly, when needed.&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_extern
r_int
r_int
id|csum_partial_copy_from_user
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|err_ptr
)paren
suffix:semicolon
multiline_comment|/*&n; * This combination is currently not used, but possible:&n; */
r_extern
r_int
r_int
id|csum_partial_copy_to_user
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|err_ptr
)paren
suffix:semicolon
multiline_comment|/*&n; * These are the old (and unsafe) way of doing checksums, a warning message will be&n; * printed if they are used and an exception occurs.&n; *&n; * these functions should go away after some time.&n; */
DECL|macro|csum_partial_copy_fromuser
mdefine_line|#define csum_partial_copy_fromuser csum_partial_copy
r_int
r_int
id|csum_partial_copy
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;This is a version of ip_compute_csum() optimized for IP headers,&n; *&t;which always checksum on 4 octet boundaries.&n; *&n; *&t;Converted and optimised for ARM by R. M. King.&n; *&n; *&t;Note: the order that the LDM registers are loaded with respect to&n; *&t;the adc&squot;s doesn&squot;t matter.&n; */
DECL|function|ip_fast_csum
r_static
r_inline
r_int
r_int
id|ip_fast_csum
c_func
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
id|sum
comma
id|tmp1
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|sub
op_mod
l_int|2
comma
op_mod
l_int|2
comma
macro_line|#5
id|ldr
op_mod
l_int|0
comma
(braket
op_mod
l_int|1
)braket
comma
macro_line|#4
id|ldr
op_mod
l_int|3
comma
(braket
op_mod
l_int|1
)braket
comma
macro_line|#4
id|adds
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|3
id|ldr
op_mod
l_int|3
comma
(braket
op_mod
l_int|1
)braket
comma
macro_line|#4
id|adcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|3
id|ldr
op_mod
l_int|3
comma
(braket
op_mod
l_int|1
)braket
comma
macro_line|#4
id|adcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|3
l_int|1
suffix:colon
id|ldr
op_mod
l_int|3
comma
(braket
op_mod
l_int|1
)braket
comma
macro_line|#4
id|adcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|3
id|tst
op_mod
l_int|2
comma
macro_line|#15
id|subne
op_mod
l_int|2
comma
op_mod
l_int|2
comma
macro_line|#1
id|bne
l_int|1
id|b
id|adc
op_mod
l_int|0
comma
op_mod
l_int|0
comma
macro_line|#0
id|adds
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsl
macro_line|#16
id|addcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
macro_line|#0x10000
id|mvn
op_mod
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsr
macro_line|#16
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|iph
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|ihl
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp1
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|iph
)paren
comma
l_string|&quot;2&quot;
(paren
id|ihl
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
DECL|function|csum_tcpudp_magic
r_static
r_inline
r_int
r_int
r_int
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|adds
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|1
id|adcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|4
id|adcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|5
id|adc
op_mod
l_int|0
comma
op_mod
l_int|0
comma
macro_line|#0
id|adds
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsl
macro_line|#16
id|addcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
macro_line|#0x10000
id|mvn
op_mod
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsr
macro_line|#16
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|saddr
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;1&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
id|ntohs
c_func
(paren
id|len
)paren
op_lshift
l_int|16
)paren
op_plus
id|proto
op_star
l_int|256
)paren
comma
l_string|&quot;r&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
(paren
r_int
r_int
)paren
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * &t;Fold a partial checksum without adding pseudo headers&n; */
DECL|function|csum_fold
r_static
r_inline
r_int
r_int
id|csum_fold
c_func
(paren
r_int
r_int
id|sum
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|adds
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsl
macro_line|#16
id|addcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
macro_line|#0x10000
id|mvn
op_mod
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsr
macro_line|#16
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
DECL|function|ip_compute_csum
r_static
r_inline
r_int
r_int
id|ip_compute_csum
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
(brace
r_int
r_int
id|sum
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|adds
op_mod
l_int|0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsl
macro_line|#16
id|addcs
op_mod
l_int|0
comma
op_mod
l_int|0
comma
macro_line|#0x10000
id|mvn
op_mod
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|0
comma
id|lsr
macro_line|#16
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|csum_partial
c_func
(paren
id|buff
comma
id|len
comma
l_int|0
)paren
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
macro_line|#endif
eof
