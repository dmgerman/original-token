multiline_comment|/*&n; * linux/include/asm-arm/arch-cl7500/time.h&n; *&n; * Copyright (c) 1996 Russell King.&n; * Copyright (C) 1999 Nexus Electronics Ltd.&n; *&n; * Changelog:&n; *  24-Sep-1996&t;RMK&t;Created&n; *  10-Oct-1996&t;RMK&t;Brought up to date with arch-sa110eval&n; *  04-Dec-1997&t;RMK&t;Updated for new arch/arm/time.c&n; *  10-Aug-1999&t;PJB&t;Converted for CL7500&n; */
macro_line|#include &lt;asm/iomd.h&gt;
DECL|variable|last_rtc_update
r_static
r_int
id|last_rtc_update
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* last time the cmos clock got updated */
DECL|function|gettimeoffset
r_extern
id|__inline__
r_int
r_int
id|gettimeoffset
(paren
r_void
)paren
(brace
r_int
r_int
id|offset
op_assign
l_int|0
suffix:semicolon
r_int
r_int
id|count1
comma
id|count2
comma
id|status1
comma
id|status2
suffix:semicolon
id|status1
op_assign
id|IOMD_IRQREQA
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_T0LATCH
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|count1
op_assign
id|inb
c_func
(paren
id|IOMD_T0CNTL
)paren
op_or
(paren
id|inb
c_func
(paren
id|IOMD_T0CNTH
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|status2
op_assign
id|inb
c_func
(paren
id|IOMD_IRQREQA
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_T0LATCH
)paren
suffix:semicolon
id|barrier
(paren
)paren
suffix:semicolon
id|count2
op_assign
id|inb
c_func
(paren
id|IOMD_T0CNTL
)paren
op_or
(paren
id|inb
c_func
(paren
id|IOMD_T0CNTH
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
r_if
c_cond
(paren
id|count2
OL
id|count1
)paren
(brace
multiline_comment|/*&n;&t;&t; * This means that we haven&squot;t just had an interrupt&n;&t;&t; * while reading into status2.&n;&t;&t; */
r_if
c_cond
(paren
id|status2
op_amp
(paren
l_int|1
op_lshift
l_int|5
)paren
)paren
id|offset
op_assign
id|tick
suffix:semicolon
id|count1
op_assign
id|count2
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|count2
OG
id|count1
)paren
(brace
multiline_comment|/*&n;&t;&t; * We have just had another interrupt while reading&n;&t;&t; * status2.&n;&t;&t; */
id|offset
op_add_assign
id|tick
suffix:semicolon
id|count1
op_assign
id|count2
suffix:semicolon
)brace
id|count1
op_assign
id|LATCH
op_minus
id|count1
suffix:semicolon
multiline_comment|/*&n;&t; * count1 = number of clock ticks since last interrupt&n;&t; */
id|offset
op_add_assign
id|count1
op_star
id|tick
op_div
id|LATCH
suffix:semicolon
r_return
id|offset
suffix:semicolon
)brace
DECL|function|get_rtc_time
r_extern
id|__inline__
r_int
r_int
id|get_rtc_time
c_func
(paren
r_void
)paren
(brace
r_return
id|mktime
c_func
(paren
l_int|1976
comma
l_int|06
comma
l_int|24
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|set_rtc_time
r_static
r_int
id|set_rtc_time
c_func
(paren
r_int
r_int
id|nowtime
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|timer_interrupt
r_static
r_void
id|timer_interrupt
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
id|do_timer
c_func
(paren
id|regs
)paren
suffix:semicolon
multiline_comment|/* If we have an externally synchronized linux clock, then update&n;&t; * CMOS clock accordingly every ~11 minutes.  Set_rtc_mmss() has to be&n;&t; * called as close as possible to 500 ms before the new second starts.&n;&t; */
r_if
c_cond
(paren
(paren
id|time_status
op_amp
id|STA_UNSYNC
)paren
op_eq
l_int|0
op_logical_and
id|xtime.tv_sec
OG
id|last_rtc_update
op_plus
l_int|660
op_logical_and
id|xtime.tv_usec
op_ge
l_int|50000
op_minus
(paren
id|tick
op_rshift
l_int|1
)paren
op_logical_and
id|xtime.tv_usec
OL
l_int|50000
op_plus
(paren
id|tick
op_rshift
l_int|1
)paren
)paren
(brace
r_if
c_cond
(paren
id|set_rtc_time
c_func
(paren
id|xtime.tv_sec
)paren
op_eq
l_int|0
)paren
id|last_rtc_update
op_assign
id|xtime.tv_sec
suffix:semicolon
r_else
id|last_rtc_update
op_assign
id|xtime.tv_sec
op_minus
l_int|600
suffix:semicolon
multiline_comment|/* do it again in 60 s */
)brace
(brace
multiline_comment|/* Twinkle the lights. */
r_static
r_int
id|count
comma
id|bit
op_assign
l_int|8
comma
id|dir
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|count
op_decrement
op_eq
l_int|0
)paren
(brace
id|bit
op_add_assign
id|dir
suffix:semicolon
r_if
c_cond
(paren
id|bit
op_eq
l_int|8
op_logical_or
id|bit
op_eq
l_int|15
)paren
id|dir
op_assign
op_minus
id|dir
suffix:semicolon
id|count
op_assign
l_int|5
suffix:semicolon
op_star
(paren
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
l_int|0xe002ba00
)paren
)paren
op_assign
l_int|1
op_lshift
id|bit
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
op_logical_neg
id|user_mode
c_func
(paren
id|regs
)paren
)paren
id|do_profile
c_func
(paren
id|instruction_pointer
c_func
(paren
id|regs
)paren
)paren
suffix:semicolon
)brace
DECL|variable|timerirq
r_static
r_struct
id|irqaction
id|timerirq
op_assign
(brace
id|timer_interrupt
comma
l_int|0
comma
l_int|0
comma
l_string|&quot;timer&quot;
comma
l_int|NULL
comma
l_int|NULL
)brace
suffix:semicolon
multiline_comment|/*&n; * Set up timer interrupt, and return the current time in seconds.&n; */
DECL|function|setup_timer
r_extern
id|__inline__
r_void
id|setup_timer
c_func
(paren
r_void
)paren
(brace
id|outb
c_func
(paren
id|LATCH
op_amp
l_int|255
comma
id|IOMD_T0LTCHL
)paren
suffix:semicolon
id|outb
c_func
(paren
id|LATCH
op_rshift
l_int|8
comma
id|IOMD_T0LTCHH
)paren
suffix:semicolon
id|outb
c_func
(paren
l_int|0
comma
id|IOMD_T0GO
)paren
suffix:semicolon
id|xtime.tv_sec
op_assign
id|get_rtc_time
c_func
(paren
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
id|IRQ_TIMER
comma
op_amp
id|timerirq
)paren
suffix:semicolon
)brace
eof
