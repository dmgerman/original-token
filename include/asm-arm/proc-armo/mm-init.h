multiline_comment|/*&n; * linux/include/asm-arm/proc-armo/mm-init.h&n; *&n; * Copyright (C) 1996 Russell King&n; *&n; * This contains the code to setup the memory map on an ARM2/ARM250/ARM3&n; * machine. This is both processor &amp; architecture specific, and requires&n; * some more work to get it to fit into our separate processor and&n; * architecture structure.&n; */
DECL|variable|phys_screen_end
r_static
r_int
r_int
id|phys_screen_end
suffix:semicolon
DECL|variable|page_nr
r_int
id|page_nr
suffix:semicolon
DECL|macro|setup_processor_functions
mdefine_line|#define setup_processor_functions()
DECL|macro|PTE_SIZE
mdefine_line|#define PTE_SIZE&t;(PTRS_PER_PTE * BYTES_PER_PTR)
DECL|function|setup_swapper_dir
r_static
r_inline
r_void
id|setup_swapper_dir
(paren
r_int
id|index
comma
id|pte_t
op_star
id|ptep
)paren
(brace
id|set_pmd
(paren
id|pmd_offset
(paren
id|swapper_pg_dir
op_plus
id|index
comma
l_int|0
)paren
comma
id|mk_pmd
(paren
id|ptep
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * This routine needs more work to make it dynamically release/allocate mem!&n; */
DECL|function|map_screen_mem
r_int
r_int
id|map_screen_mem
c_func
(paren
r_int
r_int
id|log_start
comma
r_int
r_int
id|kmem
comma
r_int
id|update
)paren
(brace
r_static
r_int
id|updated
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|updated
)paren
r_return
l_int|0
suffix:semicolon
id|updated
op_assign
id|update
suffix:semicolon
r_if
c_cond
(paren
id|update
)paren
(brace
r_int
r_int
id|address
op_assign
id|log_start
comma
id|offset
suffix:semicolon
id|pgd_t
op_star
id|pgdp
suffix:semicolon
id|kmem
op_assign
(paren
id|kmem
op_plus
l_int|3
)paren
op_amp
op_complement
l_int|3
suffix:semicolon
id|pgdp
op_assign
id|pgd_offset
(paren
op_amp
id|init_mm
comma
id|address
)paren
suffix:semicolon
multiline_comment|/* +31 */
id|offset
op_assign
id|SCREEN_START
suffix:semicolon
r_while
c_loop
(paren
id|address
OL
id|SCREEN1_END
)paren
(brace
r_int
r_int
id|addr_pmd
comma
id|end_pmd
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
multiline_comment|/* if (pgd_none (*pgdp)) alloc pmd */
id|pmdp
op_assign
id|pmd_offset
(paren
id|pgdp
comma
id|address
)paren
suffix:semicolon
multiline_comment|/* +0 */
id|addr_pmd
op_assign
id|address
op_amp
op_complement
id|PGDIR_MASK
suffix:semicolon
multiline_comment|/* 088000 */
id|end_pmd
op_assign
id|addr_pmd
op_plus
id|SCREEN1_END
op_minus
id|address
suffix:semicolon
multiline_comment|/* 100000 */
r_if
c_cond
(paren
id|end_pmd
OG
id|PGDIR_SIZE
)paren
id|end_pmd
op_assign
id|PGDIR_SIZE
suffix:semicolon
r_do
(brace
r_int
r_int
id|addr_pte
comma
id|end_pte
suffix:semicolon
id|pte_t
op_star
id|ptep
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
(paren
op_star
id|pmdp
)paren
)paren
(brace
id|pte_t
op_star
id|new_pte
op_assign
(paren
id|pte_t
op_star
)paren
id|kmem
suffix:semicolon
id|kmem
op_add_assign
id|PTRS_PER_PTE
op_star
id|BYTES_PER_PTR
suffix:semicolon
id|memzero
(paren
id|new_pte
comma
id|PTRS_PER_PTE
op_star
id|BYTES_PER_PTR
)paren
suffix:semicolon
id|set_pmd
(paren
id|pmdp
comma
id|mk_pmd
c_func
(paren
id|new_pte
)paren
)paren
suffix:semicolon
)brace
id|ptep
op_assign
id|pte_offset
(paren
id|pmdp
comma
id|addr_pmd
)paren
suffix:semicolon
multiline_comment|/* +11 */
id|addr_pte
op_assign
id|addr_pmd
op_amp
op_complement
id|PMD_MASK
suffix:semicolon
multiline_comment|/* 088000 */
id|end_pte
op_assign
id|addr_pte
op_plus
id|end_pmd
op_minus
id|addr_pmd
suffix:semicolon
multiline_comment|/* 100000 */
r_if
c_cond
(paren
id|end_pte
OG
id|PMD_SIZE
)paren
id|end_pte
op_assign
id|PMD_SIZE
suffix:semicolon
r_do
(brace
id|set_pte
(paren
id|ptep
comma
id|mk_pte
c_func
(paren
id|offset
comma
id|PAGE_KERNEL
)paren
)paren
suffix:semicolon
id|addr_pte
op_add_assign
id|PAGE_SIZE
suffix:semicolon
id|offset
op_add_assign
id|PAGE_SIZE
suffix:semicolon
id|ptep
op_increment
suffix:semicolon
)brace
r_while
c_loop
(paren
id|addr_pte
OL
id|end_pte
)paren
suffix:semicolon
id|pmdp
op_increment
suffix:semicolon
id|addr_pmd
op_assign
(paren
id|addr_pmd
op_plus
id|PMD_SIZE
)paren
op_amp
id|PMD_MASK
suffix:semicolon
)brace
r_while
c_loop
(paren
id|addr_pmd
OL
id|end_pmd
)paren
suffix:semicolon
id|address
op_assign
(paren
id|address
op_plus
id|PGDIR_SIZE
)paren
op_amp
id|PGDIR_MASK
suffix:semicolon
id|pgdp
op_increment
suffix:semicolon
)brace
id|phys_screen_end
op_assign
id|offset
suffix:semicolon
id|flush_tlb_all
(paren
)paren
suffix:semicolon
id|update_mm_cache_all
(paren
)paren
suffix:semicolon
)brace
r_return
id|kmem
suffix:semicolon
)brace
DECL|function|setup_pagetables
r_static
r_inline
r_int
r_int
id|setup_pagetables
c_func
(paren
r_int
r_int
id|start_mem
comma
r_int
r_int
id|end_mem
)paren
(brace
r_int
r_int
id|i
suffix:semicolon
r_union
(brace
r_int
r_int
id|l
suffix:semicolon
id|pte_t
op_star
id|pte
suffix:semicolon
)brace
id|u
suffix:semicolon
id|page_nr
op_assign
id|MAP_NR
c_func
(paren
id|end_mem
)paren
suffix:semicolon
multiline_comment|/* map in pages for (0x0000 - 0x8000) */
id|u.l
op_assign
(paren
(paren
id|start_mem
op_plus
(paren
id|PTE_SIZE
op_minus
l_int|1
)paren
)paren
op_amp
op_complement
(paren
id|PTE_SIZE
op_minus
l_int|1
)paren
)paren
suffix:semicolon
id|start_mem
op_assign
id|u.l
op_plus
id|PTE_SIZE
suffix:semicolon
id|memzero
(paren
id|u.pte
comma
id|PTE_SIZE
)paren
suffix:semicolon
id|u.pte
(braket
l_int|0
)braket
op_assign
id|mk_pte
c_func
(paren
id|PAGE_OFFSET
op_plus
l_int|491520
comma
id|PAGE_READONLY
)paren
suffix:semicolon
id|setup_swapper_dir
(paren
l_int|0
comma
id|u.pte
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|1
suffix:semicolon
id|i
OL
id|PTRS_PER_PGD
suffix:semicolon
id|i
op_increment
)paren
id|pgd_val
c_func
(paren
id|swapper_pg_dir
(braket
id|i
)braket
)paren
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* now map screen mem in */
id|phys_screen_end
op_assign
id|SCREEN2_END
suffix:semicolon
id|map_screen_mem
(paren
id|SCREEN1_END
op_minus
l_int|480
op_star
l_int|1024
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|start_mem
suffix:semicolon
)brace
DECL|function|mark_usable_memory_areas
r_static
r_inline
r_void
id|mark_usable_memory_areas
c_func
(paren
r_int
r_int
op_star
id|start_mem
comma
r_int
r_int
id|end_mem
)paren
(brace
r_int
r_int
id|smem
suffix:semicolon
op_star
id|start_mem
op_assign
id|smem
op_assign
id|PAGE_ALIGN
c_func
(paren
op_star
id|start_mem
)paren
suffix:semicolon
r_while
c_loop
(paren
id|smem
OL
id|end_mem
)paren
(brace
id|clear_bit
c_func
(paren
id|PG_reserved
comma
op_amp
id|mem_map
(braket
id|MAP_NR
c_func
(paren
id|smem
)paren
)braket
dot
id|flags
)paren
suffix:semicolon
id|smem
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
r_for
c_loop
(paren
id|smem
op_assign
id|phys_screen_end
suffix:semicolon
id|smem
OL
id|SCREEN2_END
suffix:semicolon
id|smem
op_add_assign
id|PAGE_SIZE
)paren
id|clear_bit
c_func
(paren
id|PG_reserved
comma
op_amp
id|mem_map
(braket
id|MAP_NR
c_func
(paren
id|smem
)paren
)braket
dot
id|flags
)paren
suffix:semicolon
)brace
eof
