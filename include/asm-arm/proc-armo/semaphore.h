multiline_comment|/*&n; * linux/include/asm-arm/proc-armo/semaphore.h&n; */
macro_line|#ifndef __ASM_PROC_SEMAPHORE_H
DECL|macro|__ASM_PROC_SEMAPHORE_H
mdefine_line|#define __ASM_PROC_SEMAPHORE_H
multiline_comment|/*&n; * This is ugly, but we want the default case to fall through.&n; * &quot;__down&quot; is the actual routine that waits...&n; */
DECL|function|down
r_extern
r_inline
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|__asm__
id|__volatile__
(paren
"&quot;"
"@"
id|atomic
id|down
id|operation
id|mov
id|r0
comma
id|pc
id|orr
id|lr
comma
id|r0
comma
macro_line|#0x08000000
op_logical_and
id|r0
comma
id|r0
comma
macro_line|#0x0c000003
id|teqp
id|lr
comma
macro_line|#0
id|ldr
id|lr
comma
(braket
op_mod
l_int|0
)braket
id|subs
id|lr
comma
id|lr
comma
macro_line|#1
id|str
id|lr
comma
(braket
op_mod
l_int|0
)braket
id|mov
id|lr
comma
id|pc
comma
id|lsr
macro_line|#28
id|teqp
id|r0
comma
id|lr
comma
id|lsl
macro_line|#28
id|movmi
id|r0
comma
op_mod
l_int|0
id|blmi
"&quot;"
id|SYMBOL_NAME_STR
c_func
(paren
id|__down_failed
)paren
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|sem
)paren
suffix:colon
l_string|&quot;r0&quot;
comma
l_string|&quot;lr&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * This is ugly, but we want the default case to fall through.&n; * &quot;__down_interruptible&quot; is the actual routine that waits...&n; */
DECL|function|down_interruptible
r_extern
r_inline
r_int
id|down_interruptible
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|result
suffix:semicolon
id|__asm__
id|__volatile__
(paren
"&quot;"
"@"
id|atomic
id|down
id|operation
id|mov
id|r0
comma
id|pc
id|orr
id|lr
comma
id|r0
comma
macro_line|#0x08000000
op_logical_and
id|r0
comma
id|r0
comma
macro_line|#0x0c000003
id|teqp
id|lr
comma
macro_line|#0
id|ldr
id|lr
comma
(braket
op_mod
l_int|1
)braket
id|subs
id|lr
comma
id|lr
comma
macro_line|#1
id|str
id|lr
comma
(braket
op_mod
l_int|1
)braket
id|mov
id|lr
comma
id|pc
comma
id|lsr
macro_line|#28
id|orrmi
id|r0
comma
id|r0
comma
macro_line|#0x80000000&t;@ set N
id|teqp
id|r0
comma
id|lr
comma
id|lsl
macro_line|#28
id|movmi
id|r0
comma
op_mod
l_int|1
id|movpl
id|r0
comma
macro_line|#0
id|blmi
l_string|&quot; SYMBOL_NAME_STR(__down_interruptible_failed) &quot;
id|mov
op_mod
l_int|0
comma
id|r0
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sem
)paren
suffix:colon
l_string|&quot;r0&quot;
comma
l_string|&quot;lr&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
DECL|function|down_trylock
r_extern
r_inline
r_int
id|down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|result
suffix:semicolon
id|__asm__
id|__volatile__
(paren
"&quot;"
"@"
id|atomic
id|down
id|operation
id|mov
id|r0
comma
id|pc
id|orr
id|lr
comma
id|r0
comma
macro_line|#0x08000000
op_logical_and
id|r0
comma
id|r0
comma
macro_line|#0x0c000003
id|teqp
id|lr
comma
macro_line|#0
id|ldr
id|lr
comma
(braket
op_mod
l_int|1
)braket
id|subs
id|lr
comma
id|lr
comma
macro_line|#1
id|str
id|lr
comma
(braket
op_mod
l_int|1
)braket
id|mov
id|lr
comma
id|pc
comma
id|lsr
macro_line|#28
id|orrmi
id|r0
comma
id|r0
comma
macro_line|#0x80000000&t;@ set N
id|teqp
id|r0
comma
id|lr
comma
id|lsl
macro_line|#28
id|movmi
id|r0
comma
op_mod
l_int|1
id|movpl
id|r0
comma
macro_line|#0
id|blmi
l_string|&quot; SYMBOL_NAME_STR(__down_trylock_failed) &quot;
id|mov
op_mod
l_int|0
comma
id|r0
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sem
)paren
suffix:colon
l_string|&quot;r0&quot;
comma
l_string|&quot;lr&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
multiline_comment|/*&n; * Note! This is subtle. We jump to wake people up only if&n; * the semaphore was negative (== somebody was waiting on it).&n; * The default case (no contention) will result in NO&n; * jumps for both down() and up().&n; */
DECL|function|up
r_extern
r_inline
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|__asm__
id|__volatile__
(paren
"&quot;"
"@"
id|atomic
id|up
id|operation
id|mov
id|r0
comma
id|pc
id|orr
id|lr
comma
id|r0
comma
macro_line|#0x08000000
op_logical_and
id|r0
comma
id|r0
comma
macro_line|#0x0c000003
id|teqp
id|lr
comma
macro_line|#0
id|ldr
id|lr
comma
(braket
op_mod
l_int|0
)braket
id|adds
id|lr
comma
id|lr
comma
macro_line|#1
id|str
id|lr
comma
(braket
op_mod
l_int|0
)braket
id|mov
id|lr
comma
id|pc
comma
id|lsr
macro_line|#28
id|orrls
id|r0
comma
id|r0
comma
macro_line|#0x80000000&t;@ set N
id|teqp
id|r0
comma
id|lr
comma
id|lsl
macro_line|#28
id|movmi
id|r0
comma
op_mod
l_int|0
id|blmi
"&quot;"
id|SYMBOL_NAME_STR
c_func
(paren
id|__up_wakeup
)paren
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|sem
)paren
suffix:colon
l_string|&quot;r0&quot;
comma
l_string|&quot;lr&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
