multiline_comment|/*&n; * linux/include/asm-arm/arch-sa1100/irq.h&n; *&n; * Copyright (C) 1996-1999 Russell king&n; * Copyright (C) 1999 Hugo Fiennes&n; *&n; * Changelog:&n; *   22-08-1998&t;RMK&t;Restructured IRQ routines&n; *   06-01-1999&t;HBF&t;SA1100 twiddles&n; *   12-02-1999&t;NP&t;added ICCR&n; *   17-02-1999&t;NP&t;empeg henry ugly hacks now in a separate file ;)&n; *   11-08-1999&t;PD&t;SA1101 support added&n; *   25-09-1999&t;RMK&t;Merged into main ARM tree, cleaned up&n; */
macro_line|#include &lt;linux/config.h&gt;
DECL|function|fixup_irq
r_static
r_inline
r_int
r_int
id|fixup_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
macro_line|#ifdef CONFIG_SA1101
r_if
c_cond
(paren
id|irq
op_eq
id|SA1101_IRQ
)paren
(brace
r_int
r_int
id|mask
suffix:semicolon
id|mask
op_assign
id|INTSTATCLR0
op_amp
id|INTENABLE0
suffix:semicolon
id|irq
op_assign
l_int|32
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|mask
)paren
(brace
id|mask
op_assign
id|IRQSTATCLR1
op_amp
id|INTENABLE1
suffix:semicolon
id|irq
op_assign
l_int|64
suffix:semicolon
)brace
r_if
c_cond
(paren
id|mask
)paren
r_while
c_loop
(paren
(paren
id|mask
op_amp
l_int|1
)paren
op_eq
l_int|0
)paren
(brace
id|mask
op_rshift_assign
l_int|1
suffix:semicolon
id|irq
op_add_assign
l_int|1
suffix:semicolon
)brace
)brace
macro_line|#endif
r_return
id|irq
suffix:semicolon
)brace
multiline_comment|/* We don&squot;t need to ACK IRQs on the SA1100 unless they&squot;re &lt;= 10,&n; * ie, an edge-detect.&n; */
DECL|function|sa1100_mask_and_ack_irq
r_static
r_void
id|sa1100_mask_and_ack_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
r_if
c_cond
(paren
id|irq
op_le
l_int|10
)paren
id|GEDR
op_assign
l_int|1
op_lshift
id|irq
suffix:semicolon
)brace
DECL|function|sa1100_mask_irq
r_static
r_void
id|sa1100_mask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
)brace
DECL|function|sa1100_unmask_irq
r_static
r_void
id|sa1100_unmask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_or_assign
l_int|1
op_lshift
id|irq
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_SA1101
DECL|function|sa1101_mask_and_ack_lowirq
r_static
r_void
id|sa1101_mask_and_ack_lowirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|31
)paren
suffix:semicolon
id|INTENABLE0
op_and_assign
op_complement
id|mask
suffix:semicolon
id|GEDR
op_assign
l_int|1
op_lshift
id|SA1101_IRQ
suffix:semicolon
id|INTSTATCLR0
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|sa1101_mask_and_ack_highirq
r_static
r_void
id|sa1101_mask_and_ack_highirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|31
)paren
suffix:semicolon
id|INTENABLE1
op_and_assign
op_complement
id|mask
suffix:semicolon
id|GEDR
op_assign
l_int|1
op_lshift
id|SA1101_IRQ
suffix:semicolon
id|INTSTATCLR1
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|sa1101_mask_lowirq
r_static
r_void
id|sa1101_mask_lowirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|31
)paren
suffix:semicolon
id|INTENABLE0
op_and_assign
op_complement
id|mask
suffix:semicolon
)brace
DECL|function|sa1101_mask_highirq
r_static
r_void
id|sa1101_mask_highirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|31
)paren
suffix:semicolon
id|INTENABLE1
op_and_assign
op_complement
id|mask
suffix:semicolon
)brace
multiline_comment|/*&n; * unmasking an IRq with the wrong polarity can be&n; * fatal, but there is no need to check this in the&n; * interrupt code - it will be spotted anyway ;-)&n; */
DECL|function|sa1101_unmask_lowirq
r_static
r_void
id|sa1101_unmask_lowirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|31
)paren
suffix:semicolon
id|INTENABLE0
op_or_assign
id|mask
suffix:semicolon
id|ICMR
op_or_assign
l_int|1
op_lshift
id|SA1101_IRQ
suffix:semicolon
)brace
DECL|function|sa1101_unmask_highirq
r_static
r_void
id|sa1101_unmask_highirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_amp
l_int|31
)paren
suffix:semicolon
id|INTENABLE1
op_or_assign
id|mask
suffix:semicolon
id|ICMR
op_or_assign
l_int|1
op_lshift
id|SA1101_IRQ
suffix:semicolon
)brace
macro_line|#endif
DECL|function|irq_init_irq
r_static
id|__inline__
r_void
id|irq_init_irq
c_func
(paren
r_void
)paren
(brace
r_int
id|irq
suffix:semicolon
multiline_comment|/* disable all IRQs */
id|ICMR
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* all IRQs are IRQ, not FIQ */
id|ICLR
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* clear all GPIO edge detects */
id|GEDR
op_assign
op_minus
l_int|1
suffix:semicolon
macro_line|#ifdef CONFIG_SA1101
multiline_comment|/* turn on interrupt controller */
id|SKPCR
op_or_assign
l_int|4
suffix:semicolon
multiline_comment|/* disable all IRQs */
id|INTENABLE0
op_assign
l_int|0
suffix:semicolon
id|INTENABLE1
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* detect on rising edge */
id|INTPOL0
op_assign
l_int|0
suffix:semicolon
id|INTPOL1
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* clear all IRQs */
id|INTSTATCLR0
op_assign
op_minus
l_int|1
suffix:semicolon
id|INTSTATCLR1
op_assign
op_minus
l_int|1
suffix:semicolon
multiline_comment|/* SA1101 generates a rising edge */
id|GRER
op_or_assign
l_int|1
op_lshift
id|SA1101_IRQ
suffix:semicolon
id|GPER
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|SA1101_IRQ
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n;&t; * Whatever the doc says, this has to be set for the wait-on-irq&n;&t; * instruction to work... on a SA1100 rev 9 at least.&n;&t; */
id|ICCR
op_assign
l_int|1
suffix:semicolon
macro_line|#ifndef CONFIG_SA1101
r_for
c_loop
(paren
id|irq
op_assign
l_int|0
suffix:semicolon
id|irq
OL
id|NR_IRQS
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1100_mask_and_ack_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1100_mask_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1100_unmask_irq
suffix:semicolon
)brace
macro_line|#else
r_for
c_loop
(paren
id|irq
op_assign
l_int|0
suffix:semicolon
id|irq
OL
l_int|31
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1100_mask_and_ack_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1100_mask_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1100_unmask_irq
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
l_int|32
suffix:semicolon
id|irq
OL
l_int|63
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1101_mask_and_ack_lowirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1101_mask_lowirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1101_unmask_lowirq
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
l_int|64
suffix:semicolon
id|irq
OL
id|NR_IRQS
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1101_mask_and_ack_highirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1101_mask_highirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1101_unmask_highirq
suffix:semicolon
)brace
macro_line|#endif
)brace
eof
