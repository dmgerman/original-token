multiline_comment|/*&n; * linux/include/asm-arm/arch-sa1100/irq.h&n; *&n; * Copyright (C) 1996-1999 Russell king&n; * Copyright (C) 1999 Hugo Fiennes&n; *&n; * Changelog:&n; *   22-08-1998&t;RMK&t;Restructured IRQ routines&n; *   06-01-1999&t;HBF&t;SA1100 twiddles&n; *   12-02-1999&t;NP&t;added ICCR&n; *   17-02-1999&t;NP&t;empeg henry ugly hacks now in a separate file ;)&n; *   11-08-1999&t;PD&t;SA1101 support added&n; *   25-09-1999&t;RMK&t;Merged into main ARM tree, cleaned up&n; *   12-05-2000 NP&t;IRQ dispatcher handler for GPIO 11 to 27.&n; *   26-05-2000 JD&t;SA-1111 support added&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/irq.h&gt;
macro_line|#include &lt;asm/mach-types.h&gt;
DECL|macro|fixup_irq
mdefine_line|#define fixup_irq(x)&t;(x)
multiline_comment|/* &n; * We don&squot;t need to ACK IRQs on the SA1100 unless they&squot;re GPIOs&n; * this is for internal IRQs i.e. from 11 to 31.&n; */
DECL|function|sa1100_mask_irq
r_static
r_void
id|sa1100_mask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
)brace
DECL|function|sa1100_unmask_irq
r_static
r_void
id|sa1100_unmask_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_or_assign
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * SA1100 GPIO edge detection for IRQs.&n; */
r_extern
r_int
id|GPIO_IRQ_rising_edge
suffix:semicolon
r_extern
r_int
id|GPIO_IRQ_falling_edge
suffix:semicolon
multiline_comment|/*&n; * GPIO IRQs must be acknoledged.  This is for IRQs from 0 to 10.&n; */
DECL|function|sa1100_mask_and_ack_GPIO0_10_irq
r_static
r_void
id|sa1100_mask_and_ack_GPIO0_10_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
id|GEDR
op_assign
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
)brace
DECL|function|sa1100_mask_GPIO0_10_irq
r_static
r_void
id|sa1100_mask_GPIO0_10_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ICMR
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
)brace
DECL|function|sa1100_unmask_GPIO0_10_irq
r_static
r_void
id|sa1100_unmask_GPIO0_10_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|GRER
op_assign
(paren
id|GRER
op_amp
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
)paren
op_or
(paren
id|GPIO_IRQ_rising_edge
op_amp
(paren
l_int|1
op_lshift
id|irq
)paren
)paren
suffix:semicolon
id|GFER
op_assign
(paren
id|GFER
op_amp
op_complement
(paren
l_int|1
op_lshift
id|irq
)paren
)paren
op_or
(paren
id|GPIO_IRQ_falling_edge
op_amp
(paren
l_int|1
op_lshift
id|irq
)paren
)paren
suffix:semicolon
id|ICMR
op_or_assign
(paren
l_int|1
op_lshift
id|irq
)paren
suffix:semicolon
)brace
multiline_comment|/* &n; * Install handler for GPIO 11-27 edge detect interrupts&n; */
r_void
id|do_IRQ
c_func
(paren
r_int
id|irq
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
DECL|variable|GPIO_11_27_enabled
r_static
r_int
id|GPIO_11_27_enabled
suffix:semicolon
multiline_comment|/* enabled i.e. unmasked GPIO IRQs */
DECL|variable|GPIO_11_27_spurious
r_static
r_int
id|GPIO_11_27_spurious
suffix:semicolon
multiline_comment|/* GPIOs that triggered when masked */
DECL|function|sa1100_GPIO11_27_demux
r_static
r_void
id|sa1100_GPIO11_27_demux
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
r_int
id|i
comma
id|spurious
suffix:semicolon
r_while
c_loop
(paren
(paren
id|irq
op_assign
(paren
id|GEDR
op_amp
l_int|0xfffff800
)paren
)paren
)paren
(brace
multiline_comment|/*&n;&t;&t; * We don&squot;t want to clear GRER/GFER when the corresponding&n;&t;&t; * IRQ is masked because we could miss a level transition&n;&t;&t; * i.e. an IRQ which need servicing as soon as it is &n;&t;&t; * unmasked.  However, such situation should happen only&n;&t;&t; * during the loop below.  Thus all IRQs which aren&squot;t &n;&t;&t; * enabled at this point are considered spurious.  Those &n;&t;&t; * are cleared but only de-activated if they happened twice.&n;&t;&t; */
id|spurious
op_assign
id|irq
op_amp
op_complement
id|GPIO_11_27_enabled
suffix:semicolon
r_if
c_cond
(paren
id|spurious
)paren
(brace
id|GEDR
op_assign
id|spurious
suffix:semicolon
id|GRER
op_and_assign
op_complement
(paren
id|spurious
op_amp
id|GPIO_11_27_spurious
)paren
suffix:semicolon
id|GFER
op_and_assign
op_complement
(paren
id|spurious
op_amp
id|GPIO_11_27_spurious
)paren
suffix:semicolon
id|GPIO_11_27_spurious
op_or_assign
id|spurious
suffix:semicolon
id|irq
op_xor_assign
id|spurious
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|irq
)paren
r_continue
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|11
suffix:semicolon
id|i
op_le
l_int|27
suffix:semicolon
op_increment
id|i
)paren
(brace
r_if
c_cond
(paren
id|irq
op_amp
(paren
l_int|1
op_lshift
id|i
)paren
)paren
(brace
id|do_IRQ
c_func
(paren
id|IRQ_GPIO_11_27
c_func
(paren
id|i
)paren
comma
id|regs
)paren
suffix:semicolon
)brace
)brace
)brace
)brace
DECL|variable|GPIO11_27_irq
r_static
r_struct
id|irqaction
id|GPIO11_27_irq
op_assign
(brace
id|name
suffix:colon
l_string|&quot;GPIO 11-27&quot;
comma
id|handler
suffix:colon
id|sa1100_GPIO11_27_demux
comma
id|flags
suffix:colon
id|SA_INTERRUPT
)brace
suffix:semicolon
DECL|function|sa1100_mask_and_ack_GPIO11_27_irq
r_static
r_void
id|sa1100_mask_and_ack_GPIO11_27_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
id|mask
op_assign
(paren
l_int|1
op_lshift
id|GPIO_11_27_IRQ
c_func
(paren
id|irq
)paren
)paren
suffix:semicolon
id|GPIO_11_27_enabled
op_and_assign
op_complement
id|mask
suffix:semicolon
id|GEDR
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|sa1100_mask_GPIO11_27_irq
r_static
r_void
id|sa1100_mask_GPIO11_27_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|GPIO_11_27_enabled
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|GPIO_11_27_IRQ
c_func
(paren
id|irq
)paren
)paren
suffix:semicolon
)brace
DECL|function|sa1100_unmask_GPIO11_27_irq
r_static
r_void
id|sa1100_unmask_GPIO11_27_irq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
id|mask
op_assign
(paren
l_int|1
op_lshift
id|GPIO_11_27_IRQ
c_func
(paren
id|irq
)paren
)paren
suffix:semicolon
id|GPIO_11_27_enabled
op_or_assign
id|mask
suffix:semicolon
id|GPIO_11_27_spurious
op_and_assign
op_complement
id|mask
suffix:semicolon
id|GRER
op_assign
(paren
id|GRER
op_amp
op_complement
id|mask
)paren
op_or
(paren
id|GPIO_IRQ_rising_edge
op_amp
id|mask
)paren
suffix:semicolon
id|GFER
op_assign
(paren
id|GFER
op_amp
op_complement
id|mask
)paren
op_or
(paren
id|GPIO_IRQ_falling_edge
op_amp
id|mask
)paren
suffix:semicolon
)brace
macro_line|#if defined(CONFIG_SA1111)
multiline_comment|/* &n; * Install handler for SA1111 IRQ handler.&n; */
DECL|function|sa1111_IRQ_demux
r_static
r_void
id|sa1111_IRQ_demux
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
r_int
id|i
suffix:semicolon
r_int
r_int
id|stat0
comma
id|stat1
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
(brace
id|stat0
op_assign
id|INTSTATCLR0
comma
id|stat1
op_assign
id|INTSTATCLR1
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|stat0
op_logical_and
op_logical_neg
id|stat1
)paren
(brace
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id|stat0
)paren
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|32
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
id|stat0
op_amp
(paren
l_int|1
op_lshift
id|i
)paren
)paren
(brace
id|do_IRQ
c_func
(paren
id|SA1111_IRQ
c_func
(paren
id|i
)paren
comma
id|regs
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|stat1
)paren
r_for
c_loop
(paren
id|i
op_assign
l_int|32
suffix:semicolon
id|i
OL
l_int|55
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
id|stat1
op_amp
(paren
l_int|1
op_lshift
(paren
id|i
op_minus
l_int|32
)paren
)paren
)paren
(brace
id|do_IRQ
c_func
(paren
id|SA1111_IRQ
c_func
(paren
id|i
)paren
comma
id|regs
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|variable|sa1111_irq
r_static
r_struct
id|irqaction
id|sa1111_irq
op_assign
(brace
id|name
suffix:colon
l_string|&quot;SA1111&quot;
comma
id|handler
suffix:colon
id|sa1111_IRQ_demux
comma
id|flags
suffix:colon
id|SA_INTERRUPT
)brace
suffix:semicolon
DECL|function|sa1111_mask_and_ack_lowirq
r_static
r_void
id|sa1111_mask_and_ack_lowirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_minus
id|SA1111_IRQ
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
singleline_comment|//INTEN0 &amp;= ~mask;
id|INTSTATCLR0
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|sa1111_mask_and_ack_highirq
r_static
r_void
id|sa1111_mask_and_ack_highirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|irq
op_minus
id|SA1111_IRQ
c_func
(paren
l_int|32
)paren
)paren
suffix:semicolon
singleline_comment|//INTEN1 &amp;= ~mask;
id|INTSTATCLR1
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|sa1111_mask_lowirq
r_static
r_void
id|sa1111_mask_lowirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
singleline_comment|//INTEN0 &amp;= ~(1 &lt;&lt; (irq - SA1111_IRQ(0)));
)brace
DECL|function|sa1111_mask_highirq
r_static
r_void
id|sa1111_mask_highirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
singleline_comment|//INTEN1 &amp;= ~(1 &lt;&lt; (irq - SA1111_IRQ(32)));
)brace
DECL|function|sa1111_unmask_lowirq
r_static
r_void
id|sa1111_unmask_lowirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|INTEN0
op_or_assign
l_int|1
op_lshift
(paren
id|irq
op_minus
id|SA1111_IRQ
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
DECL|function|sa1111_unmask_highirq
r_static
r_void
id|sa1111_unmask_highirq
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|INTEN1
op_or_assign
l_int|1
op_lshift
(paren
(paren
id|irq
op_minus
id|SA1111_IRQ
c_func
(paren
l_int|32
)paren
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif  /* CONFIG_SA1111 */
macro_line|#ifdef CONFIG_ASSABET_NEPONSET
multiline_comment|/* &n; * Install handler for Neponset IRQ.  Yes, yes... we are way down the IRQ&n; * cascade which is not good for IRQ latency, but the hardware has been&n; * designed that way...&n; */
DECL|function|neponset_IRQ_demux
r_static
r_void
id|neponset_IRQ_demux
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
r_int
id|irr
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
(brace
id|irr
op_assign
id|IRR
op_amp
(paren
id|IRR_ETHERNET
op_or
id|IRR_USAR
op_or
id|IRR_SA1111
)paren
suffix:semicolon
multiline_comment|/* Let&squot;s have all active IRQ bits high.&n;&t;&t; * Note: there is a typo in the Neponset user&squot;s guide &n;&t;&t; * for the SA1111 IRR level.&n;&t;&t; */
id|irr
op_xor_assign
(paren
id|IRR_ETHERNET
op_or
id|IRR_USAR
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|irr
)paren
r_break
suffix:semicolon
r_if
c_cond
(paren
id|irr
op_amp
id|IRR_ETHERNET
)paren
(brace
id|do_IRQ
c_func
(paren
id|NEPONSET_ETHERNET_IRQ
comma
id|regs
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|irr
op_amp
id|IRR_USAR
)paren
(brace
id|do_IRQ
c_func
(paren
id|NEPONSET_USAR_IRQ
comma
id|regs
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|irr
op_amp
id|IRR_SA1111
)paren
(brace
id|sa1111_IRQ_demux
c_func
(paren
id|irq
comma
id|dev_id
comma
id|regs
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|variable|neponset_irq
r_static
r_struct
id|irqaction
id|neponset_irq
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Neponset&quot;
comma
id|handler
suffix:colon
id|neponset_IRQ_demux
comma
id|flags
suffix:colon
id|SA_INTERRUPT
)brace
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_SA1100_GRAPHICSCLIENT) || defined(CONFIG_SA1100_THINCLIENT)
multiline_comment|/*&n; * IRQ handler for the ThinClient/GraphicsClient external IRQ controller&n; */
DECL|function|ADS_IRQ_demux
r_static
r_void
id|ADS_IRQ_demux
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
(brace
r_int
id|irq
comma
id|i
suffix:semicolon
r_while
c_loop
(paren
(paren
id|irq
op_assign
id|ADS_INT_ST1
op_or
(paren
id|ADS_INT_ST2
op_lshift
l_int|8
)paren
)paren
)paren
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|16
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
id|irq
op_amp
(paren
l_int|1
op_lshift
id|i
)paren
)paren
(brace
id|do_IRQ
c_func
(paren
id|ADS_EXT_IRQ
c_func
(paren
id|i
)paren
comma
id|regs
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|variable|ADS_ext_irq
r_static
r_struct
id|irqaction
id|ADS_ext_irq
op_assign
(brace
id|name
suffix:colon
l_string|&quot;ADS_ext_IRQ&quot;
comma
id|handler
suffix:colon
id|ADS_IRQ_demux
comma
id|flags
suffix:colon
id|SA_INTERRUPT
)brace
suffix:semicolon
DECL|function|ADS_mask_and_ack_irq0
r_static
r_void
id|ADS_mask_and_ack_irq0
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|irq
op_minus
id|ADS_EXT_IRQ
c_func
(paren
l_int|0
)paren
)paren
)paren
suffix:semicolon
id|ADS_INT_EN1
op_and_assign
op_complement
id|mask
suffix:semicolon
id|ADS_INT_ST1
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|ADS_mask_irq0
r_static
r_void
id|ADS_mask_irq0
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ADS_INT_ST1
op_assign
(paren
l_int|1
op_lshift
(paren
id|irq
op_minus
id|ADS_EXT_IRQ
c_func
(paren
l_int|0
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|ADS_unmask_irq0
r_static
r_void
id|ADS_unmask_irq0
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ADS_INT_EN1
op_or_assign
(paren
l_int|1
op_lshift
(paren
id|irq
op_minus
id|ADS_EXT_IRQ
c_func
(paren
l_int|0
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|ADS_mask_and_ack_irq1
r_static
r_void
id|ADS_mask_and_ack_irq1
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
r_int
id|mask
op_assign
(paren
l_int|1
op_lshift
(paren
id|irq
op_minus
id|ADS_EXT_IRQ
c_func
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
id|ADS_INT_EN2
op_and_assign
op_complement
id|mask
suffix:semicolon
id|ADS_INT_ST2
op_assign
id|mask
suffix:semicolon
)brace
DECL|function|ADS_mask_irq1
r_static
r_void
id|ADS_mask_irq1
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ADS_INT_ST2
op_assign
(paren
l_int|1
op_lshift
(paren
id|irq
op_minus
id|ADS_EXT_IRQ
c_func
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|ADS_unmask_irq1
r_static
r_void
id|ADS_unmask_irq1
c_func
(paren
r_int
r_int
id|irq
)paren
(brace
id|ADS_INT_EN2
op_or_assign
(paren
l_int|1
op_lshift
(paren
id|irq
op_minus
id|ADS_EXT_IRQ
c_func
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
DECL|function|irq_init_irq
r_static
id|__inline__
r_void
id|irq_init_irq
c_func
(paren
r_void
)paren
(brace
r_int
id|irq
suffix:semicolon
multiline_comment|/* disable all IRQs */
id|ICMR
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* all IRQs are IRQ, not FIQ */
id|ICLR
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* clear all GPIO edge detects */
id|GFER
op_assign
l_int|0
suffix:semicolon
id|GRER
op_assign
l_int|0
suffix:semicolon
id|GEDR
op_assign
op_minus
l_int|1
suffix:semicolon
multiline_comment|/*&n;&t; * Whatever the doc says, this has to be set for the wait-on-irq&n;&t; * instruction to work... on a SA1100 rev 9 at least.&n;&t; */
id|ICCR
op_assign
l_int|1
suffix:semicolon
r_for
c_loop
(paren
id|irq
op_assign
l_int|0
suffix:semicolon
id|irq
op_le
l_int|10
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1100_mask_and_ack_GPIO0_10_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1100_mask_GPIO0_10_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1100_unmask_GPIO0_10_irq
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
l_int|11
suffix:semicolon
id|irq
op_le
l_int|31
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|0
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1100_mask_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1100_mask_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1100_unmask_irq
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
l_int|32
suffix:semicolon
id|irq
op_le
l_int|48
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1100_mask_and_ack_GPIO11_27_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1100_mask_GPIO11_27_irq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1100_unmask_GPIO11_27_irq
suffix:semicolon
)brace
id|setup_arm_irq
c_func
(paren
id|IRQ_GPIO11_27
comma
op_amp
id|GPIO11_27_irq
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_SA1111
r_if
c_cond
(paren
id|machine_is_assabet
c_func
(paren
)paren
op_logical_and
id|machine_has_neponset
c_func
(paren
)paren
)paren
(brace
multiline_comment|/* disable all IRQs */
id|INTEN0
op_assign
l_int|0
suffix:semicolon
id|INTEN1
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* detect on rising edge */
id|INTPOL0
op_assign
l_int|0
suffix:semicolon
id|INTPOL1
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* clear all IRQs */
id|INTSTATCLR0
op_assign
op_minus
l_int|1
suffix:semicolon
id|INTSTATCLR1
op_assign
op_minus
l_int|1
suffix:semicolon
r_for
c_loop
(paren
id|irq
op_assign
id|SA1111_IRQ
c_func
(paren
l_int|0
)paren
suffix:semicolon
id|irq
op_le
id|SA1111_IRQ
c_func
(paren
l_int|26
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1111_mask_and_ack_lowirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1111_mask_lowirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1111_unmask_lowirq
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
id|SA1111_IRQ
c_func
(paren
l_int|32
)paren
suffix:semicolon
id|irq
op_le
id|SA1111_IRQ
c_func
(paren
l_int|54
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|sa1111_mask_and_ack_highirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|sa1111_mask_highirq
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|sa1111_unmask_highirq
suffix:semicolon
)brace
r_if
c_cond
(paren
id|machine_has_neponset
c_func
(paren
)paren
)paren
(brace
multiline_comment|/* setup extra Neponset IRQs */
id|irq
op_assign
id|NEPONSET_ETHERNET_IRQ
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq
op_assign
id|NEPONSET_USAR_IRQ
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|set_GPIO_IRQ_edge
c_func
(paren
id|GPIO_NEP_IRQ
comma
id|GPIO_RISING_EDGE
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
id|IRQ_GPIO_NEP_IRQ
comma
op_amp
id|neponset_irq
)paren
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* for pure SA1111 designs to come (currently unused) */
id|set_GPIO_IRQ_edge
c_func
(paren
l_int|0
comma
id|GPIO_RISING_EDGE
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
op_minus
l_int|1
comma
op_amp
id|sa1111_irq
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif
macro_line|#if defined(CONFIG_SA1100_GRAPHICSCLIENT) || defined(CONFIG_SA1100_THINCLIENT)
r_if
c_cond
(paren
id|machine_is_graphicsclient
c_func
(paren
)paren
op_logical_or
id|machine_is_thinclient
c_func
(paren
)paren
)paren
(brace
multiline_comment|/* disable all IRQs */
id|ADS_INT_EN1
op_assign
l_int|0
suffix:semicolon
id|ADS_INT_EN2
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* clear all IRQs */
id|ADS_INT_ST1
op_assign
l_int|0xff
suffix:semicolon
id|ADS_INT_ST2
op_assign
l_int|0xff
suffix:semicolon
r_for
c_loop
(paren
id|irq
op_assign
id|ADS_EXT_IRQ
c_func
(paren
l_int|0
)paren
suffix:semicolon
id|irq
op_le
id|ADS_EXT_IRQ
c_func
(paren
l_int|7
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|ADS_mask_and_ack_irq0
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|ADS_mask_irq0
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|ADS_unmask_irq0
suffix:semicolon
)brace
r_for
c_loop
(paren
id|irq
op_assign
id|ADS_EXT_IRQ
c_func
(paren
l_int|8
)paren
suffix:semicolon
id|irq
op_le
id|ADS_EXT_IRQ
c_func
(paren
l_int|15
)paren
suffix:semicolon
id|irq
op_increment
)paren
(brace
id|irq_desc
(braket
id|irq
)braket
dot
id|valid
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|probe_ok
op_assign
l_int|1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask_ack
op_assign
id|ADS_mask_and_ack_irq1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|mask
op_assign
id|ADS_mask_irq1
suffix:semicolon
id|irq_desc
(braket
id|irq
)braket
dot
id|unmask
op_assign
id|ADS_unmask_irq1
suffix:semicolon
)brace
id|GPDR
op_and_assign
op_complement
id|GPIO_GPIO0
suffix:semicolon
id|set_GPIO_IRQ_edge
c_func
(paren
id|GPIO_GPIO0
comma
id|GPIO_FALLING_EDGE
)paren
suffix:semicolon
id|setup_arm_irq
c_func
(paren
id|IRQ_GPIO0
comma
op_amp
id|ADS_ext_irq
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
eof
