multiline_comment|/*&n; * highmem.h: virtual kernel memory mappings for high memory&n; *&n; * Used in CONFIG_HIGHMEM systems for memory pages which&n; * are not addressable by direct kernel virtual adresses.&n; *&n; * Copyright (C) 1999 Gerhard Wichert, Siemens AG&n; *&t;&t;      Gerhard.Wichert@pdb.siemens.de&n; *&n; *&n; * Redesigned the x86 32-bit VM architecture to deal with &n; * up to 16 Terrabyte physical memory. With current x86 CPUs&n; * we now support up to 64 Gigabytes physical RAM.&n; *&n; * Copyright (C) 1999 Ingo Molnar &lt;mingo@redhat.com&gt;&n; */
macro_line|#ifndef _ASM_HIGHMEM_H
DECL|macro|_ASM_HIGHMEM_H
mdefine_line|#define _ASM_HIGHMEM_H
macro_line|#include &lt;linux/init.h&gt;
multiline_comment|/* undef for production */
DECL|macro|HIGHMEM_DEBUG
mdefine_line|#define HIGHMEM_DEBUG 1
multiline_comment|/* declarations for highmem.c */
r_extern
r_int
r_int
id|highstart_pfn
comma
id|highend_pfn
suffix:semicolon
r_extern
id|pte_t
op_star
id|kmap_pte
suffix:semicolon
r_extern
id|pgprot_t
id|kmap_prot
suffix:semicolon
r_extern
r_void
id|kmap_init
c_func
(paren
r_void
)paren
id|__init
suffix:semicolon
multiline_comment|/* kmap helper functions necessary to access the highmem pages in kernel */
macro_line|#include &lt;asm/pgtable.h&gt;
macro_line|#include &lt;asm/kmap_types.h&gt;
DECL|function|kmap
r_extern
r_inline
r_int
r_int
id|kmap
c_func
(paren
r_struct
id|page
op_star
id|page
comma
r_enum
id|km_type
id|type
)paren
(brace
r_if
c_cond
(paren
id|page
OL
id|highmem_start_page
)paren
r_return
id|page_address
c_func
(paren
id|page
)paren
suffix:semicolon
(brace
r_enum
id|fixed_addresses
id|idx
op_assign
id|type
op_plus
id|KM_TYPE_NR
op_star
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
r_int
r_int
id|vaddr
op_assign
id|__fix_to_virt
c_func
(paren
id|FIX_KMAP_BEGIN
op_plus
id|idx
)paren
suffix:semicolon
macro_line|#if HIGHMEM_DEBUG
r_if
c_cond
(paren
op_logical_neg
id|pte_none
c_func
(paren
op_star
(paren
id|kmap_pte
op_minus
id|idx
)paren
)paren
)paren
(brace
id|__label__
id|here
suffix:semicolon
id|here
suffix:colon
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;not null pte on CPU %d from %p&bslash;n&quot;
comma
id|smp_processor_id
c_func
(paren
)paren
comma
op_logical_and
id|here
)paren
suffix:semicolon
)brace
macro_line|#endif
id|set_pte
c_func
(paren
id|kmap_pte
op_minus
id|idx
comma
id|mk_pte
c_func
(paren
id|page
comma
id|kmap_prot
)paren
)paren
suffix:semicolon
id|__flush_tlb_one
c_func
(paren
id|vaddr
)paren
suffix:semicolon
r_return
id|vaddr
suffix:semicolon
)brace
)brace
DECL|function|kunmap
r_extern
r_inline
r_void
id|kunmap
c_func
(paren
r_int
r_int
id|vaddr
comma
r_enum
id|km_type
id|type
)paren
(brace
macro_line|#if HIGHMEM_DEBUG
r_enum
id|fixed_addresses
id|idx
op_assign
id|type
op_plus
id|KM_TYPE_NR
op_star
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id|vaddr
op_amp
id|PAGE_MASK
)paren
op_eq
id|__fix_to_virt
c_func
(paren
id|FIX_KMAP_BEGIN
op_plus
id|idx
)paren
)paren
(brace
multiline_comment|/* force other mappings to Oops if they&squot;ll try to access&n;&t;&t;   this pte without first remap it */
id|pte_clear
c_func
(paren
id|kmap_pte
op_minus
id|idx
)paren
suffix:semicolon
id|__flush_tlb_one
c_func
(paren
id|vaddr
)paren
suffix:semicolon
)brace
macro_line|#endif
)brace
DECL|function|kmap_check
r_extern
r_inline
r_void
id|kmap_check
c_func
(paren
r_void
)paren
(brace
macro_line|#if HIGHMEM_DEBUG
r_int
id|idx_base
op_assign
id|KM_TYPE_NR
op_star
id|smp_processor_id
c_func
(paren
)paren
comma
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
id|idx_base
suffix:semicolon
id|i
OL
id|idx_base
op_plus
id|KM_TYPE_NR
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
op_logical_neg
id|pte_none
c_func
(paren
op_star
(paren
id|kmap_pte
op_minus
id|i
)paren
)paren
)paren
id|BUG
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
)brace
macro_line|#endif /* _ASM_HIGHMEM_H */
eof
