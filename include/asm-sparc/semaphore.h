macro_line|#ifndef _SPARC_SEMAPHORE_H
DECL|macro|_SPARC_SEMAPHORE_H
mdefine_line|#define _SPARC_SEMAPHORE_H
multiline_comment|/* Dinky, good for nothing, just barely irq safe, Sparc semaphores. */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;asm/atomic.h&gt;
DECL|struct|semaphore
r_struct
id|semaphore
(brace
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
DECL|member|waking
id|atomic_t
id|waking
suffix:semicolon
DECL|member|wait
r_struct
id|wait_queue
op_star
id|wait
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|MUTEX
mdefine_line|#define MUTEX ((struct semaphore) { ATOMIC_INIT(1), ATOMIC_INIT(0), NULL })
DECL|macro|MUTEX_LOCKED
mdefine_line|#define MUTEX_LOCKED ((struct semaphore) { ATOMIC_INIT(0), ATOMIC_INIT(0), NULL })
r_extern
r_void
id|__down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_int
id|__down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_int
id|__down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_void
id|__up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
DECL|macro|sema_init
mdefine_line|#define sema_init(sem, val)&t;atomic_set(&amp;((sem)-&gt;count), val)
DECL|function|down
r_extern
r_inline
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_register
id|atomic_t
op_star
id|ptr
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
r_register
r_int
id|increment
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
id|ptr
op_assign
(paren
id|atomic_t
op_star
)paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
suffix:semicolon
id|increment
op_assign
l_int|1
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___atomic_sub
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
id|tst
op_mod
op_mod
id|g2
id|bl
l_float|2f
id|nop
l_int|1
suffix:colon
dot
id|subsection
l_int|2
l_int|2
suffix:colon
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|64
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|l5
id|call
op_mod
l_int|3
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|ba
l_int|1
id|b
id|restore
op_mod
op_mod
id|l5
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g5
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|increment
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|increment
)paren
comma
l_string|&quot;r&quot;
(paren
id|ptr
)paren
comma
l_string|&quot;i&quot;
(paren
id|__down
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
DECL|function|down_interruptible
r_extern
r_inline
r_int
id|down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_register
id|atomic_t
op_star
id|ptr
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
r_register
r_int
id|increment
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
id|ptr
op_assign
(paren
id|atomic_t
op_star
)paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
suffix:semicolon
id|increment
op_assign
l_int|1
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___atomic_sub
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
id|tst
op_mod
op_mod
id|g2
id|bl
l_float|2f
id|clr
op_mod
op_mod
id|g2
l_int|1
suffix:colon
dot
id|subsection
l_int|2
l_int|2
suffix:colon
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|64
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|l5
id|call
op_mod
l_int|3
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|mov
op_mod
op_mod
id|l5
comma
op_mod
op_mod
id|g5
id|ba
l_int|1
id|b
id|restore
op_mod
op_mod
id|o0
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g2
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|increment
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|increment
)paren
comma
l_string|&quot;r&quot;
(paren
id|ptr
)paren
comma
l_string|&quot;i&quot;
(paren
id|__down_interruptible
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|increment
suffix:semicolon
)brace
DECL|function|down_trylock
r_extern
r_inline
r_int
id|down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_register
id|atomic_t
op_star
id|ptr
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
r_register
r_int
id|increment
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
id|ptr
op_assign
(paren
id|atomic_t
op_star
)paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
suffix:semicolon
id|increment
op_assign
l_int|1
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___atomic_sub
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
id|tst
op_mod
op_mod
id|g2
id|bl
l_float|2f
id|clr
op_mod
op_mod
id|g2
l_int|1
suffix:colon
dot
id|subsection
l_int|2
l_int|2
suffix:colon
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|64
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|l5
id|call
op_mod
l_int|3
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|mov
op_mod
op_mod
id|l5
comma
op_mod
op_mod
id|g5
id|ba
l_int|1
id|b
id|restore
op_mod
op_mod
id|o0
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g2
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|increment
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|increment
)paren
comma
l_string|&quot;r&quot;
(paren
id|ptr
)paren
comma
l_string|&quot;i&quot;
(paren
id|__down_trylock
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|increment
suffix:semicolon
)brace
DECL|function|up
r_extern
r_inline
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_register
id|atomic_t
op_star
id|ptr
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
r_register
r_int
id|increment
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
id|ptr
op_assign
(paren
id|atomic_t
op_star
)paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
suffix:semicolon
id|increment
op_assign
l_int|1
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___atomic_add
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
id|tst
op_mod
op_mod
id|g2
id|ble
l_float|2f
id|nop
l_int|1
suffix:colon
dot
id|subsection
l_int|2
l_int|2
suffix:colon
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|64
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|l5
id|call
op_mod
l_int|3
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|ba
l_int|1
id|b
id|restore
op_mod
op_mod
id|l5
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g5
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|increment
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|increment
)paren
comma
l_string|&quot;r&quot;
(paren
id|ptr
)paren
comma
l_string|&quot;i&quot;
(paren
id|__up
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* !(_SPARC_SEMAPHORE_H) */
eof
