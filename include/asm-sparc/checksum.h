multiline_comment|/* $Id: checksum.h,v 1.13 1996/04/18 03:30:19 davem Exp $ */
macro_line|#ifndef __SPARC_CHECKSUM_H
DECL|macro|__SPARC_CHECKSUM_H
mdefine_line|#define __SPARC_CHECKSUM_H
multiline_comment|/*  checksum.h:  IP/UDP/TCP checksum routines on the Sparc.&n; *&n; *  Copyright(C) 1995 Linus Torvalds&n; *  Copyright(C) 1995 Miguel de Icaza&n; *  Copyright(C) 1996 David S. Miller&n; *&n; * derived from:&n; *&t;Alpha checksum c-code&n; *      ix86 inline assembly&n; */
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
DECL|function|csum_tcpudp_magic
r_extern
r_inline
r_int
r_int
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|addcc
op_mod
l_int|0
comma
op_mod
l_int|1
comma
op_mod
l_int|0
id|addxcc
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|0
id|addxcc
op_mod
l_int|0
comma
op_mod
l_int|5
comma
op_mod
l_int|0
id|addx
op_mod
l_int|0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
op_logical_neg
id|We
id|need
id|the
id|carry
id|from
id|the
id|addition
id|of
l_int|16
op_minus
id|bit
op_logical_neg
id|significant
id|addition
comma
id|so
id|we
id|zap
id|out
id|the
id|low
id|bits
op_logical_neg
id|in
id|one
id|half
comma
id|zap
id|out
id|the
id|high
id|bits
id|in
id|another
comma
op_logical_neg
id|shift
id|them
id|both
id|up
id|to
id|the
id|top
l_int|16
op_minus
id|bits
id|of
id|a
id|word
op_logical_neg
op_logical_and
r_do
id|the
id|carry
id|producing
id|addition
comma
id|finally
op_logical_neg
id|shift
id|the
id|result
id|back
id|down
id|to
id|the
id|low
l_int|16
op_minus
id|bits
dot
op_logical_neg
id|Actually
comma
id|we
id|can
id|further
id|optimize
id|away
id|two
id|shifts
op_logical_neg
id|because
id|we
id|know
id|the
id|low
id|bits
id|of
id|the
id|original
op_logical_neg
id|value
id|will
id|be
id|added
id|to
id|zero
op_minus
id|only
id|bits
id|so
id|cannot
op_logical_neg
id|affect
id|the
id|addition
id|result
id|nor
id|the
id|final
id|carry
op_logical_neg
id|bit
dot
id|sll
op_mod
l_int|0
comma
l_int|16
comma
op_mod
l_int|1
id|addcc
op_mod
l_int|0
comma
op_mod
l_int|1
comma
op_mod
l_int|0
op_logical_neg
id|add
op_logical_and
id|set
id|carry
comma
id|neat
id|eh
ques
c_cond
id|srl
op_mod
l_int|0
comma
l_int|16
comma
op_mod
l_int|0
op_logical_neg
id|shift
id|back
id|down
id|the
id|result
id|addx
op_mod
l_int|0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
op_logical_neg
id|get
id|remaining
id|carry
id|bit
id|xnor
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
op_logical_neg
id|negate
comma
id|sparc
id|is
id|cool
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|saddr
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;1&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|len
op_plus
id|proto
)paren
comma
l_string|&quot;r&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
(paren
(paren
r_int
r_int
)paren
id|sum
)paren
suffix:semicolon
)brace
DECL|function|from32to16
r_extern
r_inline
r_int
r_int
id|from32to16
c_func
(paren
r_int
r_int
id|x
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|addcc
op_mod
l_int|0
comma
op_mod
l_int|1
comma
op_mod
l_int|0
id|srl
op_mod
l_int|0
comma
l_int|16
comma
op_mod
l_int|0
id|addx
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|x
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|x
op_lshift
l_int|16
)paren
comma
l_string|&quot;0&quot;
(paren
id|x
)paren
)paren
suffix:semicolon
r_return
id|x
suffix:semicolon
)brace
DECL|function|do_csum
r_extern
r_inline
r_int
r_int
id|do_csum
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
(brace
r_int
id|odd
comma
id|count
suffix:semicolon
r_int
r_int
id|result
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|len
op_le
l_int|0
)paren
r_goto
id|out
suffix:semicolon
id|odd
op_assign
l_int|1
op_amp
(paren
r_int
r_int
)paren
id|buff
suffix:semicolon
r_if
c_cond
(paren
id|odd
)paren
(brace
id|result
op_assign
op_star
id|buff
suffix:semicolon
id|len
op_decrement
suffix:semicolon
id|buff
op_increment
suffix:semicolon
)brace
id|count
op_assign
id|len
op_rshift
l_int|1
suffix:semicolon
multiline_comment|/* nr of 16-bit words.. */
r_if
c_cond
(paren
id|count
)paren
(brace
r_if
c_cond
(paren
l_int|2
op_amp
(paren
r_int
r_int
)paren
id|buff
)paren
(brace
id|result
op_add_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|buff
suffix:semicolon
id|count
op_decrement
suffix:semicolon
id|len
op_sub_assign
l_int|2
suffix:semicolon
id|buff
op_add_assign
l_int|2
suffix:semicolon
)brace
id|count
op_rshift_assign
l_int|1
suffix:semicolon
multiline_comment|/* nr of 32-bit words.. */
r_if
c_cond
(paren
id|count
)paren
(brace
r_int
r_int
id|carry
op_assign
l_int|0
suffix:semicolon
r_do
(brace
r_int
r_int
id|w
op_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|buff
suffix:semicolon
id|count
op_decrement
suffix:semicolon
id|buff
op_add_assign
l_int|4
suffix:semicolon
id|result
op_add_assign
id|carry
suffix:semicolon
id|result
op_add_assign
id|w
suffix:semicolon
id|carry
op_assign
(paren
id|w
OG
id|result
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|count
)paren
suffix:semicolon
id|result
op_add_assign
id|carry
suffix:semicolon
id|result
op_assign
(paren
id|result
op_amp
l_int|0xffff
)paren
op_plus
(paren
id|result
op_rshift
l_int|16
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|len
op_amp
l_int|2
)paren
(brace
id|result
op_add_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|buff
suffix:semicolon
id|buff
op_add_assign
l_int|2
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
id|len
op_amp
l_int|1
)paren
id|result
op_add_assign
(paren
op_star
id|buff
op_lshift
l_int|8
)paren
suffix:semicolon
id|result
op_assign
id|from32to16
c_func
(paren
id|result
)paren
suffix:semicolon
r_if
c_cond
(paren
id|odd
)paren
id|result
op_assign
(paren
(paren
id|result
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
)paren
op_or
(paren
(paren
id|result
op_amp
l_int|0xff
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
id|out
suffix:colon
r_return
id|result
suffix:semicolon
)brace
multiline_comment|/* ihl is always 5 or greater, almost always is 5, iph is always word&n; * aligned but can fail to be dword aligned very often.&n; */
DECL|function|ip_fast_csum
r_extern
r_inline
r_int
r_int
id|ip_fast_csum
c_func
(paren
r_const
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
id|sum
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ld
(braket
op_mod
l_int|1
)braket
comma
op_mod
l_int|0
id|sub
op_mod
l_int|2
comma
l_int|4
comma
op_mod
l_int|2
id|ld
(braket
op_mod
l_int|1
op_plus
l_int|0x4
)braket
comma
op_mod
op_mod
id|g1
id|ld
(braket
op_mod
l_int|1
op_plus
l_int|0x8
)braket
comma
op_mod
op_mod
id|g2
id|addcc
op_mod
op_mod
id|g1
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|addxcc
op_mod
op_mod
id|g2
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|ld
(braket
op_mod
l_int|1
op_plus
l_int|0xc
)braket
comma
op_mod
op_mod
id|g1
id|ld
(braket
op_mod
l_int|1
op_plus
l_int|0x10
)braket
comma
op_mod
op_mod
id|g2
id|addxcc
op_mod
op_mod
id|g1
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|addxcc
op_mod
l_int|0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|addcc
op_mod
op_mod
id|g2
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|add
op_mod
l_int|1
comma
l_int|0x4
comma
op_mod
l_int|1
id|addxcc
op_mod
l_int|0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
id|subcc
op_mod
l_int|2
comma
l_int|0x1
comma
op_mod
l_int|2
id|bne
comma
id|a
l_int|1
id|b
id|ld
(braket
op_mod
l_int|1
op_plus
l_int|0x10
)braket
comma
op_mod
op_mod
id|g2
id|sll
op_mod
l_int|0
comma
l_int|16
comma
op_mod
l_int|2
id|addcc
op_mod
l_int|0
comma
op_mod
l_int|2
comma
op_mod
l_int|2
id|srl
op_mod
l_int|2
comma
l_int|16
comma
op_mod
l_int|0
id|addx
op_mod
l_int|0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|2
id|xnor
op_mod
op_mod
id|g0
comma
op_mod
l_int|2
comma
op_mod
l_int|0
l_int|2
suffix:colon
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|iph
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|iph
)paren
comma
l_string|&quot;2&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;g2&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
DECL|function|csum_partial
r_extern
r_inline
r_int
r_int
id|csum_partial
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
id|__volatile__
(paren
"&quot;"
id|mov
l_int|0
comma
op_mod
op_mod
id|g5
op_logical_neg
id|g5
op_assign
id|result
id|cmp
op_mod
l_int|1
comma
l_int|0
id|bgu
comma
id|a
l_float|1f
id|andcc
op_mod
l_int|0
comma
l_int|1
comma
op_mod
op_mod
id|g7
op_logical_neg
id|g7
op_assign
id|odd
id|b
comma
id|a
l_float|9f
l_int|1
suffix:colon
id|be
comma
id|a
l_float|1f
id|srl
op_mod
l_int|1
comma
l_int|1
comma
op_mod
op_mod
id|g6
op_logical_neg
id|g6
op_assign
id|count
op_assign
(paren
id|len
op_rshift
l_int|1
)paren
id|sub
op_mod
l_int|1
comma
l_int|1
comma
op_mod
l_int|1
op_logical_neg
r_if
c_cond
(paren
id|odd
)paren
(brace
id|result
op_assign
op_star
id|buff
suffix:semicolon
id|ldub
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g5
op_logical_neg
id|len
op_decrement
suffix:semicolon
id|add
op_mod
l_int|0
comma
l_int|1
comma
op_mod
l_int|0
op_logical_neg
id|buff
op_increment
)brace
id|srl
op_mod
l_int|1
comma
l_int|1
comma
op_mod
op_mod
id|g6
l_int|1
suffix:colon
id|cmp
op_mod
op_mod
id|g6
comma
l_int|0
op_logical_neg
r_if
c_cond
(paren
id|count
)paren
(brace
id|be
comma
id|a
l_float|8f
id|andcc
op_mod
l_int|1
comma
l_int|1
comma
op_mod
op_mod
id|g0
id|andcc
op_mod
l_int|0
comma
l_int|2
comma
op_mod
op_mod
id|g0
op_logical_neg
r_if
c_cond
(paren
l_int|2
op_amp
id|buff
)paren
(brace
id|be
comma
id|a
l_float|1f
id|srl
op_mod
op_mod
id|g6
comma
l_int|1
comma
op_mod
op_mod
id|g6
id|sub
op_mod
l_int|1
comma
l_int|2
comma
op_mod
l_int|1
op_logical_neg
id|result
op_add_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|buff
suffix:semicolon
id|lduh
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g1
op_logical_neg
id|count
op_decrement
suffix:semicolon
id|sub
op_mod
op_mod
id|g6
comma
l_int|1
comma
op_mod
op_mod
id|g6
op_logical_neg
id|len
op_sub_assign
l_int|2
suffix:semicolon
id|add
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g5
op_logical_neg
id|buff
op_add_assign
l_int|2
suffix:semicolon
id|add
op_mod
l_int|0
comma
l_int|2
comma
op_mod
l_int|0
op_logical_neg
)brace
id|srl
op_mod
op_mod
id|g6
comma
l_int|1
comma
op_mod
op_mod
id|g6
l_int|1
suffix:colon
id|cmp
op_mod
op_mod
id|g6
comma
l_int|0
op_logical_neg
r_if
c_cond
(paren
id|count
)paren
(brace
id|be
comma
id|a
l_float|2f
id|andcc
op_mod
l_int|1
comma
l_int|2
comma
op_mod
op_mod
id|g0
id|ld
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g1
op_logical_neg
id|csum
id|aligned
l_int|32
id|bit
id|words
l_int|1
suffix:colon
id|add
op_mod
l_int|0
comma
l_int|4
comma
op_mod
l_int|0
id|addcc
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g5
id|addx
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g5
id|subcc
op_mod
op_mod
id|g6
comma
l_int|1
comma
op_mod
op_mod
id|g6
id|bne
comma
id|a
l_int|1
id|b
id|ld
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g1
id|sethi
op_mod
op_mod
id|hi
c_func
(paren
l_int|0xffff
)paren
comma
op_mod
op_mod
id|g3
id|srl
op_mod
op_mod
id|g5
comma
l_int|16
comma
op_mod
op_mod
id|g2
op_logical_or
op_mod
op_mod
id|g3
comma
op_mod
op_mod
id|lo
c_func
(paren
l_int|0xffff
)paren
comma
op_mod
op_mod
id|g3
op_logical_and
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g3
comma
op_mod
op_mod
id|g5
id|add
op_mod
op_mod
id|g2
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g5
op_logical_neg
)brace
id|andcc
op_mod
l_int|1
comma
l_int|2
comma
op_mod
op_mod
id|g0
l_int|2
suffix:colon
id|be
comma
id|a
l_float|8f
op_logical_neg
r_if
c_cond
(paren
id|len
op_amp
l_int|2
)paren
(brace
id|andcc
op_mod
l_int|1
comma
l_int|1
comma
op_mod
op_mod
id|g0
id|lduh
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g1
op_logical_neg
id|result
op_add_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|buff
suffix:semicolon
id|add
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
op_logical_neg
id|buff
op_add_assign
l_int|2
suffix:semicolon
id|add
op_mod
l_int|0
comma
l_int|2
comma
op_mod
l_int|0
op_logical_neg
)brace
id|andcc
op_mod
l_int|1
comma
l_int|1
comma
op_mod
op_mod
id|g0
l_int|8
suffix:colon
id|be
comma
id|a
l_float|1f
op_logical_neg
r_if
c_cond
(paren
id|len
op_amp
l_int|1
)paren
(brace
id|sll
op_mod
op_mod
id|g5
comma
l_int|16
comma
op_mod
op_mod
id|g1
id|ldub
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g1
id|sll
op_mod
op_mod
id|g1
comma
l_int|8
comma
op_mod
op_mod
id|g1
op_logical_neg
id|result
op_add_assign
(paren
op_star
id|buff
op_lshift
l_int|8
)paren
suffix:semicolon
id|add
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
op_logical_neg
)brace
id|sll
op_mod
op_mod
id|g5
comma
l_int|16
comma
op_mod
op_mod
id|g1
l_int|1
suffix:colon
id|addcc
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g5
op_logical_neg
id|result
op_assign
id|from32to16
c_func
(paren
id|result
)paren
suffix:semicolon
id|srl
op_mod
op_mod
id|g5
comma
l_int|16
comma
op_mod
op_mod
id|g1
id|addx
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
id|orcc
op_mod
op_mod
id|g7
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g0
op_logical_neg
r_if
c_cond
(paren
id|odd
)paren
(brace
id|be
l_float|9f
id|srl
op_mod
op_mod
id|g5
comma
l_int|8
comma
op_mod
op_mod
id|g1
op_logical_and
op_mod
op_mod
id|g5
comma
l_int|0xff
comma
op_mod
op_mod
id|g2
op_logical_neg
id|result
op_assign
(paren
(paren
id|result
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
)paren
op_or
op_logical_and
op_mod
op_mod
id|g1
comma
l_int|0xff
comma
op_mod
op_mod
id|g1
op_logical_neg
(paren
(paren
id|result
op_amp
l_int|0xff
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
id|sll
op_mod
op_mod
id|g2
comma
l_int|8
comma
op_mod
op_mod
id|g2
op_logical_or
op_mod
op_mod
id|g2
comma
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g5
op_logical_neg
)brace
l_int|9
suffix:colon
id|addcc
op_mod
l_int|2
comma
op_mod
op_mod
id|g5
comma
op_mod
l_int|2
op_logical_neg
id|add
id|result
op_logical_and
id|sum
id|with
id|carry
id|addx
op_mod
op_mod
id|g0
comma
op_mod
l_int|2
comma
op_mod
l_int|2
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|buff
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|len
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|buff
)paren
comma
l_string|&quot;1&quot;
(paren
id|len
)paren
comma
l_string|&quot;2&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
comma
l_string|&quot;g5&quot;
comma
l_string|&quot;g6&quot;
comma
l_string|&quot;g7&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * the same as csum_partial, but copies from fs:src while it&n; * checksums&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
DECL|function|csum_partial_copy
r_extern
r_inline
r_int
r_int
id|csum_partial_copy
c_func
(paren
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
(brace
multiline_comment|/*&n;&t; * The whole idea is to do the copy and the checksum at&n;&t; * the same time, but we do it the easy way now.&n;&t; *&n;&t; * At least csum on the source, not destination, for cache&n;&t; * reasons..&n;&t; */
id|sum
op_assign
id|csum_partial
c_func
(paren
id|src
comma
id|len
comma
id|sum
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|dst
comma
id|src
comma
id|len
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
DECL|function|ip_compute_csum
r_extern
r_inline
r_int
r_int
id|ip_compute_csum
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
(brace
r_return
op_complement
id|from32to16
c_func
(paren
id|do_csum
c_func
(paren
id|buff
comma
id|len
)paren
)paren
suffix:semicolon
)brace
DECL|macro|csum_partial_copy_fromuser
mdefine_line|#define csum_partial_copy_fromuser(s, d, l, w)  &bslash;&n;                       csum_partial_copy((char *) (s), (d), (l), (w))
multiline_comment|/*&n; *&t;Fold a partial checksum without adding pseudo headers&n; */
DECL|function|csum_fold
r_extern
r_inline
r_int
r_int
id|csum_fold
c_func
(paren
r_int
r_int
id|sum
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|addcc
op_mod
l_int|0
comma
op_mod
l_int|1
comma
op_mod
l_int|0
id|srl
op_mod
l_int|0
comma
l_int|16
comma
op_mod
l_int|0
id|addx
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|xnor
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|sum
op_lshift
l_int|16
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
macro_line|#endif /* !(__SPARC_CHECKSUM_H) */
eof
