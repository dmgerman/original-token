multiline_comment|/* smp.h: Sparc specific SMP stuff.&n; *&n; * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef _SPARC_SMP_H
DECL|macro|_SPARC_SMP_H
mdefine_line|#define _SPARC_SMP_H
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/* PROM provided per-processor information we need&n; * to start them all up.&n; */
DECL|struct|prom_cpuinfo
r_struct
id|prom_cpuinfo
(brace
DECL|member|prom_node
r_int
id|prom_node
suffix:semicolon
DECL|member|mid
r_int
id|mid
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif /* !(__ASSEMBLY__) */
macro_line|#ifdef __SMP__
macro_line|#ifndef __ASSEMBLY__
r_extern
r_struct
id|prom_cpuinfo
id|linux_cpus
(braket
id|NCPUS
)braket
suffix:semicolon
multiline_comment|/* Per processor Sparc parameters we need. */
DECL|struct|cpuinfo_sparc
r_struct
id|cpuinfo_sparc
(brace
DECL|member|udelay_val
r_int
r_int
id|udelay_val
suffix:semicolon
multiline_comment|/* thats it */
)brace
suffix:semicolon
r_extern
r_struct
id|cpuinfo_sparc
id|cpu_data
(braket
id|NR_CPUS
)braket
suffix:semicolon
DECL|typedef|klock_t
r_typedef
r_volatile
r_int
r_char
id|klock_t
suffix:semicolon
r_extern
id|klock_t
id|kernel_flag
suffix:semicolon
DECL|macro|KLOCK_HELD
mdefine_line|#define KLOCK_HELD       0xff
DECL|macro|KLOCK_CLEAR
mdefine_line|#define KLOCK_CLEAR      0x00
multiline_comment|/*&n; *&t;Private routines/data&n; */
r_extern
r_int
id|smp_found_cpus
suffix:semicolon
r_extern
r_int
r_char
id|boot_cpu_id
suffix:semicolon
r_extern
r_int
r_int
id|cpu_present_map
suffix:semicolon
r_extern
r_volatile
r_int
r_int
id|smp_invalidate_needed
(braket
id|NR_CPUS
)braket
suffix:semicolon
r_extern
r_volatile
r_int
r_int
id|kernel_counter
suffix:semicolon
r_extern
r_volatile
r_int
r_char
id|active_kernel_processor
suffix:semicolon
r_extern
r_void
id|smp_message_irq
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
r_int
id|ipi_count
suffix:semicolon
r_extern
r_volatile
r_int
r_int
id|kernel_counter
suffix:semicolon
r_extern
r_volatile
r_int
r_int
id|syscall_count
suffix:semicolon
r_extern
r_void
id|print_lock_state
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|typedef|smpfunc_t
r_typedef
r_void
(paren
op_star
id|smpfunc_t
)paren
(paren
r_int
r_int
comma
r_int
r_int
comma
r_int
r_int
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;General functions that each host system must provide.&n; */
r_extern
r_void
id|smp_callin
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_boot_cpus
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_store_cpu_info
c_func
(paren
r_int
id|id
)paren
suffix:semicolon
r_extern
r_void
id|smp_cross_call
c_func
(paren
id|smpfunc_t
id|func
comma
r_int
r_int
id|arg1
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
comma
r_int
r_int
id|arg4
comma
r_int
r_int
id|arg5
)paren
suffix:semicolon
r_extern
r_void
id|smp_capture
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_release
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|xc0
r_extern
r_inline
r_void
id|xc0
c_func
(paren
id|smpfunc_t
id|func
)paren
(brace
id|smp_cross_call
c_func
(paren
id|func
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|xc1
r_extern
r_inline
r_void
id|xc1
c_func
(paren
id|smpfunc_t
id|func
comma
r_int
r_int
id|arg1
)paren
(brace
id|smp_cross_call
c_func
(paren
id|func
comma
id|arg1
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|xc2
r_extern
r_inline
r_void
id|xc2
c_func
(paren
id|smpfunc_t
id|func
comma
r_int
r_int
id|arg1
comma
r_int
r_int
id|arg2
)paren
(brace
id|smp_cross_call
c_func
(paren
id|func
comma
id|arg1
comma
id|arg2
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|xc3
r_extern
r_inline
r_void
id|xc3
c_func
(paren
id|smpfunc_t
id|func
comma
r_int
r_int
id|arg1
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
)paren
(brace
id|smp_cross_call
c_func
(paren
id|func
comma
id|arg1
comma
id|arg2
comma
id|arg3
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|xc4
r_extern
r_inline
r_void
id|xc4
c_func
(paren
id|smpfunc_t
id|func
comma
r_int
r_int
id|arg1
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
comma
r_int
r_int
id|arg4
)paren
(brace
id|smp_cross_call
c_func
(paren
id|func
comma
id|arg1
comma
id|arg2
comma
id|arg3
comma
id|arg4
comma
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|xc5
r_extern
r_inline
r_void
id|xc5
c_func
(paren
id|smpfunc_t
id|func
comma
r_int
r_int
id|arg1
comma
r_int
r_int
id|arg2
comma
r_int
r_int
id|arg3
comma
r_int
r_int
id|arg4
comma
r_int
r_int
id|arg5
)paren
(brace
id|smp_cross_call
c_func
(paren
id|func
comma
id|arg1
comma
id|arg2
comma
id|arg3
comma
id|arg4
comma
id|arg5
)paren
suffix:semicolon
)brace
r_extern
r_volatile
r_int
id|cpu_number_map
(braket
id|NR_CPUS
)braket
suffix:semicolon
r_extern
r_volatile
r_int
id|cpu_logical_map
(braket
id|NR_CPUS
)braket
suffix:semicolon
DECL|function|smp_processor_id
r_extern
id|__inline
r_int
id|smp_processor_id
c_func
(paren
r_void
)paren
(brace
r_int
id|cpuid
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;rd %%tbr, %0&bslash;n&bslash;t&quot;
l_string|&quot;srl %0, 12, %0&bslash;n&bslash;t&quot;
l_string|&quot;and %0, 3, %0&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|cpuid
)paren
)paren
suffix:semicolon
r_return
id|cpuid
suffix:semicolon
)brace
r_extern
r_volatile
r_int
r_int
id|smp_proc_in_lock
(braket
id|NR_CPUS
)braket
suffix:semicolon
multiline_comment|/* for computing process time */
r_extern
r_volatile
r_int
id|smp_process_available
suffix:semicolon
DECL|function|smp_swap
r_extern
r_inline
r_int
id|smp_swap
c_func
(paren
r_volatile
r_int
op_star
id|addr
comma
r_int
id|value
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;swap [%2], %0&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|value
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|value
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
r_return
id|value
suffix:semicolon
)brace
DECL|function|inc_smp_counter
r_extern
r_inline
r_volatile
r_void
id|inc_smp_counter
c_func
(paren
r_volatile
r_int
op_star
id|ctr
)paren
(brace
r_int
id|tmp
suffix:semicolon
r_while
c_loop
(paren
(paren
id|tmp
op_assign
id|smp_swap
c_func
(paren
id|ctr
comma
op_minus
l_int|1
)paren
)paren
op_eq
op_minus
l_int|1
)paren
(brace
suffix:semicolon
)brace
id|smp_swap
c_func
(paren
id|ctr
comma
(paren
id|tmp
op_plus
l_int|1
)paren
)paren
suffix:semicolon
)brace
DECL|function|dec_smp_counter
r_extern
r_inline
r_volatile
r_void
id|dec_smp_counter
c_func
(paren
r_volatile
r_int
op_star
id|ctr
)paren
(brace
r_int
id|tmp
suffix:semicolon
r_while
c_loop
(paren
(paren
id|tmp
op_assign
id|smp_swap
c_func
(paren
id|ctr
comma
op_minus
l_int|1
)paren
)paren
op_eq
op_minus
l_int|1
)paren
(brace
suffix:semicolon
)brace
id|smp_swap
c_func
(paren
id|ctr
comma
(paren
id|tmp
op_minus
l_int|1
)paren
)paren
suffix:semicolon
)brace
DECL|function|read_smp_counter
r_extern
r_inline
r_volatile
r_int
id|read_smp_counter
c_func
(paren
r_volatile
r_int
op_star
id|ctr
)paren
(brace
r_int
id|value
suffix:semicolon
r_while
c_loop
(paren
(paren
id|value
op_assign
op_star
id|ctr
)paren
op_eq
op_minus
l_int|1
)paren
(brace
suffix:semicolon
)brace
r_return
id|value
suffix:semicolon
)brace
macro_line|#endif /* !(__ASSEMBLY__) */
multiline_comment|/* Sparc specific messages. */
DECL|macro|MSG_CAPTURE
mdefine_line|#define MSG_CAPTURE            0x0004       /* Park a processor. */
DECL|macro|MSG_CROSS_CALL
mdefine_line|#define MSG_CROSS_CALL         0x0005       /* run func on cpus */
multiline_comment|/* Imperical PROM processor mailbox constants.  If the per-cpu mailbox&n; * contains something other than one of these then the ipi is from&n; * Linux&squot;s active_kernel_processor.  This facility exists so that&n; * the boot monitor can capture all the other cpus when one catches&n; * a watchdog reset or the user enters the monitor using L1-A keys.&n; */
DECL|macro|MBOX_STOPCPU
mdefine_line|#define MBOX_STOPCPU          0xFB
DECL|macro|MBOX_IDLECPU
mdefine_line|#define MBOX_IDLECPU          0xFC
DECL|macro|MBOX_IDLECPU2
mdefine_line|#define MBOX_IDLECPU2         0xFD
DECL|macro|MBOX_STOPCPU2
mdefine_line|#define MBOX_STOPCPU2         0xFE
DECL|macro|NO_PROC_ID
mdefine_line|#define NO_PROC_ID            0xFF
DECL|macro|PROC_CHANGE_PENALTY
mdefine_line|#define PROC_CHANGE_PENALTY     20
DECL|macro|SMP_FROM_INT
mdefine_line|#define SMP_FROM_INT&t;&t;1
DECL|macro|SMP_FROM_SYSCALL
mdefine_line|#define SMP_FROM_SYSCALL&t;2
macro_line|#endif /* !(__SMP__) */
macro_line|#endif /* !(_SPARC_SMP_H) */
eof
