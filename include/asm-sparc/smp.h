multiline_comment|/* smp.h: Sparc specific SMP stuff.&n; *&n; * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef _SPARC_SMP_H
DECL|macro|_SPARC_SMP_H
mdefine_line|#define _SPARC_SMP_H
macro_line|#include &lt;asm/bitops.h&gt;
macro_line|#include &lt;asm/ptrace.h&gt;
multiline_comment|/* Per processor Sparc parameters. */
DECL|struct|cpuinfo_sparc
r_struct
id|cpuinfo_sparc
(brace
DECL|member|impl
r_int
r_char
id|impl
suffix:semicolon
DECL|member|vers
r_int
r_char
id|vers
suffix:semicolon
DECL|member|udelay_val
r_int
r_int
id|udelay_val
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|cpuinfo_sparc
id|cpu_data
(braket
id|NR_CPUS
)braket
suffix:semicolon
r_typedef
id|klock_t
r_volatile
r_int
r_char
suffix:semicolon
r_extern
id|klock_t
id|kernel_lock
suffix:semicolon
DECL|macro|KLOCK_HELD
mdefine_line|#define KLOCK_HELD       0xff
DECL|macro|KLOCK_CLEAR
mdefine_line|#define KLOCK_CLEAR      0x00
DECL|struct|sparc_ipi_invalidate
r_struct
id|sparc_ipi_invalidate
(brace
DECL|member|mm
r_struct
id|mm_struct
op_star
id|mm
suffix:semicolon
DECL|member|addr
r_int
r_int
id|addr
suffix:semicolon
multiline_comment|/* page for inv_pg, start for inv_rnge */
DECL|member|end
r_int
r_int
id|end
suffix:semicolon
multiline_comment|/* Used for inv_rnge only. */
)brace
suffix:semicolon
DECL|struct|sparc_ipimsg
r_struct
id|sparc_ipimsg
(brace
r_union
(brace
multiline_comment|/* Add more here as we need them. */
DECL|member|invmsg
r_struct
id|sparc_ipi_invalidate
id|invmsg
suffix:semicolon
)brace
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_void
id|smp_scan_prom_for_cpus
c_func
(paren
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|smp_alloc_memory
c_func
(paren
r_int
r_int
id|mem_base
)paren
suffix:semicolon
r_extern
r_int
r_int
op_star
id|kernel_stacks
(braket
id|NR_CPUS
)braket
suffix:semicolon
r_extern
r_int
r_char
id|boot_cpu_id
suffix:semicolon
r_extern
r_int
r_int
id|cpu_present_map
suffix:semicolon
r_extern
r_volatile
r_int
r_int
id|smp_invalidate_needed
suffix:semicolon
r_extern
r_int
r_int
id|kernel_counter
suffix:semicolon
r_extern
r_volatile
r_int
r_char
id|active_kernel_processor
suffix:semicolon
r_extern
r_void
id|smp_message_irq
c_func
(paren
r_int
id|cpl
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_extern
r_void
id|smp_reschedule_irq
c_func
(paren
r_int
id|cpl
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_extern
r_void
id|smp_invalidate_rcv
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
id|volatils
r_int
r_int
id|syscall_count
suffix:semicolon
r_extern
r_void
(paren
op_star
id|smp_invalidate_all
)paren
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
(paren
op_star
id|smp_invalidate_mm
)paren
(paren
r_struct
id|mm_struct
op_star
)paren
suffix:semicolon
r_extern
r_void
(paren
op_star
id|smp_invalidate_range
)paren
(paren
r_struct
id|mm_struct
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
(paren
op_star
id|smp_invalidate_page
)paren
(paren
r_struct
id|vm_area_struct
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|smp_callin
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_boot_cpus
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_store_cpu_info
c_func
(paren
r_int
id|id
)paren
suffix:semicolon
DECL|function|smp_processor_id
r_extern
id|_inline_
r_int
id|smp_processor_id
c_func
(paren
r_void
)paren
(brace
r_int
id|cpuid
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;rd %%tbr, %0&bslash;n&bslash;t&quot;
l_string|&quot;srl %0, 24, %0&bslash;n&bslash;t&quot;
l_string|&quot;and %0, 3, %0&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|cpuid
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|cpuid
)paren
)paren
suffix:semicolon
r_return
id|cpuid
suffix:semicolon
)brace
multiline_comment|/* Empirical PROM processor mailbox constants.  If the per-cpu mailbox&n; * contains something other than one of these then the ipi is from&n; * Linux&squot;s active_kernel_processor.  This facility exists so that&n; * the boot monitor can capture all the other cpus when one catches&n; * a watchdog reset or the user enters the monitor using L1-A keys.&n; */
DECL|macro|MBOX_STOPCPU
mdefine_line|#define MBOX_STOPCPU          0xFB
DECL|macro|MBOX_IDLECPU
mdefine_line|#define MBOX_IDLECPU          0xFC
DECL|macro|MBOX_IDLECPU2
mdefine_line|#define MBOX_IDLECPU2         0xFD
DECL|macro|MBOX_STOPCPU2
mdefine_line|#define MBOX_STOPCPU2         0xFE
DECL|macro|NO_PROC_ID
mdefine_line|#define NO_PROC_ID            0xFF
DECL|macro|PROC_CHANGE_PENALTY
mdefine_line|#define PROC_CHANGE_PENALTY   0x23
macro_line|#endif /* !(_SPARC_SMP_H) */
eof
