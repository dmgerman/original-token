macro_line|#ifndef _SPARC_BITOPS_H
DECL|macro|_SPARC_BITOPS_H
mdefine_line|#define _SPARC_BITOPS_H
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;asm/system.h&gt;
multiline_comment|/*&n; * Copyright 1995, David S. Miller (davem@caip.rutgers.edu).&n; */
multiline_comment|/* Set bit &squot;nr&squot; in 32-bit quantity at address &squot;addr&squot; where bit &squot;0&squot;&n; * is in the highest of the four bytes and bit &squot;31&squot; is the high bit&n; * within the first byte. Sparc is BIG-Endian. Unless noted otherwise&n; * all bit-ops return 0 if bit was previously clear and != 0 otherwise.&n; */
multiline_comment|/* For now, the sun4c implementation will disable and enable traps&n; * in order to insure atomicity. Things will have to be different&n; * for sun4m (ie. SMP) no doubt.&n; */
multiline_comment|/* These routines now do things in little endian byte order. */
multiline_comment|/* Our unsigned long accesses on the Sparc look like this:&n; * Big Endian:&n; *    byte 0    byte 1      byte 2    byte 3&n; *  0000 0000  0000 0000  0000 0000  0000 0000&n; *  31     24  23     16  15      8  7       0&n; *&n; * We want to set the bits in a little-endian fashion:&n; * Little Endian:&n; *    byte 3    byte 2      byte 1    byte 0&n; *  0000 0000  0000 0000  0000 0000  0000 0000&n; *  31     24  23     16  15      8  7       0&n; */
multiline_comment|/* #define __LITTLE_ENDIAN_BITOPS */
DECL|function|set_bit
r_extern
id|__inline__
r_int
r_int
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|vaddr
)paren
(brace
macro_line|#ifdef __LITTLE_ENDIAN_BITOPS
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|addr
op_assign
(paren
r_int
r_char
op_star
)paren
id|vaddr
suffix:semicolon
r_int
r_char
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
r_int
r_int
id|flags
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x7
)paren
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_or_assign
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
macro_line|#else  /* BIG ENDIAN BITOPS */
r_int
id|retval
suffix:semicolon
r_int
r_int
op_star
id|addr
op_assign
id|vaddr
suffix:semicolon
r_int
r_int
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
r_int
r_int
id|flags
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_or_assign
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
macro_line|#endif
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
r_int
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|vaddr
)paren
(brace
macro_line|#ifdef __LITTLE_ENDIAN_BITOPS
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|addr
op_assign
(paren
r_int
r_char
op_star
)paren
id|vaddr
suffix:semicolon
r_int
r_char
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
r_int
r_int
id|flags
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|7
)paren
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_and_assign
op_complement
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
macro_line|#else   /* BIG ENDIAN BITOPS */
r_int
id|retval
suffix:semicolon
r_int
r_int
op_star
id|addr
op_assign
id|vaddr
suffix:semicolon
r_int
r_int
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
r_int
r_int
id|flags
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_and_assign
op_complement
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
macro_line|#endif
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_int
r_int
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|vaddr
)paren
(brace
macro_line|#ifdef __LITTLE_ENDIAN_BITOPS
r_int
id|retval
suffix:semicolon
r_int
r_char
op_star
id|addr
op_assign
(paren
r_int
r_char
op_star
)paren
id|vaddr
suffix:semicolon
r_int
r_char
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
r_int
r_int
id|flags
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|7
)paren
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_xor_assign
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
macro_line|#else   /* BIG ENDIAN BITOPS */
r_int
id|retval
suffix:semicolon
r_int
r_int
op_star
id|addr
op_assign
id|vaddr
suffix:semicolon
r_int
r_int
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
r_int
r_int
id|flags
suffix:semicolon
macro_line|#endif
id|addr
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
id|retval
op_assign
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
suffix:semicolon
op_star
id|addr
op_xor_assign
id|mask
suffix:semicolon
macro_line|#ifndef TEST_BITOPS
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
macro_line|#endif
r_return
id|retval
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/* The following routine need not be atomic. */
DECL|function|test_bit
r_extern
id|__inline__
r_int
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|vaddr
)paren
(brace
macro_line|#ifdef __LITTLE_ENDIAN_BITOPS
r_int
r_char
id|mask
suffix:semicolon
r_int
r_char
op_star
id|addr
op_assign
(paren
r_int
r_char
op_star
)paren
id|vaddr
suffix:semicolon
id|addr
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|7
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
)paren
suffix:semicolon
macro_line|#else   /* BIG ENDIAN BITOPS */
r_int
r_int
id|mask
suffix:semicolon
r_int
r_int
op_star
id|addr
op_assign
id|vaddr
suffix:semicolon
id|addr
op_add_assign
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|addr
)paren
op_ne
l_int|0
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/* There has to be a faster way to do this, sigh... */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_register
r_int
r_int
id|cnt
suffix:semicolon
id|cnt
op_assign
l_int|0
suffix:semicolon
macro_line|#ifdef __LITTLE_ENDIAN_BITOPS
r_for
c_loop
(paren
r_int
id|byte_bit
op_assign
l_int|24
suffix:semicolon
id|byte_bit
op_ge
l_int|0
suffix:semicolon
id|byte_bit
op_sub_assign
l_int|8
)paren
r_for
c_loop
(paren
r_int
id|bit
op_assign
l_int|0
suffix:semicolon
id|bit
OL
l_int|8
suffix:semicolon
id|bit
op_increment
)paren
r_if
c_cond
(paren
(paren
id|word
op_rshift
(paren
id|byte_bit
op_plus
id|bit
)paren
)paren
op_amp
l_int|1
)paren
(brace
id|cnt
op_increment
suffix:semicolon
)brace
r_else
r_return
id|cnt
suffix:semicolon
macro_line|#else /* BIT ENDIAN BITOPS */
r_while
c_loop
(paren
id|cnt
OL
l_int|32
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
(paren
(paren
id|word
op_rshift
id|cnt
)paren
op_amp
l_int|1
)paren
)paren
(brace
r_return
id|cnt
suffix:semicolon
)brace
r_else
id|cnt
op_increment
suffix:semicolon
)brace
r_return
id|cnt
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/* find_next_zero_bit() finds the first zero bit in a bit string of length&n; * &squot;size&squot; bits, starting the search at bit &squot;offset&squot;. This is largely based&n; * on Linus&squot;s ALPHA routines, which are pretty portable BTW.&n; */
r_extern
id|__inline__
r_int
r_int
DECL|function|find_next_zero_bit
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
macro_line|#ifdef __LITTLE_ENDIAN_BITOPS
multiline_comment|/* FOO, needs to be written */
macro_line|#else   /* BIG ENDIAN BITOPS */
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|32UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/* Linus sez that gcc can optimize the following correctly, we&squot;ll see if this&n; * holds on the Sparc as it does for the ALPHA.&n; */
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
macro_line|#endif /* defined(_SPARC_BITOPS_H) */
eof
