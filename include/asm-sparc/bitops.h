multiline_comment|/* $Id: bitops.h,v 1.61 2000/09/23 02:11:22 davem Exp $&n; * bitops.h: Bit string operations on the Sparc.&n; *&n; * Copyright 1995 David S. Miller (davem@caip.rutgers.edu)&n; * Copyright 1996 Eddie C. Dost   (ecd@skynet.be)&n; */
macro_line|#ifndef _SPARC_BITOPS_H
DECL|macro|_SPARC_BITOPS_H
mdefine_line|#define _SPARC_BITOPS_H
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
macro_line|#ifndef __KERNEL__
multiline_comment|/* User mode bitops, defined here for convenience. Note: these are not&n; * atomic, so packages like nthreads should do some locking around these&n; * themself.&n; */
DECL|function|set_bit
r_extern
id|__inline__
r_int
r_int
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_int
r_int
op_star
id|ADDR
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ld
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g3
op_logical_or
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|st
op_mod
op_mod
id|g2
comma
(braket
op_mod
l_int|0
)braket
op_logical_and
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
)paren
suffix:semicolon
r_return
(paren
r_int
r_int
)paren
id|ADDR
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
r_int
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_int
r_int
op_star
id|ADDR
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ld
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g3
id|andn
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|st
op_mod
op_mod
id|g2
comma
(braket
op_mod
l_int|0
)braket
op_logical_and
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
)paren
suffix:semicolon
r_return
(paren
r_int
r_int
)paren
id|ADDR
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_void
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_int
r_int
op_star
id|ADDR
op_assign
(paren
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|5
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ld
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g3
op_xor
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|st
op_mod
op_mod
id|g2
comma
(braket
op_mod
l_int|0
)braket
op_logical_and
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
)paren
suffix:semicolon
)brace
macro_line|#else /* __KERNEL__ */
macro_line|#include &lt;asm/system.h&gt;
multiline_comment|/* Set bit &squot;nr&squot; in 32-bit quantity at address &squot;addr&squot; where bit &squot;0&squot;&n; * is in the highest of the four bytes and bit &squot;31&squot; is the high bit&n; * within the first byte. Sparc is BIG-Endian. Unless noted otherwise&n; * all bit-ops return 0 if bit was previously clear and != 0 otherwise.&n; */
DECL|function|test_and_set_bit
r_extern
id|__inline__
r_int
id|test_and_set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_register
r_int
r_int
id|mask
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
r_register
r_int
r_int
op_star
id|ADDR
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|ADDR
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___set_bit
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|mask
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|mask
)paren
comma
l_string|&quot;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|mask
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|set_bit
r_extern
id|__inline__
r_void
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
(paren
r_void
)paren
id|test_and_set_bit
c_func
(paren
id|nr
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|test_and_clear_bit
r_extern
id|__inline__
r_int
id|test_and_clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_register
r_int
r_int
id|mask
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
r_register
r_int
r_int
op_star
id|ADDR
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|ADDR
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___clear_bit
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|mask
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|mask
)paren
comma
l_string|&quot;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|mask
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_void
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
(paren
r_void
)paren
id|test_and_clear_bit
c_func
(paren
id|nr
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|test_and_change_bit
r_extern
id|__inline__
r_int
id|test_and_change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_register
r_int
r_int
id|mask
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
r_register
r_int
r_int
op_star
id|ADDR
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|ADDR
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___change_bit
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|mask
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|mask
)paren
comma
l_string|&quot;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|mask
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_void
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
(paren
r_void
)paren
id|test_and_change_bit
c_func
(paren
id|nr
comma
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;do { } while(0)
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;do { } while(0)
multiline_comment|/* The following routine need not be atomic. */
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_return
(paren
l_int|1
op_amp
(paren
(paren
(paren
id|__const__
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|5
)braket
op_rshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
)paren
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/* The easy/cheese version for now. */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
r_int
id|result
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|word
op_amp
l_int|1
)paren
(brace
id|result
op_increment
suffix:semicolon
id|word
op_rshift_assign
l_int|1
suffix:semicolon
)brace
r_return
id|result
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * ffs: find first bit set. This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|macro|ffs
mdefine_line|#define ffs(x) generic_ffs(x)
multiline_comment|/*&n; * hweightN: returns the hamming weight (i.e. the number&n; * of bits set) of a N-bit word&n; */
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x) generic_hweight8(x)
macro_line|#endif /* __KERNEL__ */
multiline_comment|/* find_next_zero_bit() finds the first zero bit in a bit string of length&n; * &squot;size&squot; bits, starting the search at bit &squot;offset&squot;. This is largely based&n; * on Linus&squot;s ALPHA routines, which are pretty portable BTW.&n; */
DECL|function|find_next_zero_bit
r_extern
id|__inline__
r_int
r_int
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0UL
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
multiline_comment|/* Linus sez that gcc can optimize the following correctly, we&squot;ll see if this&n; * holds on the Sparc as it does for the ALPHA.&n; */
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
macro_line|#ifndef __KERNEL__
DECL|function|set_le_bit
r_extern
id|__inline__
r_int
id|set_le_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ldub
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g3
op_logical_or
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|stb
op_mod
op_mod
id|g2
comma
(braket
op_mod
l_int|0
)braket
op_logical_and
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
)paren
suffix:semicolon
r_return
(paren
r_int
)paren
id|ADDR
suffix:semicolon
)brace
DECL|function|clear_le_bit
r_extern
id|__inline__
r_int
id|clear_le_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
r_int
r_char
op_star
id|ADDR
op_assign
(paren
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ldub
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g3
id|andn
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|stb
op_mod
op_mod
id|g2
comma
(braket
op_mod
l_int|0
)braket
op_logical_and
op_mod
op_mod
id|g3
comma
op_mod
l_int|2
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;r&quot;
(paren
id|mask
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
)paren
suffix:semicolon
r_return
(paren
r_int
)paren
id|ADDR
suffix:semicolon
)brace
macro_line|#else /* __KERNEL__ */
multiline_comment|/* Now for the ext2 filesystem bit operations and helper routines. */
DECL|function|set_le_bit
r_extern
id|__inline__
r_int
id|set_le_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_register
r_int
id|mask
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
r_register
r_int
r_char
op_star
id|ADDR
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|ADDR
op_assign
(paren
(paren
r_int
r_char
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|3
)paren
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___set_le_bit
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|mask
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|mask
)paren
comma
l_string|&quot;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|mask
suffix:semicolon
)brace
DECL|function|clear_le_bit
r_extern
id|__inline__
r_int
id|clear_le_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_register
r_int
id|mask
id|asm
c_func
(paren
l_string|&quot;g2&quot;
)paren
suffix:semicolon
r_register
r_int
r_char
op_star
id|ADDR
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|ADDR
op_assign
(paren
(paren
r_int
r_char
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|3
)paren
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___clear_le_bit
id|add
op_mod
op_mod
id|o7
comma
l_int|8
comma
op_mod
op_mod
id|o7
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|mask
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|mask
)paren
comma
l_string|&quot;r&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|mask
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
DECL|function|test_le_bit
r_extern
id|__inline__
r_int
id|test_le_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
id|__const__
r_int
r_char
op_star
id|ADDR
op_assign
(paren
id|__const__
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit   set_le_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit clear_le_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit  test_le_bit
macro_line|#endif /* __KERNEL__ */
DECL|macro|find_first_zero_le_bit
mdefine_line|#define find_first_zero_le_bit(addr, size) &bslash;&n;        find_next_zero_le_bit((addr), (size), 0)
DECL|function|find_next_zero_le_bit
r_extern
id|__inline__
r_int
r_int
id|find_next_zero_le_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
id|__swab32
c_func
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_assign
id|__swab32
c_func
(paren
id|tmp
)paren
op_or
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0UL
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
)paren
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit     find_first_zero_le_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit      find_next_zero_le_bit
multiline_comment|/* Bitmap functions for the minix filesystem.  */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr) test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* defined(_SPARC_BITOPS_H) */
eof
