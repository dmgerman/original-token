multiline_comment|/* smp_lock.h: SMP locking primitives on Sparc.&n; *&n; * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef __SPARC_SMPLOCK_H
DECL|macro|__SPARC_SMPLOCK_H
mdefine_line|#define __SPARC_SMPLOCK_H
macro_line|#include &lt;asm/smp.h&gt;
macro_line|#include &lt;asm/ptrace.h&gt;
macro_line|#ifndef __SMP__
DECL|macro|lock_kernel
mdefine_line|#define lock_kernel()&t;&t;do { } while(0)
DECL|macro|unlock_kernel
mdefine_line|#define unlock_kernel()&t;&t;do { } while(0)
DECL|typedef|spinlock_t
r_typedef
r_struct
(brace
)brace
id|spinlock_t
suffix:semicolon
DECL|macro|SPIN_LOCK_UNLOCKED
mdefine_line|#define SPIN_LOCK_UNLOCKED
DECL|macro|spin_lock_init
mdefine_line|#define spin_lock_init(lock)&t;do { } while(0)
DECL|macro|spin_lock
mdefine_line|#define spin_lock(lock)&t;&t;do { } while(0)
DECL|macro|spin_trylock
mdefine_line|#define spin_trylock(lock)&t;do { } while(0)
DECL|macro|spin_unlock
mdefine_line|#define spin_unlock(lock)&t;do { } while(0)
DECL|macro|spin_lock_cli
mdefine_line|#define spin_lock_cli(lock)&t;&t;&bslash;&n;({&t;unsigned long flags;&t;&t;&bslash;&n;&t;save_flags(flags); cli();&t;&bslash;&n;&t;return flags;&t;&t;&t;&bslash;&n;})
DECL|macro|spin_unlock_restore
mdefine_line|#define spin_unlock_restore(lock, flags)&t;restore_flags(flags)
macro_line|#else
multiline_comment|/* The following acquire and release the master kernel global lock,&n; * the idea is that the usage of this mechanmism becomes less and less&n; * as time goes on, to the point where they are no longer needed at all&n; * and can thus disappear.&n; */
multiline_comment|/* Do not fuck with this without consulting arch/sparc/lib/locks.S first! */
DECL|function|lock_kernel
r_extern
id|__inline__
r_void
id|lock_kernel
c_func
(paren
r_void
)paren
(brace
r_register
r_struct
id|klock_info
op_star
id|klip
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
r_register
r_int
id|proc
id|asm
c_func
(paren
l_string|&quot;g5&quot;
)paren
suffix:semicolon
id|klip
op_assign
op_amp
id|klock_info
suffix:semicolon
id|proc
op_assign
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___lock_kernel
id|ld
(braket
op_mod
op_mod
id|g6
op_plus
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g2
l_string|&quot;&t;: : &quot;
id|i
l_string|&quot; (AOFF_task_lock_depth), &quot;
id|r
l_string|&quot; (klip), &quot;
id|r
"&quot;"
(paren
id|proc
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/* Release kernel global lock. */
DECL|function|unlock_kernel
r_extern
id|__inline__
r_void
id|unlock_kernel
c_func
(paren
r_void
)paren
(brace
r_register
r_struct
id|klock_info
op_star
id|klip
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|klip
op_assign
op_amp
id|klock_info
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___unlock_kernel
id|ld
(braket
op_mod
op_mod
id|g6
op_plus
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g2
l_string|&quot;&t;: : &quot;
id|i
l_string|&quot; (AOFF_task_lock_depth), &quot;
id|r
"&quot;"
(paren
id|klip
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/* Simple spin lock operations.  There are two variants, one clears IRQ&squot;s&n; * on the local processor, one does not.&n; */
DECL|typedef|spinlock_t
r_typedef
r_int
r_char
id|spinlock_t
suffix:semicolon
DECL|macro|SPIN_LOCK_UNLOCKED
mdefine_line|#define SPIN_LOCK_UNLOCKED&t;0
DECL|function|spin_lock_init
r_extern
id|__inline__
r_void
id|spin_lock_init
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
op_star
id|lock
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|spin_lock
r_extern
id|__inline__
r_void
id|spin_lock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_register
id|spinlock_t
op_star
id|lp
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|lp
op_assign
id|lock
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ldstub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
id|orcc
op_mod
op_mod
id|g2
comma
l_int|0x0
comma
op_mod
op_mod
id|g0
id|be
l_float|1f
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___spinlock_waitfor
id|ldub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
l_int|1
suffix:colon
"&quot;"
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|lp
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|spin_trylock
r_extern
id|__inline__
r_int
id|spin_trylock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ldstub
(braket
op_mod
l_int|1
)braket
comma
op_mod
l_int|0
l_string|&quot;&t;: &quot;
op_assign
id|r
l_string|&quot; (result) : &quot;
id|r
l_string|&quot; (lock) : &quot;
id|memory
"&quot;"
)paren
suffix:semicolon
r_return
(paren
id|result
op_eq
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|spin_unlock
r_extern
id|__inline__
r_void
id|spin_unlock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stb&t;%%g0, [%0]&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|lock
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/* These variants clear interrupts and return save_flags() style flags&n; * to the caller when acquiring a lock.  To release the lock you must&n; * pass the lock pointer as well as the flags returned from the acquisition&n; * routine when releasing the lock.&n; */
DECL|function|spin_lock_cli
r_extern
id|__inline__
r_int
r_int
id|spin_lock_cli
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_register
id|spinlock_t
op_star
id|lp
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
r_register
r_int
r_int
id|flags
id|asm
c_func
(paren
l_string|&quot;g3&quot;
)paren
suffix:semicolon
id|lp
op_assign
id|lock
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g3
op_logical_or
op_mod
op_mod
id|g3
comma
op_mod
l_int|1
comma
op_mod
op_mod
id|g4
id|wr
op_mod
op_mod
id|g4
comma
l_int|0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|ldstub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
id|orcc
op_mod
op_mod
id|g2
comma
l_int|0x0
comma
op_mod
op_mod
id|g0
id|be
l_float|1f
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___spinlock_waitfor
id|ldub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
l_int|1
suffix:colon
l_string|&quot;&t;: &quot;
op_assign
id|r
"&quot;"
(paren
id|flags
)paren
suffix:colon
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
comma
l_string|&quot;r&quot;
(paren
id|lp
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|flags
suffix:semicolon
)brace
DECL|function|spin_unlock_restore
r_extern
id|__inline__
r_void
id|spin_unlock_restore
c_func
(paren
id|spinlock_t
op_star
id|lock
comma
r_int
r_int
id|flags
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|stb
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
)braket
id|wr
op_mod
l_int|1
comma
l_int|0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
"&quot;"
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|lock
)paren
comma
l_string|&quot;r&quot;
(paren
id|flags
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif /* !(__SPARC_SMPLOCK_H) */
macro_line|#endif /* (__SMP__) */
eof
