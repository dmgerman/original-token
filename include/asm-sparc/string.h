multiline_comment|/* string.h: External definitions for optimized assembly string&n; *           routines for the Linux Kernel.&n; *&n; * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef _SPARC_STRING_H
DECL|macro|_SPARC_STRING_H
mdefine_line|#define _SPARC_STRING_H
DECL|function|strlen
r_extern
id|__inline__
r_int
id|strlen
c_func
(paren
r_const
r_char
op_star
id|str
)paren
(brace
r_const
r_char
op_star
id|sc
suffix:semicolon
r_for
c_loop
(paren
id|sc
op_assign
id|str
suffix:semicolon
op_star
id|sc
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|sc
)paren
multiline_comment|/* nothing */
suffix:semicolon
r_return
id|sc
op_minus
id|str
suffix:semicolon
)brace
DECL|function|strcmp
r_extern
id|__inline__
r_int
id|strcmp
c_func
(paren
r_const
r_char
op_star
id|str1
comma
r_const
r_char
op_star
id|str2
)paren
(brace
r_register
r_int
r_char
id|__res
suffix:semicolon
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
(paren
id|__res
op_assign
op_star
id|str1
op_minus
op_star
id|str2
op_increment
)paren
op_ne
l_int|0
op_logical_or
op_logical_neg
op_star
id|str1
op_increment
)paren
r_break
suffix:semicolon
)brace
r_return
id|__res
suffix:semicolon
)brace
DECL|function|strncmp
r_extern
id|__inline__
r_int
id|strncmp
c_func
(paren
r_const
r_char
op_star
id|str1
comma
r_const
r_char
op_star
id|str2
comma
r_int
id|strlen
)paren
(brace
r_register
r_int
r_char
id|__res
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|strlen
)paren
(brace
r_if
c_cond
(paren
(paren
id|__res
op_assign
op_star
id|str1
op_minus
op_star
id|str2
op_increment
)paren
op_ne
l_int|0
op_logical_or
op_logical_neg
op_star
id|str1
op_increment
)paren
r_break
suffix:semicolon
id|strlen
op_decrement
suffix:semicolon
)brace
r_return
id|__res
suffix:semicolon
)brace
DECL|function|strcpy
r_extern
id|__inline__
r_char
op_star
id|strcpy
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|source
)paren
(brace
r_char
op_star
id|tmp
op_assign
id|dest
suffix:semicolon
r_while
c_loop
(paren
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|source
op_increment
)paren
op_ne
l_char|&squot;&bslash;0&squot;
)paren
multiline_comment|/* nothing */
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|strncpy
r_extern
id|__inline__
r_char
op_star
id|strncpy
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|source
comma
r_int
id|cpylen
)paren
(brace
r_char
op_star
id|tmp
op_assign
id|dest
suffix:semicolon
r_while
c_loop
(paren
id|cpylen
op_decrement
op_logical_and
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|source
op_increment
)paren
op_ne
l_char|&squot;&bslash;0&squot;
)paren
multiline_comment|/* nothing */
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|strcat
r_extern
id|__inline__
r_char
op_star
id|strcat
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|src
)paren
(brace
r_char
op_star
id|tmp
op_assign
id|dest
suffix:semicolon
r_while
c_loop
(paren
op_star
id|dest
)paren
id|dest
op_increment
suffix:semicolon
r_while
c_loop
(paren
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|src
op_increment
)paren
op_ne
l_char|&squot;&bslash;0&squot;
)paren
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|strncat
r_extern
id|__inline__
r_char
op_star
id|strncat
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|src
comma
r_int
id|len
)paren
(brace
r_char
op_star
id|tmp
op_assign
id|dest
suffix:semicolon
r_if
c_cond
(paren
id|len
)paren
(brace
r_while
c_loop
(paren
op_star
id|dest
)paren
id|dest
op_increment
suffix:semicolon
r_while
c_loop
(paren
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|src
op_increment
)paren
)paren
(brace
r_if
c_cond
(paren
op_decrement
id|len
op_eq
l_int|0
)paren
r_break
suffix:semicolon
)brace
)brace
r_return
id|tmp
suffix:semicolon
)brace
DECL|function|strchr
r_extern
id|__inline__
r_char
op_star
id|strchr
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_int
id|c
)paren
(brace
r_for
c_loop
(paren
suffix:semicolon
op_star
id|src
op_ne
id|c
suffix:semicolon
op_increment
id|src
)paren
r_if
c_cond
(paren
op_star
id|src
op_eq
l_char|&squot;&bslash;0&squot;
)paren
r_return
l_int|NULL
suffix:semicolon
r_return
(paren
r_char
op_star
)paren
id|src
suffix:semicolon
)brace
DECL|function|strpbrk
r_extern
id|__inline__
r_char
op_star
id|strpbrk
c_func
(paren
r_const
r_char
op_star
id|cs
comma
r_const
r_char
op_star
id|ct
)paren
(brace
r_const
r_char
op_star
id|sc1
comma
op_star
id|sc2
suffix:semicolon
r_for
c_loop
(paren
id|sc1
op_assign
id|cs
suffix:semicolon
op_star
id|sc1
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|sc1
)paren
(brace
r_for
c_loop
(paren
id|sc2
op_assign
id|ct
suffix:semicolon
op_star
id|sc2
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|sc2
)paren
(brace
r_if
c_cond
(paren
op_star
id|sc1
op_eq
op_star
id|sc2
)paren
r_return
(paren
r_char
op_star
)paren
id|sc1
suffix:semicolon
)brace
)brace
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|strspn
r_extern
id|__inline__
r_int
id|strspn
c_func
(paren
r_const
r_char
op_star
id|s
comma
r_const
r_char
op_star
id|accept
)paren
(brace
r_const
r_char
op_star
id|p
suffix:semicolon
r_const
r_char
op_star
id|a
suffix:semicolon
r_int
id|count
op_assign
l_int|0
suffix:semicolon
r_for
c_loop
(paren
id|p
op_assign
id|s
suffix:semicolon
op_star
id|p
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|p
)paren
(brace
r_for
c_loop
(paren
id|a
op_assign
id|accept
suffix:semicolon
op_star
id|a
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|a
)paren
(brace
r_if
c_cond
(paren
op_star
id|p
op_eq
op_star
id|a
)paren
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
op_star
id|a
op_eq
l_char|&squot;&bslash;0&squot;
)paren
r_return
id|count
suffix:semicolon
op_increment
id|count
suffix:semicolon
)brace
r_return
id|count
suffix:semicolon
)brace
DECL|function|strtok
r_extern
id|__inline__
r_char
op_star
id|strtok
c_func
(paren
r_char
op_star
id|s
comma
r_const
r_char
op_star
id|ct
)paren
(brace
r_char
op_star
id|sbegin
comma
op_star
id|send
suffix:semicolon
id|sbegin
op_assign
id|s
ques
c_cond
id|s
suffix:colon
id|___strtok
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|sbegin
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
id|sbegin
op_add_assign
id|strspn
c_func
(paren
id|sbegin
comma
id|ct
)paren
suffix:semicolon
r_if
c_cond
(paren
op_star
id|sbegin
op_eq
l_char|&squot;&bslash;0&squot;
)paren
(brace
id|___strtok
op_assign
l_int|NULL
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|send
op_assign
id|strpbrk
c_func
(paren
id|sbegin
comma
id|ct
)paren
suffix:semicolon
r_if
c_cond
(paren
id|send
op_logical_and
op_star
id|send
op_ne
l_char|&squot;&bslash;0&squot;
)paren
op_star
id|send
op_increment
op_assign
l_char|&squot;&bslash;0&squot;
suffix:semicolon
id|___strtok
op_assign
id|send
suffix:semicolon
r_return
(paren
id|sbegin
)paren
suffix:semicolon
)brace
DECL|function|memset
r_extern
id|__inline__
r_void
op_star
id|memset
c_func
(paren
r_void
op_star
id|src
comma
r_int
id|c
comma
r_int
id|count
)paren
(brace
r_char
op_star
id|xs
op_assign
(paren
r_char
op_star
)paren
id|src
suffix:semicolon
r_while
c_loop
(paren
id|count
op_decrement
)paren
op_star
id|xs
op_increment
op_assign
id|c
suffix:semicolon
r_return
id|src
suffix:semicolon
)brace
DECL|function|memcpy
r_extern
id|__inline__
r_void
op_star
id|memcpy
c_func
(paren
r_void
op_star
id|dest
comma
r_const
r_void
op_star
id|src
comma
r_int
id|count
)paren
(brace
r_char
op_star
id|tmp
op_assign
(paren
r_char
op_star
)paren
id|dest
comma
op_star
id|s
op_assign
(paren
r_char
op_star
)paren
id|src
suffix:semicolon
r_while
c_loop
(paren
id|count
op_decrement
)paren
op_star
id|tmp
op_increment
op_assign
op_star
id|s
op_increment
suffix:semicolon
r_return
id|dest
suffix:semicolon
)brace
DECL|function|memmove
r_extern
id|__inline__
r_void
op_star
id|memmove
c_func
(paren
r_void
op_star
id|dest
comma
r_const
r_void
op_star
id|src
comma
r_int
id|count
)paren
(brace
r_char
op_star
id|tmp
comma
op_star
id|s
suffix:semicolon
r_if
c_cond
(paren
id|dest
op_le
id|src
)paren
(brace
id|tmp
op_assign
(paren
r_char
op_star
)paren
id|dest
suffix:semicolon
id|s
op_assign
(paren
r_char
op_star
)paren
id|src
suffix:semicolon
r_while
c_loop
(paren
id|count
op_decrement
)paren
op_star
id|tmp
op_increment
op_assign
op_star
id|s
op_increment
suffix:semicolon
)brace
r_else
(brace
id|tmp
op_assign
(paren
r_char
op_star
)paren
id|dest
op_plus
id|count
suffix:semicolon
id|s
op_assign
(paren
r_char
op_star
)paren
id|src
op_plus
id|count
suffix:semicolon
r_while
c_loop
(paren
id|count
op_decrement
)paren
op_star
op_decrement
id|tmp
op_assign
op_star
op_decrement
id|s
suffix:semicolon
)brace
r_return
id|dest
suffix:semicolon
)brace
DECL|function|memcmp
r_extern
id|__inline__
r_int
id|memcmp
c_func
(paren
r_const
r_void
op_star
id|cs
comma
r_const
r_void
op_star
id|ct
comma
r_int
id|count
)paren
(brace
r_const
r_int
r_char
op_star
id|su1
comma
op_star
id|su2
suffix:semicolon
r_int
r_char
id|res
op_assign
l_int|0
suffix:semicolon
r_for
c_loop
(paren
id|su1
op_assign
id|cs
comma
id|su2
op_assign
id|ct
suffix:semicolon
l_int|0
OL
id|count
suffix:semicolon
op_increment
id|su1
comma
op_increment
id|su2
comma
id|count
op_decrement
)paren
r_if
c_cond
(paren
(paren
id|res
op_assign
op_star
id|su1
op_minus
op_star
id|su2
)paren
op_ne
l_int|0
)paren
r_break
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
macro_line|#endif /* !(_SPARC_STRING_H) */
eof
