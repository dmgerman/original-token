multiline_comment|/* vac-ops.h: Inline assembly routines to do operations on the Sparc&n;              VAC (virtual address cache).&n;&n;   Copyright (C) 1994, David S. Miller (davem@caip.rutgers.edu)&n;*/
multiline_comment|/* enable_vac() enables the virtual address cache. It returns 0 on&n;   success, 1 on failure.&n;*/
DECL|function|enable_vac
r_extern
id|__inline__
r_int
id|enable_vac
c_func
(paren
)paren
(brace
r_int
id|success
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduba [0x40000000] 0x2, %0&bslash;n&bslash;t&quot;
l_string|&quot;or    %0, 0x10, %0&bslash;n&bslash;t&quot;
l_string|&quot;stba  %0, [0x40000000] 0x2&bslash;n&bslash;t&quot;
l_string|&quot;or    %g0, %g0, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|success
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|success
)paren
)paren
suffix:semicolon
r_return
id|success
suffix:semicolon
)brace
multiline_comment|/* disable_vac() disables the virtual address cache. It returns 0 on&n;   success, 1 on failure.&n;*/
DECL|function|disable_vac
r_extern
id|__inline__
r_int
id|disable_vac
c_func
(paren
)paren
(brace
r_int
id|success
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduba [0x40000000] 0x2, %0&bslash;n&bslash;t&quot;
l_string|&quot;xor   %0, 0x10, %0&bslash;n&bslash;t&quot;
l_string|&quot;stba  %0, [0x40000000] 0x2&bslash;n&bslash;t&quot;
l_string|&quot;or    %g0, %g0, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|success
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|success
)paren
)paren
suffix:semicolon
r_return
id|success
suffix:semicolon
)brace
multiline_comment|/* Various one-shot VAC entry flushes on the Sparc */
DECL|function|hw_flush_vac_context_entry
r_extern
id|__inline__
r_void
id|hw_flush_vac_context_entry
c_func
(paren
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta 0, [%0] 0x7&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|sw_flush_vac_context_entry
r_extern
id|__inline__
r_void
id|sw_flush_vac_context_entry
c_func
(paren
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta 0, [%0] 0xe&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|hw_flush_vac_segment_entry
r_extern
id|__inline__
r_void
id|hw_flush_vac_segment_entry
c_func
(paren
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta 0, [%0] 0x5&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|sw_flush_vac_segment_entry
r_extern
id|__inline__
r_void
id|sw_flush_vac_segment_entry
c_func
(paren
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta 0, [%0], 0xc&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|hw_flush_vac_page_entry
r_extern
id|__inline__
r_void
id|hw_flush_vac_page_entry
c_func
(paren
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta 0, [%0] 0x6&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|sw_flush_vac_page_entry
r_extern
id|__inline__
r_void
id|sw_flush_vac_page_entry
c_func
(paren
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta 0, [%0] 0xd&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
eof
