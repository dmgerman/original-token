multiline_comment|/* spinlock.h: 32-bit Sparc spinlock support.&n; *&n; * Copyright (C) 1997 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef __SPARC_SPINLOCK_H
DECL|macro|__SPARC_SPINLOCK_H
mdefine_line|#define __SPARC_SPINLOCK_H
macro_line|#ifndef __ASSEMBLY__
macro_line|#ifndef __SMP__
DECL|typedef|spinlock_t
r_typedef
r_struct
(brace
)brace
id|spinlock_t
suffix:semicolon
DECL|macro|SPIN_LOCK_UNLOCKED
mdefine_line|#define SPIN_LOCK_UNLOCKED { }
DECL|macro|spin_lock_init
mdefine_line|#define spin_lock_init(lock)&t;do { } while(0)
DECL|macro|spin_lock
mdefine_line|#define spin_lock(lock)&t;&t;do { } while(0)
DECL|macro|spin_trylock
mdefine_line|#define spin_trylock(lock)&t;do { } while(0)
DECL|macro|spin_unlock
mdefine_line|#define spin_unlock(lock)&t;do { } while(0)
DECL|macro|spin_lock_irq
mdefine_line|#define spin_lock_irq(lock)&t;cli()
DECL|macro|spin_unlock_irq
mdefine_line|#define spin_unlock_irq(lock)&t;sti()
DECL|macro|spin_lock_irqsave
mdefine_line|#define spin_lock_irqsave(lock, flags)&t;&t;save_and_cli(flags)
DECL|macro|spin_unlock_irqrestore
mdefine_line|#define spin_unlock_irqrestore(lock, flags)&t;restore_flags(flags)
macro_line|#else /* !(__SMP__) */
macro_line|#include &lt;asm/psr.h&gt;
DECL|typedef|spinlock_t
r_typedef
r_int
r_char
id|spinlock_t
suffix:semicolon
DECL|macro|SPIN_LOCK_UNLOCKED
mdefine_line|#define SPIN_LOCK_UNLOCKED&t;0
DECL|function|spin_lock
r_extern
id|__inline__
r_void
id|spin_lock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_register
id|spinlock_t
op_star
id|lp
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|lp
op_assign
id|lock
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|ldstub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
id|orcc
op_mod
op_mod
id|g2
comma
l_int|0x0
comma
op_mod
op_mod
id|g0
id|be
l_float|1f
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___spinlock_waitfor
id|ldub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
l_int|1
suffix:colon
"&quot;"
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|lp
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
DECL|function|spin_trylock
r_extern
id|__inline__
r_int
id|spin_trylock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;ldstub [%1], %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|lock
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
(paren
id|result
op_eq
l_int|0
)paren
suffix:semicolon
)brace
DECL|function|spin_unlock
r_extern
id|__inline__
r_void
id|spin_unlock
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stb %%g0, [%0]&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|lock
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|spin_lock_irq
r_extern
id|__inline__
r_void
id|spin_lock_irq
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
r_register
id|spinlock_t
op_star
id|lp
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|lp
op_assign
id|lock
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g2
op_logical_or
op_mod
op_mod
id|g2
comma
op_mod
l_int|0
comma
op_mod
op_mod
id|g2
id|wr
op_mod
op_mod
id|g2
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|ldstub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
id|orcc
op_mod
op_mod
id|g2
comma
l_int|0x0
comma
op_mod
op_mod
id|g0
id|be
l_float|1f
id|mov
op_mod
op_mod
id|o7
comma
op_mod
op_mod
id|g4
id|call
id|___spinlock_waitfor
id|ldub
(braket
op_mod
op_mod
id|g1
)braket
comma
op_mod
op_mod
id|g2
l_int|1
suffix:colon
"&quot;"
suffix:colon
multiline_comment|/* No outputs */
suffix:colon
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
comma
l_string|&quot;r&quot;
(paren
id|lp
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;g4&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
DECL|function|spin_unlock_irq
r_extern
id|__inline__
r_void
id|spin_unlock_irq
c_func
(paren
id|spinlock_t
op_star
id|lock
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g2
id|andn
op_mod
op_mod
id|g2
comma
op_mod
l_int|1
comma
op_mod
op_mod
id|g2
id|stb
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
)braket
id|wr
op_mod
op_mod
id|g2
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
"&quot;"
suffix:colon
multiline_comment|/* No outputs. */
suffix:colon
l_string|&quot;r&quot;
(paren
id|lock
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g2&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|spin_lock_irqsave
mdefine_line|#define spin_lock_irqsave(lock, flags)&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;register spinlock_t *lp asm(&quot;g1&quot;);&t;&bslash;&n;&t;lp = lock;&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&t;&t;&t;&bslash;&n;&t;&quot;rd&t;%%psr, %0&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&quot;or&t;%0, %1, %%g2&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&quot;wr&t;%%g2, 0x0, %%psr&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&quot;nop; nop; nop;&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&quot;ldstub&t;[%%g1], %%g2&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&quot;orcc&t;%%g2, 0x0, %%g0&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&quot;be&t;1f&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;&quot; mov&t;%%o7, %%g4&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&quot;call&t;___spinlock_waitfor&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&quot; ldub&t;[%%g1], %%g2&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&quot;1:&quot;&t;: &quot;=r&quot; (flags)&t;&t;&t;&t;&bslash;&n;&t;: &quot;i&quot; (PSR_PIL), &quot;r&quot; (lp)&t;&t;&bslash;&n;&t;: &quot;g2&quot;, &quot;g4&quot;, &quot;memory&quot;, &quot;cc&quot;);&t;&t;&bslash;&n;} while(0)
DECL|function|spin_unlock_irqrestore
r_extern
id|__inline__
r_void
id|spin_unlock_irqrestore
c_func
(paren
id|spinlock_t
op_star
id|lock
comma
r_int
r_int
id|flags
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|stb
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
)braket
id|wr
op_mod
l_int|1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
"&quot;"
suffix:colon
multiline_comment|/* No outputs. */
suffix:colon
l_string|&quot;r&quot;
(paren
id|lock
)paren
comma
l_string|&quot;r&quot;
(paren
id|flags
)paren
suffix:colon
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif /* __SMP__ */
macro_line|#endif /* !(__ASSEMBLY__) */
macro_line|#endif /* __SPARC_SPINLOCK_H */
eof
