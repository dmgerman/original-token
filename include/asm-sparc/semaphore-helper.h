macro_line|#ifndef _SPARC_SEMAPHORE_HELPER_H
DECL|macro|_SPARC_SEMAPHORE_HELPER_H
mdefine_line|#define _SPARC_SEMAPHORE_HELPER_H
macro_line|#include &lt;linux/config.h&gt;
multiline_comment|/*&n; * (barely) SMP- and interrupt-safe semaphore helper functions, sparc version.&n; *&n; * (C) Copyright 1999 David S. Miller (davem@redhat.com)&n; * (C) Copyright 1999 Jakub Jelinek (jj@ultra.linux.cz)&n; */
DECL|macro|wake_one_more
mdefine_line|#define wake_one_more(sem)&t;atomic_inc(&amp;(sem)-&gt;waking)
DECL|function|waking_non_zero
r_static
id|__inline__
r_int
id|waking_non_zero
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
suffix:semicolon
macro_line|#ifdef CONFIG_SMP
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g1
op_logical_or
op_mod
op_mod
id|g1
comma
op_mod
l_int|3
comma
op_mod
l_int|0
id|wr
op_mod
l_int|0
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
l_int|1
suffix:colon
id|ldstub
(braket
op_mod
l_int|2
op_plus
l_int|3
)braket
comma
op_mod
l_int|0
id|tst
op_mod
l_int|0
id|bne
l_int|1
id|b
id|ld
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
id|andn
op_mod
l_int|0
comma
l_int|0xff
comma
op_mod
l_int|1
id|subcc
op_mod
l_int|0
comma
l_int|0x1ff
comma
op_mod
l_int|0
id|bl
comma
id|a
l_float|1f
id|mov
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|1
id|mov
l_int|1
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|st
op_mod
l_int|1
comma
(braket
op_mod
l_int|2
)braket
id|wr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|sem-&gt;waking
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
macro_line|#else
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g1
op_logical_or
op_mod
op_mod
id|g1
comma
op_mod
l_int|2
comma
op_mod
l_int|0
id|wr
op_mod
l_int|0
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|ld
(braket
op_mod
l_int|1
)braket
comma
op_mod
l_int|0
id|subcc
op_mod
l_int|0
comma
l_int|1
comma
op_mod
l_int|0
id|bl
comma
id|a
l_float|1f
id|mov
l_int|0
comma
op_mod
l_int|0
id|st
op_mod
l_int|0
comma
(braket
op_mod
l_int|1
)braket
id|mov
l_int|1
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|wr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|sem-&gt;waking
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
macro_line|#endif
r_return
id|ret
suffix:semicolon
)brace
DECL|function|waking_non_zero_interruptible
r_static
id|__inline__
r_int
id|waking_non_zero_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
comma
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
r_int
id|ret
suffix:semicolon
macro_line|#ifdef CONFIG_SMP
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g1
op_logical_or
op_mod
op_mod
id|g1
comma
op_mod
l_int|3
comma
op_mod
l_int|0
id|wr
op_mod
l_int|0
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
l_int|1
suffix:colon
id|ldstub
(braket
op_mod
l_int|2
op_plus
l_int|3
)braket
comma
op_mod
l_int|0
id|tst
op_mod
l_int|0
id|bne
l_int|1
id|b
id|ld
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
id|andn
op_mod
l_int|0
comma
l_int|0xff
comma
op_mod
l_int|1
id|subcc
op_mod
l_int|0
comma
l_int|0x1ff
comma
op_mod
l_int|0
id|bl
comma
id|a
l_float|1f
id|mov
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|1
id|mov
l_int|1
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|st
op_mod
l_int|1
comma
(braket
op_mod
l_int|2
)braket
id|wr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|sem-&gt;waking
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
macro_line|#else
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g1
op_logical_or
op_mod
op_mod
id|g1
comma
op_mod
l_int|2
comma
op_mod
l_int|0
id|wr
op_mod
l_int|0
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|ld
(braket
op_mod
l_int|1
)braket
comma
op_mod
l_int|0
id|subcc
op_mod
l_int|0
comma
l_int|1
comma
op_mod
l_int|0
id|bl
comma
id|a
l_float|1f
id|mov
l_int|0
comma
op_mod
l_int|0
id|st
op_mod
l_int|0
comma
(braket
op_mod
l_int|1
)braket
id|mov
l_int|1
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|wr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|sem-&gt;waking
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
macro_line|#endif
r_if
c_cond
(paren
id|ret
op_eq
l_int|0
op_logical_and
id|signal_pending
c_func
(paren
id|tsk
)paren
)paren
(brace
id|atomic_inc
c_func
(paren
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
id|ret
op_assign
op_minus
id|EINTR
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
DECL|function|waking_non_zero_trylock
r_static
id|__inline__
r_int
id|waking_non_zero_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
suffix:semicolon
macro_line|#ifdef CONFIG_SMP
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g1
op_logical_or
op_mod
op_mod
id|g1
comma
op_mod
l_int|3
comma
op_mod
l_int|0
id|wr
op_mod
l_int|0
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
l_int|1
suffix:colon
id|ldstub
(braket
op_mod
l_int|2
op_plus
l_int|3
)braket
comma
op_mod
l_int|0
id|tst
op_mod
l_int|0
id|bne
l_int|1
id|b
id|ld
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
id|andn
op_mod
l_int|0
comma
l_int|0xff
comma
op_mod
l_int|1
id|subcc
op_mod
l_int|0
comma
l_int|0x1ff
comma
op_mod
l_int|0
id|bl
comma
id|a
l_float|1f
id|mov
l_int|0
comma
op_mod
l_int|0
id|mov
op_mod
l_int|0
comma
op_mod
l_int|1
id|mov
l_int|1
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|st
op_mod
l_int|1
comma
(braket
op_mod
l_int|2
)braket
id|wr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|sem-&gt;waking
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
macro_line|#else
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|rd
op_mod
op_mod
id|psr
comma
op_mod
op_mod
id|g1
op_logical_or
op_mod
op_mod
id|g1
comma
op_mod
l_int|2
comma
op_mod
l_int|0
id|wr
op_mod
l_int|0
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|ld
(braket
op_mod
l_int|1
)braket
comma
op_mod
l_int|0
id|subcc
op_mod
l_int|0
comma
l_int|1
comma
op_mod
l_int|0
id|bl
comma
id|a
l_float|1f
id|mov
l_int|0
comma
op_mod
l_int|0
id|st
op_mod
l_int|0
comma
(braket
op_mod
l_int|1
)braket
id|mov
l_int|1
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|wr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|psr
id|nop
suffix:semicolon
id|nop
suffix:semicolon
id|nop
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|sem-&gt;waking
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSR_PIL
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
macro_line|#endif
id|ret
op_assign
op_logical_neg
id|ret
suffix:semicolon
r_if
c_cond
(paren
id|ret
op_eq
l_int|1
)paren
(brace
id|atomic_inc
c_func
(paren
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
)brace
r_return
id|ret
suffix:semicolon
)brace
macro_line|#endif /* !(_SPARC_SEMAPHORE_HELPER_H) */
eof
