multiline_comment|/*&n;   * Copyright 1996 The Australian National University.&n;   * Copyright 1996 Fujitsu Laboratories Limited&n;   * &n;   * This software may be distributed under the terms of the Gnu&n;   * Public License version 2 or later&n;  */
multiline_comment|/* this defines service requests that can be made by the cells of the &n;   front end &quot;bootap&quot; server &n;&n;   tridge, March 1996&n;   */
macro_line|#ifndef _APSERVICE_H
DECL|macro|_APSERVICE_H
mdefine_line|#define _APSERVICE_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/sched.h&gt;
macro_line|#endif
macro_line|#ifndef _ASM_
multiline_comment|/* all requests start with this structure */
DECL|struct|cap_request
r_struct
id|cap_request
(brace
DECL|member|header
r_int
id|header
suffix:semicolon
multiline_comment|/* for the hardware */
DECL|member|size
r_int
id|size
suffix:semicolon
multiline_comment|/* the total request size in bytes, including this header */
DECL|member|cid
r_int
id|cid
suffix:semicolon
multiline_comment|/* the cell it came from */
DECL|member|type
r_int
id|type
suffix:semicolon
multiline_comment|/* the type of request */
DECL|member|data
r_int
id|data
(braket
l_int|4
)braket
suffix:semicolon
multiline_comment|/* misc data */
)brace
suffix:semicolon
multiline_comment|/* Initialisation data to be sent to boot cell program */
DECL|struct|cap_init
r_struct
id|cap_init
(brace
DECL|member|bootcid
r_int
id|bootcid
suffix:semicolon
multiline_comment|/* base cid to boot */
DECL|member|numcells
r_int
id|numcells
suffix:semicolon
multiline_comment|/* number of cells */
DECL|member|physcells
r_int
id|physcells
suffix:semicolon
multiline_comment|/* physical number of cells */
DECL|member|baseIP
r_int
r_int
id|baseIP
suffix:semicolon
multiline_comment|/* IP address of cell 0 */
DECL|member|netmask
r_int
r_int
id|netmask
suffix:semicolon
multiline_comment|/* netmask of cells net */
DECL|member|gdbcell
r_int
id|gdbcell
suffix:semicolon
multiline_comment|/* what cell is the debugger running on */
DECL|member|init_time
r_int
id|init_time
suffix:semicolon
multiline_comment|/* time at startup */
)brace
suffix:semicolon
macro_line|#endif
multiline_comment|/* what fake host number to use for the aliased IP device */
DECL|macro|AP_ALIAS_IP
mdefine_line|#define AP_ALIAS_IP 2
multiline_comment|/* request types */
DECL|macro|REQ_WRITE
mdefine_line|#define REQ_WRITE 0
DECL|macro|REQ_SHUTDOWN
mdefine_line|#define REQ_SHUTDOWN 1
DECL|macro|REQ_LOAD_AOUT
mdefine_line|#define REQ_LOAD_AOUT 2
DECL|macro|REQ_PUTCHAR
mdefine_line|#define REQ_PUTCHAR 3
DECL|macro|REQ_GETBOOTARGS
mdefine_line|#define REQ_GETBOOTARGS 4       
DECL|macro|REQ_PUTDEBUGCHAR
mdefine_line|#define REQ_PUTDEBUGCHAR 5      
DECL|macro|REQ_GETDEBUGCHAR
mdefine_line|#define REQ_GETDEBUGCHAR 6     
DECL|macro|REQ_OPENNET
mdefine_line|#define REQ_OPENNET 7
DECL|macro|REQ_IP
mdefine_line|#define REQ_IP 8
DECL|macro|REQ_BREAK
mdefine_line|#define REQ_BREAK 9
DECL|macro|REQ_INIT
mdefine_line|#define REQ_INIT 10
DECL|macro|REQ_PUTDEBUGSTRING
mdefine_line|#define REQ_PUTDEBUGSTRING 11
DECL|macro|REQ_BREAD
mdefine_line|#define REQ_BREAD 12
DECL|macro|REQ_BWRITE
mdefine_line|#define REQ_BWRITE 13
DECL|macro|REQ_BOPEN
mdefine_line|#define REQ_BOPEN 14
DECL|macro|REQ_BCLOSE
mdefine_line|#define REQ_BCLOSE 15
DECL|macro|REQ_DDVOPEN
mdefine_line|#define REQ_DDVOPEN 16
DECL|macro|REQ_BIF_TOKEN
mdefine_line|#define REQ_BIF_TOKEN 17
DECL|macro|REQ_KILL
mdefine_line|#define REQ_KILL 18
DECL|macro|REQ_SCHEDULE
mdefine_line|#define REQ_SCHEDULE 19
multiline_comment|/* the bit used to indicate that the host wants the BIF */
DECL|macro|HOST_STATUS_BIT
mdefine_line|#define HOST_STATUS_BIT 2
macro_line|#ifdef __KERNEL__
multiline_comment|/* some prototypes */
r_extern
r_int
id|ap_dma_wait
c_func
(paren
r_int
id|ch
)paren
suffix:semicolon
r_extern
r_int
id|ap_dma_go
c_func
(paren
r_int
r_int
id|ch
comma
r_int
r_int
id|p
comma
r_int
id|size
comma
r_int
r_int
id|cmd
)paren
suffix:semicolon
r_extern
r_int
id|mpp_cid
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ap_start_debugger
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|bif_queue
c_func
(paren
r_struct
id|cap_request
op_star
id|req
comma
r_char
op_star
id|buf
comma
r_int
id|bufsize
)paren
suffix:semicolon
r_extern
r_void
id|write_bif_polled
c_func
(paren
r_char
op_star
id|buf1
comma
r_int
id|len1
comma
r_char
op_star
id|buf2
comma
r_int
id|len2
)paren
suffix:semicolon
r_extern
r_void
id|read_bif
c_func
(paren
r_char
op_star
id|buf
comma
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|ap_wait_request
c_func
(paren
r_struct
id|cap_request
op_star
id|req
comma
r_int
id|type
)paren
suffix:semicolon
r_extern
r_void
id|bif_set_poll
c_func
(paren
r_int
id|set
)paren
suffix:semicolon
r_extern
r_void
id|ap_led
c_func
(paren
r_int
r_char
id|d
)paren
suffix:semicolon
r_extern
r_void
id|ap_xor_led
c_func
(paren
r_int
r_char
id|d
)paren
suffix:semicolon
r_extern
r_void
id|ap_set_led
c_func
(paren
r_int
r_char
id|d
)paren
suffix:semicolon
r_extern
r_void
id|ap_unset_led
c_func
(paren
r_int
r_char
id|d
)paren
suffix:semicolon
r_extern
r_void
id|bif_toss
c_func
(paren
r_int
id|size
)paren
suffix:semicolon
r_void
id|ap_msc_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|mac_dma_complete
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|ap_dbg_flush
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|bif_queue_flush
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* void ap_printk(char *msg,int a1,int a2,int a3,int a4,int a5); */
r_void
id|show_mapping_ctx
c_func
(paren
r_int
op_star
id|ctp
comma
r_int
id|context
comma
r_int
id|Vm
)paren
suffix:semicolon
r_void
id|async_fault
c_func
(paren
r_int
r_int
id|address
comma
r_int
id|write
comma
r_int
id|taskid
comma
r_void
(paren
op_star
id|callback
)paren
(paren
r_int
comma
r_int
r_int
comma
r_int
comma
r_int
)paren
)paren
suffix:semicolon
r_void
id|ap_bif_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|ap_tnet_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|wait_on_int
c_func
(paren
r_volatile
r_int
op_star
id|p
comma
r_int
id|x
comma
r_int
id|interval
)paren
suffix:semicolon
r_void
id|ap_put
c_func
(paren
r_int
id|dest_cell
comma
id|u_long
id|local_addr
comma
r_int
id|size
comma
id|u_long
id|remote_addr
comma
id|u_long
id|dest_flag
comma
id|u_long
id|local_flag
)paren
suffix:semicolon
r_void
id|ap_bput
c_func
(paren
id|u_long
id|local_addr
comma
r_int
id|size
comma
id|u_long
id|remote_addr
comma
id|u_long
id|dest_flag
comma
id|u_long
id|local_flag
)paren
suffix:semicolon
r_void
id|msc_switch_check
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
)paren
suffix:semicolon
r_int
id|bif_queue_nocopy
c_func
(paren
r_struct
id|cap_request
op_star
id|req
comma
r_char
op_star
id|buf
comma
r_int
id|bufsize
)paren
suffix:semicolon
r_void
id|mpp_set_gang_factor
c_func
(paren
r_int
id|factor
)paren
suffix:semicolon
r_void
id|bif_register_request
c_func
(paren
r_int
id|type
comma
r_void
(paren
op_star
id|fn
)paren
(paren
r_struct
id|cap_request
op_star
)paren
)paren
suffix:semicolon
r_void
id|bif_add_debug_key
c_func
(paren
r_char
id|key
comma
r_void
(paren
op_star
id|fn
)paren
(paren
r_void
)paren
comma
r_char
op_star
id|description
)paren
suffix:semicolon
r_void
id|ap_complete
c_func
(paren
r_struct
id|cap_request
op_star
id|creq
)paren
suffix:semicolon
r_void
id|ap_reboot
c_func
(paren
r_char
op_star
id|bootstr
)paren
suffix:semicolon
macro_line|#endif
macro_line|#endif /* _APSERVICE_H */
eof
