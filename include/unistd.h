macro_line|#ifndef _UNISTD_H
DECL|macro|_UNISTD_H
mdefine_line|#define _UNISTD_H
multiline_comment|/* ok, this may be a joke, but I&squot;m working on it */
DECL|macro|_POSIX_VERSION
mdefine_line|#define _POSIX_VERSION 198808L
DECL|macro|_POSIX_CHOWN_RESTRICTED
mdefine_line|#define _POSIX_CHOWN_RESTRICTED&t;1    /* only root can do a chown (I think..) */
DECL|macro|_POSIX_NO_TRUNC
mdefine_line|#define _POSIX_NO_TRUNC&t;&t;1    /* no pathname truncation (but see kernel) */
DECL|macro|_POSIX_VDISABLE
mdefine_line|#define _POSIX_VDISABLE&t;&t;&squot;&bslash;0&squot; /* character to disable things like ^C */
DECL|macro|_POSIX_JOB_CONTROL
mdefine_line|#define _POSIX_JOB_CONTROL&t;1
DECL|macro|_POSIX_SAVED_IDS
mdefine_line|#define _POSIX_SAVED_IDS&t;1    /* Implemented, for whatever good it is */
DECL|macro|STDIN_FILENO
mdefine_line|#define STDIN_FILENO&t;0
DECL|macro|STDOUT_FILENO
mdefine_line|#define STDOUT_FILENO&t;1
DECL|macro|STDERR_FILENO
mdefine_line|#define STDERR_FILENO&t;2
macro_line|#ifndef NULL
DECL|macro|NULL
mdefine_line|#define NULL    ((void *)0)
macro_line|#endif
multiline_comment|/* access */
DECL|macro|F_OK
mdefine_line|#define F_OK&t;0
DECL|macro|X_OK
mdefine_line|#define X_OK&t;1
DECL|macro|W_OK
mdefine_line|#define W_OK&t;2
DECL|macro|R_OK
mdefine_line|#define R_OK&t;4
multiline_comment|/* lseek */
DECL|macro|SEEK_SET
mdefine_line|#define SEEK_SET&t;0
DECL|macro|SEEK_CUR
mdefine_line|#define SEEK_CUR&t;1
DECL|macro|SEEK_END
mdefine_line|#define SEEK_END&t;2
multiline_comment|/* _SC stands for System Configuration. We don&squot;t use them much */
DECL|macro|_SC_ARG_MAX
mdefine_line|#define _SC_ARG_MAX&t;&t;1
DECL|macro|_SC_CHILD_MAX
mdefine_line|#define _SC_CHILD_MAX&t;&t;2
DECL|macro|_SC_CLOCKS_PER_SEC
mdefine_line|#define _SC_CLOCKS_PER_SEC&t;3
DECL|macro|_SC_NGROUPS_MAX
mdefine_line|#define _SC_NGROUPS_MAX&t;&t;4
DECL|macro|_SC_OPEN_MAX
mdefine_line|#define _SC_OPEN_MAX&t;&t;5
DECL|macro|_SC_JOB_CONTROL
mdefine_line|#define _SC_JOB_CONTROL&t;&t;6
DECL|macro|_SC_SAVED_IDS
mdefine_line|#define _SC_SAVED_IDS&t;&t;7
DECL|macro|_SC_VERSION
mdefine_line|#define _SC_VERSION&t;&t;8
multiline_comment|/* more (possibly) configurable things - now pathnames */
DECL|macro|_PC_LINK_MAX
mdefine_line|#define _PC_LINK_MAX&t;&t;1
DECL|macro|_PC_MAX_CANON
mdefine_line|#define _PC_MAX_CANON&t;&t;2
DECL|macro|_PC_MAX_INPUT
mdefine_line|#define _PC_MAX_INPUT&t;&t;3
DECL|macro|_PC_NAME_MAX
mdefine_line|#define _PC_NAME_MAX&t;&t;4
DECL|macro|_PC_PATH_MAX
mdefine_line|#define _PC_PATH_MAX&t;&t;5
DECL|macro|_PC_PIPE_BUF
mdefine_line|#define _PC_PIPE_BUF&t;&t;6
DECL|macro|_PC_NO_TRUNC
mdefine_line|#define _PC_NO_TRUNC&t;&t;7
DECL|macro|_PC_VDISABLE
mdefine_line|#define _PC_VDISABLE&t;&t;8
DECL|macro|_PC_CHOWN_RESTRICTED
mdefine_line|#define _PC_CHOWN_RESTRICTED&t;9
macro_line|#if 0
multiline_comment|/* XXX - &lt;sys/stat.h&gt; illegally &lt;sys/types.h&gt; already.&n; * The rest of these includes are also illegal (too much pollution).&n; */
macro_line|#include &lt;sys/types.h&gt;
macro_line|#endif
macro_line|#include &lt;sys/stat.h&gt;
macro_line|#include &lt;sys/time.h&gt;
macro_line|#include &lt;sys/times.h&gt;
macro_line|#include &lt;sys/utsname.h&gt;
macro_line|#include &lt;sys/resource.h&gt;
macro_line|#include &lt;utime.h&gt;
macro_line|#ifdef __LIBRARY__
macro_line|#include &lt;linux/unistd.h&gt;
macro_line|#endif /* __LIBRARY__ */
multiline_comment|/* XXX - illegal. */
r_extern
r_int
id|errno
suffix:semicolon
multiline_comment|/* XXX - several non-POSIX functions here, and POSIX functions that are&n; * supposed to be declared elsewhere.  Non-promotion of short types in&n; * prototypes may cause trouble.  Arg names should be prefixed by&n; * underscores.&n; */
r_int
id|access
c_func
(paren
r_const
r_char
op_star
id|filename
comma
id|mode_t
id|mode
)paren
suffix:semicolon
multiline_comment|/* XXX - short type */
r_int
id|acct
c_func
(paren
r_const
r_char
op_star
id|filename
)paren
suffix:semicolon
r_int
id|brk
c_func
(paren
r_void
op_star
id|end_data_segment
)paren
suffix:semicolon
multiline_comment|/* XXX - POSIX says unsigned alarm(unsigned sec) */
r_int
id|alarm
c_func
(paren
r_int
id|sec
)paren
suffix:semicolon
r_void
op_star
id|sbrk
c_func
(paren
r_int
id|increment
)paren
suffix:semicolon
r_int
id|chdir
c_func
(paren
r_const
r_char
op_star
id|filename
)paren
suffix:semicolon
r_int
id|chmod
c_func
(paren
r_const
r_char
op_star
id|filename
comma
id|mode_t
id|mode
)paren
suffix:semicolon
multiline_comment|/* XXX - short type */
r_int
id|chown
c_func
(paren
r_const
r_char
op_star
id|filename
comma
id|uid_t
id|owner
comma
id|gid_t
id|group
)paren
suffix:semicolon
multiline_comment|/* XXX - shorts */
r_int
id|chroot
c_func
(paren
r_const
r_char
op_star
id|filename
)paren
suffix:semicolon
r_int
id|close
c_func
(paren
r_int
id|fildes
)paren
suffix:semicolon
r_int
id|creat
c_func
(paren
r_const
r_char
op_star
id|filename
comma
id|mode_t
id|mode
)paren
suffix:semicolon
multiline_comment|/* XXX - short type */
r_int
id|dup
c_func
(paren
r_int
id|fildes
)paren
suffix:semicolon
r_int
id|execve
c_func
(paren
r_const
r_char
op_star
id|filename
comma
r_char
op_star
op_star
id|argv
comma
r_char
op_star
op_star
id|envp
)paren
suffix:semicolon
r_int
id|execv
c_func
(paren
r_const
r_char
op_star
id|pathname
comma
r_char
op_star
op_star
id|argv
)paren
suffix:semicolon
r_int
id|execvp
c_func
(paren
r_const
r_char
op_star
id|file
comma
r_char
op_star
op_star
id|argv
)paren
suffix:semicolon
r_int
id|execl
c_func
(paren
r_const
r_char
op_star
id|pathname
comma
r_char
op_star
id|arg0
comma
dot
dot
dot
)paren
suffix:semicolon
r_int
id|execlp
c_func
(paren
r_const
r_char
op_star
id|file
comma
r_char
op_star
id|arg0
comma
dot
dot
dot
)paren
suffix:semicolon
r_int
id|execle
c_func
(paren
r_const
r_char
op_star
id|pathname
comma
r_char
op_star
id|arg0
comma
dot
dot
dot
)paren
suffix:semicolon
r_volatile
r_void
m_exit
(paren
r_int
id|status
)paren
suffix:semicolon
r_volatile
r_void
id|_exit
c_func
(paren
r_int
id|status
)paren
suffix:semicolon
r_int
id|fcntl
c_func
(paren
r_int
id|fildes
comma
r_int
id|cmd
comma
dot
dot
dot
)paren
suffix:semicolon
id|pid_t
id|fork
c_func
(paren
r_void
)paren
suffix:semicolon
id|pid_t
id|getpid
c_func
(paren
r_void
)paren
suffix:semicolon
id|uid_t
id|getuid
c_func
(paren
r_void
)paren
suffix:semicolon
id|uid_t
id|geteuid
c_func
(paren
r_void
)paren
suffix:semicolon
id|gid_t
id|getgid
c_func
(paren
r_void
)paren
suffix:semicolon
id|gid_t
id|getegid
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|ioctl
c_func
(paren
r_int
id|fildes
comma
r_int
id|cmd
comma
dot
dot
dot
)paren
suffix:semicolon
r_int
id|kill
c_func
(paren
id|pid_t
id|pid
comma
r_int
id|signal
)paren
suffix:semicolon
r_int
id|link
c_func
(paren
r_const
r_char
op_star
id|filename1
comma
r_const
r_char
op_star
id|filename2
)paren
suffix:semicolon
id|off_t
id|lseek
c_func
(paren
r_int
id|fildes
comma
id|off_t
id|offset
comma
r_int
id|origin
)paren
suffix:semicolon
r_int
id|mknod
c_func
(paren
r_const
r_char
op_star
id|filename
comma
id|mode_t
id|mode
comma
id|dev_t
id|dev
)paren
suffix:semicolon
multiline_comment|/* XXX - shorts */
r_int
id|mount
c_func
(paren
r_const
r_char
op_star
id|specialfile
comma
r_const
r_char
op_star
id|dir
comma
r_const
r_char
op_star
id|type
comma
r_int
id|rwflag
)paren
suffix:semicolon
r_int
id|nice
c_func
(paren
r_int
id|val
)paren
suffix:semicolon
r_int
id|open
c_func
(paren
r_const
r_char
op_star
id|filename
comma
r_int
id|flag
comma
dot
dot
dot
)paren
suffix:semicolon
r_int
id|pause
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|pipe
c_func
(paren
r_int
op_star
id|fildes
)paren
suffix:semicolon
multiline_comment|/* XXX**2 - POSIX says unsigned count */
r_int
id|read
c_func
(paren
r_int
id|fildes
comma
r_char
op_star
id|buf
comma
id|off_t
id|count
)paren
suffix:semicolon
r_int
id|setpgrp
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|setpgid
c_func
(paren
id|pid_t
id|pid
comma
id|pid_t
id|pgid
)paren
suffix:semicolon
multiline_comment|/* XXX - short types */
r_int
id|setuid
c_func
(paren
id|uid_t
id|uid
)paren
suffix:semicolon
multiline_comment|/* XXX - short type */
r_int
id|setgid
c_func
(paren
id|gid_t
id|gid
)paren
suffix:semicolon
multiline_comment|/* XXX - short type */
r_void
(paren
op_star
id|signal
c_func
(paren
r_int
id|sig
comma
r_void
(paren
op_star
id|fn
)paren
(paren
r_int
)paren
)paren
)paren
(paren
r_int
)paren
suffix:semicolon
r_int
id|stat
c_func
(paren
r_const
r_char
op_star
id|filename
comma
r_struct
id|stat
op_star
id|stat_buf
)paren
suffix:semicolon
r_int
id|fstat
c_func
(paren
r_int
id|fildes
comma
r_struct
id|stat
op_star
id|stat_buf
)paren
suffix:semicolon
r_int
id|stime
c_func
(paren
id|time_t
op_star
id|tptr
)paren
suffix:semicolon
r_int
id|sync
c_func
(paren
r_void
)paren
suffix:semicolon
id|time_t
id|time
c_func
(paren
id|time_t
op_star
id|tloc
)paren
suffix:semicolon
id|time_t
id|times
c_func
(paren
r_struct
id|tms
op_star
id|tbuf
)paren
suffix:semicolon
r_int
id|ulimit
c_func
(paren
r_int
id|cmd
comma
r_int
id|limit
)paren
suffix:semicolon
id|mode_t
id|umask
c_func
(paren
id|mode_t
id|mask
)paren
suffix:semicolon
r_int
id|umount
c_func
(paren
r_const
r_char
op_star
id|specialfile
)paren
suffix:semicolon
r_int
id|uname
c_func
(paren
r_struct
id|utsname
op_star
id|name
)paren
suffix:semicolon
r_int
id|unlink
c_func
(paren
r_const
r_char
op_star
id|filename
)paren
suffix:semicolon
r_int
id|ustat
c_func
(paren
id|dev_t
id|dev
comma
r_struct
id|ustat
op_star
id|ubuf
)paren
suffix:semicolon
r_int
id|utime
c_func
(paren
r_const
r_char
op_star
id|filename
comma
r_struct
id|utimbuf
op_star
id|times
)paren
suffix:semicolon
id|pid_t
id|waitpid
c_func
(paren
id|pid_t
id|pid
comma
r_int
op_star
id|wait_stat
comma
r_int
id|options
)paren
suffix:semicolon
id|pid_t
id|wait
c_func
(paren
r_int
op_star
id|wait_stat
)paren
suffix:semicolon
multiline_comment|/* XXX**2 - POSIX says unsigned count */
r_int
id|write
c_func
(paren
r_int
id|fildes
comma
r_const
r_char
op_star
id|buf
comma
id|off_t
id|count
)paren
suffix:semicolon
r_int
id|dup2
c_func
(paren
r_int
id|oldfd
comma
r_int
id|newfd
)paren
suffix:semicolon
r_int
id|getppid
c_func
(paren
r_void
)paren
suffix:semicolon
id|pid_t
id|getpgrp
c_func
(paren
r_void
)paren
suffix:semicolon
id|pid_t
id|setsid
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|sethostname
c_func
(paren
r_char
op_star
id|name
comma
r_int
id|len
)paren
suffix:semicolon
r_int
id|setrlimit
c_func
(paren
r_int
id|resource
comma
r_struct
id|rlimit
op_star
id|rlp
)paren
suffix:semicolon
r_int
id|getrlimit
c_func
(paren
r_int
id|resource
comma
r_struct
id|rlimit
op_star
id|rlp
)paren
suffix:semicolon
r_int
id|getrusage
c_func
(paren
r_int
id|who
comma
r_struct
id|rusage
op_star
id|rusage
)paren
suffix:semicolon
r_int
id|gettimeofday
c_func
(paren
r_struct
id|timeval
op_star
id|tv
comma
r_struct
id|timezone
op_star
id|tz
)paren
suffix:semicolon
r_int
id|settimeofday
c_func
(paren
r_struct
id|timeval
op_star
id|tv
comma
r_struct
id|timezone
op_star
id|tz
)paren
suffix:semicolon
r_int
id|getgroups
c_func
(paren
r_int
id|gidsetlen
comma
id|gid_t
op_star
id|gidset
)paren
suffix:semicolon
r_int
id|setgroups
c_func
(paren
r_int
id|gidsetlen
comma
id|gid_t
op_star
id|gidset
)paren
suffix:semicolon
r_int
id|select
c_func
(paren
r_int
id|width
comma
id|fd_set
op_star
id|readfds
comma
id|fd_set
op_star
id|writefds
comma
id|fd_set
op_star
id|exceptfds
comma
r_struct
id|timeval
op_star
id|timeout
)paren
suffix:semicolon
r_int
id|swapon
c_func
(paren
r_const
r_char
op_star
id|specialfile
)paren
suffix:semicolon
macro_line|#endif
eof
