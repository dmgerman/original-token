multiline_comment|/*&n; * driver_ops.h 1.15 2000/06/12 21:55:40&n; *&n; * The contents of this file are subject to the Mozilla Public License&n; * Version 1.1 (the &quot;License&quot;); you may not use this file except in&n; * compliance with the License. You may obtain a copy of the License&n; * at http://www.mozilla.org/MPL/&n; *&n; * Software distributed under the License is distributed on an &quot;AS IS&quot;&n; * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See&n; * the License for the specific language governing rights and&n; * limitations under the License. &n; *&n; * The initial developer of the original code is David A. Hinds&n; * &lt;dahinds@users.sourceforge.net&gt;.  Portions created by David A. Hinds&n; * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.&n; *&n; * Alternatively, the contents of this file may be used under the&n; * terms of the GNU Public License version 2 (the &quot;GPL&quot;), in which&n; * case the provisions of the GPL are applicable instead of the&n; * above.  If you wish to allow the use of your version of this file&n; * only under the terms of the GPL and not to allow others to use&n; * your version of this file under the MPL, indicate your decision by&n; * deleting the provisions above and replace them with the notice and&n; * other provisions required by the GPL.  If you do not delete the&n; * provisions above, a recipient may use your version of this file&n; * under either the MPL or the GPL.&n; */
macro_line|#ifndef _LINUX_DRIVER_OPS_H
DECL|macro|_LINUX_DRIVER_OPS_H
mdefine_line|#define _LINUX_DRIVER_OPS_H
macro_line|#ifndef DEV_NAME_LEN
DECL|macro|DEV_NAME_LEN
mdefine_line|#define DEV_NAME_LEN&t;32
macro_line|#endif
macro_line|#ifdef __KERNEL__
DECL|struct|dev_node_t
r_typedef
r_struct
id|dev_node_t
(brace
DECL|member|dev_name
r_char
id|dev_name
(braket
id|DEV_NAME_LEN
)braket
suffix:semicolon
DECL|member|major
DECL|member|minor
id|u_short
id|major
comma
id|minor
suffix:semicolon
DECL|member|next
r_struct
id|dev_node_t
op_star
id|next
suffix:semicolon
DECL|typedef|dev_node_t
)brace
id|dev_node_t
suffix:semicolon
DECL|struct|dev_locator_t
r_typedef
r_struct
id|dev_locator_t
(brace
DECL|enumerator|LOC_ISA
DECL|enumerator|LOC_PCI
DECL|member|bus
r_enum
(brace
id|LOC_ISA
comma
id|LOC_PCI
)brace
id|bus
suffix:semicolon
r_union
(brace
r_struct
(brace
DECL|member|io_base_1
DECL|member|io_base_2
id|u_short
id|io_base_1
comma
id|io_base_2
suffix:semicolon
DECL|member|mem_base
id|u_long
id|mem_base
suffix:semicolon
DECL|member|irq
DECL|member|dma
id|u_char
id|irq
comma
id|dma
suffix:semicolon
DECL|member|isa
)brace
id|isa
suffix:semicolon
r_struct
(brace
DECL|member|bus
id|u_char
id|bus
suffix:semicolon
DECL|member|devfn
id|u_char
id|devfn
suffix:semicolon
DECL|member|pci
)brace
id|pci
suffix:semicolon
DECL|member|b
)brace
id|b
suffix:semicolon
DECL|typedef|dev_locator_t
)brace
id|dev_locator_t
suffix:semicolon
DECL|struct|driver_operations
r_typedef
r_struct
id|driver_operations
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|attach
id|dev_node_t
op_star
(paren
op_star
id|attach
)paren
(paren
id|dev_locator_t
op_star
id|loc
)paren
suffix:semicolon
DECL|member|suspend
r_void
(paren
op_star
id|suspend
)paren
(paren
id|dev_node_t
op_star
id|dev
)paren
suffix:semicolon
DECL|member|resume
r_void
(paren
op_star
id|resume
)paren
(paren
id|dev_node_t
op_star
id|dev
)paren
suffix:semicolon
DECL|member|detach
r_void
(paren
op_star
id|detach
)paren
(paren
id|dev_node_t
op_star
id|dev
)paren
suffix:semicolon
DECL|typedef|driver_operations
)brace
id|driver_operations
suffix:semicolon
r_int
id|register_driver
c_func
(paren
r_struct
id|driver_operations
op_star
id|ops
)paren
suffix:semicolon
r_void
id|unregister_driver
c_func
(paren
r_struct
id|driver_operations
op_star
id|ops
)paren
suffix:semicolon
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _LINUX_DRIVER_OPS_H */
eof
