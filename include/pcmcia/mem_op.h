multiline_comment|/*&n; * mem_op.h 1.13 2000/06/12 21:55:40&n; *&n; * The contents of this file are subject to the Mozilla Public License&n; * Version 1.1 (the &quot;License&quot;); you may not use this file except in&n; * compliance with the License. You may obtain a copy of the License&n; * at http://www.mozilla.org/MPL/&n; *&n; * Software distributed under the License is distributed on an &quot;AS IS&quot;&n; * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See&n; * the License for the specific language governing rights and&n; * limitations under the License. &n; *&n; * The initial developer of the original code is David A. Hinds&n; * &lt;dahinds@users.sourceforge.net&gt;.  Portions created by David A. Hinds&n; * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.&n; *&n; * Alternatively, the contents of this file may be used under the&n; * terms of the GNU Public License version 2 (the &quot;GPL&quot;), in which&n; * case the provisions of the GPL are applicable instead of the&n; * above.  If you wish to allow the use of your version of this file&n; * only under the terms of the GPL and not to allow others to use&n; * your version of this file under the MPL, indicate your decision by&n; * deleting the provisions above and replace them with the notice and&n; * other provisions required by the GPL.  If you do not delete the&n; * provisions above, a recipient may use your version of this file&n; * under either the MPL or the GPL.&n; */
macro_line|#ifndef _LINUX_MEM_OP_H
DECL|macro|_LINUX_MEM_OP_H
mdefine_line|#define _LINUX_MEM_OP_H
macro_line|#include &lt;asm/uaccess.h&gt;
multiline_comment|/*&n;   If UNSAFE_MEMCPY is defined, we use the (optimized) system routines&n;   to copy between a card and kernel memory.  These routines do 32-bit&n;   operations which may not work with all PCMCIA controllers.  The&n;   safe versions defined here will do only 8-bit and 16-bit accesses.&n;*/
macro_line|#ifdef UNSAFE_MEMCPY
DECL|macro|copy_from_pc
mdefine_line|#define copy_from_pc memcpy_fromio
DECL|macro|copy_to_pc
mdefine_line|#define copy_to_pc memcpy_toio
DECL|function|copy_pc_to_user
r_static
r_inline
r_void
id|copy_pc_to_user
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_int
id|odd
op_assign
(paren
id|n
op_amp
l_int|3
)paren
suffix:semicolon
id|n
op_sub_assign
id|odd
suffix:semicolon
r_while
c_loop
(paren
id|n
)paren
(brace
id|put_user
c_func
(paren
id|__raw_readl
c_func
(paren
id|from
)paren
comma
(paren
r_int
op_star
)paren
id|to
)paren
suffix:semicolon
(paren
r_char
op_star
)paren
id|from
op_add_assign
l_int|4
suffix:semicolon
(paren
r_char
op_star
)paren
id|to
op_add_assign
l_int|4
suffix:semicolon
id|n
op_sub_assign
l_int|4
suffix:semicolon
)brace
r_while
c_loop
(paren
id|odd
op_decrement
)paren
id|put_user
c_func
(paren
id|readb
c_func
(paren
(paren
r_char
op_star
)paren
id|from
op_increment
)paren
comma
(paren
r_char
op_star
)paren
id|to
op_increment
)paren
suffix:semicolon
)brace
DECL|function|copy_user_to_pc
r_static
r_inline
r_void
id|copy_user_to_pc
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_int
id|l
suffix:semicolon
r_char
id|c
suffix:semicolon
r_int
id|odd
op_assign
(paren
id|n
op_amp
l_int|3
)paren
suffix:semicolon
id|n
op_sub_assign
id|odd
suffix:semicolon
r_while
c_loop
(paren
id|n
)paren
(brace
id|get_user
c_func
(paren
id|l
comma
(paren
r_int
op_star
)paren
id|from
)paren
suffix:semicolon
id|__raw_writel
c_func
(paren
id|l
comma
id|to
)paren
suffix:semicolon
(paren
r_char
op_star
)paren
id|to
op_add_assign
l_int|4
suffix:semicolon
(paren
r_char
op_star
)paren
id|from
op_add_assign
l_int|4
suffix:semicolon
id|n
op_sub_assign
l_int|4
suffix:semicolon
)brace
r_while
c_loop
(paren
id|odd
op_decrement
)paren
(brace
id|get_user
c_func
(paren
id|c
comma
(paren
r_char
op_star
)paren
id|from
op_increment
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|c
comma
(paren
r_char
op_star
)paren
id|to
op_increment
)paren
suffix:semicolon
)brace
)brace
macro_line|#else /* UNSAFE_MEMCPY */
DECL|function|copy_from_pc
r_static
r_inline
r_void
id|copy_from_pc
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_int
id|odd
op_assign
(paren
id|n
op_amp
l_int|1
)paren
suffix:semicolon
id|n
op_sub_assign
id|odd
suffix:semicolon
r_while
c_loop
(paren
id|n
)paren
(brace
op_star
(paren
id|u_short
op_star
)paren
id|to
op_assign
id|__raw_readw
c_func
(paren
id|from
)paren
suffix:semicolon
(paren
r_char
op_star
)paren
id|to
op_add_assign
l_int|2
suffix:semicolon
(paren
r_char
op_star
)paren
id|from
op_add_assign
l_int|2
suffix:semicolon
id|n
op_sub_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
id|odd
)paren
op_star
(paren
id|u_char
op_star
)paren
id|to
op_assign
id|readb
c_func
(paren
id|from
)paren
suffix:semicolon
)brace
DECL|function|copy_to_pc
r_static
r_inline
r_void
id|copy_to_pc
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_int
id|odd
op_assign
(paren
id|n
op_amp
l_int|1
)paren
suffix:semicolon
id|n
op_sub_assign
id|odd
suffix:semicolon
r_while
c_loop
(paren
id|n
)paren
(brace
id|__raw_writew
c_func
(paren
op_star
(paren
id|u_short
op_star
)paren
id|from
comma
id|to
)paren
suffix:semicolon
(paren
r_char
op_star
)paren
id|to
op_add_assign
l_int|2
suffix:semicolon
(paren
r_char
op_star
)paren
id|from
op_add_assign
l_int|2
suffix:semicolon
id|n
op_sub_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
id|odd
)paren
id|writeb
c_func
(paren
op_star
(paren
id|u_char
op_star
)paren
id|from
comma
id|to
)paren
suffix:semicolon
)brace
DECL|function|copy_pc_to_user
r_static
r_inline
r_void
id|copy_pc_to_user
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_int
id|odd
op_assign
(paren
id|n
op_amp
l_int|1
)paren
suffix:semicolon
id|n
op_sub_assign
id|odd
suffix:semicolon
r_while
c_loop
(paren
id|n
)paren
(brace
id|put_user
c_func
(paren
id|__raw_readw
c_func
(paren
id|from
)paren
comma
(paren
r_int
op_star
)paren
id|to
)paren
suffix:semicolon
(paren
r_char
op_star
)paren
id|to
op_add_assign
l_int|2
suffix:semicolon
(paren
r_char
op_star
)paren
id|from
op_add_assign
l_int|2
suffix:semicolon
id|n
op_sub_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
id|odd
)paren
id|put_user
c_func
(paren
id|readb
c_func
(paren
id|from
)paren
comma
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
)brace
DECL|function|copy_user_to_pc
r_static
r_inline
r_void
id|copy_user_to_pc
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
id|n
)paren
(brace
r_int
id|s
suffix:semicolon
r_char
id|c
suffix:semicolon
r_int
id|odd
op_assign
(paren
id|n
op_amp
l_int|1
)paren
suffix:semicolon
id|n
op_sub_assign
id|odd
suffix:semicolon
r_while
c_loop
(paren
id|n
)paren
(brace
id|get_user
c_func
(paren
id|s
comma
(paren
r_int
op_star
)paren
id|from
)paren
suffix:semicolon
id|__raw_writew
c_func
(paren
id|s
comma
id|to
)paren
suffix:semicolon
(paren
r_char
op_star
)paren
id|to
op_add_assign
l_int|2
suffix:semicolon
(paren
r_char
op_star
)paren
id|from
op_add_assign
l_int|2
suffix:semicolon
id|n
op_sub_assign
l_int|2
suffix:semicolon
)brace
r_if
c_cond
(paren
id|odd
)paren
(brace
id|get_user
c_func
(paren
id|c
comma
(paren
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
id|writeb
c_func
(paren
id|c
comma
id|to
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif /* UNSAFE_MEMCPY */
macro_line|#endif /* _LINUX_MEM_OP_H */
eof
