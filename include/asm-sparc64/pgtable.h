multiline_comment|/* $Id: pgtable.h,v 1.34 1997/06/02 06:33:41 davem Exp $&n; * pgtable.h: SpitFire page table operations.&n; *&n; * Copyright 1996,1997 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef _SPARC64_PGTABLE_H
DECL|macro|_SPARC64_PGTABLE_H
mdefine_line|#define _SPARC64_PGTABLE_H
multiline_comment|/* This file contains the functions and defines necessary to modify and use&n; * the SpitFire page tables.&n; */
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;linux/mm.h&gt;
macro_line|#endif
macro_line|#include &lt;asm/spitfire.h&gt;
macro_line|#include &lt;asm/asi.h&gt;
macro_line|#include &lt;asm/mmu_context.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#ifndef __ASSEMBLY__
macro_line|#include &lt;asm/sbus.h&gt;
multiline_comment|/* Certain architectures need to do special things when pte&squot;s&n; * within a page table are directly modified.  Thus, the following&n; * hook is made available.&n; */
DECL|macro|set_pte
mdefine_line|#define set_pte(pteptr, pteval) ((*(pteptr)) = (pteval))
multiline_comment|/* PMD_SHIFT determines the size of the area a second-level page table can map */
DECL|macro|PMD_SHIFT
mdefine_line|#define PMD_SHIFT&t;(PAGE_SHIFT + (PAGE_SHIFT-3))
DECL|macro|PMD_SIZE
mdefine_line|#define PMD_SIZE&t;(1UL &lt;&lt; PMD_SHIFT)
DECL|macro|PMD_MASK
mdefine_line|#define PMD_MASK&t;(~(PMD_SIZE-1))
multiline_comment|/* PGDIR_SHIFT determines what a third-level page table entry can map */
DECL|macro|PGDIR_SHIFT
mdefine_line|#define PGDIR_SHIFT&t;(PAGE_SHIFT + 2*(PAGE_SHIFT-3))
DECL|macro|PGDIR_SIZE
mdefine_line|#define PGDIR_SIZE&t;(1UL &lt;&lt; PGDIR_SHIFT)
DECL|macro|PGDIR_MASK
mdefine_line|#define PGDIR_MASK&t;(~(PGDIR_SIZE-1))
multiline_comment|/* Entries per page directory level. */
DECL|macro|PTRS_PER_PTE
mdefine_line|#define PTRS_PER_PTE&t;(1UL &lt;&lt; (PAGE_SHIFT-3))
DECL|macro|PTRS_PER_PMD
mdefine_line|#define PTRS_PER_PMD&t;(1UL &lt;&lt; (PAGE_SHIFT-3))
DECL|macro|PTRS_PER_PGD
mdefine_line|#define PTRS_PER_PGD&t;(1UL &lt;&lt; (PAGE_SHIFT-3))
DECL|macro|PTE_TABLE_SIZE
mdefine_line|#define PTE_TABLE_SIZE&t;0x2000&t;/* 1024 entries 8 bytes each */
DECL|macro|PMD_TABLE_SIZE
mdefine_line|#define PMD_TABLE_SIZE&t;0x2000&t;/* 1024 entries 8 bytes each */
DECL|macro|PGD_TABLE_SIZE
mdefine_line|#define PGD_TABLE_SIZE&t;0x2000&t;/* 1024 entries 8 bytes each */
multiline_comment|/* the no. of pointers that fit on a page */
DECL|macro|PTRS_PER_PAGE
mdefine_line|#define PTRS_PER_PAGE&t;(1UL &lt;&lt; (PAGE_SHIFT-3))
multiline_comment|/* NOTE: TLB miss handlers depend heavily upon where this is. */
DECL|macro|VMALLOC_START
mdefine_line|#define VMALLOC_START&t;&t;0xFFFFFc0000000000UL
DECL|macro|VMALLOC_VMADDR
mdefine_line|#define VMALLOC_VMADDR(x)&t;((unsigned long)(x))
macro_line|#endif /* !(__ASSEMBLY__) */
multiline_comment|/* SpitFire TTE bits. */
DECL|macro|_PAGE_VALID
mdefine_line|#define _PAGE_VALID&t;0x8000000000000000&t;/* Valid TTE                          */
DECL|macro|_PAGE_R
mdefine_line|#define _PAGE_R&t;&t;0x8000000000000000&t;/* Used to keep ref bit up to date    */
DECL|macro|_PAGE_SZ4MB
mdefine_line|#define _PAGE_SZ4MB&t;0x6000000000000000&t;/* 4MB Page                           */
DECL|macro|_PAGE_SZ512K
mdefine_line|#define _PAGE_SZ512K&t;0x4000000000000000&t;/* 512K Page                          */
DECL|macro|_PAGE_SZ64K
mdefine_line|#define _PAGE_SZ64K&t;0x2000000000000000&t;/* 64K Page                           */
DECL|macro|_PAGE_SZ8K
mdefine_line|#define _PAGE_SZ8K&t;0x0000000000000000&t;/* 8K Page                            */
DECL|macro|_PAGE_NFO
mdefine_line|#define _PAGE_NFO&t;0x1000000000000000&t;/* No Fault Only                      */
DECL|macro|_PAGE_IE
mdefine_line|#define _PAGE_IE&t;0x0800000000000000&t;/* Invert Endianness                  */
DECL|macro|_PAGE_SOFT2
mdefine_line|#define _PAGE_SOFT2&t;0x07FC000000000000&t;/* Second set of software bits        */
DECL|macro|_PAGE_DIAG
mdefine_line|#define _PAGE_DIAG&t;0x0003FE0000000000&t;/* Diagnostic TTE bits                */
DECL|macro|_PAGE_PADDR
mdefine_line|#define _PAGE_PADDR&t;0x000001FFFFFFE000&t;/* Physical Address bits [40:13]      */
DECL|macro|_PAGE_SOFT
mdefine_line|#define _PAGE_SOFT&t;0x0000000000001F80&t;/* First set of software bits         */
DECL|macro|_PAGE_L
mdefine_line|#define _PAGE_L&t;&t;0x0000000000000040&t;/* Locked TTE                         */
DECL|macro|_PAGE_CP
mdefine_line|#define _PAGE_CP&t;0x0000000000000020&t;/* Cacheable in Physical Cache        */
DECL|macro|_PAGE_CV
mdefine_line|#define _PAGE_CV&t;0x0000000000000010&t;/* Cacheable in Virtual Cache         */
DECL|macro|_PAGE_E
mdefine_line|#define _PAGE_E&t;&t;0x0000000000000008&t;/* side-Effect                        */
DECL|macro|_PAGE_P
mdefine_line|#define _PAGE_P&t;&t;0x0000000000000004&t;/* Privileged Page                    */
DECL|macro|_PAGE_W
mdefine_line|#define _PAGE_W&t;&t;0x0000000000000002&t;/* Writable                           */
DECL|macro|_PAGE_G
mdefine_line|#define _PAGE_G&t;&t;0x0000000000000001&t;/* Global                             */
multiline_comment|/* Here are the SpitFire software bits we use in the TTE&squot;s. */
DECL|macro|_PAGE_PRESENT
mdefine_line|#define _PAGE_PRESENT&t;0x0000000000001000&t;/* Present Page (ie. not swapped out) */
DECL|macro|_PAGE_MODIFIED
mdefine_line|#define _PAGE_MODIFIED&t;0x0000000000000800&t;/* Modified Page (ie. dirty)          */
DECL|macro|_PAGE_ACCESSED
mdefine_line|#define _PAGE_ACCESSED&t;0x0000000000000400&t;/* Accessed Page (ie. referenced)     */
DECL|macro|_PAGE_READ
mdefine_line|#define _PAGE_READ&t;0x0000000000000200&t;/* Readable SW Bit                    */
DECL|macro|_PAGE_WRITE
mdefine_line|#define _PAGE_WRITE&t;0x0000000000000100&t;/* Writable SW Bit                    */
DECL|macro|_PAGE_PRIV
mdefine_line|#define _PAGE_PRIV&t;0x0000000000000080&t;/* Software privilege bit&t;      */
DECL|macro|_PAGE_CACHE
mdefine_line|#define _PAGE_CACHE&t;(_PAGE_CP | _PAGE_CV)
DECL|macro|__DIRTY_BITS
mdefine_line|#define __DIRTY_BITS&t;(_PAGE_MODIFIED | _PAGE_WRITE | _PAGE_W)
DECL|macro|__ACCESS_BITS
mdefine_line|#define __ACCESS_BITS&t;(_PAGE_ACCESSED | _PAGE_READ | _PAGE_R)
DECL|macro|__PRIV_BITS
mdefine_line|#define __PRIV_BITS&t;(_PAGE_P | _PAGE_PRIV)
DECL|macro|PAGE_NONE
mdefine_line|#define PAGE_NONE&t;__pgprot (_PAGE_PRESENT | _PAGE_VALID | _PAGE_CACHE | &bslash;&n;&t;&t;&t;&t;  __PRIV_BITS | __ACCESS_BITS)
DECL|macro|PAGE_SHARED
mdefine_line|#define PAGE_SHARED&t;__pgprot (_PAGE_PRESENT | _PAGE_VALID | _PAGE_CACHE | &bslash;&n;&t;&t;&t;&t;  __ACCESS_BITS | _PAGE_W | _PAGE_WRITE)
DECL|macro|PAGE_COPY
mdefine_line|#define PAGE_COPY&t;__pgprot (_PAGE_PRESENT | _PAGE_VALID | _PAGE_CACHE | &bslash;&n;&t;&t;&t;&t;  __ACCESS_BITS)
DECL|macro|PAGE_READONLY
mdefine_line|#define PAGE_READONLY&t;__pgprot (_PAGE_PRESENT | _PAGE_VALID | _PAGE_CACHE | &bslash;&n;&t;&t;&t;&t;  __ACCESS_BITS)
DECL|macro|PAGE_KERNEL
mdefine_line|#define PAGE_KERNEL&t;__pgprot (_PAGE_PRESENT | _PAGE_VALID | _PAGE_CACHE | &bslash;&n;&t;&t;&t;&t;  __PRIV_BITS | __ACCESS_BITS | __DIRTY_BITS)
DECL|macro|PAGE_INVALID
mdefine_line|#define PAGE_INVALID&t;__pgprot (0)
DECL|macro|_PFN_MASK
mdefine_line|#define _PFN_MASK&t;_PAGE_PADDR
DECL|macro|_PAGE_CHG_MASK
mdefine_line|#define _PAGE_CHG_MASK&t;(_PFN_MASK | _PAGE_MODIFIED | _PAGE_ACCESSED | _PAGE_PRESENT)
DECL|macro|pg_iobits
mdefine_line|#define pg_iobits (_PAGE_VALID | __PRIV_BITS | __ACCESS_BITS | _PAGE_E)
DECL|macro|__P000
mdefine_line|#define __P000&t;PAGE_NONE
DECL|macro|__P001
mdefine_line|#define __P001&t;PAGE_READONLY
DECL|macro|__P010
mdefine_line|#define __P010&t;PAGE_COPY
DECL|macro|__P011
mdefine_line|#define __P011&t;PAGE_COPY
DECL|macro|__P100
mdefine_line|#define __P100&t;PAGE_READONLY
DECL|macro|__P101
mdefine_line|#define __P101&t;PAGE_READONLY
DECL|macro|__P110
mdefine_line|#define __P110&t;PAGE_COPY
DECL|macro|__P111
mdefine_line|#define __P111&t;PAGE_COPY
DECL|macro|__S000
mdefine_line|#define __S000&t;PAGE_NONE
DECL|macro|__S001
mdefine_line|#define __S001&t;PAGE_READONLY
DECL|macro|__S010
mdefine_line|#define __S010&t;PAGE_SHARED
DECL|macro|__S011
mdefine_line|#define __S011&t;PAGE_SHARED
DECL|macro|__S100
mdefine_line|#define __S100&t;PAGE_READONLY
DECL|macro|__S101
mdefine_line|#define __S101&t;PAGE_READONLY
DECL|macro|__S110
mdefine_line|#define __S110&t;PAGE_SHARED
DECL|macro|__S111
mdefine_line|#define __S111&t;PAGE_SHARED
macro_line|#ifndef __ASSEMBLY__
r_extern
id|pte_t
id|__bad_page
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
id|pmd_t
op_star
id|__bad_pmd
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
id|pte_t
op_star
id|__bad_pte
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|BAD_PMD
mdefine_line|#define BAD_PMD&t;&t;__bad_pmd()
DECL|macro|BAD_PTE
mdefine_line|#define BAD_PTE&t;&t;__bad_pte()
DECL|macro|BAD_PAGE
mdefine_line|#define BAD_PAGE&t;__bad_page()
multiline_comment|/* First phsical page can be anywhere, the following is needed so that&n; * va--&gt;pa and vice versa conversions work properly without performance&n; * hit for all __pa()/__va() operations.&n; */
r_extern
r_int
r_int
id|phys_base
suffix:semicolon
DECL|macro|ZERO_PAGE
mdefine_line|#define ZERO_PAGE&t;(PAGE_OFFSET + phys_base)
multiline_comment|/* This is for making TLB miss faster to process. */
r_extern
r_int
r_int
id|null_pmd_table
suffix:semicolon
r_extern
r_int
r_int
id|null_pte_table
suffix:semicolon
multiline_comment|/* Allocate a block of RAM which is aligned to its size.&n;   This procedure can be used until the call to mem_init(). */
r_extern
r_void
op_star
id|sparc_init_alloc
c_func
(paren
r_int
r_int
op_star
id|kbrk
comma
r_int
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/* Cache and TLB flush operations. */
DECL|function|flush_cache_all
r_extern
id|__inline__
r_void
id|flush_cache_all
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|addr
suffix:semicolon
id|flushw_all
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|addr
op_assign
l_int|0
suffix:semicolon
id|addr
OL
(paren
id|PAGE_SIZE
op_lshift
l_int|1
)paren
suffix:semicolon
id|addr
op_add_assign
l_int|32
)paren
(brace
id|spitfire_put_icache_tag
c_func
(paren
id|addr
comma
l_int|0x0UL
)paren
suffix:semicolon
)brace
)brace
DECL|function|flush_cache_mm
r_extern
id|__inline__
r_void
id|flush_cache_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm-&gt;context
op_ne
id|NO_CONTEXT
)paren
(brace
r_int
r_int
id|addr
suffix:semicolon
id|flushw_user
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|addr
op_assign
l_int|0
suffix:semicolon
id|addr
OL
(paren
id|PAGE_SIZE
op_lshift
l_int|1
)paren
suffix:semicolon
id|addr
op_add_assign
l_int|32
)paren
(brace
id|spitfire_put_icache_tag
c_func
(paren
id|addr
comma
l_int|0x0UL
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|function|flush_cache_range
r_extern
id|__inline__
r_void
id|flush_cache_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|mm-&gt;context
op_ne
id|NO_CONTEXT
)paren
(brace
r_int
r_int
id|addr
suffix:semicolon
id|flushw_user
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|addr
op_assign
l_int|0
suffix:semicolon
id|addr
OL
(paren
id|PAGE_SIZE
op_lshift
l_int|1
)paren
suffix:semicolon
id|addr
op_add_assign
l_int|32
)paren
(brace
id|spitfire_put_icache_tag
c_func
(paren
id|addr
comma
l_int|0x0UL
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|function|flush_cache_page
r_extern
id|__inline__
r_void
id|flush_cache_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|page
)paren
(brace
r_struct
id|mm_struct
op_star
id|mm
op_assign
id|vma-&gt;vm_mm
suffix:semicolon
r_if
c_cond
(paren
id|mm-&gt;context
op_ne
id|NO_CONTEXT
)paren
(brace
r_int
r_int
id|addr
suffix:semicolon
id|flushw_user
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|addr
op_assign
l_int|0
suffix:semicolon
id|addr
OL
(paren
id|PAGE_SIZE
op_lshift
l_int|1
)paren
suffix:semicolon
id|addr
op_add_assign
l_int|32
)paren
(brace
id|spitfire_put_icache_tag
c_func
(paren
id|addr
comma
l_int|0x0UL
)paren
suffix:semicolon
)brace
)brace
)brace
multiline_comment|/* This operation in unnecessary on the SpitFire since D-CACHE is write-through. */
DECL|macro|flush_page_to_ram
mdefine_line|#define flush_page_to_ram(page)&t;&t;do { } while (0)
DECL|function|flush_tlb_all
r_extern
id|__inline__
r_void
id|flush_tlb_all
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
id|entry
suffix:semicolon
multiline_comment|/* Invalidate all non-locked TTE&squot;s in both the dtlb and itlb. */
id|save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stxa&t;%%g0, [%0] %1&bslash;n&bslash;t&quot;
l_string|&quot;stxa&t;%%g0, [%0] %2&quot;
suffix:colon
multiline_comment|/* No outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|TLB_TAG_ACCESS
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_IMMU
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_DMMU
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|entry
op_assign
l_int|0
suffix:semicolon
id|entry
OL
l_int|62
suffix:semicolon
id|entry
op_increment
)paren
(brace
id|spitfire_put_dtlb_data
c_func
(paren
id|entry
comma
l_int|0x0UL
)paren
suffix:semicolon
id|spitfire_put_itlb_data
c_func
(paren
id|entry
comma
l_int|0x0UL
)paren
suffix:semicolon
)brace
id|membar
c_func
(paren
l_string|&quot;#Sync&quot;
)paren
suffix:semicolon
id|flushi
c_func
(paren
id|PAGE_OFFSET
)paren
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_mm
r_extern
id|__inline__
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm-&gt;context
op_ne
id|NO_CONTEXT
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
multiline_comment|/* flush_tlb_mm() */
id|rdpr
op_mod
op_mod
id|pil
comma
op_mod
op_mod
id|g1
id|mov
op_mod
l_int|1
comma
op_mod
op_mod
id|g7
id|wrpr
op_mod
op_mod
id|g0
comma
l_int|15
comma
op_mod
op_mod
id|pil
id|ldxa
(braket
op_mod
op_mod
id|g7
)braket
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|cmp
op_mod
op_mod
id|g2
comma
op_mod
l_int|0
id|be
comma
id|pt
op_mod
op_mod
id|icc
comma
l_float|1f
id|mov
l_int|0x50
comma
op_mod
op_mod
id|g3
id|stxa
op_mod
l_int|0
comma
(braket
op_mod
op_mod
id|g7
)braket
op_mod
l_int|2
l_int|1
suffix:colon
id|stxa
op_mod
op_mod
id|g0
comma
(braket
op_mod
op_mod
id|g3
)braket
op_mod
l_int|3
id|stxa
op_mod
op_mod
id|g0
comma
(braket
op_mod
op_mod
id|g3
)braket
op_mod
l_int|4
id|be
comma
id|a
comma
id|pt
op_mod
op_mod
id|icc
comma
l_float|1f
id|nop
id|stxa
op_mod
op_mod
id|g2
comma
(braket
op_mod
op_mod
id|g7
)braket
op_mod
l_int|2
l_int|1
suffix:colon
id|flush
op_mod
op_mod
id|g4
id|wrpr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|pil
"&quot;"
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|mm-&gt;context
op_amp
l_int|0x1fff
)paren
comma
l_string|&quot;i&quot;
(paren
id|SECONDARY_CONTEXT
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_DMMU
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_DMMU_DEMAP
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_IMMU_DEMAP
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
)brace
DECL|function|flush_tlb_range
r_extern
id|__inline__
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|mm-&gt;context
op_ne
id|NO_CONTEXT
)paren
(brace
r_int
r_int
id|old_ctx
op_assign
id|spitfire_get_secondary_context
c_func
(paren
)paren
suffix:semicolon
r_int
r_int
id|new_ctx
op_assign
(paren
id|mm-&gt;context
op_amp
l_int|0x1fff
)paren
suffix:semicolon
r_int
r_int
id|flags
suffix:semicolon
id|start
op_and_assign
id|PAGE_MASK
suffix:semicolon
id|save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
r_if
c_cond
(paren
id|new_ctx
op_ne
id|old_ctx
)paren
(brace
id|spitfire_set_secondary_context
c_func
(paren
id|mm-&gt;context
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id|start
OL
id|end
)paren
(brace
id|spitfire_flush_dtlb_secondary_page
c_func
(paren
id|start
)paren
suffix:semicolon
id|spitfire_flush_itlb_secondary_page
c_func
(paren
id|start
)paren
suffix:semicolon
id|start
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
r_if
c_cond
(paren
id|new_ctx
op_ne
id|old_ctx
)paren
(brace
id|spitfire_set_secondary_context
c_func
(paren
id|old_ctx
)paren
suffix:semicolon
)brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;flush %g4&quot;
)paren
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
)brace
DECL|function|flush_tlb_page
r_extern
id|__inline__
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|page
)paren
(brace
r_struct
id|mm_struct
op_star
id|mm
op_assign
id|vma-&gt;vm_mm
suffix:semicolon
r_if
c_cond
(paren
id|mm-&gt;context
op_ne
id|NO_CONTEXT
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
multiline_comment|/* flush_tlb_page() */
id|rdpr
op_mod
op_mod
id|pil
comma
op_mod
op_mod
id|g1
id|mov
op_mod
l_int|1
comma
op_mod
op_mod
id|g7
id|wrpr
op_mod
op_mod
id|g0
comma
l_int|15
comma
op_mod
op_mod
id|pil
id|ldxa
(braket
op_mod
op_mod
id|g7
)braket
op_mod
l_int|2
comma
op_mod
op_mod
id|g2
id|cmp
op_mod
op_mod
id|g2
comma
op_mod
l_int|0
id|be
comma
id|pt
op_mod
op_mod
id|icc
comma
l_float|1f
op_logical_or
op_mod
l_int|5
comma
l_int|0x10
comma
op_mod
op_mod
id|g3
id|stxa
op_mod
l_int|0
comma
(braket
op_mod
op_mod
id|g7
)braket
op_mod
l_int|2
l_int|1
suffix:colon
id|stxa
op_mod
op_mod
id|g0
comma
(braket
op_mod
op_mod
id|g3
)braket
op_mod
l_int|3
id|stxa
op_mod
op_mod
id|g0
comma
(braket
op_mod
op_mod
id|g3
)braket
op_mod
l_int|4
id|be
comma
id|a
comma
id|pt
op_mod
op_mod
id|icc
comma
l_float|1f
id|nop
id|stxa
op_mod
op_mod
id|g2
comma
(braket
op_mod
op_mod
id|g7
)braket
op_mod
l_int|2
l_int|1
suffix:colon
id|flush
op_mod
op_mod
id|g4
id|wrpr
op_mod
op_mod
id|g1
comma
l_int|0x0
comma
op_mod
op_mod
id|pil
"&quot;"
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|mm-&gt;context
op_amp
l_int|0x1fff
)paren
comma
l_string|&quot;i&quot;
(paren
id|SECONDARY_CONTEXT
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_DMMU
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_DMMU_DEMAP
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_IMMU_DEMAP
)paren
comma
l_string|&quot;r&quot;
(paren
id|page
op_amp
id|PAGE_MASK
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;g2&quot;
comma
l_string|&quot;g3&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
)brace
DECL|function|mk_pte
r_extern
r_inline
id|pte_t
id|mk_pte
c_func
(paren
r_int
r_int
id|page
comma
id|pgprot_t
id|pgprot
)paren
(brace
r_return
id|__pte
c_func
(paren
id|__pa
c_func
(paren
id|page
)paren
op_or
id|pgprot_val
c_func
(paren
id|pgprot
)paren
)paren
suffix:semicolon
)brace
DECL|function|mk_pte_phys
r_extern
r_inline
id|pte_t
id|mk_pte_phys
c_func
(paren
r_int
r_int
id|physpage
comma
id|pgprot_t
id|pgprot
)paren
(brace
r_return
id|__pte
c_func
(paren
id|physpage
op_or
id|pgprot_val
c_func
(paren
id|pgprot
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_modify
r_extern
r_inline
id|pte_t
id|pte_modify
c_func
(paren
id|pte_t
id|pte
comma
id|pgprot_t
id|newprot
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_assign
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_CHG_MASK
)paren
op_or
id|pgprot_val
c_func
(paren
id|newprot
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pmd_set
r_extern
r_inline
r_void
id|pmd_set
c_func
(paren
id|pmd_t
op_star
id|pmdp
comma
id|pte_t
op_star
id|ptep
)paren
(brace
id|pmd_val
c_func
(paren
op_star
id|pmdp
)paren
op_assign
id|__pa
c_func
(paren
(paren
r_int
r_int
)paren
id|ptep
)paren
suffix:semicolon
)brace
DECL|function|pgd_set
r_extern
r_inline
r_void
id|pgd_set
c_func
(paren
id|pgd_t
op_star
id|pgdp
comma
id|pmd_t
op_star
id|pmdp
)paren
(brace
id|pgd_val
c_func
(paren
op_star
id|pgdp
)paren
op_assign
id|__pa
c_func
(paren
(paren
r_int
r_int
)paren
id|pmdp
)paren
suffix:semicolon
)brace
DECL|function|pte_page
r_extern
r_inline
r_int
r_int
id|pte_page
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|__va
c_func
(paren
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PFN_MASK
)paren
)paren
suffix:semicolon
)brace
DECL|function|pmd_page
r_extern
r_inline
r_int
r_int
id|pmd_page
c_func
(paren
id|pmd_t
id|pmd
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|__va
c_func
(paren
id|pmd_val
c_func
(paren
id|pmd
)paren
)paren
suffix:semicolon
)brace
DECL|function|pgd_page
r_extern
r_inline
r_int
r_int
id|pgd_page
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
(paren
r_int
r_int
)paren
id|__va
c_func
(paren
id|pgd_val
c_func
(paren
id|pgd
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_none
r_extern
r_inline
r_int
id|pte_none
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
op_logical_neg
id|pte_val
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_present
r_extern
r_inline
r_int
id|pte_present
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_PRESENT
suffix:semicolon
)brace
DECL|function|pte_clear
r_extern
r_inline
r_void
id|pte_clear
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|pte_val
c_func
(paren
op_star
id|pte
)paren
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|pmd_none
r_extern
r_inline
r_int
id|pmd_none
c_func
(paren
id|pmd_t
id|pmd
)paren
(brace
r_return
id|pmd_val
c_func
(paren
id|pmd
)paren
op_eq
id|null_pte_table
suffix:semicolon
)brace
DECL|function|pmd_bad
r_extern
r_inline
r_int
id|pmd_bad
c_func
(paren
id|pmd_t
id|pmd
)paren
(brace
r_return
(paren
id|pmd_val
c_func
(paren
id|pmd
)paren
op_amp
op_complement
id|PAGE_MASK
)paren
suffix:semicolon
)brace
DECL|function|pmd_present
r_extern
r_inline
r_int
id|pmd_present
c_func
(paren
id|pmd_t
id|pmd
)paren
(brace
r_return
id|pmd_val
c_func
(paren
id|pmd
)paren
op_ne
id|null_pte_table
suffix:semicolon
)brace
DECL|function|pmd_clear
r_extern
r_inline
r_void
id|pmd_clear
c_func
(paren
id|pmd_t
op_star
id|pmdp
)paren
(brace
id|pmd_val
c_func
(paren
op_star
id|pmdp
)paren
op_assign
id|null_pte_table
suffix:semicolon
)brace
DECL|function|pgd_none
r_extern
r_inline
r_int
id|pgd_none
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
id|pgd_val
c_func
(paren
id|pgd
)paren
op_eq
id|null_pmd_table
suffix:semicolon
)brace
DECL|function|pgd_bad
r_extern
r_inline
r_int
id|pgd_bad
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
(paren
id|pgd_val
c_func
(paren
id|pgd
)paren
op_amp
op_complement
id|PAGE_MASK
)paren
suffix:semicolon
)brace
DECL|function|pgd_present
r_extern
r_inline
r_int
id|pgd_present
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
id|pgd_val
c_func
(paren
id|pgd
)paren
op_ne
id|null_pmd_table
suffix:semicolon
)brace
DECL|function|pgd_clear
r_extern
r_inline
r_void
id|pgd_clear
c_func
(paren
id|pgd_t
op_star
id|pgdp
)paren
(brace
id|pgd_val
c_func
(paren
op_star
id|pgdp
)paren
op_assign
id|null_pmd_table
suffix:semicolon
)brace
multiline_comment|/* The following only work if pte_present() is true.&n; * Undefined behaviour if not..&n; */
DECL|function|pte_read
r_extern
r_inline
r_int
id|pte_read
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_READ
suffix:semicolon
)brace
DECL|function|pte_write
r_extern
r_inline
r_int
id|pte_write
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_WRITE
suffix:semicolon
)brace
DECL|function|pte_dirty
r_extern
r_inline
r_int
id|pte_dirty
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_MODIFIED
suffix:semicolon
)brace
DECL|function|pte_young
r_extern
r_inline
r_int
id|pte_young
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_ACCESSED
suffix:semicolon
)brace
DECL|function|pte_wrprotect
r_extern
r_inline
id|pte_t
id|pte_wrprotect
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
op_complement
(paren
id|_PAGE_WRITE
op_or
id|_PAGE_W
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_rdprotect
r_extern
r_inline
id|pte_t
id|pte_rdprotect
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
op_complement
(paren
id|_PAGE_READ
op_or
id|_PAGE_R
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_mkclean
r_extern
r_inline
id|pte_t
id|pte_mkclean
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
op_complement
(paren
id|_PAGE_MODIFIED
op_or
id|_PAGE_W
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_mkold
r_extern
r_inline
id|pte_t
id|pte_mkold
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
op_complement
(paren
id|_PAGE_ACCESSED
op_or
id|_PAGE_R
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_mkwrite
r_extern
r_inline
id|pte_t
id|pte_mkwrite
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_if
c_cond
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_MODIFIED
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_or
(paren
id|_PAGE_WRITE
op_or
id|_PAGE_W
)paren
)paren
suffix:semicolon
)brace
r_else
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_or
(paren
id|_PAGE_WRITE
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_mkdirty
r_extern
r_inline
id|pte_t
id|pte_mkdirty
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_if
c_cond
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_WRITE
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_or
(paren
id|_PAGE_MODIFIED
op_or
id|_PAGE_W
)paren
)paren
suffix:semicolon
)brace
r_else
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_or
(paren
id|_PAGE_MODIFIED
)paren
)paren
suffix:semicolon
)brace
DECL|function|pte_mkyoung
r_extern
r_inline
id|pte_t
id|pte_mkyoung
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_if
c_cond
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_READ
)paren
(brace
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_or
(paren
id|_PAGE_ACCESSED
op_or
id|_PAGE_R
)paren
)paren
suffix:semicolon
)brace
r_else
r_return
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_or
(paren
id|_PAGE_ACCESSED
)paren
)paren
suffix:semicolon
)brace
DECL|function|SET_PAGE_DIR
r_extern
r_inline
r_void
id|SET_PAGE_DIR
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
id|pgd_t
op_star
id|pgdir
)paren
(brace
r_register
r_int
r_int
id|paddr
id|asm
c_func
(paren
l_string|&quot;o5&quot;
)paren
suffix:semicolon
id|paddr
op_assign
id|__pa
c_func
(paren
id|pgdir
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tsk
op_eq
id|current
)paren
(brace
id|__asm__
id|__volatile__
(paren
"&quot;"
id|rdpr
op_mod
op_mod
id|pstate
comma
op_mod
op_mod
id|o4
id|wrpr
op_mod
op_mod
id|o4
comma
op_mod
l_int|1
comma
op_mod
op_mod
id|pstate
id|mov
op_mod
l_int|0
comma
op_mod
op_mod
id|g7
id|wrpr
op_mod
op_mod
id|o4
comma
l_int|0x0
comma
op_mod
op_mod
id|pstate
"&quot;"
suffix:colon
multiline_comment|/* No outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
id|PSTATE_MG
op_or
id|PSTATE_IE
)paren
suffix:colon
l_string|&quot;o4&quot;
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/* to find an entry in a page-table-directory. */
DECL|function|pgd_offset
r_extern
r_inline
id|pgd_t
op_star
id|pgd_offset
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_return
id|mm-&gt;pgd
op_plus
(paren
(paren
id|address
op_rshift
id|PGDIR_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PAGE
op_minus
l_int|1
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* to find an entry in a kernel page-table-directory */
DECL|macro|pgd_offset_k
mdefine_line|#define pgd_offset_k(address) pgd_offset(&amp;init_mm, address)
multiline_comment|/* Find an entry in the second-level page table.. */
DECL|function|pmd_offset
r_extern
r_inline
id|pmd_t
op_star
id|pmd_offset
c_func
(paren
id|pgd_t
op_star
id|dir
comma
r_int
r_int
id|address
)paren
(brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd_page
c_func
(paren
op_star
id|dir
)paren
op_plus
(paren
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PAGE
op_minus
l_int|1
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Find an entry in the third-level page table.. */
DECL|function|pte_offset
r_extern
r_inline
id|pte_t
op_star
id|pte_offset
c_func
(paren
id|pmd_t
op_star
id|dir
comma
r_int
r_int
id|address
)paren
(brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|dir
)paren
op_plus
(paren
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PAGE
op_minus
l_int|1
)paren
)paren
suffix:semicolon
)brace
DECL|function|__init_pmd
r_extern
id|__inline__
r_void
id|__init_pmd
c_func
(paren
id|pmd_t
op_star
id|pmdp
)paren
(brace
r_extern
r_void
id|__bfill64
c_func
(paren
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
id|__bfill64
c_func
(paren
(paren
r_void
op_star
)paren
id|pmdp
comma
id|null_pte_table
)paren
suffix:semicolon
)brace
multiline_comment|/* Allocate and free page tables. The xxx_kernel() versions are&n; * used to allocate a kernel page table - this turns on supervisor&n; * bits if any.&n; */
DECL|function|pte_free_kernel
r_extern
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc_kernel
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
(paren
id|pte_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|pmd_set
c_func
(paren
id|pmd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PTE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Bad pmd in pte_alloc_kernel: %08lx&bslash;n&quot;
comma
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PTE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pmd_free_kernel
r_extern
r_inline
r_void
id|pmd_free_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc_kernel
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc_kernel
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PMD
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|pmd_t
op_star
id|page
op_assign
(paren
id|pmd_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|__init_pmd
c_func
(paren
id|page
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pgd_set
c_func
(paren
id|pgd
comma
id|BAD_PMD
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pgd_bad
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Bad pgd in pmd_alloc_kernel: %08lx&bslash;n&quot;
comma
id|pgd_val
c_func
(paren
op_star
id|pgd
)paren
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
id|BAD_PMD
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd_page
c_func
(paren
op_star
id|pgd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pte_free
r_extern
r_inline
r_void
id|pte_free
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
(paren
id|pte_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|pmd_set
c_func
(paren
id|pmd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PTE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Bad pmd in pte_alloc: %08lx&bslash;n&quot;
comma
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PTE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pmd_free
r_extern
r_inline
r_void
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PMD
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|pmd_t
op_star
id|page
op_assign
(paren
id|pmd_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|__init_pmd
c_func
(paren
id|page
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pgd_set
c_func
(paren
id|pgd
comma
id|BAD_PMD
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pgd_bad
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Bad pgd in pmd_alloc: %08lx&bslash;n&quot;
comma
id|pgd_val
c_func
(paren
op_star
id|pgd
)paren
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
id|BAD_PMD
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd_page
c_func
(paren
op_star
id|pgd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pgd_free
r_extern
r_inline
r_void
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|function|pgd_alloc
r_extern
r_inline
id|pgd_t
op_star
id|pgd_alloc
c_func
(paren
r_void
)paren
(brace
r_extern
r_void
id|__bfill64
c_func
(paren
r_void
op_star
comma
r_int
r_int
)paren
suffix:semicolon
id|pgd_t
op_star
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd
)paren
id|__bfill64
c_func
(paren
(paren
r_void
op_star
)paren
id|pgd
comma
id|null_pmd_table
)paren
suffix:semicolon
r_return
id|pgd
suffix:semicolon
)brace
r_extern
id|pgd_t
id|swapper_pg_dir
(braket
l_int|1024
)braket
suffix:semicolon
multiline_comment|/* Routines for getting a dvma scsi buffer. */
DECL|struct|mmu_sglist
r_struct
id|mmu_sglist
(brace
DECL|member|addr
r_char
op_star
id|addr
suffix:semicolon
DECL|member|__dont_touch
r_char
op_star
id|__dont_touch
suffix:semicolon
DECL|member|len
r_int
r_int
id|len
suffix:semicolon
DECL|member|dvma_addr
id|__u32
id|dvma_addr
suffix:semicolon
)brace
suffix:semicolon
r_extern
id|__u32
id|mmu_get_scsi_one
c_func
(paren
r_char
op_star
comma
r_int
r_int
comma
r_struct
id|linux_sbus
op_star
id|sbus
)paren
suffix:semicolon
r_extern
r_void
id|mmu_get_scsi_sgl
c_func
(paren
r_struct
id|mmu_sglist
op_star
comma
r_int
comma
r_struct
id|linux_sbus
op_star
id|sbus
)paren
suffix:semicolon
multiline_comment|/* These do nothing with the way I have things setup. */
DECL|macro|mmu_release_scsi_one
mdefine_line|#define mmu_release_scsi_one(vaddr, len, sbus)&t;do { } while(0)
DECL|macro|mmu_release_scsi_sgl
mdefine_line|#define mmu_release_scsi_sgl(sg, sz, sbus)&t;do { } while(0)
DECL|macro|mmu_lockarea
mdefine_line|#define mmu_lockarea(vaddr, len)&t;&t;(vaddr)
DECL|macro|mmu_unlockarea
mdefine_line|#define mmu_unlockarea(vaddr, len)&t;&t;do { } while(0)
DECL|function|update_mmu_cache
r_extern
r_inline
r_void
id|update_mmu_cache
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|address
comma
id|pte_t
id|pte
)paren
(brace
multiline_comment|/* Find and fix bad virutal cache aliases. */
r_if
c_cond
(paren
(paren
id|vma-&gt;vm_flags
op_amp
(paren
id|VM_WRITE
op_or
id|VM_SHARED
)paren
)paren
op_eq
(paren
id|VM_WRITE
op_or
id|VM_SHARED
)paren
)paren
(brace
r_struct
id|vm_area_struct
op_star
id|vmaring
suffix:semicolon
r_struct
id|inode
op_star
id|inode
suffix:semicolon
r_int
r_int
id|vaddr
comma
id|offset
comma
id|start
suffix:semicolon
id|pgd_t
op_star
id|pgdp
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
id|pte_t
op_star
id|ptep
suffix:semicolon
r_int
id|alias_found
op_assign
l_int|0
suffix:semicolon
id|inode
op_assign
id|vma-&gt;vm_inode
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|inode
)paren
(brace
r_return
suffix:semicolon
)brace
id|offset
op_assign
(paren
id|address
op_amp
id|PAGE_MASK
)paren
op_minus
id|vma-&gt;vm_start
suffix:semicolon
id|vmaring
op_assign
id|inode-&gt;i_mmap
suffix:semicolon
r_do
(brace
id|vaddr
op_assign
id|vmaring-&gt;vm_start
op_plus
id|offset
suffix:semicolon
multiline_comment|/* This conditional is misleading... */
r_if
c_cond
(paren
(paren
id|vaddr
op_xor
id|address
)paren
op_amp
id|PAGE_SIZE
)paren
(brace
id|alias_found
op_increment
suffix:semicolon
id|start
op_assign
id|vmaring-&gt;vm_start
suffix:semicolon
r_while
c_loop
(paren
id|start
OL
id|vmaring-&gt;vm_end
)paren
(brace
id|pgdp
op_assign
id|pgd_offset
c_func
(paren
id|vmaring-&gt;vm_mm
comma
id|start
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|pgdp
)paren
(brace
r_goto
id|next
suffix:semicolon
)brace
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|pgdp
comma
id|start
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|pmdp
)paren
(brace
r_goto
id|next
suffix:semicolon
)brace
id|ptep
op_assign
id|pte_offset
c_func
(paren
id|pmdp
comma
id|start
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|ptep
)paren
(brace
r_goto
id|next
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pte_val
c_func
(paren
op_star
id|ptep
)paren
op_amp
id|_PAGE_PRESENT
)paren
(brace
id|flush_cache_page
c_func
(paren
id|vmaring
comma
id|start
)paren
suffix:semicolon
op_star
id|ptep
op_assign
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
op_star
id|ptep
)paren
op_amp
op_complement
(paren
id|_PAGE_CV
)paren
)paren
suffix:semicolon
id|flush_tlb_page
c_func
(paren
id|vmaring
comma
id|start
)paren
suffix:semicolon
)brace
id|next
suffix:colon
id|start
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
)brace
)brace
r_while
c_loop
(paren
(paren
id|vmaring
op_assign
id|vmaring-&gt;vm_next_share
)paren
op_ne
l_int|NULL
)paren
(brace
suffix:semicolon
)brace
r_if
c_cond
(paren
id|alias_found
op_logical_and
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_CV
)paren
)paren
(brace
id|pgdp
op_assign
id|pgd_offset
c_func
(paren
id|vma-&gt;vm_mm
comma
id|address
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|pgdp
comma
id|address
)paren
suffix:semicolon
id|ptep
op_assign
id|pte_offset
c_func
(paren
id|pmdp
comma
id|address
)paren
suffix:semicolon
id|flush_cache_page
c_func
(paren
id|vma
comma
id|address
)paren
suffix:semicolon
op_star
id|ptep
op_assign
id|__pte
c_func
(paren
id|pte_val
c_func
(paren
op_star
id|ptep
)paren
op_amp
op_complement
(paren
id|_PAGE_CV
)paren
)paren
suffix:semicolon
id|flush_tlb_page
c_func
(paren
id|vma
comma
id|address
)paren
suffix:semicolon
)brace
)brace
)brace
multiline_comment|/* Make a non-present pseudo-TTE. */
DECL|function|mk_swap_pte
r_extern
r_inline
id|pte_t
id|mk_swap_pte
c_func
(paren
r_int
r_int
id|type
comma
r_int
r_int
id|offset
)paren
(brace
id|pte_t
id|pte
suffix:semicolon
id|pte_val
c_func
(paren
id|pte
)paren
op_assign
(paren
id|type
op_lshift
id|PAGE_SHIFT
)paren
op_or
(paren
id|offset
op_lshift
(paren
id|PAGE_SHIFT
op_plus
l_int|8
)paren
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|mk_pte_io
r_extern
r_inline
id|pte_t
id|mk_pte_io
c_func
(paren
r_int
r_int
id|page
comma
id|pgprot_t
id|prot
comma
r_int
id|space
)paren
(brace
id|pte_t
id|pte
suffix:semicolon
id|pte_val
c_func
(paren
id|pte
)paren
op_assign
(paren
id|page
)paren
op_or
id|pgprot_val
c_func
(paren
id|prot
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|macro|SWP_TYPE
mdefine_line|#define SWP_TYPE(entry)&t;&t;(((entry&gt;&gt;PAGE_SHIFT) &amp; 0xff))
DECL|macro|SWP_OFFSET
mdefine_line|#define SWP_OFFSET(entry)&t;((entry) &gt;&gt; (PAGE_SHIFT+8))
DECL|macro|SWP_ENTRY
mdefine_line|#define SWP_ENTRY(type,offset)&t;pte_val(mk_swap_pte((type),(offset)))
r_extern
id|__inline__
r_int
r_int
DECL|function|sun4u_get_pte
id|sun4u_get_pte
(paren
r_int
r_int
id|addr
)paren
(brace
id|pgd_t
op_star
id|pgdp
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
id|pte_t
op_star
id|ptep
suffix:semicolon
id|pgdp
op_assign
id|pgd_offset
(paren
id|current-&gt;mm
comma
id|addr
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
(paren
id|pgdp
comma
id|addr
)paren
suffix:semicolon
id|ptep
op_assign
id|pte_offset
(paren
id|pmdp
comma
id|addr
)paren
suffix:semicolon
r_return
id|pte_val
(paren
op_star
id|ptep
)paren
op_amp
id|_PAGE_PADDR
suffix:semicolon
)brace
r_extern
id|__inline__
r_int
r_int
DECL|function|__get_phys
id|__get_phys
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
(paren
id|sun4u_get_pte
(paren
id|addr
)paren
op_amp
l_int|0x0fffffff
)paren
suffix:semicolon
)brace
r_extern
id|__inline__
r_int
DECL|function|__get_iospace
id|__get_iospace
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
(paren
(paren
id|sun4u_get_pte
(paren
id|addr
)paren
op_amp
l_int|0xf0000000
)paren
op_rshift
l_int|28
)paren
suffix:semicolon
)brace
macro_line|#endif /* !(__ASSEMBLY__) */
macro_line|#endif /* !(_SPARC64_PGTABLE_H) */
eof
