multiline_comment|/* $Id: bitops.h,v 1.31 2000/09/23 02:09:21 davem Exp $&n; * bitops.h: Bit string operations on the V9.&n; *&n; * Copyright 1996, 1997 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef _SPARC64_BITOPS_H
DECL|macro|_SPARC64_BITOPS_H
mdefine_line|#define _SPARC64_BITOPS_H
macro_line|#include &lt;asm/byteorder.h&gt;
r_extern
r_int
id|__test_and_set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|__test_and_clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|__test_and_change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
DECL|macro|test_and_set_bit
mdefine_line|#define test_and_set_bit(nr,addr)&t;(__test_and_set_bit(nr,addr)!=0)
DECL|macro|test_and_clear_bit
mdefine_line|#define test_and_clear_bit(nr,addr)&t;(__test_and_clear_bit(nr,addr)!=0)
DECL|macro|test_and_change_bit
mdefine_line|#define test_and_change_bit(nr,addr)&t;(__test_and_change_bit(nr,addr)!=0)
DECL|macro|set_bit
mdefine_line|#define set_bit(nr,addr)&t;&t;((void)__test_and_set_bit(nr,addr))
DECL|macro|clear_bit
mdefine_line|#define clear_bit(nr,addr)&t;&t;((void)__test_and_clear_bit(nr,addr))
DECL|macro|change_bit
mdefine_line|#define change_bit(nr,addr)&t;&t;((void)__test_and_change_bit(nr,addr))
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;do { } while(0)
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;do { } while(0)
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_return
(paren
l_int|1UL
op_amp
(paren
(paren
(paren
id|__const__
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
op_rshift
(paren
id|nr
op_amp
l_int|63
)paren
)paren
)paren
op_ne
l_int|0UL
suffix:semicolon
)brace
multiline_comment|/* The easy/cheese version for now. */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
macro_line|#ifdef ULTRA_HAS_POPULATION_COUNT&t;/* Thanks for nothing Sun... */
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|brz
comma
id|pn
op_mod
l_int|0
comma
l_float|1f
id|neg
op_mod
l_int|0
comma
op_mod
op_mod
id|g1
id|xnor
op_mod
l_int|0
comma
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|g2
id|popc
op_mod
op_mod
id|g2
comma
op_mod
l_int|0
l_int|1
suffix:colon
l_string|&quot; : &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|result
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|word
)paren
suffix:colon
l_string|&quot;g1&quot;
comma
l_string|&quot;g2&quot;
)paren
suffix:semicolon
macro_line|#else
macro_line|#if 1 /* def EASY_CHEESE_VERSION */
id|result
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|word
op_amp
l_int|1
)paren
(brace
id|result
op_increment
suffix:semicolon
id|word
op_rshift_assign
l_int|1
suffix:semicolon
)brace
macro_line|#else
r_int
r_int
id|tmp
suffix:semicolon
id|result
op_assign
l_int|0
suffix:semicolon
id|tmp
op_assign
op_complement
id|word
op_amp
op_minus
op_complement
id|word
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
r_int
)paren
id|tmp
)paren
(brace
id|tmp
op_rshift_assign
l_int|32
suffix:semicolon
id|result
op_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
r_int
r_int
)paren
id|tmp
)paren
(brace
id|tmp
op_rshift_assign
l_int|16
suffix:semicolon
id|result
op_add_assign
l_int|16
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
r_int
r_char
)paren
id|tmp
)paren
(brace
id|tmp
op_rshift_assign
l_int|8
suffix:semicolon
id|result
op_add_assign
l_int|8
suffix:semicolon
)brace
r_if
c_cond
(paren
id|tmp
op_amp
l_int|0xf0
)paren
id|result
op_add_assign
l_int|4
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_amp
l_int|0xcc
)paren
id|result
op_add_assign
l_int|2
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_amp
l_int|0xaa
)paren
id|result
op_increment
suffix:semicolon
macro_line|#endif
macro_line|#endif
r_return
id|result
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * ffs: find first bit set. This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|macro|ffs
mdefine_line|#define ffs(x) generic_ffs(x)
multiline_comment|/*&n; * hweightN: returns the hamming weight (i.e. the number&n; * of bits set) of a N-bit word&n; */
macro_line|#ifdef ULTRA_HAS_POPULATION_COUNT
DECL|function|hweight32
r_extern
id|__inline__
r_int
r_int
id|hweight32
c_func
(paren
r_int
r_int
id|w
)paren
(brace
r_int
r_int
id|res
suffix:semicolon
id|__asm__
(paren
l_string|&quot;popc %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|w
op_amp
l_int|0xffffffff
)paren
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
DECL|function|hweight16
r_extern
id|__inline__
r_int
r_int
id|hweight16
c_func
(paren
r_int
r_int
id|w
)paren
(brace
r_int
r_int
id|res
suffix:semicolon
id|__asm__
(paren
l_string|&quot;popc %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|w
op_amp
l_int|0xffff
)paren
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
DECL|function|hweight8
r_extern
id|__inline__
r_int
r_int
id|hweight8
c_func
(paren
r_int
r_int
id|w
)paren
(brace
r_int
r_int
id|res
suffix:semicolon
id|__asm__
(paren
l_string|&quot;popc %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|w
op_amp
l_int|0xff
)paren
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
macro_line|#else
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x) generic_hweight8(x)
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
multiline_comment|/* find_next_zero_bit() finds the first zero bit in a bit string of length&n; * &squot;size&squot; bits, starting the search at bit &squot;offset&squot;. This is largely based&n; * on Linus&squot;s ALPHA routines, which are pretty portable BTW.&n; */
DECL|function|find_next_zero_bit
r_extern
id|__inline__
r_int
r_int
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|63UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|63UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|64
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|64
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|64
suffix:semicolon
id|result
op_add_assign
l_int|64
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|63UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|64
suffix:semicolon
id|size
op_sub_assign
l_int|64
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0UL
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
r_extern
r_int
id|__test_and_set_le_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_int
id|__test_and_clear_le_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
suffix:semicolon
DECL|macro|test_and_set_le_bit
mdefine_line|#define test_and_set_le_bit(nr,addr)&t;(__test_and_set_le_bit(nr,addr)!=0)
DECL|macro|test_and_clear_le_bit
mdefine_line|#define test_and_clear_le_bit(nr,addr)&t;(__test_and_clear_le_bit(nr,addr)!=0)
DECL|macro|set_le_bit
mdefine_line|#define set_le_bit(nr,addr)&t;&t;((void)__test_and_set_le_bit(nr,addr))
DECL|macro|clear_le_bit
mdefine_line|#define clear_le_bit(nr,addr)&t;&t;((void)__test_and_clear_le_bit(nr,addr))
DECL|function|test_le_bit
r_extern
id|__inline__
r_int
id|test_le_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
id|__const__
r_int
r_char
op_star
id|ADDR
op_assign
(paren
id|__const__
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_le_bit
mdefine_line|#define find_first_zero_le_bit(addr, size) &bslash;&n;        find_next_zero_le_bit((addr), (size), 0)
DECL|function|find_next_zero_le_bit
r_extern
id|__inline__
r_int
r_int
id|find_next_zero_le_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|63UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|63UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
id|__swab64p
c_func
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|64
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|64
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|64
suffix:semicolon
id|result
op_add_assign
l_int|64
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|63
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
id|__swab64p
c_func
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|64
suffix:semicolon
id|size
op_sub_assign
l_int|64
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
id|__swab64p
c_func
(paren
id|p
)paren
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0UL
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit&t;&t;&t;test_and_set_le_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit&t;&t;&t;test_and_clear_le_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit  &t;&t;&t;test_le_bit
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit&t;find_first_zero_le_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit&t;&t;find_next_zero_le_bit
multiline_comment|/* Bitmap functions for the minix filesystem.  */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr) test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* defined(_SPARC64_BITOPS_H) */
eof
