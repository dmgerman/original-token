multiline_comment|/* $Id: bitops.h,v 1.5 1996/12/21 06:09:28 davem Exp $&n; * bitops.h: Bit string operations on the V9.&n; *&n; * Copyright 1996 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef _SPARC64_BITOPS_H
DECL|macro|_SPARC64_BITOPS_H
mdefine_line|#define _SPARC64_BITOPS_H
macro_line|#include &lt;asm/asi.h&gt;         /* For the little endian spaces. */
multiline_comment|/* These can all be exported to userland, because the atomic&n; * primitives used are not privileged.&n; */
multiline_comment|/* Set bit &squot;nr&squot; in 32-bit quantity at address &squot;addr&squot; where bit &squot;0&squot;&n; * is in the highest of the four bytes and bit &squot;31&squot; is the high bit&n; * within the first byte. Sparc is BIG-Endian. Unless noted otherwise&n; * all bit-ops return 0 if bit was previously clear and != 0 otherwise.&n; */
DECL|function|set_bit
r_extern
id|__inline__
r_int
r_int
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp0
comma
id|temp1
suffix:semicolon
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|andcc
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|3
id|bne
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|2f
op_xor
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|1
id|cas
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
comma
op_mod
l_int|1
id|cmp
op_mod
l_int|0
comma
op_mod
l_int|1
id|bne
comma
id|a
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
l_int|2
suffix:colon
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp0), &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp1), &quot;
op_assign
id|r
l_string|&quot; (m), &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|m
)paren
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
r_int
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp0
comma
id|temp1
suffix:semicolon
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|andcc
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|3
id|be
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|2f
op_xor
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|1
id|cas
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
comma
op_mod
l_int|1
id|cmp
op_mod
l_int|0
comma
op_mod
l_int|1
id|bne
comma
id|a
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
l_int|2
suffix:colon
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp0), &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp1), &quot;
op_assign
id|r
l_string|&quot; (m), &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|m
)paren
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_int
r_int
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp0
comma
id|temp1
suffix:semicolon
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|andcc
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|3
op_xor
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|1
id|cas
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
comma
op_mod
l_int|1
id|cmp
op_mod
l_int|0
comma
op_mod
l_int|1
id|bne
comma
id|a
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
l_int|0
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp0), &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp1), &quot;
op_assign
id|r
l_string|&quot; (m), &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|m
)paren
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|test_bit
r_extern
id|__inline__
r_int
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_return
l_int|1UL
op_amp
(paren
(paren
(paren
id|__const__
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|5
)braket
op_rshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* The easy/cheese version for now. */
DECL|function|ffz
r_extern
id|__inline__
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
r_int
r_int
id|result
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|word
op_amp
l_int|1
)paren
(brace
id|result
op_increment
suffix:semicolon
id|word
op_rshift_assign
l_int|1
suffix:semicolon
)brace
r_return
id|result
suffix:semicolon
)brace
multiline_comment|/* find_next_zero_bit() finds the first zero bit in a bit string of length&n; * &squot;size&squot; bits, starting the search at bit &squot;offset&squot;. This is largely based&n; * on Linus&squot;s ALPHA routines, which are pretty portable BTW.&n; */
DECL|function|find_next_zero_bit
r_extern
id|__inline__
r_int
r_int
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|31UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|32
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|32
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|31UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|32
suffix:semicolon
id|size
op_sub_assign
l_int|32
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;        find_next_zero_bit((addr), (size), 0)
multiline_comment|/* Now for the ext2 filesystem bit operations and helper routines.&n; * Note the usage of the little endian ASI&squot;s, werd, V9 is supreme.&n; */
DECL|function|set_le_bit
r_extern
id|__inline__
r_int
id|set_le_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp0
comma
id|temp1
suffix:semicolon
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|lduwa
(braket
op_mod
l_int|2
)braket
op_mod
l_int|5
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|andcc
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|3
id|bne
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|2f
op_xor
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|1
id|casa
(braket
op_mod
l_int|2
)braket
op_mod
l_int|5
comma
op_mod
l_int|0
comma
op_mod
l_int|1
id|cmp
op_mod
l_int|0
comma
op_mod
l_int|1
id|bne
comma
id|a
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|lduwa
(braket
op_mod
l_int|2
)braket
op_mod
l_int|5
comma
op_mod
l_int|0
l_int|2
suffix:colon
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp0), &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp1), &quot;
op_assign
id|r
l_string|&quot; (m), &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|m
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PL
)paren
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|clear_le_bit
r_extern
id|__inline__
r_int
id|clear_le_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp0
comma
id|temp1
suffix:semicolon
r_int
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|lduwa
(braket
op_mod
l_int|2
)braket
op_mod
l_int|5
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|andcc
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|3
id|be
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|2f
op_xor
op_mod
l_int|0
comma
op_mod
l_int|4
comma
op_mod
l_int|1
id|casa
(braket
op_mod
l_int|2
)braket
op_mod
l_int|5
comma
op_mod
l_int|0
comma
op_mod
l_int|1
id|cmp
op_mod
l_int|0
comma
op_mod
l_int|1
id|bne
comma
id|a
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|lduwa
(braket
op_mod
l_int|2
)braket
op_mod
l_int|5
comma
op_mod
l_int|0
l_int|2
suffix:colon
l_string|&quot;&t;: &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp0), &quot;
op_assign
op_amp
id|r
l_string|&quot; (temp1), &quot;
op_assign
id|r
l_string|&quot; (m), &quot;
op_assign
op_amp
id|r
"&quot;"
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|m
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PL
)paren
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
DECL|function|test_le_bit
r_extern
id|__inline__
r_int
id|test_le_bit
c_func
(paren
r_int
id|nr
comma
id|__const__
r_void
op_star
id|addr
)paren
(brace
r_int
id|mask
suffix:semicolon
id|__const__
r_int
r_char
op_star
id|ADDR
op_assign
(paren
id|__const__
r_int
r_char
op_star
)paren
id|addr
suffix:semicolon
id|ADDR
op_add_assign
id|nr
op_rshift
l_int|3
suffix:semicolon
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x07
)paren
suffix:semicolon
r_return
(paren
(paren
id|mask
op_amp
op_star
id|ADDR
)paren
op_ne
l_int|0
)paren
suffix:semicolon
)brace
DECL|macro|find_first_zero_le_bit
mdefine_line|#define find_first_zero_le_bit(addr, size) &bslash;&n;        find_next_zero_le_bit((addr), (size), 0)
DECL|function|__swab64
r_extern
id|__inline__
r_int
r_int
id|__swab64
c_func
(paren
r_int
r_int
id|value
)paren
(brace
r_return
(paren
(paren
(paren
id|value
op_rshift
l_int|56
)paren
op_amp
l_int|0x00000000000000ff
)paren
op_or
(paren
(paren
id|value
op_rshift
l_int|40
)paren
op_amp
l_int|0x000000000000ff00
)paren
op_or
(paren
(paren
id|value
op_rshift
l_int|24
)paren
op_amp
l_int|0x0000000000ff0000
)paren
op_or
(paren
(paren
id|value
op_rshift
l_int|8
)paren
op_amp
l_int|0x00000000ff000000
)paren
op_or
(paren
(paren
id|value
op_lshift
l_int|8
)paren
op_amp
l_int|0x000000ff00000000
)paren
op_or
(paren
(paren
id|value
op_lshift
l_int|24
)paren
op_amp
l_int|0x0000ff0000000000
)paren
op_or
(paren
(paren
id|value
op_lshift
l_int|40
)paren
op_amp
l_int|0x00ff000000000000
)paren
op_or
(paren
(paren
id|value
op_lshift
l_int|56
)paren
op_amp
l_int|0xff00000000000000
)paren
)paren
suffix:semicolon
)brace
DECL|function|find_next_zero_le_bit
r_extern
id|__inline__
r_int
r_int
id|find_next_zero_le_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|63UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|31UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
id|__swab64
c_func
(paren
op_complement
l_int|0UL
op_rshift
(paren
l_int|64
op_minus
id|offset
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|64
)paren
(brace
r_goto
id|found_first
suffix:semicolon
)brace
r_if
c_cond
(paren
op_complement
id|tmp
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|size
op_sub_assign
l_int|64
suffix:semicolon
id|result
op_add_assign
l_int|64
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|63UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
(brace
r_goto
id|found_middle
suffix:semicolon
)brace
id|result
op_add_assign
l_int|64
suffix:semicolon
id|size
op_sub_assign
l_int|64
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
(brace
r_return
id|result
suffix:semicolon
)brace
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
op_or
(paren
op_complement
l_int|0UL
op_lshift
id|size
)paren
)paren
suffix:semicolon
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|__swab32
c_func
(paren
id|tmp
)paren
)paren
suffix:semicolon
)brace
macro_line|#ifdef __KERNEL__
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit&t;&t;&t;set_le_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit&t;&t;&t;clear_le_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit  &t;&t;&t;test_le_bit
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit&t;find_first_zero_le_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit&t;&t;find_next_zero_le_bit
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* defined(_SPARC64_BITOPS_H) */
eof
