multiline_comment|/* $Id: processor.h,v 1.8 1997/03/04 16:27:33 jj Exp $&n; * include/asm-sparc64/processor.h&n; *&n; * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef __ASM_SPARC64_PROCESSOR_H
DECL|macro|__ASM_SPARC64_PROCESSOR_H
mdefine_line|#define __ASM_SPARC64_PROCESSOR_H
macro_line|#include &lt;asm/a.out.h&gt;
macro_line|#include &lt;asm/pstate.h&gt;
macro_line|#include &lt;asm/ptrace.h&gt;
macro_line|#include &lt;asm/head.h&gt;
macro_line|#include &lt;asm/signal.h&gt;
macro_line|#include &lt;asm/segment.h&gt;
multiline_comment|/* Bus types */
DECL|macro|EISA_bus
mdefine_line|#define EISA_bus 0
DECL|macro|EISA_bus__is_a_macro
mdefine_line|#define EISA_bus__is_a_macro /* for versions in ksyms.c */
DECL|macro|MCA_bus
mdefine_line|#define MCA_bus 0
DECL|macro|MCA_bus__is_a_macro
mdefine_line|#define MCA_bus__is_a_macro /* for versions in ksyms.c */
multiline_comment|/* The sparc has no problems with write protection */
DECL|macro|wp_works_ok
mdefine_line|#define wp_works_ok 1
DECL|macro|wp_works_ok__is_a_macro
mdefine_line|#define wp_works_ok__is_a_macro /* for versions in ksyms.c */
multiline_comment|/* Whee, this is STACK_TOP + PAGE_SIZE and the lowest kernel address too... &n; * That one page is used to protect kernel from intruders, so that&n; * we can make our access_ok test faster&n; */
DECL|macro|TASK_SIZE
mdefine_line|#define TASK_SIZE&t;(0xFFFFF80000000000UL)
macro_line|#ifndef __ASSEMBLY__
DECL|struct|fpq
r_struct
id|fpq
(brace
DECL|member|insn_addr
r_int
r_int
op_star
id|insn_addr
suffix:semicolon
DECL|member|insn
r_int
r_int
id|insn
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|NSWINS
mdefine_line|#define NSWINS&t;&t;8
multiline_comment|/* The Sparc processor specific thread struct. */
DECL|struct|thread_struct
r_struct
id|thread_struct
(brace
multiline_comment|/* Floating point regs */
multiline_comment|/* Please check asm_offsets, so that not to much precious space&n;&t;   is wasted by this alignment and move the float_regs wherever&n;&t;   is better in this structure. Remember every byte of alignment&n;&t;   is multiplied by 512 to get the amount of wasted kernel memory. */
DECL|member|float_regs
r_int
r_int
id|float_regs
(braket
l_int|64
)braket
id|__attribute__
(paren
(paren
id|aligned
(paren
l_int|64
)paren
)paren
)paren
suffix:semicolon
DECL|member|fsr
r_int
r_int
id|fsr
suffix:semicolon
DECL|member|fpqdepth
r_int
r_int
id|fpqdepth
suffix:semicolon
DECL|member|fpqueue
r_struct
id|fpq
id|fpqueue
(braket
l_int|16
)braket
suffix:semicolon
multiline_comment|/* Context switch saved kernel state. */
DECL|member|user_globals
r_int
r_int
id|user_globals
(braket
l_int|8
)braket
suffix:semicolon
multiline_comment|/* performance hack */
DECL|member|ksp
DECL|member|kpc
r_int
r_int
id|ksp
comma
id|kpc
suffix:semicolon
multiline_comment|/* Storage for windows when user stack is bogus. */
DECL|member|reg_window
r_struct
id|reg_window
id|reg_window
(braket
id|NSWINS
)braket
id|__attribute__
(paren
(paren
id|aligned
(paren
l_int|16
)paren
)paren
)paren
suffix:semicolon
DECL|member|rwbuf_stkptrs
r_int
r_int
id|rwbuf_stkptrs
(braket
id|NSWINS
)braket
id|__attribute__
(paren
(paren
id|aligned
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
DECL|member|w_saved
r_int
r_int
id|w_saved
suffix:semicolon
multiline_comment|/* Arch-specific task state flags, see below. */
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
multiline_comment|/* For signal handling */
DECL|member|sig_address
r_int
r_int
id|sig_address
id|__attribute__
(paren
(paren
id|aligned
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
DECL|member|sig_desc
r_int
r_int
id|sig_desc
suffix:semicolon
DECL|member|sstk_info
r_struct
id|sigstack
id|sstk_info
suffix:semicolon
DECL|member|current_ds
DECL|member|new_signal
r_int
id|current_ds
comma
id|new_signal
suffix:semicolon
DECL|member|core_exec
r_struct
id|exec
id|core_exec
suffix:semicolon
multiline_comment|/* just what it says. */
)brace
suffix:semicolon
macro_line|#endif /* !(__ASSEMBLY__) */
DECL|macro|SPARC_FLAG_KTHREAD
mdefine_line|#define SPARC_FLAG_KTHREAD      0x1    /* task is a kernel thread */
DECL|macro|SPARC_FLAG_UNALIGNED
mdefine_line|#define SPARC_FLAG_UNALIGNED    0x2    /* is allowed to do unaligned accesses */
DECL|macro|SPARC_FLAG_NEWSIGNALS
mdefine_line|#define SPARC_FLAG_NEWSIGNALS   0x4    /* task wants new-style signals */
DECL|macro|SPARC_FLAG_32BIT
mdefine_line|#define SPARC_FLAG_32BIT        0x8    /* task is older 32-bit binary */
DECL|macro|INIT_MMAP
mdefine_line|#define INIT_MMAP { &amp;init_mm, 0xfffff80000000000, 0xfffffe00000, &bslash;&n;&t;&t;    PAGE_SHARED , VM_READ | VM_WRITE | VM_EXEC }
DECL|macro|INIT_TSS
mdefine_line|#define INIT_TSS  {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* FPU regs */   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&t;&bslash;&n;                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&t;&bslash;&n;                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&t;&bslash;&n;                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },&t;&bslash;&n;/* FPU status, FPU qdepth, FPU queue */ &t;&t;&t;&t;&bslash;&n;   0,          0,          { { 0, 0, }, }, &t;&t;&t;&t;&bslash;&n;/* user_globals */ &t;&t;&t;&t;&t;&t;&t;&bslash;&n;   { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, &t;&t;&t;&t;&t;&bslash;&n;/* ksp, kpc */ &t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   0,   0, &t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* reg_window */&t;&t;&t;&t;&t;&t;&t;&bslash;&n;{ { { 0, }, { 0, } }, }, &t;&t;&t;&t;&t;&t;&bslash;&n;/* rwbuf_stkptrs */&t;&t;&t;&t;&t;&t;&t;&bslash;&n;{ 0, 0, 0, 0, 0, 0, 0, 0, },&t;&t;&t;&t;&t;&t;&bslash;&n;/* w_saved */&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   0, &t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* flags */&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   SPARC_FLAG_KTHREAD,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* sig_address, sig_desc */&t;&t;&t;&t;&t;&t;&bslash;&n;   0,           0,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* ex,     sstk_info, current_ds, */&t;&t;&t;&t;&t;&bslash;&n;   { 0, 0, }, USER_DS,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* new_signal */&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  0,&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;/* core_exec */&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;{ 0, },&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;}
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/* Return saved PC of a blocked thread. */
DECL|function|thread_saved_pc
r_extern
id|__inline__
r_int
r_int
id|thread_saved_pc
c_func
(paren
r_struct
id|thread_struct
op_star
id|t
)paren
(brace
r_return
id|t-&gt;kpc
suffix:semicolon
)brace
multiline_comment|/* Do necessary setup to start up a newly executed thread. */
DECL|function|start_thread
r_extern
id|__inline__
r_void
id|start_thread
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_int
r_int
id|pc
comma
r_int
r_int
id|sp
)paren
(brace
id|regs-&gt;tstate
op_assign
(paren
id|regs-&gt;tstate
op_amp
(paren
id|TSTATE_CWP
)paren
)paren
op_or
id|TSTATE_IE
suffix:semicolon
id|regs-&gt;tpc
op_assign
(paren
(paren
id|pc
op_amp
(paren
op_complement
l_int|3
)paren
)paren
op_minus
l_int|4
)paren
suffix:semicolon
id|regs-&gt;tnpc
op_assign
id|regs-&gt;tpc
op_plus
l_int|4
suffix:semicolon
id|regs-&gt;y
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x00
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x08
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x10
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x18
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x20
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x28
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x30
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x38
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x40
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x48
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x50
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x58
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x60
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x68
)braket
id|stx
op_mod
l_int|1
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x70
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x78
)braket
l_string|&quot; : : &quot;
id|r
l_string|&quot; (regs), &quot;
id|r
"&quot;"
(paren
id|sp
op_minus
id|REGWIN_SZ
)paren
comma
l_string|&quot;i&quot;
(paren
(paren
r_const
r_int
r_int
)paren
(paren
op_amp
(paren
(paren
r_struct
id|pt_regs
op_star
)paren
l_int|0
)paren
op_member_access_from_pointer
id|u_regs
(braket
l_int|0
)braket
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|start_thread32
r_extern
id|__inline__
r_void
id|start_thread32
c_func
(paren
r_struct
id|pt_regs
op_star
id|regs
comma
r_int
r_int
id|pc
comma
r_int
r_int
id|sp
)paren
(brace
r_register
r_int
r_int
id|zero
id|asm
c_func
(paren
l_string|&quot;g1&quot;
)paren
suffix:semicolon
id|pc
op_and_assign
l_int|0x00000000ffffffffUL
suffix:semicolon
id|sp
op_and_assign
l_int|0x00000000ffffffffUL
suffix:semicolon
id|regs-&gt;tstate
op_assign
(paren
id|regs-&gt;tstate
op_amp
(paren
id|TSTATE_CWP
)paren
)paren
op_or
(paren
id|TSTATE_IE
op_or
id|TSTATE_AM
)paren
suffix:semicolon
id|regs-&gt;tpc
op_assign
(paren
(paren
id|pc
op_amp
(paren
op_complement
l_int|3
)paren
)paren
op_minus
l_int|4
)paren
suffix:semicolon
id|regs-&gt;tnpc
op_assign
id|regs-&gt;tpc
op_plus
l_int|4
suffix:semicolon
id|regs-&gt;y
op_assign
l_int|0
suffix:semicolon
id|zero
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x00
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x08
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x10
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x18
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x20
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x28
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x30
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x38
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x40
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x48
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x50
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x58
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x60
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x68
)braket
id|stx
op_mod
l_int|1
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x70
)braket
id|stx
op_mod
op_mod
id|g0
comma
(braket
op_mod
l_int|0
op_plus
op_mod
l_int|2
op_plus
l_int|0x78
)braket
l_string|&quot; : : &quot;
id|r
l_string|&quot; (regs), &quot;
id|r
"&quot;"
(paren
id|sp
op_minus
id|REGWIN32_SZ
)paren
comma
l_string|&quot;i&quot;
(paren
(paren
r_const
r_int
r_int
)paren
(paren
op_amp
(paren
(paren
r_struct
id|pt_regs
op_star
)paren
l_int|0
)paren
op_member_access_from_pointer
id|u_regs
(braket
l_int|0
)braket
)paren
)paren
comma
l_string|&quot;r&quot;
(paren
id|zero
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Free all resources held by a thread. */
DECL|macro|release_thread
mdefine_line|#define release_thread(tsk)&t;&t;do { } while(0)
macro_line|#ifdef __KERNEL__
multiline_comment|/* Allocation and freeing of basic task resources. */
DECL|macro|alloc_kernel_stack
mdefine_line|#define alloc_kernel_stack(tsk)&t;&t;__get_free_page(GFP_KERNEL)
DECL|macro|free_kernel_stack
mdefine_line|#define free_kernel_stack(stack)&t;free_page(stack)
DECL|macro|alloc_task_struct
mdefine_line|#define alloc_task_struct()&t;&t;kmalloc(sizeof(struct task_struct), GFP_KERNEL)
DECL|macro|free_task_struct
mdefine_line|#define free_task_struct(tsk)&t;&t;kfree(tsk)
macro_line|#endif
macro_line|#endif /* !(__ASSEMBLY__) */
macro_line|#endif /* !(__ASM_SPARC64_PROCESSOR_H) */
eof
