multiline_comment|/* $Id: floppy.h,v 1.7 1997/09/07 03:34:08 davem Exp $&n; * asm-sparc64/floppy.h: Sparc specific parts of the Floppy driver.&n; *&n; * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)&n; * Copyright (C) 1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)&n; *&n; * Ultra/PCI support added: Sep 1997  Eddie C. Dost  (ecd@skynet.be)&n; */
macro_line|#ifndef __ASM_SPARC64_FLOPPY_H
DECL|macro|__ASM_SPARC64_FLOPPY_H
mdefine_line|#define __ASM_SPARC64_FLOPPY_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/page.h&gt;
macro_line|#include &lt;asm/pgtable.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/idprom.h&gt;
macro_line|#include &lt;asm/oplib.h&gt;
macro_line|#include &lt;asm/auxio.h&gt;
macro_line|#include &lt;asm/sbus.h&gt;
macro_line|#include &lt;asm/irq.h&gt;
multiline_comment|/* References:&n; * 1) Netbsd Sun floppy driver.&n; * 2) NCR 82077 controller manual&n; * 3) Intel 82077 controller manual&n; */
DECL|struct|sun_flpy_controller
r_struct
id|sun_flpy_controller
(brace
DECL|member|status1_82077
r_volatile
r_int
r_char
id|status1_82077
suffix:semicolon
multiline_comment|/* Auxiliary Status reg. 1 */
DECL|member|status2_82077
r_volatile
r_int
r_char
id|status2_82077
suffix:semicolon
multiline_comment|/* Auxiliary Status reg. 2 */
DECL|member|dor_82077
r_volatile
r_int
r_char
id|dor_82077
suffix:semicolon
multiline_comment|/* Digital Output reg. */
DECL|member|tapectl_82077
r_volatile
r_int
r_char
id|tapectl_82077
suffix:semicolon
multiline_comment|/* What the? Tape control reg? */
DECL|member|status_82077
r_volatile
r_int
r_char
id|status_82077
suffix:semicolon
multiline_comment|/* Main Status Register. */
DECL|macro|drs_82077
mdefine_line|#define drs_82077              status_82077   /* Digital Rate Select reg. */
DECL|member|data_82077
r_volatile
r_int
r_char
id|data_82077
suffix:semicolon
multiline_comment|/* Data fifo. */
DECL|member|___unused
r_volatile
r_int
r_char
id|___unused
suffix:semicolon
DECL|member|dir_82077
r_volatile
r_int
r_char
id|dir_82077
suffix:semicolon
multiline_comment|/* Digital Input reg. */
DECL|macro|dcr_82077
mdefine_line|#define dcr_82077              dir_82077      /* Config Control reg. */
)brace
suffix:semicolon
multiline_comment|/* You&squot;ll only ever find one controller on a SparcStation anyways. */
DECL|variable|sun_fdc
r_static
r_struct
id|sun_flpy_controller
op_star
id|sun_fdc
op_assign
l_int|NULL
suffix:semicolon
DECL|variable|fdc_status
r_volatile
r_int
r_char
op_star
id|fdc_status
suffix:semicolon
DECL|variable|floppy_sdev
r_static
r_struct
id|linux_sbus_device
op_star
id|floppy_sdev
op_assign
l_int|NULL
suffix:semicolon
DECL|struct|sun_floppy_ops
r_struct
id|sun_floppy_ops
(brace
DECL|member|fd_inb
r_int
r_char
(paren
op_star
id|fd_inb
)paren
(paren
r_int
r_int
id|port
)paren
suffix:semicolon
DECL|member|fd_outb
r_void
(paren
op_star
id|fd_outb
)paren
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
suffix:semicolon
DECL|member|fd_enable_dma
r_void
(paren
op_star
id|fd_enable_dma
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_disable_dma
r_void
(paren
op_star
id|fd_disable_dma
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_set_dma_mode
r_void
(paren
op_star
id|fd_set_dma_mode
)paren
(paren
r_int
)paren
suffix:semicolon
DECL|member|fd_set_dma_addr
r_void
(paren
op_star
id|fd_set_dma_addr
)paren
(paren
r_char
op_star
)paren
suffix:semicolon
DECL|member|fd_set_dma_count
r_void
(paren
op_star
id|fd_set_dma_count
)paren
(paren
r_int
)paren
suffix:semicolon
DECL|member|get_dma_residue
r_int
r_int
(paren
op_star
id|get_dma_residue
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_enable_irq
r_void
(paren
op_star
id|fd_enable_irq
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_disable_irq
r_void
(paren
op_star
id|fd_disable_irq
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_request_irq
r_int
(paren
op_star
id|fd_request_irq
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_free_irq
r_void
(paren
op_star
id|fd_free_irq
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|fd_eject
r_int
(paren
op_star
id|fd_eject
)paren
(paren
r_int
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|variable|sun_fdops
r_static
r_struct
id|sun_floppy_ops
id|sun_fdops
suffix:semicolon
DECL|macro|fd_inb
mdefine_line|#define fd_inb(port)              sun_fdops.fd_inb(port)
DECL|macro|fd_outb
mdefine_line|#define fd_outb(value,port)       sun_fdops.fd_outb(value,port)
DECL|macro|fd_enable_dma
mdefine_line|#define fd_enable_dma()           sun_fdops.fd_enable_dma()
DECL|macro|fd_disable_dma
mdefine_line|#define fd_disable_dma()          sun_fdops.fd_disable_dma()
DECL|macro|fd_request_dma
mdefine_line|#define fd_request_dma()          (0) /* nothing... */
DECL|macro|fd_free_dma
mdefine_line|#define fd_free_dma()             /* nothing... */
DECL|macro|fd_clear_dma_ff
mdefine_line|#define fd_clear_dma_ff()         /* nothing... */
DECL|macro|fd_set_dma_mode
mdefine_line|#define fd_set_dma_mode(mode)     sun_fdops.fd_set_dma_mode(mode)
DECL|macro|fd_set_dma_addr
mdefine_line|#define fd_set_dma_addr(addr)     sun_fdops.fd_set_dma_addr(addr)
DECL|macro|fd_set_dma_count
mdefine_line|#define fd_set_dma_count(count)   sun_fdops.fd_set_dma_count(count)
DECL|macro|get_dma_residue
mdefine_line|#define get_dma_residue(x)        sun_fdops.get_dma_residue()
DECL|macro|fd_enable_irq
mdefine_line|#define fd_enable_irq()           sun_fdops.fd_enable_irq()
DECL|macro|fd_disable_irq
mdefine_line|#define fd_disable_irq()          sun_fdops.fd_disable_irq()
DECL|macro|fd_cacheflush
mdefine_line|#define fd_cacheflush(addr, size) /* nothing... */
DECL|macro|fd_request_irq
mdefine_line|#define fd_request_irq()          sun_fdops.fd_request_irq()
DECL|macro|fd_free_irq
mdefine_line|#define fd_free_irq()             sun_fdops.fd_free_irq()
DECL|macro|fd_eject
mdefine_line|#define fd_eject(drive)           sun_fdops.fd_eject(drive)
DECL|variable|FLOPPY_MOTOR_MASK
r_static
r_int
id|FLOPPY_MOTOR_MASK
op_assign
l_int|0x10
suffix:semicolon
DECL|macro|FLOPPY0_TYPE
mdefine_line|#define FLOPPY0_TYPE  4
DECL|macro|FLOPPY1_TYPE
mdefine_line|#define FLOPPY1_TYPE  0
multiline_comment|/* Super paranoid... */
DECL|macro|HAVE_DISABLE_HLT
macro_line|#undef HAVE_DISABLE_HLT
multiline_comment|/* Here is where we catch the floppy driver trying to initialize,&n; * therefore this is where we call the PROM device tree probing&n; * routine etc. on the Sparc.&n; */
DECL|macro|FDC1
mdefine_line|#define FDC1                      sun_floppy_init()
DECL|variable|FDC2
r_static
r_int
id|FDC2
op_assign
op_minus
l_int|1
suffix:semicolon
DECL|macro|N_FDC
mdefine_line|#define N_FDC    1
DECL|macro|N_DRIVE
mdefine_line|#define N_DRIVE  8
multiline_comment|/* No 64k boundary crossing problems on the Sparc. */
DECL|macro|CROSS_64KB
mdefine_line|#define CROSS_64KB(a,s) (0)
DECL|function|sun_82077_fd_inb
r_static
r_int
r_char
id|sun_82077_fd_inb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_switch
c_cond
(paren
id|port
op_amp
l_int|7
)paren
(brace
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;floppy: Asked to read unknown port %lx&bslash;n&quot;
comma
id|port
)paren
suffix:semicolon
id|panic
c_func
(paren
l_string|&quot;floppy: Port bolixed.&quot;
)paren
suffix:semicolon
r_case
l_int|4
suffix:colon
multiline_comment|/* FD_STATUS */
r_return
id|sun_fdc-&gt;status_82077
op_amp
op_complement
id|STATUS_DMA
suffix:semicolon
r_case
l_int|5
suffix:colon
multiline_comment|/* FD_DATA */
r_return
id|sun_fdc-&gt;data_82077
suffix:semicolon
r_case
l_int|7
suffix:colon
multiline_comment|/* FD_DIR */
multiline_comment|/* XXX: Is DCL on 0x80 in sun4m? */
r_return
id|sun_fdc-&gt;dir_82077
suffix:semicolon
)brace
suffix:semicolon
id|panic
c_func
(paren
l_string|&quot;sun_82072_fd_inb: How did I get here?&quot;
)paren
suffix:semicolon
)brace
DECL|function|sun_82077_fd_outb
r_static
r_void
id|sun_82077_fd_outb
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
r_switch
c_cond
(paren
id|port
op_amp
l_int|7
)paren
(brace
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;floppy: Asked to write to unknown port %lx&bslash;n&quot;
comma
id|port
)paren
suffix:semicolon
id|panic
c_func
(paren
l_string|&quot;floppy: Port bolixed.&quot;
)paren
suffix:semicolon
r_case
l_int|2
suffix:colon
multiline_comment|/* FD_DOR */
multiline_comment|/* Happily, the 82077 has a real DOR register. */
id|sun_fdc-&gt;dor_82077
op_assign
id|value
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|5
suffix:colon
multiline_comment|/* FD_DATA */
id|sun_fdc-&gt;data_82077
op_assign
id|value
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|7
suffix:colon
multiline_comment|/* FD_DCR */
id|sun_fdc-&gt;dcr_82077
op_assign
id|value
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
multiline_comment|/* FD_STATUS */
id|sun_fdc-&gt;status_82077
op_assign
id|value
suffix:semicolon
r_break
suffix:semicolon
)brace
suffix:semicolon
r_return
suffix:semicolon
)brace
multiline_comment|/* For pseudo-dma (Sun floppy drives have no real DMA available to&n; * them so we must eat the data fifo bytes directly ourselves) we have&n; * three state variables.  doing_pdma tells our inline low-level&n; * assembly floppy interrupt entry point whether it should sit and eat&n; * bytes from the fifo or just transfer control up to the higher level&n; * floppy interrupt c-code.  I tried very hard but I could not get the&n; * pseudo-dma to work in c-code without getting many overruns and&n; * underruns.  If non-zero, doing_pdma encodes the direction of&n; * the transfer for debugging.  1=read 2=write&n; */
DECL|variable|pdma_vaddr
r_char
op_star
id|pdma_vaddr
suffix:semicolon
DECL|variable|pdma_size
r_int
r_int
id|pdma_size
suffix:semicolon
DECL|variable|doing_pdma
r_volatile
r_int
id|doing_pdma
op_assign
l_int|0
suffix:semicolon
multiline_comment|/* This is software state */
DECL|variable|pdma_base
r_char
op_star
id|pdma_base
op_assign
l_int|0
suffix:semicolon
DECL|variable|pdma_areasize
r_int
r_int
id|pdma_areasize
suffix:semicolon
multiline_comment|/* Common routines to all controller types on the Sparc. */
DECL|function|virtual_dma_init
r_static
id|__inline__
r_void
id|virtual_dma_init
c_func
(paren
r_void
)paren
(brace
multiline_comment|/* nothing... */
)brace
DECL|function|sun_fd_disable_dma
r_static
r_void
id|sun_fd_disable_dma
c_func
(paren
r_void
)paren
(brace
id|doing_pdma
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|pdma_base
)paren
(brace
id|mmu_unlockarea
c_func
(paren
id|pdma_base
comma
id|pdma_areasize
)paren
suffix:semicolon
id|pdma_base
op_assign
l_int|0
suffix:semicolon
)brace
)brace
DECL|function|sun_fd_set_dma_mode
r_static
r_void
id|sun_fd_set_dma_mode
c_func
(paren
r_int
id|mode
)paren
(brace
r_switch
c_cond
(paren
id|mode
)paren
(brace
r_case
id|DMA_MODE_READ
suffix:colon
id|doing_pdma
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
id|DMA_MODE_WRITE
suffix:colon
id|doing_pdma
op_assign
l_int|2
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;Unknown dma mode %d&bslash;n&quot;
comma
id|mode
)paren
suffix:semicolon
id|panic
c_func
(paren
l_string|&quot;floppy: Giving up...&quot;
)paren
suffix:semicolon
)brace
)brace
DECL|function|sun_fd_set_dma_addr
r_static
r_void
id|sun_fd_set_dma_addr
c_func
(paren
r_char
op_star
id|buffer
)paren
(brace
id|pdma_vaddr
op_assign
id|buffer
suffix:semicolon
)brace
DECL|function|sun_fd_set_dma_count
r_static
r_void
id|sun_fd_set_dma_count
c_func
(paren
r_int
id|length
)paren
(brace
id|pdma_size
op_assign
id|length
suffix:semicolon
)brace
DECL|function|sun_fd_enable_dma
r_static
r_void
id|sun_fd_enable_dma
c_func
(paren
r_void
)paren
(brace
id|pdma_vaddr
op_assign
id|mmu_lockarea
c_func
(paren
id|pdma_vaddr
comma
id|pdma_size
)paren
suffix:semicolon
id|pdma_base
op_assign
id|pdma_vaddr
suffix:semicolon
id|pdma_areasize
op_assign
id|pdma_size
suffix:semicolon
)brace
multiline_comment|/* Our low-level entry point in arch/sparc/kernel/entry.S */
r_extern
r_void
id|floppy_hardint
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|unused
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
DECL|function|sun_fd_request_irq
r_static
r_int
id|sun_fd_request_irq
c_func
(paren
r_void
)paren
(brace
r_static
r_int
id|once
op_assign
l_int|0
suffix:semicolon
r_int
id|error
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|once
)paren
(brace
r_struct
id|devid_cookie
id|dcookie
suffix:semicolon
id|once
op_assign
l_int|1
suffix:semicolon
id|dcookie.real_dev_id
op_assign
l_int|NULL
suffix:semicolon
id|dcookie.imap
op_assign
id|dcookie.iclr
op_assign
l_int|0
suffix:semicolon
id|dcookie.pil
op_assign
op_minus
l_int|1
suffix:semicolon
id|dcookie.bus_cookie
op_assign
id|floppy_sdev-&gt;my_bus
suffix:semicolon
id|error
op_assign
id|request_fast_irq
c_func
(paren
id|FLOPPY_IRQ
comma
id|floppy_hardint
comma
(paren
id|SA_INTERRUPT
op_or
id|SA_SBUS
op_or
id|SA_DCOOKIE
)paren
comma
l_string|&quot;floppy&quot;
comma
op_amp
id|dcookie
)paren
suffix:semicolon
r_if
c_cond
(paren
id|error
op_eq
l_int|0
)paren
(brace
id|FLOPPY_IRQ
op_assign
id|dcookie.ret_ino
suffix:semicolon
)brace
r_return
(paren
(paren
id|error
op_eq
l_int|0
)paren
ques
c_cond
l_int|0
suffix:colon
op_minus
l_int|1
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|sun_fd_enable_irq
r_static
r_void
id|sun_fd_enable_irq
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|sun_fd_disable_irq
r_static
r_void
id|sun_fd_disable_irq
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|sun_fd_free_irq
r_static
r_void
id|sun_fd_free_irq
c_func
(paren
r_void
)paren
(brace
)brace
DECL|function|sun_get_dma_residue
r_static
r_int
r_int
id|sun_get_dma_residue
c_func
(paren
r_void
)paren
(brace
multiline_comment|/* XXX This isn&squot;t really correct. XXX */
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|sun_fd_eject
r_static
r_int
id|sun_fd_eject
c_func
(paren
r_int
id|drive
)paren
(brace
id|set_dor
c_func
(paren
l_int|0x00
comma
l_int|0xff
comma
l_int|0x90
)paren
suffix:semicolon
id|udelay
c_func
(paren
l_int|500
)paren
suffix:semicolon
id|set_dor
c_func
(paren
l_int|0x00
comma
l_int|0x6f
comma
l_int|0x00
)paren
suffix:semicolon
id|udelay
c_func
(paren
l_int|500
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_PCI
macro_line|#include &lt;asm/ebus.h&gt;
DECL|variable|sun_fd_ebus_dma
r_static
r_struct
id|linux_ebus_dma
op_star
id|sun_fd_ebus_dma
suffix:semicolon
r_extern
r_void
id|floppy_interrupt
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_id
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
DECL|function|sun_pci_fd_inb
r_static
r_int
r_char
id|sun_pci_fd_inb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
r_return
id|inb
c_func
(paren
id|port
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_outb
r_static
r_void
id|sun_pci_fd_outb
c_func
(paren
r_int
r_char
id|val
comma
r_int
r_int
id|port
)paren
(brace
id|outb
c_func
(paren
id|val
comma
id|port
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_enable_dma
r_static
r_void
id|sun_pci_fd_enable_dma
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|dcsr
suffix:semicolon
id|dcsr
op_assign
id|readl
c_func
(paren
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
id|dcsr
op_or_assign
(paren
id|EBUS_DCSR_EN_DMA
op_or
id|EBUS_DCSR_EN_CNT
)paren
suffix:semicolon
id|writel
c_func
(paren
id|dcsr
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_disable_dma
r_static
r_void
id|sun_pci_fd_disable_dma
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|dcsr
suffix:semicolon
id|dcsr
op_assign
id|readl
c_func
(paren
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
id|dcsr
op_and_assign
op_complement
(paren
id|EBUS_DCSR_EN_DMA
op_or
id|EBUS_DCSR_EN_CNT
)paren
suffix:semicolon
id|writel
c_func
(paren
id|dcsr
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_set_dma_mode
r_static
r_void
id|sun_pci_fd_set_dma_mode
c_func
(paren
r_int
id|mode
)paren
(brace
r_int
r_int
id|dcsr
suffix:semicolon
id|dcsr
op_assign
id|readl
c_func
(paren
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * For EBus WRITE means to system memory, which is&n;&t; * READ for us.&n;&t; */
r_if
c_cond
(paren
id|mode
op_eq
id|DMA_MODE_WRITE
)paren
id|dcsr
op_and_assign
op_complement
(paren
id|EBUS_DCSR_WRITE
)paren
suffix:semicolon
r_else
id|dcsr
op_or_assign
id|EBUS_DCSR_WRITE
suffix:semicolon
id|writel
c_func
(paren
id|dcsr
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_set_dma_count
r_static
r_void
id|sun_pci_fd_set_dma_count
c_func
(paren
r_int
id|length
)paren
(brace
id|writel
c_func
(paren
id|length
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dbcr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_set_dma_addr
r_static
r_void
id|sun_pci_fd_set_dma_addr
c_func
(paren
r_char
op_star
id|buffer
)paren
(brace
r_int
r_int
id|addr
suffix:semicolon
id|addr
op_assign
id|virt_to_bus
c_func
(paren
id|buffer
)paren
suffix:semicolon
id|writel
c_func
(paren
id|addr
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dacr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_enable_irq
r_static
r_void
id|sun_pci_fd_enable_irq
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|dcsr
suffix:semicolon
id|dcsr
op_assign
id|readl
c_func
(paren
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
id|dcsr
op_or_assign
id|EBUS_DCSR_INT_EN
suffix:semicolon
id|writel
c_func
(paren
id|dcsr
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_disable_irq
r_static
r_void
id|sun_pci_fd_disable_irq
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|dcsr
suffix:semicolon
id|dcsr
op_assign
id|readl
c_func
(paren
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
id|dcsr
op_and_assign
op_complement
(paren
id|EBUS_DCSR_INT_EN
)paren
suffix:semicolon
id|writel
c_func
(paren
id|dcsr
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_request_irq
r_static
r_int
id|sun_pci_fd_request_irq
c_func
(paren
r_void
)paren
(brace
r_int
id|error
suffix:semicolon
id|error
op_assign
id|request_irq
c_func
(paren
id|FLOPPY_IRQ
comma
id|floppy_interrupt
comma
id|SA_SHIRQ
comma
l_string|&quot;floppy&quot;
comma
id|sun_fdc
)paren
suffix:semicolon
r_return
(paren
(paren
id|error
op_eq
l_int|0
)paren
ques
c_cond
l_int|0
suffix:colon
op_minus
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_fd_free_irq
r_static
r_void
id|sun_pci_fd_free_irq
c_func
(paren
r_void
)paren
(brace
id|free_irq
c_func
(paren
id|FLOPPY_IRQ
comma
id|sun_fdc
)paren
suffix:semicolon
)brace
DECL|function|sun_pci_get_dma_residue
r_static
r_int
r_int
id|sun_pci_get_dma_residue
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|res
suffix:semicolon
id|res
op_assign
id|readl
c_func
(paren
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dbcr
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
DECL|function|sun_pci_fd_eject
r_static
r_int
id|sun_pci_fd_eject
c_func
(paren
r_int
id|drive
)paren
(brace
r_return
op_minus
id|EINVAL
suffix:semicolon
)brace
macro_line|#endif
DECL|variable|fd_regs
r_static
r_struct
id|linux_prom_registers
id|fd_regs
(braket
l_int|2
)braket
suffix:semicolon
DECL|function|sun_floppy_init
r_static
r_int
r_int
id|sun_floppy_init
c_func
(paren
r_void
)paren
(brace
r_char
id|state
(braket
l_int|128
)braket
suffix:semicolon
r_int
id|fd_node
comma
id|num_regs
suffix:semicolon
r_struct
id|linux_sbus
op_star
id|bus
suffix:semicolon
r_struct
id|linux_sbus_device
op_star
id|sdev
op_assign
l_int|NULL
suffix:semicolon
id|for_all_sbusdev
(paren
id|sdev
comma
id|bus
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|strcmp
c_func
(paren
id|sdev-&gt;prom_name
comma
l_string|&quot;SUNW,fdtwo&quot;
)paren
)paren
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id|sdev
)paren
(brace
id|floppy_sdev
op_assign
id|sdev
suffix:semicolon
id|FLOPPY_IRQ
op_assign
id|sdev-&gt;irqs
(braket
l_int|0
)braket
dot
id|pri
suffix:semicolon
)brace
r_else
(brace
macro_line|#ifdef CONFIG_PCI
r_struct
id|linux_ebus
op_star
id|ebus
suffix:semicolon
r_struct
id|linux_ebus_device
op_star
id|edev
suffix:semicolon
id|for_all_ebusdev
c_func
(paren
id|edev
comma
id|ebus
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|strcmp
c_func
(paren
id|edev-&gt;prom_name
comma
l_string|&quot;fdthree&quot;
)paren
)paren
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|edev
)paren
r_return
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|check_region
c_func
(paren
id|edev-&gt;base_address
(braket
l_int|1
)braket
comma
r_sizeof
(paren
r_struct
id|linux_ebus_dma
)paren
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;sun_floppy_init: can&squot;t get region %016lx (%d)&bslash;n&quot;
comma
id|edev-&gt;base_address
(braket
l_int|1
)braket
comma
(paren
r_int
)paren
r_sizeof
(paren
r_struct
id|linux_ebus_dma
)paren
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|request_region
c_func
(paren
id|edev-&gt;base_address
(braket
l_int|1
)braket
comma
r_sizeof
(paren
r_struct
id|linux_ebus_dma
)paren
comma
l_string|&quot;floppy DMA&quot;
)paren
suffix:semicolon
id|sun_fdc
op_assign
(paren
r_struct
id|sun_flpy_controller
op_star
)paren
id|edev-&gt;base_address
(braket
l_int|0
)braket
suffix:semicolon
id|FLOPPY_IRQ
op_assign
id|edev-&gt;irqs
(braket
l_int|0
)braket
suffix:semicolon
id|sun_fd_ebus_dma
op_assign
(paren
r_struct
id|linux_ebus_dma
op_star
)paren
id|edev-&gt;base_address
(braket
l_int|1
)braket
suffix:semicolon
id|writel
c_func
(paren
id|EBUS_DCSR_BURST_SZ_16
comma
(paren
r_int
r_int
)paren
op_amp
id|sun_fd_ebus_dma-&gt;dcsr
)paren
suffix:semicolon
id|sun_fdops.fd_inb
op_assign
id|sun_pci_fd_inb
suffix:semicolon
id|sun_fdops.fd_outb
op_assign
id|sun_pci_fd_outb
suffix:semicolon
id|use_virtual_dma
op_assign
l_int|0
suffix:semicolon
id|sun_fdops.fd_enable_dma
op_assign
id|sun_pci_fd_enable_dma
suffix:semicolon
id|sun_fdops.fd_disable_dma
op_assign
id|sun_pci_fd_disable_dma
suffix:semicolon
id|sun_fdops.fd_set_dma_mode
op_assign
id|sun_pci_fd_set_dma_mode
suffix:semicolon
id|sun_fdops.fd_set_dma_addr
op_assign
id|sun_pci_fd_set_dma_addr
suffix:semicolon
id|sun_fdops.fd_set_dma_count
op_assign
id|sun_pci_fd_set_dma_count
suffix:semicolon
id|sun_fdops.get_dma_residue
op_assign
id|sun_pci_get_dma_residue
suffix:semicolon
id|sun_fdops.fd_enable_irq
op_assign
id|sun_pci_fd_enable_irq
suffix:semicolon
id|sun_fdops.fd_disable_irq
op_assign
id|sun_pci_fd_disable_irq
suffix:semicolon
id|sun_fdops.fd_request_irq
op_assign
id|sun_pci_fd_request_irq
suffix:semicolon
id|sun_fdops.fd_free_irq
op_assign
id|sun_pci_fd_free_irq
suffix:semicolon
id|sun_fdops.fd_eject
op_assign
id|sun_pci_fd_eject
suffix:semicolon
id|fdc_status
op_assign
op_amp
id|sun_fdc-&gt;status_82077
suffix:semicolon
id|FLOPPY_MOTOR_MASK
op_assign
l_int|0xf0
suffix:semicolon
r_return
(paren
r_int
r_int
)paren
id|sun_fdc
suffix:semicolon
macro_line|#else
r_return
op_minus
l_int|1
suffix:semicolon
macro_line|#endif
)brace
id|fd_node
op_assign
id|sdev-&gt;prom_node
suffix:semicolon
id|prom_getproperty
c_func
(paren
id|fd_node
comma
l_string|&quot;status&quot;
comma
id|state
comma
r_sizeof
(paren
id|state
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|strncmp
c_func
(paren
id|state
comma
l_string|&quot;disabled&quot;
comma
l_int|8
)paren
)paren
(brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|num_regs
op_assign
id|prom_getproperty
c_func
(paren
id|fd_node
comma
l_string|&quot;reg&quot;
comma
(paren
r_char
op_star
)paren
id|fd_regs
comma
r_sizeof
(paren
id|fd_regs
)paren
)paren
suffix:semicolon
id|num_regs
op_assign
(paren
id|num_regs
op_div
r_sizeof
(paren
id|fd_regs
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
id|prom_apply_sbus_ranges
c_func
(paren
id|sdev-&gt;my_bus
comma
id|fd_regs
comma
id|num_regs
comma
id|sdev
)paren
suffix:semicolon
id|sun_fdc
op_assign
(paren
r_struct
id|sun_flpy_controller
op_star
)paren
id|sparc_alloc_io
c_func
(paren
id|fd_regs
(braket
l_int|0
)braket
dot
id|phys_addr
comma
l_int|0x0
comma
id|fd_regs
(braket
l_int|0
)braket
dot
id|reg_size
comma
l_string|&quot;floppy&quot;
comma
id|fd_regs
(braket
l_int|0
)braket
dot
id|which_io
comma
l_int|0x0
)paren
suffix:semicolon
multiline_comment|/* Last minute sanity check... */
r_if
c_cond
(paren
id|sun_fdc-&gt;status1_82077
op_eq
l_int|0xff
)paren
(brace
id|sun_fdc
op_assign
l_int|NULL
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
id|sun_fdops.fd_inb
op_assign
id|sun_82077_fd_inb
suffix:semicolon
id|sun_fdops.fd_outb
op_assign
id|sun_82077_fd_outb
suffix:semicolon
id|use_virtual_dma
op_assign
l_int|1
suffix:semicolon
id|sun_fdops.fd_enable_dma
op_assign
id|sun_fd_enable_dma
suffix:semicolon
id|sun_fdops.fd_disable_dma
op_assign
id|sun_fd_disable_dma
suffix:semicolon
id|sun_fdops.fd_set_dma_mode
op_assign
id|sun_fd_set_dma_mode
suffix:semicolon
id|sun_fdops.fd_set_dma_addr
op_assign
id|sun_fd_set_dma_addr
suffix:semicolon
id|sun_fdops.fd_set_dma_count
op_assign
id|sun_fd_set_dma_count
suffix:semicolon
id|sun_fdops.get_dma_residue
op_assign
id|sun_get_dma_residue
suffix:semicolon
id|sun_fdops.fd_enable_irq
op_assign
id|sun_fd_enable_irq
suffix:semicolon
id|sun_fdops.fd_disable_irq
op_assign
id|sun_fd_disable_irq
suffix:semicolon
id|sun_fdops.fd_request_irq
op_assign
id|sun_fd_request_irq
suffix:semicolon
id|sun_fdops.fd_free_irq
op_assign
id|sun_fd_free_irq
suffix:semicolon
id|sun_fdops.fd_eject
op_assign
id|sun_fd_eject
suffix:semicolon
id|fdc_status
op_assign
op_amp
id|sun_fdc-&gt;status_82077
suffix:semicolon
multiline_comment|/* printk(&quot;DOR @0x%p&bslash;n&quot;, &amp;sun_fdc-&gt;dor_82077); */
multiline_comment|/* P3 */
multiline_comment|/* Success... */
r_return
(paren
r_int
r_int
)paren
id|sun_fdc
suffix:semicolon
)brace
macro_line|#endif /* !(__ASM_SPARC64_FLOPPY_H) */
eof
