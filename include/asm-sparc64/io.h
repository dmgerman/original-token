multiline_comment|/* $Id: io.h,v 1.24 1999/09/06 01:17:54 davem Exp $ */
macro_line|#ifndef __SPARC64_IO_H
DECL|macro|__SPARC64_IO_H
mdefine_line|#define __SPARC64_IO_H
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/page.h&gt;      /* IO address mapping routines need this */
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/asi.h&gt;
multiline_comment|/* PC crapola... */
DECL|macro|__SLOW_DOWN_IO
mdefine_line|#define __SLOW_DOWN_IO&t;do { } while (0)
DECL|macro|SLOW_DOWN_IO
mdefine_line|#define SLOW_DOWN_IO&t;do { } while (0)
DECL|macro|PCI_DVMA_HASHSZ
mdefine_line|#define PCI_DVMA_HASHSZ&t;256
r_extern
r_int
r_int
id|pci_dvma_v2p_hash
(braket
id|PCI_DVMA_HASHSZ
)braket
suffix:semicolon
r_extern
r_int
r_int
id|pci_dvma_p2v_hash
(braket
id|PCI_DVMA_HASHSZ
)braket
suffix:semicolon
DECL|macro|pci_dvma_ahashfn
mdefine_line|#define pci_dvma_ahashfn(addr)&t;(((addr) &gt;&gt; 24) &amp; 0xff)
DECL|function|virt_to_phys
r_extern
id|__inline__
r_int
r_int
id|virt_to_phys
c_func
(paren
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|vaddr
op_assign
(paren
r_int
r_int
)paren
id|addr
suffix:semicolon
r_int
r_int
id|off
suffix:semicolon
multiline_comment|/* Handle kernel variable pointers... */
r_if
c_cond
(paren
id|vaddr
OL
id|PAGE_OFFSET
)paren
id|vaddr
op_add_assign
id|PAGE_OFFSET
op_minus
(paren
r_int
r_int
)paren
op_amp
id|empty_zero_page
suffix:semicolon
id|off
op_assign
id|pci_dvma_v2p_hash
(braket
id|pci_dvma_ahashfn
c_func
(paren
id|vaddr
op_minus
id|PAGE_OFFSET
)paren
)braket
suffix:semicolon
r_return
id|vaddr
op_plus
id|off
suffix:semicolon
)brace
DECL|function|phys_to_virt
r_extern
id|__inline__
r_void
op_star
id|phys_to_virt
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|paddr
op_assign
id|addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|off
suffix:semicolon
id|off
op_assign
id|pci_dvma_p2v_hash
(braket
id|pci_dvma_ahashfn
c_func
(paren
id|paddr
)paren
)braket
suffix:semicolon
r_return
(paren
r_void
op_star
)paren
(paren
id|paddr
op_plus
id|off
)paren
suffix:semicolon
)brace
DECL|macro|virt_to_bus
mdefine_line|#define virt_to_bus virt_to_phys
DECL|macro|bus_to_virt
mdefine_line|#define bus_to_virt phys_to_virt
multiline_comment|/* Different PCI controllers we support have their PCI MEM space&n; * mapped to an either 2GB (Psycho) or 4GB (Sabre) aligned area,&n; * so need to chop off the top 33 or 32 bits.&n; */
r_extern
r_int
r_int
id|pci_memspace_mask
suffix:semicolon
DECL|macro|bus_dvma_to_mem
mdefine_line|#define bus_dvma_to_mem(__vaddr) ((__vaddr) &amp; pci_memspace_mask)
DECL|function|inb
r_extern
id|__inline__
r_int
r_int
id|inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|ret
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduba [%1] %2, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|inw
r_extern
id|__inline__
r_int
r_int
id|inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|ret
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduha [%1] %2, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|inl
r_extern
id|__inline__
r_int
r_int
id|inl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|ret
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduwa [%1] %2, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|outb
r_extern
id|__inline__
r_void
id|outb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stba %0, [%1] %2&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|b
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
)brace
DECL|function|outw
r_extern
id|__inline__
r_void
id|outw
c_func
(paren
r_int
r_int
id|w
comma
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stha %0, [%1] %2&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|w
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
)brace
DECL|function|outl
r_extern
id|__inline__
r_void
id|outl
c_func
(paren
r_int
r_int
id|l
comma
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stwa %0, [%1] %2&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|l
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
)brace
DECL|macro|inb_p
mdefine_line|#define inb_p inb
DECL|macro|outb_p
mdefine_line|#define outb_p outb
r_extern
r_void
id|outsb
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsw
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|outsl
c_func
(paren
r_int
r_int
id|addr
comma
r_const
r_void
op_star
id|src
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insb
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insw
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
r_extern
r_void
id|insl
c_func
(paren
r_int
r_int
id|addr
comma
r_void
op_star
id|dst
comma
r_int
r_int
id|count
)paren
suffix:semicolon
multiline_comment|/* Memory functions, same as I/O accesses on Ultra. */
DECL|function|_readb
r_extern
id|__inline__
r_int
r_int
id|_readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|ret
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduba [%1] %2, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|_readw
r_extern
id|__inline__
r_int
r_int
id|_readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|ret
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduha [%1] %2, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|_readl
r_extern
id|__inline__
r_int
r_int
id|_readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|ret
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lduwa [%1] %2, %0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|_writeb
r_extern
id|__inline__
r_void
id|_writeb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stba %0, [%1] %2&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|b
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
)brace
DECL|function|_writew
r_extern
id|__inline__
r_void
id|_writew
c_func
(paren
r_int
r_int
id|w
comma
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stha %0, [%1] %2&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|w
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
)brace
DECL|function|_writel
r_extern
id|__inline__
r_void
id|_writel
c_func
(paren
r_int
r_int
id|l
comma
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;stwa %0, [%1] %2&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|l
)paren
comma
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|ASI_PHYS_BYPASS_EC_E_L
)paren
)paren
suffix:semicolon
)brace
DECL|macro|readb
mdefine_line|#define readb(__addr)&t;&t;(_readb((unsigned long)(__addr)))
DECL|macro|readw
mdefine_line|#define readw(__addr)&t;&t;(_readw((unsigned long)(__addr)))
DECL|macro|readl
mdefine_line|#define readl(__addr)&t;&t;(_readl((unsigned long)(__addr)))
DECL|macro|writeb
mdefine_line|#define writeb(__b, __addr)&t;(_writeb((__b), (unsigned long)(__addr)))
DECL|macro|writew
mdefine_line|#define writew(__w, __addr)&t;(_writew((__w), (unsigned long)(__addr)))
DECL|macro|writel
mdefine_line|#define writel(__l, __addr)&t;(_writel((__l), (unsigned long)(__addr)))
DECL|macro|IO_SPACE_LIMIT
mdefine_line|#define IO_SPACE_LIMIT 0xffffffff
multiline_comment|/*&n; * Memcpy to/from I/O space is just a regular memory operation on&n; * Ultra as well.&n; */
multiline_comment|/*&n; * FIXME: Write faster routines using ASL_*L for this.&n; */
r_static
r_inline
r_void
op_star
DECL|function|memset_io
id|memset_io
c_func
(paren
r_void
op_star
id|dst
comma
r_int
id|c
comma
id|__kernel_size_t
id|n
)paren
(brace
r_char
op_star
id|d
op_assign
id|dst
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
op_star
id|d
op_increment
op_assign
id|c
suffix:semicolon
r_return
id|dst
suffix:semicolon
)brace
r_static
r_inline
r_void
op_star
DECL|function|memcpy_fromio
id|memcpy_fromio
c_func
(paren
r_void
op_star
id|dst
comma
r_const
r_void
op_star
id|src
comma
id|__kernel_size_t
id|n
)paren
(brace
r_const
r_char
op_star
id|s
op_assign
id|src
suffix:semicolon
r_char
op_star
id|d
op_assign
id|dst
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
op_star
id|d
op_increment
op_assign
op_star
id|s
op_increment
suffix:semicolon
r_return
id|dst
suffix:semicolon
)brace
r_static
r_inline
r_void
op_star
DECL|function|memcpy_toio
id|memcpy_toio
c_func
(paren
r_void
op_star
id|dst
comma
r_const
r_void
op_star
id|src
comma
id|__kernel_size_t
id|n
)paren
(brace
r_const
r_char
op_star
id|s
op_assign
id|src
suffix:semicolon
r_char
op_star
id|d
op_assign
id|dst
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
op_star
id|d
op_increment
op_assign
op_star
id|s
op_increment
suffix:semicolon
r_return
id|dst
suffix:semicolon
)brace
macro_line|#if 0 /* XXX Not exactly, we need to use ASI_*L from/to the I/O end,&n;       * XXX so these are disabled until we code that stuff.&n;       */
mdefine_line|#define eth_io_copy_and_sum(a,b,c,d) eth_copy_and_sum((a),((char *)(b)),(c),(d))
macro_line|#endif
DECL|function|check_signature
r_static
r_inline
r_int
id|check_signature
c_func
(paren
r_int
r_int
id|io_addr
comma
r_const
r_int
r_char
op_star
id|signature
comma
r_int
id|length
)paren
(brace
r_int
id|retval
op_assign
l_int|0
suffix:semicolon
r_do
(brace
r_if
c_cond
(paren
id|readb
c_func
(paren
id|io_addr
op_increment
)paren
op_ne
op_star
id|signature
op_increment
)paren
r_goto
id|out
suffix:semicolon
)brace
r_while
c_loop
(paren
op_decrement
id|length
)paren
suffix:semicolon
id|retval
op_assign
l_int|1
suffix:semicolon
id|out
suffix:colon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/* On sparc64 we have the whole physical IO address space accessible&n; * using physically addressed loads and stores, so this does nothing.&n; */
DECL|macro|ioremap
mdefine_line|#define ioremap(__offset, __size)&t;((void *)(__offset))
DECL|macro|iounmap
mdefine_line|#define iounmap(__addr)&t;&t;&t;do { } while(0)
r_extern
r_void
id|sparc_ultra_mapioaddr
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|virt_addr
comma
r_int
id|bus
comma
r_int
id|rdonly
)paren
suffix:semicolon
r_extern
r_void
id|sparc_ultra_unmapioaddr
c_func
(paren
r_int
r_int
id|virt_addr
)paren
suffix:semicolon
DECL|function|mapioaddr
r_extern
id|__inline__
r_void
id|mapioaddr
c_func
(paren
r_int
r_int
id|physaddr
comma
r_int
r_int
id|virt_addr
comma
r_int
id|bus
comma
r_int
id|rdonly
)paren
(brace
id|sparc_ultra_mapioaddr
c_func
(paren
id|physaddr
comma
id|virt_addr
comma
id|bus
comma
id|rdonly
)paren
suffix:semicolon
)brace
DECL|function|unmapioaddr
r_extern
id|__inline__
r_void
id|unmapioaddr
c_func
(paren
r_int
r_int
id|virt_addr
)paren
(brace
id|sparc_ultra_unmapioaddr
c_func
(paren
id|virt_addr
)paren
suffix:semicolon
)brace
r_extern
r_void
op_star
id|sparc_alloc_io
c_func
(paren
id|u32
id|pa
comma
r_void
op_star
id|va
comma
r_int
id|sz
comma
r_char
op_star
id|name
comma
id|u32
id|io
comma
r_int
id|rdonly
)paren
suffix:semicolon
r_extern
r_void
id|sparc_free_io
(paren
r_void
op_star
id|va
comma
r_int
id|sz
)paren
suffix:semicolon
r_extern
r_void
op_star
id|sparc_dvma_malloc
(paren
r_int
id|sz
comma
r_char
op_star
id|name
comma
id|__u32
op_star
id|dvma_addr
)paren
suffix:semicolon
multiline_comment|/* Nothing to do */
DECL|macro|dma_cache_inv
mdefine_line|#define dma_cache_inv(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback
mdefine_line|#define dma_cache_wback(_start,_size)&t;&t;do { } while (0)
DECL|macro|dma_cache_wback_inv
mdefine_line|#define dma_cache_wback_inv(_start,_size)&t;do { } while (0)
macro_line|#endif /* !(__SPARC64_IO_H) */
eof
