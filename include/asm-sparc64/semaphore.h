macro_line|#ifndef _SPARC64_SEMAPHORE_H
DECL|macro|_SPARC64_SEMAPHORE_H
mdefine_line|#define _SPARC64_SEMAPHORE_H
multiline_comment|/* These are actually reasonable on the V9. */
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/system.h&gt;
DECL|struct|semaphore
r_struct
id|semaphore
(brace
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
DECL|member|waking
id|atomic_t
id|waking
suffix:semicolon
DECL|member|wait
r_struct
id|wait_queue
op_star
id|wait
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|MUTEX
mdefine_line|#define MUTEX ((struct semaphore) { ATOMIC_INIT(1), ATOMIC_INIT(0), NULL })
DECL|macro|MUTEX_LOCKED
mdefine_line|#define MUTEX_LOCKED ((struct semaphore) { ATOMIC_INIT(0), ATOMIC_INIT(0), NULL })
r_extern
r_void
id|__down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_int
id|__down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_int
id|__down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_void
id|__up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
DECL|macro|sema_init
mdefine_line|#define sema_init(sem, val)&t;atomic_set(&amp;((sem)-&gt;count), val)
DECL|function|down
r_extern
id|__inline__
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
l_int|1
suffix:colon
id|lduw
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g5
id|sub
op_mod
op_mod
id|g5
comma
l_int|1
comma
op_mod
op_mod
id|g7
id|cas
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|cmp
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|bne
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|cmp
op_mod
op_mod
id|g7
comma
l_int|1
id|bl
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|3f
id|membar
macro_line|#StoreStore
l_int|2
suffix:colon
dot
id|subsection
l_int|2
l_int|3
suffix:colon
id|mov
op_mod
l_int|0
comma
op_mod
op_mod
id|g5
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|160
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g2
comma
op_mod
op_mod
id|l2
id|mov
op_mod
op_mod
id|g3
comma
op_mod
op_mod
id|l3
id|call
op_mod
l_int|1
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|mov
op_mod
op_mod
id|l2
comma
op_mod
op_mod
id|g2
id|ba
comma
id|pt
op_mod
op_mod
id|xcc
comma
l_int|2
id|b
id|restore
op_mod
op_mod
id|l3
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g3
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
)paren
comma
l_string|&quot;i&quot;
(paren
id|__down
)paren
suffix:colon
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
DECL|function|down_interruptible
r_extern
id|__inline__
r_int
id|down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
l_int|1
suffix:colon
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
op_mod
id|g5
id|sub
op_mod
op_mod
id|g5
comma
l_int|1
comma
op_mod
op_mod
id|g7
id|cas
(braket
op_mod
l_int|2
)braket
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|cmp
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|bne
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|cmp
op_mod
op_mod
id|g7
comma
l_int|1
id|bl
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|3f
id|membar
macro_line|#StoreStore
l_int|2
suffix:colon
dot
id|subsection
l_int|2
l_int|3
suffix:colon
id|mov
op_mod
l_int|2
comma
op_mod
op_mod
id|g5
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|160
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g2
comma
op_mod
op_mod
id|l2
id|mov
op_mod
op_mod
id|g3
comma
op_mod
op_mod
id|l3
id|call
op_mod
l_int|3
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|mov
op_mod
op_mod
id|l2
comma
op_mod
op_mod
id|g2
id|mov
op_mod
op_mod
id|l3
comma
op_mod
op_mod
id|g3
id|ba
comma
id|pt
op_mod
op_mod
id|xcc
comma
l_int|2
id|b
id|restore
op_mod
op_mod
id|o0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ret
)paren
comma
l_string|&quot;r&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
)paren
comma
l_string|&quot;i&quot;
(paren
id|__down_interruptible
)paren
suffix:colon
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|down_trylock
r_extern
r_inline
r_int
id|down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
l_int|1
suffix:colon
id|lduw
(braket
op_mod
l_int|2
)braket
comma
op_mod
op_mod
id|g5
id|sub
op_mod
op_mod
id|g5
comma
l_int|1
comma
op_mod
op_mod
id|g7
id|cas
(braket
op_mod
l_int|2
)braket
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|cmp
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|bne
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|cmp
op_mod
op_mod
id|g7
comma
l_int|1
id|bl
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|3f
id|membar
macro_line|#StoreStore
l_int|2
suffix:colon
dot
id|subsection
l_int|2
l_int|3
suffix:colon
id|mov
op_mod
l_int|2
comma
op_mod
op_mod
id|g5
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|160
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g2
comma
op_mod
op_mod
id|l2
id|mov
op_mod
op_mod
id|g3
comma
op_mod
op_mod
id|l3
id|call
op_mod
l_int|3
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|mov
op_mod
op_mod
id|l2
comma
op_mod
op_mod
id|g2
id|mov
op_mod
op_mod
id|l3
comma
op_mod
op_mod
id|g3
id|ba
comma
id|pt
op_mod
op_mod
id|xcc
comma
l_int|2
id|b
id|restore
op_mod
op_mod
id|o0
comma
op_mod
op_mod
id|g0
comma
op_mod
l_int|0
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|ret
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|ret
)paren
comma
l_string|&quot;r&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
)paren
comma
l_string|&quot;i&quot;
(paren
id|__down_trylock
)paren
suffix:colon
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|up
r_extern
id|__inline__
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
"&quot;"
id|membar
macro_line|#StoreLoad | #LoadLoad
l_int|1
suffix:colon
id|lduw
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g5
id|add
op_mod
op_mod
id|g5
comma
l_int|1
comma
op_mod
op_mod
id|g7
id|cas
(braket
op_mod
l_int|0
)braket
comma
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|cmp
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|g7
id|bne
comma
id|pn
op_mod
op_mod
id|icc
comma
l_int|1
id|b
id|addcc
op_mod
op_mod
id|g7
comma
l_int|1
comma
op_mod
op_mod
id|g0
id|ble
comma
id|pn
op_mod
op_mod
id|icc
comma
l_float|3f
id|nop
l_int|2
suffix:colon
dot
id|subsection
l_int|2
l_int|3
suffix:colon
id|mov
op_mod
l_int|0
comma
op_mod
op_mod
id|g5
id|save
op_mod
op_mod
id|sp
comma
op_minus
l_int|160
comma
op_mod
op_mod
id|sp
id|mov
op_mod
op_mod
id|g1
comma
op_mod
op_mod
id|l1
id|mov
op_mod
op_mod
id|g2
comma
op_mod
op_mod
id|l2
id|mov
op_mod
op_mod
id|g3
comma
op_mod
op_mod
id|l3
id|call
op_mod
l_int|1
id|mov
op_mod
op_mod
id|g5
comma
op_mod
op_mod
id|o0
id|mov
op_mod
op_mod
id|l1
comma
op_mod
op_mod
id|g1
id|mov
op_mod
op_mod
id|l2
comma
op_mod
op_mod
id|g2
id|ba
comma
id|pt
op_mod
op_mod
id|xcc
comma
l_int|2
id|b
id|restore
op_mod
op_mod
id|l3
comma
op_mod
op_mod
id|g0
comma
op_mod
op_mod
id|g3
dot
id|previous
"&bslash;"
id|n
"&quot;"
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|sem
)paren
)paren
comma
l_string|&quot;i&quot;
(paren
id|__up
)paren
suffix:colon
l_string|&quot;g5&quot;
comma
l_string|&quot;g7&quot;
comma
l_string|&quot;memory&quot;
comma
l_string|&quot;cc&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* !(_SPARC64_SEMAPHORE_H) */
eof
