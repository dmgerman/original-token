multiline_comment|/* hardirq.h: 64-bit Sparc hard IRQ support.&n; *&n; * Copyright (C) 1997 David S. Miller (davem@caip.rutgers.edu)&n; */
macro_line|#ifndef __SPARC64_HARDIRQ_H
DECL|macro|__SPARC64_HARDIRQ_H
mdefine_line|#define __SPARC64_HARDIRQ_H
macro_line|#include &lt;linux/tasks.h&gt;
macro_line|#ifndef __SMP__
r_extern
r_int
r_int
id|local_irq_count
suffix:semicolon
macro_line|#else
DECL|macro|local_irq_count
mdefine_line|#define local_irq_count&t;&t;(cpu_data[smp_processor_id()].irq_count)
macro_line|#endif
DECL|macro|in_interrupt
mdefine_line|#define in_interrupt()&t;&t;(local_irq_count != 0)
macro_line|#ifndef __SMP__
DECL|macro|hardirq_trylock
mdefine_line|#define hardirq_trylock(cpu)&t;(local_irq_count == 0)
DECL|macro|hardirq_endlock
mdefine_line|#define hardirq_endlock(cpu)&t;do { } while(0)
DECL|macro|hardirq_enter
mdefine_line|#define hardirq_enter(cpu)&t;(local_irq_count++)
DECL|macro|hardirq_exit
mdefine_line|#define hardirq_exit(cpu)&t;(local_irq_count--)
DECL|macro|synchronize_irq
mdefine_line|#define synchronize_irq()&t;barrier()
macro_line|#else /* (__SMP__) */
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/spinlock.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/smp.h&gt;
r_extern
r_int
r_char
id|global_irq_holder
suffix:semicolon
r_extern
id|spinlock_t
id|global_irq_lock
suffix:semicolon
r_extern
id|atomic_t
id|global_irq_count
suffix:semicolon
DECL|function|release_irqlock
r_static
r_inline
r_void
id|release_irqlock
c_func
(paren
r_int
id|cpu
)paren
(brace
multiline_comment|/* if we didn&squot;t own the irq lock, just ignore... */
r_if
c_cond
(paren
id|global_irq_holder
op_eq
(paren
r_int
r_char
)paren
id|cpu
)paren
(brace
id|global_irq_holder
op_assign
id|NO_PROC_ID
suffix:semicolon
id|spin_unlock
c_func
(paren
op_amp
id|global_irq_lock
)paren
suffix:semicolon
)brace
)brace
DECL|function|hardirq_enter
r_static
r_inline
r_void
id|hardirq_enter
c_func
(paren
r_int
id|cpu
)paren
(brace
op_increment
id|cpu_data
(braket
id|cpu
)braket
dot
id|irq_count
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|global_irq_count
)paren
suffix:semicolon
id|membar
c_func
(paren
l_string|&quot;#StoreLoad | #StoreStore&quot;
)paren
suffix:semicolon
)brace
DECL|function|hardirq_exit
r_static
r_inline
r_void
id|hardirq_exit
c_func
(paren
r_int
id|cpu
)paren
(brace
id|membar
c_func
(paren
l_string|&quot;#StoreStore | #LoadStore&quot;
)paren
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|global_irq_count
)paren
suffix:semicolon
op_decrement
id|cpu_data
(braket
id|cpu
)braket
dot
id|irq_count
suffix:semicolon
)brace
DECL|function|hardirq_trylock
r_static
r_inline
r_int
id|hardirq_trylock
c_func
(paren
r_int
id|cpu
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|__save_and_cli
c_func
(paren
id|flags
)paren
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|global_irq_count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|global_irq_count
)paren
op_ne
l_int|1
op_logical_or
(paren
op_star
(paren
(paren
(paren
r_int
r_char
op_star
)paren
(paren
op_amp
id|global_irq_lock
)paren
)paren
)paren
)paren
op_ne
l_int|0
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|global_irq_count
)paren
suffix:semicolon
id|__restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
op_increment
id|cpu_data
(braket
id|cpu
)braket
dot
id|irq_count
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|hardirq_endlock
r_static
r_inline
r_void
id|hardirq_endlock
c_func
(paren
r_int
id|cpu
)paren
(brace
id|__cli
c_func
(paren
)paren
suffix:semicolon
id|hardirq_exit
c_func
(paren
id|cpu
)paren
suffix:semicolon
id|__sti
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_void
id|synchronize_irq
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif /* __SMP__ */
macro_line|#endif /* !(__SPARC64_HARDIRQ_H) */
eof
