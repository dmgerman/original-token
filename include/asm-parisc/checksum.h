macro_line|#ifndef _PARISC_CHECKSUM_H
DECL|macro|_PARISC_CHECKSUM_H
mdefine_line|#define _PARISC_CHECKSUM_H
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
r_extern
r_int
r_int
id|csum_partial
c_func
(paren
r_const
r_int
r_char
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from src while it&n; * checksums&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_extern
r_int
r_int
id|csum_partial_copy
c_func
(paren
r_const
r_char
op_star
comma
r_char
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from user space&n; *&n; * this is obsolete and will go away.&n; */
DECL|macro|csum_partial_copy_fromuser
mdefine_line|#define csum_partial_copy_fromuser csum_partial_copy
multiline_comment|/*&n; * this is a new version of the above that records errors it finds in *errp,&n; * but continues and zeros the rest of the buffer.&n; */
r_int
r_int
id|csum_partial_copy_from_user
c_func
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
r_int
id|sum
comma
r_int
op_star
id|errp
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;Note: when you get a NULL pointer exception here this means someone&n; *&t;passed in an incorrect kernel address to one of these functions. &n; *&t;&n; *&t;If you use these functions directly please don&squot;t forget the &n; *&t;verify_area().&n; */
r_extern
id|__inline__
DECL|function|csum_partial_copy_nocheck
r_int
r_int
id|csum_partial_copy_nocheck
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
(brace
r_return
id|csum_partial_copy
(paren
id|src
comma
id|dst
comma
id|len
comma
id|sum
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Optimized for IP headers, which always checksum on 4 octet boundaries.&n; *&n; *&t;Written by Randolph Chung &lt;tausq@debian.org&gt;&n; */
DECL|function|ip_fast_csum
r_static
r_inline
r_int
r_int
id|ip_fast_csum
c_func
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
id|sum
suffix:semicolon
id|__asm__
id|__volatile__
(paren
"&quot;"
id|ldws
comma
id|ma
l_int|4
(paren
op_mod
l_int|1
)paren
comma
op_mod
l_int|0
id|addi
op_minus
l_int|4
comma
op_mod
l_int|2
comma
op_mod
l_int|2
id|comib
comma
op_ge
l_int|0
comma
op_mod
l_int|2
comma
l_float|2f
id|ldws
comma
id|ma
l_int|4
(paren
op_mod
l_int|1
)paren
comma
op_mod
op_mod
id|r19
id|add
op_mod
l_int|0
comma
op_mod
op_mod
id|r19
comma
op_mod
l_int|0
id|ldws
comma
id|ma
l_int|4
(paren
op_mod
l_int|1
)paren
comma
op_mod
op_mod
id|r19
id|addc
op_mod
l_int|0
comma
op_mod
op_mod
id|r19
comma
op_mod
l_int|0
id|ldws
comma
id|ma
l_int|4
(paren
op_mod
l_int|1
)paren
comma
op_mod
op_mod
id|r19
id|addc
op_mod
l_int|0
comma
op_mod
op_mod
id|r19
comma
op_mod
l_int|0
l_int|1
suffix:colon
id|ldws
comma
id|ma
l_int|4
(paren
op_mod
l_int|1
)paren
comma
op_mod
op_mod
id|r19
id|addib
comma
template_param
op_minus
l_int|1
comma
op_mod
l_int|2
comma
l_int|1
id|b
id|addc
op_mod
l_int|0
comma
op_mod
op_mod
id|r19
comma
op_mod
l_int|0
id|addc
op_mod
l_int|0
comma
op_mod
op_mod
id|r0
comma
op_mod
l_int|0
id|zdepi
op_minus
l_int|1
comma
l_int|31
comma
l_int|16
comma
op_mod
op_mod
id|r19
op_logical_and
op_mod
l_int|0
comma
op_mod
op_mod
id|r19
comma
op_mod
op_mod
id|r20
id|extru
op_mod
l_int|0
comma
l_int|15
comma
l_int|16
comma
op_mod
op_mod
id|r21
id|add
op_mod
op_mod
id|r20
comma
op_mod
op_mod
id|r21
comma
op_mod
l_int|0
op_logical_and
op_mod
l_int|0
comma
op_mod
op_mod
id|r19
comma
op_mod
op_mod
id|r20
id|extru
op_mod
l_int|0
comma
l_int|15
comma
l_int|16
comma
op_mod
op_mod
id|r21
id|add
op_mod
op_mod
id|r20
comma
op_mod
op_mod
id|r21
comma
op_mod
l_int|0
id|subi
op_minus
l_int|1
comma
op_mod
l_int|0
comma
op_mod
l_int|0
l_int|2
suffix:colon
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
comma
l_string|&quot;=r&quot;
(paren
id|iph
)paren
comma
l_string|&quot;=r&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|iph
)paren
comma
l_string|&quot;2&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;r19&quot;
comma
l_string|&quot;r20&quot;
comma
l_string|&quot;r21&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Fold a partial checksum&n; */
DECL|function|csum_fold
r_static
r_inline
r_int
r_int
id|csum_fold
c_func
(paren
r_int
r_int
id|sum
)paren
(brace
id|sum
op_assign
(paren
id|sum
op_amp
l_int|0xffff
)paren
op_plus
(paren
id|sum
op_rshift
l_int|16
)paren
suffix:semicolon
id|sum
op_assign
(paren
id|sum
op_amp
l_int|0xffff
)paren
op_plus
(paren
id|sum
op_rshift
l_int|16
)paren
suffix:semicolon
r_return
op_complement
id|sum
suffix:semicolon
)brace
DECL|function|csum_tcpudp_nofold
r_static
r_inline
r_int
r_int
id|csum_tcpudp_nofold
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
c_func
(paren
"&quot;"
id|add
op_mod
l_int|1
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|addc
op_mod
l_int|2
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|addc
op_mod
l_int|3
comma
op_mod
l_int|0
comma
op_mod
l_int|0
id|addc
op_mod
op_mod
id|r0
comma
op_mod
l_int|0
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;r&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
id|proto
op_lshift
l_int|16
)paren
op_plus
id|len
)paren
comma
l_string|&quot;0&quot;
(paren
id|sum
)paren
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
DECL|function|csum_tcpudp_magic
r_static
r_inline
r_int
r_int
r_int
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
r_return
id|csum_fold
c_func
(paren
id|csum_tcpudp_nofold
c_func
(paren
id|saddr
comma
id|daddr
comma
id|len
comma
id|proto
comma
id|sum
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
DECL|function|ip_compute_csum
r_static
r_inline
r_int
r_int
id|ip_compute_csum
c_func
(paren
r_int
r_char
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_return
id|csum_fold
(paren
id|csum_partial
c_func
(paren
id|buf
comma
id|len
comma
l_int|0
)paren
)paren
suffix:semicolon
)brace
DECL|macro|_HAVE_ARCH_IPV6_CSUM
mdefine_line|#define _HAVE_ARCH_IPV6_CSUM
DECL|function|csum_ipv6_magic
r_static
id|__inline__
r_int
r_int
r_int
id|csum_ipv6_magic
c_func
(paren
r_struct
id|in6_addr
op_star
id|saddr
comma
r_struct
id|in6_addr
op_star
id|daddr
comma
id|__u16
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|BUG
c_func
(paren
)paren
suffix:semicolon
r_return
id|csum_fold
c_func
(paren
id|sum
)paren
suffix:semicolon
)brace
multiline_comment|/* &n; *&t;Copy and checksum to user&n; */
DECL|macro|HAVE_CSUM_COPY_USER
mdefine_line|#define HAVE_CSUM_COPY_USER
DECL|function|csum_and_copy_to_user
r_static
id|__inline__
r_int
r_int
id|csum_and_copy_to_user
(paren
r_const
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
comma
r_int
op_star
id|err_ptr
)paren
(brace
multiline_comment|/* code stolen from include/asm-mips64 */
id|sum
op_assign
id|csum_partial
c_func
(paren
id|src
comma
id|len
comma
id|sum
)paren
suffix:semicolon
r_if
c_cond
(paren
id|copy_to_user
c_func
(paren
id|dst
comma
id|src
comma
id|len
)paren
)paren
(brace
op_star
id|err_ptr
op_assign
op_minus
id|EFAULT
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_return
id|sum
suffix:semicolon
)brace
macro_line|#endif
eof
