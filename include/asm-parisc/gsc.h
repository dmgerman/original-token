macro_line|#ifndef ASM_PARISC_GSC_H
DECL|macro|ASM_PARISC_GSC_H
mdefine_line|#define ASM_PARISC_GSC_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;asm/hardware.h&gt;&t;/* for struct hp_device */
multiline_comment|/*&n; * The convention used for inb/outb etc. is that names starting with&n; * two underscores are the inline versions, names starting with a&n; * single underscore are proper functions, and names starting with a&n; * letter are macros that map in some way to inline or proper function&n; * versions.  Not all that pretty, but before you change it, be sure&n; * to convince yourself that it won&squot;t break anything (in particular&n; * module support).&n; */
r_extern
id|u8
id|_gsc_readb
c_func
(paren
r_void
op_star
)paren
suffix:semicolon
r_extern
id|u16
id|_gsc_readw
c_func
(paren
r_void
op_star
)paren
suffix:semicolon
r_extern
id|u32
id|_gsc_readl
c_func
(paren
r_void
op_star
)paren
suffix:semicolon
r_extern
id|u64
id|_gsc_readq
c_func
(paren
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|_gsc_writeb
c_func
(paren
id|u8
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|_gsc_writew
c_func
(paren
id|u16
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|_gsc_writel
c_func
(paren
id|u32
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|_gsc_writeq
c_func
(paren
id|u64
comma
r_void
op_star
)paren
suffix:semicolon
DECL|macro|gsc_readb
mdefine_line|#define gsc_readb(a)&t;_gsc_readb((void *)(a))
DECL|macro|gsc_readw
mdefine_line|#define gsc_readw(a)&t;_gsc_readw((void *)(a))
DECL|macro|gsc_readl
mdefine_line|#define gsc_readl(a)&t;_gsc_readl((void *)(a))
DECL|macro|gsc_readq
mdefine_line|#define gsc_readq(a)&t;_gsc_readq((void *)(a))
DECL|macro|gsc_writeb
mdefine_line|#define gsc_writeb(v,a)&t;_gsc_writeb((v),(void *)(a))
DECL|macro|gsc_writew
mdefine_line|#define gsc_writew(v,a)&t;_gsc_writew((v),(void *)(a))
DECL|macro|gsc_writel
mdefine_line|#define gsc_writel(v,a)&t;_gsc_writel((v),(void *)(a))
DECL|macro|gsc_writeq
mdefine_line|#define gsc_writeq(v,a)&t;_gsc_writeq((v),(void *)(a))
DECL|struct|gsc_dev
r_struct
id|gsc_dev
(brace
DECL|member|bus
r_struct
id|gsc_bus
op_star
id|bus
suffix:semicolon
multiline_comment|/* bus this device is on */
DECL|member|next
r_struct
id|gsc_dev
op_star
id|next
suffix:semicolon
multiline_comment|/* chain of all devices */
DECL|member|next_bus
r_struct
id|gsc_dev
op_star
id|next_bus
suffix:semicolon
multiline_comment|/* chain of all devices on a bus */
DECL|member|next_submod
r_struct
id|gsc_dev
op_star
id|next_submod
suffix:semicolon
multiline_comment|/* chain of all devices on a module */
DECL|member|irq
r_int
id|irq
suffix:semicolon
multiline_comment|/* irq generated by this device */
DECL|member|hpa
r_void
op_star
id|hpa
suffix:semicolon
multiline_comment|/* hard physical address */
DECL|member|hversion
id|u16
id|hversion
suffix:semicolon
DECL|member|spa
id|u8
id|spa
suffix:semicolon
multiline_comment|/* SPA requirements */
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|sversion
id|u32
id|sversion
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|gsc_irq
r_struct
id|gsc_irq
(brace
DECL|member|txn_addr
r_int
r_int
id|txn_addr
suffix:semicolon
multiline_comment|/* IRQ &quot;target&quot; */
DECL|member|txn_data
r_int
id|txn_data
suffix:semicolon
multiline_comment|/* HW &quot;IRQ&quot; */
DECL|member|irq
r_int
id|irq
suffix:semicolon
multiline_comment|/* virtual IRQ */
)brace
suffix:semicolon
multiline_comment|/* PA I/O Architected devices support at least 5 bits in the EIM register. */
DECL|macro|GSC_EIM_WIDTH
mdefine_line|#define GSC_EIM_WIDTH 5
r_extern
r_int
id|gsc_alloc_irq
c_func
(paren
r_struct
id|gsc_irq
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* dev needs an irq */
r_extern
r_int
id|gsc_claim_irq
c_func
(paren
r_struct
id|gsc_irq
op_star
id|dev
comma
r_int
id|irq
)paren
suffix:semicolon
multiline_comment|/* dev needs this irq */
DECL|struct|gsc_bus
r_struct
id|gsc_bus
(brace
DECL|member|hpa
r_void
op_star
id|hpa
suffix:semicolon
multiline_comment|/* HPA of device 0, function 0 of this bus */
)brace
suffix:semicolon
multiline_comment|/*&n; * There is one gsc_dev structure for each slot-number/function-number&n; * combination:&n; */
r_struct
id|gsc_dev
op_star
id|gsc_find_device
c_func
(paren
id|u16
id|hversion
comma
r_struct
id|gsc_dev
op_star
id|from
)paren
suffix:semicolon
r_extern
r_void
id|probe_serial_gsc
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* returns a virtual irq for device at dev-&gt;hpa (works for all LASI/ASP/WAX) */
r_extern
r_int
id|busdevice_alloc_irq
c_func
(paren
r_struct
id|hp_device
op_star
id|dev
)paren
suffix:semicolon
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* LINUX_GSC_H */
eof
