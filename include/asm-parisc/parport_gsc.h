macro_line|#ifndef __LINUX_PARPORT_GSC_H
DECL|macro|__LINUX_PARPORT_GSC_H
mdefine_line|#define __LINUX_PARPORT_GSC_H
macro_line|#include &lt;asm/io.h&gt;
macro_line|#include &lt;linux/delay.h&gt;
DECL|macro|DEBUG_PARPORT
macro_line|#undef&t;DEBUG_PARPORT&t;/* undefine for production */
DECL|macro|DELAY_TIME
mdefine_line|#define DELAY_TIME &t;0
macro_line|#if DELAY_TIME == 0
DECL|macro|parport_readb
mdefine_line|#define parport_readb&t;gsc_readb
DECL|macro|parport_writeb
mdefine_line|#define parport_writeb&t;gsc_writeb
macro_line|#else
DECL|function|parport_readb
r_static
id|__inline__
r_int
r_char
id|parport_readb
c_func
(paren
r_int
r_int
id|port
)paren
(brace
id|udelay
c_func
(paren
id|DELAY_TIME
)paren
suffix:semicolon
r_return
id|gsc_readb
c_func
(paren
id|port
)paren
suffix:semicolon
)brace
DECL|function|parport_writeb
r_static
id|__inline__
r_void
id|parport_writeb
c_func
(paren
r_int
r_char
id|value
comma
r_int
r_int
id|port
)paren
(brace
id|gsc_writeb
c_func
(paren
id|value
comma
id|port
)paren
suffix:semicolon
id|udelay
c_func
(paren
id|DELAY_TIME
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* --- register definitions ------------------------------- */
DECL|macro|EPPDATA
mdefine_line|#define EPPDATA(p)  ((p)-&gt;base    + 0x4)
DECL|macro|EPPADDR
mdefine_line|#define EPPADDR(p)  ((p)-&gt;base    + 0x3)
DECL|macro|CONTROL
mdefine_line|#define CONTROL(p)  ((p)-&gt;base    + 0x2)
DECL|macro|STATUS
mdefine_line|#define STATUS(p)   ((p)-&gt;base    + 0x1)
DECL|macro|DATA
mdefine_line|#define DATA(p)     ((p)-&gt;base    + 0x0)
DECL|struct|parport_gsc_private
r_struct
id|parport_gsc_private
(brace
multiline_comment|/* Contents of CTR. */
DECL|member|ctr
r_int
r_char
id|ctr
suffix:semicolon
multiline_comment|/* Bitmask of writable CTR bits. */
DECL|member|ctr_writable
r_int
r_char
id|ctr_writable
suffix:semicolon
multiline_comment|/* Number of bytes per portword. */
DECL|member|pword
r_int
id|pword
suffix:semicolon
multiline_comment|/* Not used yet. */
DECL|member|readIntrThreshold
r_int
id|readIntrThreshold
suffix:semicolon
DECL|member|writeIntrThreshold
r_int
id|writeIntrThreshold
suffix:semicolon
multiline_comment|/* buffer suitable for DMA, if DMA enabled */
DECL|member|dma_buf
r_char
op_star
id|dma_buf
suffix:semicolon
DECL|member|dma_handle
id|dma_addr_t
id|dma_handle
suffix:semicolon
DECL|member|dev
r_struct
id|pci_dev
op_star
id|dev
suffix:semicolon
)brace
suffix:semicolon
DECL|function|parport_gsc_write_data
r_extern
id|__inline__
r_void
id|parport_gsc_write_data
c_func
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|d
)paren
(brace
macro_line|#ifdef DEBUG_PARPORT
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;parport_gsc_write_data(%p,0x%02x)&bslash;n&quot;
comma
id|p
comma
id|d
)paren
suffix:semicolon
macro_line|#endif
id|parport_writeb
c_func
(paren
id|d
comma
id|DATA
c_func
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_read_data
r_extern
id|__inline__
r_int
r_char
id|parport_gsc_read_data
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
r_int
r_char
id|val
op_assign
id|parport_readb
(paren
id|DATA
(paren
id|p
)paren
)paren
suffix:semicolon
macro_line|#ifdef DEBUG_PARPORT
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;parport_gsc_read_data(%p) = 0x%02x&bslash;n&quot;
comma
id|p
comma
id|val
)paren
suffix:semicolon
macro_line|#endif
r_return
id|val
suffix:semicolon
)brace
multiline_comment|/* __parport_gsc_frob_control differs from parport_gsc_frob_control in that&n; * it doesn&squot;t do any extra masking. */
DECL|function|__parport_gsc_frob_control
r_static
id|__inline__
r_int
r_char
id|__parport_gsc_frob_control
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|mask
comma
r_int
r_char
id|val
)paren
(brace
r_struct
id|parport_gsc_private
op_star
id|priv
op_assign
id|p-&gt;physport-&gt;private_data
suffix:semicolon
r_int
r_char
id|ctr
op_assign
id|priv-&gt;ctr
suffix:semicolon
macro_line|#ifdef DEBUG_PARPORT
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;__parport_gsc_frob_control(%02x,%02x): %02x -&gt; %02x&bslash;n&quot;
comma
id|mask
comma
id|val
comma
id|ctr
comma
(paren
(paren
id|ctr
op_amp
op_complement
id|mask
)paren
op_xor
id|val
)paren
op_amp
id|priv-&gt;ctr_writable
)paren
suffix:semicolon
macro_line|#endif
id|ctr
op_assign
(paren
id|ctr
op_amp
op_complement
id|mask
)paren
op_xor
id|val
suffix:semicolon
id|ctr
op_and_assign
id|priv-&gt;ctr_writable
suffix:semicolon
multiline_comment|/* only write writable bits. */
id|parport_writeb
(paren
id|ctr
comma
id|CONTROL
(paren
id|p
)paren
)paren
suffix:semicolon
id|priv-&gt;ctr
op_assign
id|ctr
suffix:semicolon
multiline_comment|/* Update soft copy */
r_return
id|ctr
suffix:semicolon
)brace
DECL|function|parport_gsc_data_reverse
r_extern
id|__inline__
r_void
id|parport_gsc_data_reverse
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__parport_gsc_frob_control
(paren
id|p
comma
l_int|0x20
comma
l_int|0x20
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_data_forward
r_extern
id|__inline__
r_void
id|parport_gsc_data_forward
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__parport_gsc_frob_control
(paren
id|p
comma
l_int|0x20
comma
l_int|0x00
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_write_control
r_extern
id|__inline__
r_void
id|parport_gsc_write_control
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|d
)paren
(brace
r_const
r_int
r_char
id|wm
op_assign
(paren
id|PARPORT_CONTROL_STROBE
op_or
id|PARPORT_CONTROL_AUTOFD
op_or
id|PARPORT_CONTROL_INIT
op_or
id|PARPORT_CONTROL_SELECT
)paren
suffix:semicolon
multiline_comment|/* Take this out when drivers have adapted to newer interface. */
r_if
c_cond
(paren
id|d
op_amp
l_int|0x20
)paren
(brace
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;%s (%s): use data_reverse for this!&bslash;n&quot;
comma
id|p-&gt;name
comma
id|p-&gt;cad-&gt;name
)paren
suffix:semicolon
id|parport_gsc_data_reverse
(paren
id|p
)paren
suffix:semicolon
)brace
id|__parport_gsc_frob_control
(paren
id|p
comma
id|wm
comma
id|d
op_amp
id|wm
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_read_control
r_extern
id|__inline__
r_int
r_char
id|parport_gsc_read_control
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
r_const
r_int
r_char
id|rm
op_assign
(paren
id|PARPORT_CONTROL_STROBE
op_or
id|PARPORT_CONTROL_AUTOFD
op_or
id|PARPORT_CONTROL_INIT
op_or
id|PARPORT_CONTROL_SELECT
)paren
suffix:semicolon
r_const
r_struct
id|parport_gsc_private
op_star
id|priv
op_assign
id|p-&gt;physport-&gt;private_data
suffix:semicolon
r_return
id|priv-&gt;ctr
op_amp
id|rm
suffix:semicolon
multiline_comment|/* Use soft copy */
)brace
DECL|function|parport_gsc_frob_control
r_extern
id|__inline__
r_int
r_char
id|parport_gsc_frob_control
(paren
r_struct
id|parport
op_star
id|p
comma
r_int
r_char
id|mask
comma
r_int
r_char
id|val
)paren
(brace
r_const
r_int
r_char
id|wm
op_assign
(paren
id|PARPORT_CONTROL_STROBE
op_or
id|PARPORT_CONTROL_AUTOFD
op_or
id|PARPORT_CONTROL_INIT
op_or
id|PARPORT_CONTROL_SELECT
)paren
suffix:semicolon
multiline_comment|/* Take this out when drivers have adapted to newer interface. */
r_if
c_cond
(paren
id|mask
op_amp
l_int|0x20
)paren
(brace
id|printk
(paren
id|KERN_DEBUG
l_string|&quot;%s (%s): use data_%s for this!&bslash;n&quot;
comma
id|p-&gt;name
comma
id|p-&gt;cad-&gt;name
comma
(paren
id|val
op_amp
l_int|0x20
)paren
ques
c_cond
l_string|&quot;reverse&quot;
suffix:colon
l_string|&quot;forward&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|val
op_amp
l_int|0x20
)paren
id|parport_gsc_data_reverse
(paren
id|p
)paren
suffix:semicolon
r_else
id|parport_gsc_data_forward
(paren
id|p
)paren
suffix:semicolon
)brace
multiline_comment|/* Restrict mask and val to control lines. */
id|mask
op_and_assign
id|wm
suffix:semicolon
id|val
op_and_assign
id|wm
suffix:semicolon
r_return
id|__parport_gsc_frob_control
(paren
id|p
comma
id|mask
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_read_status
r_extern
id|__inline__
r_int
r_char
id|parport_gsc_read_status
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
r_return
id|parport_readb
(paren
id|STATUS
c_func
(paren
id|p
)paren
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_disable_irq
r_extern
id|__inline__
r_void
id|parport_gsc_disable_irq
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__parport_gsc_frob_control
(paren
id|p
comma
l_int|0x10
comma
l_int|0x00
)paren
suffix:semicolon
)brace
DECL|function|parport_gsc_enable_irq
r_extern
id|__inline__
r_void
id|parport_gsc_enable_irq
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
(brace
id|__parport_gsc_frob_control
(paren
id|p
comma
l_int|0x10
comma
l_int|0x10
)paren
suffix:semicolon
)brace
r_extern
r_void
id|parport_gsc_release_resources
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
suffix:semicolon
r_extern
r_int
id|parport_gsc_claim_resources
c_func
(paren
r_struct
id|parport
op_star
id|p
)paren
suffix:semicolon
r_extern
r_void
id|parport_gsc_init_state
c_func
(paren
r_struct
id|pardevice
op_star
comma
r_struct
id|parport_state
op_star
id|s
)paren
suffix:semicolon
r_extern
r_void
id|parport_gsc_save_state
c_func
(paren
r_struct
id|parport
op_star
id|p
comma
r_struct
id|parport_state
op_star
id|s
)paren
suffix:semicolon
r_extern
r_void
id|parport_gsc_restore_state
c_func
(paren
r_struct
id|parport
op_star
id|p
comma
r_struct
id|parport_state
op_star
id|s
)paren
suffix:semicolon
r_extern
r_void
id|parport_gsc_inc_use_count
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|parport_gsc_dec_use_count
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_struct
id|parport
op_star
id|parport_gsc_probe_port
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|base_hi
comma
r_int
id|irq
comma
r_int
id|dma
comma
r_struct
id|pci_dev
op_star
id|dev
)paren
suffix:semicolon
macro_line|#endif
eof
