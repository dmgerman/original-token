macro_line|#ifndef _M68K_PGTABLE_H
DECL|macro|_M68K_PGTABLE_H
mdefine_line|#define _M68K_PGTABLE_H
macro_line|#include &lt;asm/setup.h&gt;
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/*&n; * This file contains the functions and defines necessary to modify and use&n; * the m68k page table tree.&n; */
multiline_comment|/*&n; * flush all atc entries (user-space entries only for the 680[46]0).&n; */
DECL|function|__flush_tlb
r_static
r_inline
r_void
id|__flush_tlb
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflushan&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
)paren
suffix:semicolon
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflusha&quot;
)paren
suffix:semicolon
)brace
DECL|function|__flush_tlb_one
r_static
r_inline
r_void
id|__flush_tlb_one
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflush (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflush #0,#0,(%0)&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb() __flush_tlb()
multiline_comment|/*&n; * flush all atc entries (both kernel and user-space entries).&n; */
DECL|function|flush_tlb_all
r_static
r_inline
r_void
id|flush_tlb_all
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflusha&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
)paren
suffix:semicolon
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflusha&quot;
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_mm
r_static
r_inline
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_page
r_static
r_inline
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;mm
)paren
id|__flush_tlb_one
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Certain architectures need to do special things when pte&squot;s&n; * within a page table are directly modified.  Thus, the following&n; * hook is made available.&n; */
DECL|macro|set_pte
mdefine_line|#define set_pte(pteptr, pteval)&t;&t;&t;&t;&t;&bslash;&n;&t;do{&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;*(pteptr) = (pteval);&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_060)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__(&quot;.chip 68060&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;pflusha&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;.chip 68k&quot;);&t;&t;&bslash;&n;&t;} while(0)
multiline_comment|/* PMD_SHIFT determines the size of the area a second-level page table can map */
DECL|macro|PMD_SHIFT
mdefine_line|#define PMD_SHIFT&t;22
DECL|macro|PMD_SIZE
mdefine_line|#define PMD_SIZE&t;(1UL &lt;&lt; PMD_SHIFT)
DECL|macro|PMD_MASK
mdefine_line|#define PMD_MASK&t;(~(PMD_SIZE-1))
multiline_comment|/* PGDIR_SHIFT determines what a third-level page table entry can map */
DECL|macro|PGDIR_SHIFT
mdefine_line|#define PGDIR_SHIFT&t;25
DECL|macro|PGDIR_SIZE
mdefine_line|#define PGDIR_SIZE&t;(1UL &lt;&lt; PGDIR_SHIFT)
DECL|macro|PGDIR_MASK
mdefine_line|#define PGDIR_MASK&t;(~(PGDIR_SIZE-1))
multiline_comment|/*&n; * entries per page directory level: the m68k is configured as three-level,&n; * so we do have PMD level physically.&n; */
DECL|macro|PTRS_PER_PTE
mdefine_line|#define PTRS_PER_PTE&t;1024
DECL|macro|PTRS_PER_PMD
mdefine_line|#define PTRS_PER_PMD&t;8
DECL|macro|PTRS_PER_PGD
mdefine_line|#define PTRS_PER_PGD&t;128
multiline_comment|/* the no. of pointers that fit on a page: this will go away */
DECL|macro|PTRS_PER_PAGE
mdefine_line|#define PTRS_PER_PAGE&t;(PAGE_SIZE/sizeof(void*))
DECL|typedef|pgd_table
r_typedef
id|pgd_t
id|pgd_table
(braket
id|PTRS_PER_PGD
)braket
suffix:semicolon
DECL|typedef|pmd_table
r_typedef
id|pmd_t
id|pmd_table
(braket
id|PTRS_PER_PMD
)braket
suffix:semicolon
DECL|typedef|pte_table
r_typedef
id|pte_t
id|pte_table
(braket
id|PTRS_PER_PTE
)braket
suffix:semicolon
DECL|macro|PGD_TABLES_PER_PAGE
mdefine_line|#define PGD_TABLES_PER_PAGE (PAGE_SIZE/sizeof(pgd_table))
DECL|macro|PMD_TABLES_PER_PAGE
mdefine_line|#define PMD_TABLES_PER_PAGE (PAGE_SIZE/sizeof(pmd_table))
DECL|macro|PTE_TABLES_PER_PAGE
mdefine_line|#define PTE_TABLES_PER_PAGE (PAGE_SIZE/sizeof(pte_table))
DECL|typedef|pgd_tablepage
r_typedef
id|pgd_table
id|pgd_tablepage
(braket
id|PGD_TABLES_PER_PAGE
)braket
suffix:semicolon
DECL|typedef|pmd_tablepage
r_typedef
id|pmd_table
id|pmd_tablepage
(braket
id|PMD_TABLES_PER_PAGE
)braket
suffix:semicolon
DECL|typedef|pte_tablepage
r_typedef
id|pte_table
id|pte_tablepage
(braket
id|PTE_TABLES_PER_PAGE
)braket
suffix:semicolon
multiline_comment|/* Just any arbitrary offset to the start of the vmalloc VM area: the&n; * current 8MB value just means that there will be a 8MB &quot;hole&quot; after the&n; * physical memory until the kernel virtual memory starts.  That means that&n; * any out-of-bounds memory accesses will hopefully be caught.&n; * The vmalloc() routines leaves a hole of 4kB between each vmalloced&n; * area for the same reason. ;)&n; */
DECL|macro|VMALLOC_OFFSET
mdefine_line|#define VMALLOC_OFFSET&t;(8*1024*1024)
DECL|macro|VMALLOC_START
mdefine_line|#define VMALLOC_START (((unsigned long) high_memory + VMALLOC_OFFSET) &amp; ~(VMALLOC_OFFSET-1))
DECL|macro|VMALLOC_VMADDR
mdefine_line|#define VMALLOC_VMADDR(x) ((unsigned long)(x))
macro_line|#endif /* __ASSEMBLY__ */
multiline_comment|/*&n; * Definitions for MMU descriptors&n; */
DECL|macro|_PAGE_PRESENT
mdefine_line|#define _PAGE_PRESENT&t;0x001
DECL|macro|_PAGE_SHORT
mdefine_line|#define _PAGE_SHORT&t;0x002
DECL|macro|_PAGE_RONLY
mdefine_line|#define _PAGE_RONLY&t;0x004
DECL|macro|_PAGE_ACCESSED
mdefine_line|#define _PAGE_ACCESSED&t;0x008
DECL|macro|_PAGE_DIRTY
mdefine_line|#define _PAGE_DIRTY&t;0x010
DECL|macro|_PAGE_GLOBAL040
mdefine_line|#define _PAGE_GLOBAL040&t;0x400&t;/* 68040 global bit, used for kva descs */
DECL|macro|_PAGE_COW
mdefine_line|#define _PAGE_COW&t;0x800&t;/* implemented in software */
DECL|macro|_PAGE_NOCACHE030
mdefine_line|#define _PAGE_NOCACHE030 0x040&t;/* 68030 no-cache mode */
DECL|macro|_PAGE_NOCACHE
mdefine_line|#define _PAGE_NOCACHE&t;0x060&t;/* 68040 cache mode, non-serialized */
DECL|macro|_PAGE_NOCACHE_S
mdefine_line|#define _PAGE_NOCACHE_S&t;0x040&t;/* 68040 no-cache mode, serialized */
DECL|macro|_PAGE_CACHE040
mdefine_line|#define _PAGE_CACHE040&t;0x020&t;/* 68040 cache mode, cachable, copyback */
DECL|macro|_PAGE_CACHE040W
mdefine_line|#define _PAGE_CACHE040W&t;0x000&t;/* 68040 cache mode, cachable, write-through */
DECL|macro|_DESCTYPE_MASK
mdefine_line|#define _DESCTYPE_MASK&t;0x003
DECL|macro|_CACHEMASK040
mdefine_line|#define _CACHEMASK040&t;(~0x060)
DECL|macro|_TABLE_MASK
mdefine_line|#define _TABLE_MASK&t;(0xfffffe00)
DECL|macro|_PAGE_TABLE
mdefine_line|#define _PAGE_TABLE&t;(_PAGE_SHORT)
DECL|macro|_PAGE_CHG_MASK
mdefine_line|#define _PAGE_CHG_MASK  (PAGE_MASK | _PAGE_ACCESSED | _PAGE_DIRTY | _PAGE_NOCACHE)
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/* This is the cache mode to be used for pages containing page descriptors for&n; * processors &gt;= &squot;040. It is in pte_mknocache(), and the variable is defined&n; * and initialized in head.S */
r_extern
r_int
id|m68k_pgtable_cachemode
suffix:semicolon
macro_line|#if defined(CONFIG_M68040_OR_M68060_ONLY)
DECL|macro|mm_cachebits
mdefine_line|#define mm_cachebits _PAGE_CACHE040
macro_line|#elif defined(CONFIG_M68020_OR_M68030_ONLY)
DECL|macro|mm_cachebits
mdefine_line|#define mm_cachebits 0
macro_line|#else
r_extern
r_int
r_int
id|mm_cachebits
suffix:semicolon
macro_line|#endif
DECL|macro|PAGE_NONE
mdefine_line|#define PAGE_NONE&t;__pgprot(_PAGE_PRESENT | _PAGE_RONLY | _PAGE_ACCESSED | mm_cachebits)
DECL|macro|PAGE_SHARED
mdefine_line|#define PAGE_SHARED&t;__pgprot(_PAGE_PRESENT | _PAGE_ACCESSED | mm_cachebits)
DECL|macro|PAGE_COPY
mdefine_line|#define PAGE_COPY&t;__pgprot(_PAGE_PRESENT | _PAGE_RONLY | _PAGE_ACCESSED | mm_cachebits)
DECL|macro|PAGE_READONLY
mdefine_line|#define PAGE_READONLY&t;__pgprot(_PAGE_PRESENT | _PAGE_RONLY | _PAGE_ACCESSED | mm_cachebits)
DECL|macro|PAGE_KERNEL
mdefine_line|#define PAGE_KERNEL&t;__pgprot(_PAGE_PRESENT | _PAGE_DIRTY | _PAGE_ACCESSED | mm_cachebits)
multiline_comment|/* Alternate definitions that are compile time constants, for&n;   initializing protection_map.  The cachebits are fixed later.  */
DECL|macro|PAGE_NONE_C
mdefine_line|#define PAGE_NONE_C&t;__pgprot(_PAGE_PRESENT | _PAGE_RONLY | _PAGE_ACCESSED)
DECL|macro|PAGE_SHARED_C
mdefine_line|#define PAGE_SHARED_C&t;__pgprot(_PAGE_PRESENT | _PAGE_ACCESSED)
DECL|macro|PAGE_COPY_C
mdefine_line|#define PAGE_COPY_C&t;__pgprot(_PAGE_PRESENT | _PAGE_RONLY | _PAGE_ACCESSED)
DECL|macro|PAGE_READONLY_C
mdefine_line|#define PAGE_READONLY_C&t;__pgprot(_PAGE_PRESENT | _PAGE_RONLY | _PAGE_ACCESSED)
multiline_comment|/*&n; * The m68k can&squot;t do page protection for execute, and considers that the same are read.&n; * Also, write permissions imply read permissions. This is the closest we can get..&n; */
DECL|macro|__P000
mdefine_line|#define __P000&t;PAGE_NONE_C
DECL|macro|__P001
mdefine_line|#define __P001&t;PAGE_READONLY_C
DECL|macro|__P010
mdefine_line|#define __P010&t;PAGE_COPY_C
DECL|macro|__P011
mdefine_line|#define __P011&t;PAGE_COPY_C
DECL|macro|__P100
mdefine_line|#define __P100&t;PAGE_READONLY_C
DECL|macro|__P101
mdefine_line|#define __P101&t;PAGE_READONLY_C
DECL|macro|__P110
mdefine_line|#define __P110&t;PAGE_COPY_C
DECL|macro|__P111
mdefine_line|#define __P111&t;PAGE_COPY_C
DECL|macro|__S000
mdefine_line|#define __S000&t;PAGE_NONE_C
DECL|macro|__S001
mdefine_line|#define __S001&t;PAGE_READONLY_C
DECL|macro|__S010
mdefine_line|#define __S010&t;PAGE_SHARED_C
DECL|macro|__S011
mdefine_line|#define __S011&t;PAGE_SHARED_C
DECL|macro|__S100
mdefine_line|#define __S100&t;PAGE_READONLY_C
DECL|macro|__S101
mdefine_line|#define __S101&t;PAGE_READONLY_C
DECL|macro|__S110
mdefine_line|#define __S110&t;PAGE_SHARED_C
DECL|macro|__S111
mdefine_line|#define __S111&t;PAGE_SHARED_C
multiline_comment|/* zero page used for uninitialized stuff */
r_extern
r_int
r_int
id|empty_zero_page
suffix:semicolon
multiline_comment|/*&n; * BAD_PAGETABLE is used when we need a bogus page-table, while&n; * BAD_PAGE is used for a bogus page.&n; *&n; * ZERO_PAGE is a global shared page that is always zero: used&n; * for zero-mapped memory areas etc..&n; */
r_extern
id|pte_t
id|__bad_page
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
id|pte_t
op_star
id|__bad_pagetable
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|BAD_PAGETABLE
mdefine_line|#define BAD_PAGETABLE __bad_pagetable()
DECL|macro|BAD_PAGE
mdefine_line|#define BAD_PAGE __bad_page()
DECL|macro|ZERO_PAGE
mdefine_line|#define ZERO_PAGE empty_zero_page
multiline_comment|/* number of bits that fit into a memory pointer */
DECL|macro|BITS_PER_PTR
mdefine_line|#define BITS_PER_PTR&t;&t;&t;(8*sizeof(unsigned long))
multiline_comment|/* to align the pointer to a pointer address */
DECL|macro|PTR_MASK
mdefine_line|#define PTR_MASK&t;&t;&t;(~(sizeof(void*)-1))
multiline_comment|/* sizeof(void*)==1&lt;&lt;SIZEOF_PTR_LOG2 */
multiline_comment|/* 64-bit machines, beware!  SRB. */
DECL|macro|SIZEOF_PTR_LOG2
mdefine_line|#define SIZEOF_PTR_LOG2&t;&t;&t;2
multiline_comment|/* to find an entry in a page-table */
DECL|macro|PAGE_PTR
mdefine_line|#define PAGE_PTR(address) &bslash;&n;((unsigned long)(address)&gt;&gt;(PAGE_SHIFT-SIZEOF_PTR_LOG2)&amp;PTR_MASK&amp;~PAGE_MASK)
multiline_comment|/* For virtual address to physical address conversion */
r_extern
r_int
r_int
id|mm_vtop
c_func
(paren
r_int
r_int
id|addr
)paren
id|__attribute__
(paren
(paren
r_const
)paren
)paren
suffix:semicolon
r_extern
r_int
r_int
id|mm_ptov
c_func
(paren
r_int
r_int
id|addr
)paren
id|__attribute__
(paren
(paren
r_const
)paren
)paren
suffix:semicolon
DECL|macro|VTOP
mdefine_line|#define VTOP(addr)  (mm_vtop((unsigned long)(addr)))
DECL|macro|PTOV
mdefine_line|#define PTOV(addr)  (mm_ptov((unsigned long)(addr)))
multiline_comment|/*&n; * Conversion functions: convert a page and protection to a page entry,&n; * and a page entry and page directory to the page they refer to.&n; */
DECL|macro|mk_pte
mdefine_line|#define mk_pte(page, pgprot) &bslash;&n;({ pte_t __pte; pte_val(__pte) = VTOP(page) + pgprot_val(pgprot); __pte; })
DECL|macro|mk_pte_phys
mdefine_line|#define mk_pte_phys(physpage, pgprot) &bslash;&n;({ pte_t __pte; pte_val(__pte) = VTOP(physpage) + pgprot_val(pgprot); __pte; })
DECL|function|pte_modify
r_extern
r_inline
id|pte_t
id|pte_modify
c_func
(paren
id|pte_t
id|pte
comma
id|pgprot_t
id|newprot
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_assign
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_CHG_MASK
)paren
op_or
id|pgprot_val
c_func
(paren
id|newprot
)paren
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pmd_set
r_extern
r_inline
r_void
id|pmd_set
c_func
(paren
id|pmd_t
op_star
id|pmdp
comma
id|pte_t
op_star
id|ptep
)paren
(brace
r_int
id|i
suffix:semicolon
id|ptep
op_assign
(paren
id|pte_t
op_star
)paren
id|VTOP
c_func
(paren
id|ptep
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|16
suffix:semicolon
id|i
op_increment
comma
id|ptep
op_add_assign
id|PTRS_PER_PTE
op_div
l_int|16
)paren
id|pmdp-&gt;pmd
(braket
id|i
)braket
op_assign
id|_PAGE_TABLE
op_or
id|_PAGE_ACCESSED
op_or
(paren
r_int
r_int
)paren
id|ptep
suffix:semicolon
)brace
multiline_comment|/* early termination version of the above */
DECL|function|pmd_set_et
r_extern
r_inline
r_void
id|pmd_set_et
c_func
(paren
id|pmd_t
op_star
id|pmdp
comma
id|pte_t
op_star
id|ptep
)paren
(brace
r_int
id|i
suffix:semicolon
id|ptep
op_assign
(paren
id|pte_t
op_star
)paren
id|VTOP
c_func
(paren
id|ptep
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|16
suffix:semicolon
id|i
op_increment
comma
id|ptep
op_add_assign
id|PTRS_PER_PTE
op_div
l_int|16
)paren
id|pmdp-&gt;pmd
(braket
id|i
)braket
op_assign
id|_PAGE_PRESENT
op_or
id|_PAGE_ACCESSED
op_or
(paren
r_int
r_int
)paren
id|ptep
suffix:semicolon
)brace
DECL|function|pgd_set
r_extern
r_inline
r_void
id|pgd_set
c_func
(paren
id|pgd_t
op_star
id|pgdp
comma
id|pmd_t
op_star
id|pmdp
)paren
(brace
id|pgd_val
c_func
(paren
op_star
id|pgdp
)paren
op_assign
id|_PAGE_TABLE
op_or
id|_PAGE_ACCESSED
op_or
id|VTOP
c_func
(paren
id|pmdp
)paren
suffix:semicolon
)brace
DECL|function|pte_page
r_extern
r_inline
r_int
r_int
id|pte_page
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|PTOV
c_func
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|PAGE_MASK
)paren
suffix:semicolon
)brace
DECL|function|pmd_page2
r_extern
r_inline
r_int
r_int
id|pmd_page2
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
r_return
id|PTOV
c_func
(paren
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_amp
id|_TABLE_MASK
)paren
suffix:semicolon
)brace
DECL|macro|pmd_page
mdefine_line|#define pmd_page(pmd) pmd_page2(&amp;(pmd))
DECL|function|pgd_page
r_extern
r_inline
r_int
r_int
id|pgd_page
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
id|PTOV
c_func
(paren
id|pgd_val
c_func
(paren
id|pgd
)paren
op_amp
id|_TABLE_MASK
)paren
suffix:semicolon
)brace
DECL|function|pte_none
r_extern
r_inline
r_int
id|pte_none
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
op_logical_neg
id|pte_val
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_present
r_extern
r_inline
r_int
id|pte_present
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_PRESENT
suffix:semicolon
)brace
DECL|function|pte_clear
r_extern
r_inline
r_void
id|pte_clear
c_func
(paren
id|pte_t
op_star
id|ptep
)paren
(brace
id|pte_val
c_func
(paren
op_star
id|ptep
)paren
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|pmd_none2
r_extern
r_inline
r_int
id|pmd_none2
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
r_return
op_logical_neg
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
suffix:semicolon
)brace
DECL|macro|pmd_none
mdefine_line|#define pmd_none(pmd) pmd_none2(&amp;(pmd))
DECL|function|pmd_bad2
r_extern
r_inline
r_int
id|pmd_bad2
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
r_return
(paren
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_amp
id|_DESCTYPE_MASK
)paren
op_ne
id|_PAGE_TABLE
suffix:semicolon
)brace
DECL|macro|pmd_bad
mdefine_line|#define pmd_bad(pmd) pmd_bad2(&amp;(pmd))
DECL|function|pmd_present2
r_extern
r_inline
r_int
id|pmd_present2
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
r_return
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
op_amp
id|_PAGE_TABLE
suffix:semicolon
)brace
DECL|macro|pmd_present
mdefine_line|#define pmd_present(pmd) pmd_present2(&amp;(pmd))
DECL|function|pmd_clear
r_extern
r_inline
r_void
id|pmd_clear
c_func
(paren
id|pmd_t
op_star
id|pmdp
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|15
suffix:semicolon
id|i
op_ge
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
id|pmdp-&gt;pmd
(braket
id|i
)braket
op_assign
l_int|0
suffix:semicolon
)brace
DECL|function|pgd_none
r_extern
r_inline
r_int
id|pgd_none
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
op_logical_neg
id|pgd_val
c_func
(paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|function|pgd_bad
r_extern
r_inline
r_int
id|pgd_bad
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
(paren
id|pgd_val
c_func
(paren
id|pgd
)paren
op_amp
id|_DESCTYPE_MASK
)paren
op_ne
id|_PAGE_TABLE
suffix:semicolon
)brace
DECL|function|pgd_present
r_extern
r_inline
r_int
id|pgd_present
c_func
(paren
id|pgd_t
id|pgd
)paren
(brace
r_return
id|pgd_val
c_func
(paren
id|pgd
)paren
op_amp
id|_PAGE_TABLE
suffix:semicolon
)brace
DECL|function|pgd_clear
r_extern
r_inline
r_void
id|pgd_clear
c_func
(paren
id|pgd_t
op_star
id|pgdp
)paren
(brace
id|pgd_val
c_func
(paren
op_star
id|pgdp
)paren
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * The following only work if pte_present() is true.&n; * Undefined behaviour if not..&n; */
DECL|function|pte_read
r_extern
r_inline
r_int
id|pte_read
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|pte_write
r_extern
r_inline
r_int
id|pte_write
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
op_logical_neg
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_RONLY
)paren
suffix:semicolon
)brace
DECL|function|pte_exec
r_extern
r_inline
r_int
id|pte_exec
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
DECL|function|pte_dirty
r_extern
r_inline
r_int
id|pte_dirty
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_DIRTY
suffix:semicolon
)brace
DECL|function|pte_young
r_extern
r_inline
r_int
id|pte_young
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_PAGE_ACCESSED
suffix:semicolon
)brace
DECL|function|pte_wrprotect
r_extern
r_inline
id|pte_t
id|pte_wrprotect
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_or_assign
id|_PAGE_RONLY
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_rdprotect
r_extern
r_inline
id|pte_t
id|pte_rdprotect
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_exprotect
r_extern
r_inline
id|pte_t
id|pte_exprotect
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkclean
r_extern
r_inline
id|pte_t
id|pte_mkclean
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_and_assign
op_complement
id|_PAGE_DIRTY
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkold
r_extern
r_inline
id|pte_t
id|pte_mkold
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_and_assign
op_complement
id|_PAGE_ACCESSED
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkwrite
r_extern
r_inline
id|pte_t
id|pte_mkwrite
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_and_assign
op_complement
id|_PAGE_RONLY
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkread
r_extern
r_inline
id|pte_t
id|pte_mkread
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkexec
r_extern
r_inline
id|pte_t
id|pte_mkexec
c_func
(paren
id|pte_t
id|pte
)paren
(brace
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkdirty
r_extern
r_inline
id|pte_t
id|pte_mkdirty
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_or_assign
id|_PAGE_DIRTY
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkyoung
r_extern
r_inline
id|pte_t
id|pte_mkyoung
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_or_assign
id|_PAGE_ACCESSED
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mknocache
r_extern
r_inline
id|pte_t
id|pte_mknocache
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_assign
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_CACHEMASK040
)paren
op_or
id|m68k_pgtable_cachemode
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
DECL|function|pte_mkcache
r_extern
r_inline
id|pte_t
id|pte_mkcache
c_func
(paren
id|pte_t
id|pte
)paren
(brace
id|pte_val
c_func
(paren
id|pte
)paren
op_assign
(paren
id|pte_val
c_func
(paren
id|pte
)paren
op_amp
id|_CACHEMASK040
)paren
op_or
id|_PAGE_CACHE040
suffix:semicolon
r_return
id|pte
suffix:semicolon
)brace
multiline_comment|/* to set the page-dir */
DECL|function|SET_PAGE_DIR
r_extern
r_inline
r_void
id|SET_PAGE_DIR
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
id|pgd_t
op_star
id|pgdir
)paren
(brace
id|tsk-&gt;tss.crp
(braket
l_int|0
)braket
op_assign
l_int|0x80000000
op_or
id|_PAGE_TABLE
suffix:semicolon
id|tsk-&gt;tss.crp
(braket
l_int|1
)braket
op_assign
id|VTOP
c_func
(paren
id|pgdir
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tsk
op_eq
id|current
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|__asm__
id|__volatile__
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%%urp&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|tsk-&gt;tss.crp
(braket
l_int|1
)braket
)paren
)paren
suffix:semicolon
r_else
(brace
r_int
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;movec  %%cacr,%0&bslash;n&bslash;t&quot;
l_string|&quot;orw #0x0808,%0&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%%cacr&bslash;n&bslash;t&quot;
l_string|&quot;pmove %1,%%crp&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
id|tsk-&gt;tss.crp
(braket
l_int|0
)braket
)paren
)paren
suffix:semicolon
)brace
)brace
)brace
DECL|macro|PAGE_DIR_OFFSET
mdefine_line|#define PAGE_DIR_OFFSET(tsk,address) pgd_offset((tsk),(address))
multiline_comment|/* to find an entry in a page-table-directory */
DECL|function|pgd_offset
r_extern
r_inline
id|pgd_t
op_star
id|pgd_offset
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|address
)paren
(brace
r_return
id|mm-&gt;pgd
op_plus
(paren
id|address
op_rshift
id|PGDIR_SHIFT
)paren
suffix:semicolon
)brace
r_extern
id|pgd_t
id|swapper_pg_dir
(braket
l_int|128
)braket
suffix:semicolon
r_extern
id|pgd_t
id|kernel_pg_dir
(braket
l_int|128
)braket
suffix:semicolon
DECL|function|pgd_offset_k
r_extern
r_inline
id|pgd_t
op_star
id|pgd_offset_k
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_return
id|kernel_pg_dir
op_plus
(paren
id|address
op_rshift
id|PGDIR_SHIFT
)paren
suffix:semicolon
)brace
multiline_comment|/* Find an entry in the second-level page table.. */
DECL|function|pmd_offset
r_extern
r_inline
id|pmd_t
op_star
id|pmd_offset
c_func
(paren
id|pgd_t
op_star
id|dir
comma
r_int
r_int
id|address
)paren
(brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd_page
c_func
(paren
op_star
id|dir
)paren
op_plus
(paren
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PMD
op_minus
l_int|1
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Find an entry in the third-level page table.. */
DECL|function|pte_offset
r_extern
r_inline
id|pte_t
op_star
id|pte_offset
c_func
(paren
id|pmd_t
op_star
id|pmdp
comma
r_int
r_int
id|address
)paren
(brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmdp
)paren
op_plus
(paren
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Allocate and free page tables. The xxx_kernel() versions are&n; * used to allocate a kernel page table - this turns on ASN bits&n; * if any.&n; */
DECL|function|nocache_page
r_extern
r_inline
r_void
id|nocache_page
(paren
r_int
r_int
id|vaddr
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|pgd_t
op_star
id|dir
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
id|pte_t
op_star
id|ptep
suffix:semicolon
r_if
c_cond
(paren
id|CPU_IS_060
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;.chip 68060&bslash;n&bslash;t&quot;
l_string|&quot;cpushp (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|VTOP
c_func
(paren
id|vaddr
)paren
)paren
)paren
suffix:semicolon
)brace
id|dir
op_assign
id|pgd_offset_k
c_func
(paren
id|vaddr
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|dir
comma
id|vaddr
)paren
suffix:semicolon
id|ptep
op_assign
id|pte_offset
c_func
(paren
id|pmdp
comma
id|vaddr
)paren
suffix:semicolon
op_star
id|ptep
op_assign
id|pte_mknocache
c_func
(paren
op_star
id|ptep
)paren
suffix:semicolon
)brace
)brace
DECL|function|cache_page
r_static
r_inline
r_void
id|cache_page
(paren
r_int
r_int
id|vaddr
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|pgd_t
op_star
id|dir
suffix:semicolon
id|pmd_t
op_star
id|pmdp
suffix:semicolon
id|pte_t
op_star
id|ptep
suffix:semicolon
id|dir
op_assign
id|pgd_offset_k
c_func
(paren
id|vaddr
)paren
suffix:semicolon
id|pmdp
op_assign
id|pmd_offset
c_func
(paren
id|dir
comma
id|vaddr
)paren
suffix:semicolon
id|ptep
op_assign
id|pte_offset
c_func
(paren
id|pmdp
comma
id|vaddr
)paren
suffix:semicolon
op_star
id|ptep
op_assign
id|pte_mkcache
c_func
(paren
op_star
id|ptep
)paren
suffix:semicolon
)brace
)brace
r_extern
r_const
r_char
id|PgtabStr_bad_pmd
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
id|PgtabStr_bad_pgd
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
id|PgtabStr_bad_pmdk
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
id|PgtabStr_bad_pgdk
(braket
)braket
suffix:semicolon
DECL|function|pte_free
r_extern
r_inline
r_void
id|pte_free
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|cache_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
(paren
id|pte_t
op_star
)paren
id|__get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|page
comma
l_int|0
comma
id|PAGE_SIZE
)paren
suffix:semicolon
id|nocache_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|printk
c_func
(paren
id|PgtabStr_bad_pmd
comma
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
r_extern
id|pmd_t
op_star
id|get_pointer_table
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|free_pointer_table
(paren
id|pmd_t
op_star
)paren
suffix:semicolon
r_extern
id|pmd_t
op_star
id|get_kpointer_table
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|free_kpointer_table
(paren
id|pmd_t
op_star
)paren
suffix:semicolon
DECL|function|pmd_free
r_extern
r_inline
r_void
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_pointer_table
(paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PMD
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|pmd_t
op_star
id|page
op_assign
id|get_pointer_table
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|pgd_set
c_func
(paren
id|pgd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pgd_set
c_func
(paren
id|pgd
comma
(paren
id|pmd_t
op_star
)paren
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_pointer_table
c_func
(paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pgd_bad
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|printk
c_func
(paren
id|PgtabStr_bad_pgd
comma
id|pgd_val
c_func
(paren
op_star
id|pgd
)paren
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
(paren
id|pmd_t
op_star
)paren
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd_page
c_func
(paren
op_star
id|pgd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pte_free_kernel
r_extern
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|cache_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc_kernel
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
(paren
id|pte_t
op_star
)paren
id|get_free_page
c_func
(paren
id|GFP_KERNEL
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|nocache_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|printk
c_func
(paren
id|PgtabStr_bad_pmdk
comma
id|pmd_val
c_func
(paren
op_star
id|pmd
)paren
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pmd_free_kernel
r_extern
r_inline
r_void
id|pmd_free_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_kpointer_table
c_func
(paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc_kernel
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc_kernel
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PMD
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|pmd_t
op_star
id|page
op_assign
id|get_kpointer_table
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
r_if
c_cond
(paren
id|page
)paren
(brace
id|pgd_set
c_func
(paren
id|pgd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
id|pgd_set
c_func
(paren
id|pgd
comma
(paren
id|pmd_t
op_star
)paren
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|free_kpointer_table
c_func
(paren
id|page
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pgd_bad
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|printk
c_func
(paren
id|PgtabStr_bad_pgdk
comma
id|pgd_val
c_func
(paren
op_star
id|pgd
)paren
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
(paren
id|pmd_t
op_star
)paren
id|BAD_PAGETABLE
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd_page
c_func
(paren
op_star
id|pgd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pgd_free
r_extern
r_inline
r_void
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_pointer_table
(paren
(paren
id|pmd_t
op_star
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|function|pgd_alloc
r_extern
r_inline
id|pgd_t
op_star
id|pgd_alloc
c_func
(paren
r_void
)paren
(brace
r_return
(paren
id|pgd_t
op_star
)paren
id|get_pointer_table
(paren
)paren
suffix:semicolon
)brace
DECL|macro|flush_icache
mdefine_line|#define flush_icache()&t;&t;&t;&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_040_OR_060)&t;&t;&t;&t;&bslash;&n;&t;&t;asm __volatile__ (&quot;nop&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;  &quot;.chip 68040&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&t;&t;&t;  &quot;cinva %%ic&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&t;&t;&t;  &quot;.chip 68k&quot;);&t;&t;&bslash;&n;&t;else {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long _tmp;&t;&t;&t;&bslash;&n;&t;&t;asm __volatile__ (&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&t;     &quot;orw %1,%0&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;     &quot;movec %0,%%cacr&quot;&t;&t;&t;&bslash;&n;&t;&t;     : &quot;=&amp;d&quot; (_tmp)&t;&t;&t;&bslash;&n;&t;&t;     : &quot;id&quot; (FLUSH_I));&t;&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
multiline_comment|/*&n; * invalidate the cache for the specified memory range.&n; * It starts at the physical address specified for&n; * the given number of bytes.&n; */
r_extern
r_void
id|cache_clear
(paren
r_int
r_int
id|paddr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/*&n; * push any dirty cache in the specified memory range.&n; * It starts at the physical address specified for&n; * the given number of bytes.&n; */
r_extern
r_void
id|cache_push
(paren
r_int
r_int
id|paddr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/*&n; * push and invalidate pages in the specified user virtual&n; * memory range.&n; */
r_extern
r_void
id|cache_push_v
(paren
r_int
r_int
id|vaddr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/* cache code */
DECL|macro|FLUSH_I_AND_D
mdefine_line|#define FLUSH_I_AND_D&t;(0x00000808)
DECL|macro|FLUSH_I
mdefine_line|#define FLUSH_I &t;(0x00000008)
multiline_comment|/* This is needed whenever the virtual mapping of the current&n;   process changes.  */
DECL|macro|__flush_cache_all
mdefine_line|#define __flush_cache_all()&t;&t;&t;&t;&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_040_OR_060)&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__ (&quot;nop&bslash;n&bslash;t&quot;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;.chip 68040&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;cpusha %dc&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;.chip 68k&quot;);&t;&t;&t;&bslash;&n;&t;else {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long _tmp;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__ (&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;orw %1,%0&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;movec %0,%%cacr&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      : &quot;=&amp;d&quot; (_tmp)&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      : &quot;di&quot; (FLUSH_I_AND_D));&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    } while (0)
DECL|macro|__flush_cache_030
mdefine_line|#define __flush_cache_030()&t;&t;&t;&t;&t;&t;&bslash;&n;    do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_020_OR_030) {&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long _tmp;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__ (&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;orw %1,%0&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      &quot;movec %0,%%cacr&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      : &quot;=&amp;d&quot; (_tmp)&t;&t;&t;&bslash;&n;&t;&t;&t;&t;      : &quot;di&quot; (FLUSH_I_AND_D));&t;&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    } while (0)
DECL|macro|flush_cache_all
mdefine_line|#define flush_cache_all() __flush_cache_all()
DECL|function|flush_cache_mm
r_extern
r_inline
r_void
id|flush_cache_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
macro_line|#if FLUSH_VIRTUAL_CACHE_040
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_cache_all
c_func
(paren
)paren
suffix:semicolon
macro_line|#else
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_cache_030
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|flush_cache_range
r_extern
r_inline
r_void
id|flush_cache_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
(brace
macro_line|#if FLUSH_VIRTUAL_CACHE_040
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|cache_push_v
c_func
(paren
id|start
comma
id|end
op_minus
id|start
)paren
suffix:semicolon
r_else
macro_line|#endif
id|__flush_cache_030
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|flush_cache_page
r_extern
r_inline
r_void
id|flush_cache_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|vmaddr
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;mm
)paren
(brace
macro_line|#if FLUSH_VIRTUAL_CACHE_040
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|cache_push_v
c_func
(paren
id|vmaddr
comma
id|PAGE_SIZE
)paren
suffix:semicolon
r_else
macro_line|#endif
id|__flush_cache_030
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/* Push the page at kernel virtual address and clear the icache */
DECL|function|flush_page_to_ram
r_extern
r_inline
r_void
id|flush_page_to_ram
(paren
r_int
r_int
id|address
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;nop&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;cpushp %%dc,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;cinvp %%ic,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|VTOP
c_func
(paren
id|address
)paren
)paren
)paren
suffix:semicolon
)brace
r_else
(brace
r_int
r_int
id|_tmp
suffix:semicolon
id|__asm
r_volatile
(paren
l_string|&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;
l_string|&quot;orw %1,%0&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%%cacr&quot;
suffix:colon
l_string|&quot;=&amp;d&quot;
(paren
id|_tmp
)paren
suffix:colon
l_string|&quot;di&quot;
(paren
id|FLUSH_I
)paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/* Push n pages at kernel virtual address and clear the icache */
DECL|function|flush_pages_to_ram
r_extern
r_inline
r_void
id|flush_pages_to_ram
(paren
r_int
r_int
id|address
comma
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
r_while
c_loop
(paren
id|n
op_decrement
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;nop&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;cpushp %%dc,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;cinvp %%ic,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|VTOP
c_func
(paren
id|address
)paren
)paren
)paren
suffix:semicolon
id|address
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
)brace
r_else
(brace
r_int
r_int
id|_tmp
suffix:semicolon
id|__asm
r_volatile
(paren
l_string|&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;
l_string|&quot;orw %1,%0&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%%cacr&quot;
suffix:colon
l_string|&quot;=&amp;d&quot;
(paren
id|_tmp
)paren
suffix:colon
l_string|&quot;di&quot;
(paren
id|FLUSH_I
)paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * Check if the addr/len goes up to the end of a physical&n; * memory chunk.  Used for DMA functions.&n; */
r_int
id|mm_end_of_chunk
(paren
r_int
r_int
id|addr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/*&n; * Map some physical address range into the kernel address space. The&n; * code is copied and adapted from map_chunk().&n; */
r_extern
r_int
r_int
id|kernel_map
c_func
(paren
r_int
r_int
id|paddr
comma
r_int
r_int
id|size
comma
r_int
id|nocacheflag
comma
r_int
r_int
op_star
id|memavailp
)paren
suffix:semicolon
multiline_comment|/*&n; * Change the cache mode of some kernel address range.&n; */
r_extern
r_void
id|kernel_set_cachemode
c_func
(paren
r_int
r_int
id|address
comma
r_int
r_int
id|size
comma
r_int
id|cmode
)paren
suffix:semicolon
multiline_comment|/* Values for nocacheflag and cmode */
DECL|macro|KERNELMAP_FULL_CACHING
mdefine_line|#define&t;KERNELMAP_FULL_CACHING&t;&t;0
DECL|macro|KERNELMAP_NOCACHE_SER
mdefine_line|#define&t;KERNELMAP_NOCACHE_SER&t;&t;1
DECL|macro|KERNELMAP_NOCACHE_NONSER
mdefine_line|#define&t;KERNELMAP_NOCACHE_NONSER&t;2
DECL|macro|KERNELMAP_NO_COPYBACK
mdefine_line|#define&t;KERNELMAP_NO_COPYBACK&t;&t;3
multiline_comment|/*&n; * The m68k doesn&squot;t have any external MMU info: the kernel page&n; * tables contain all the necessary information.&n; */
DECL|function|update_mmu_cache
r_extern
r_inline
r_void
id|update_mmu_cache
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|address
comma
id|pte_t
id|pte
)paren
(brace
)brace
multiline_comment|/*&n; * I don&squot;t know what is going on here, but since these were changed,&n; * swapping hasn&squot;t been working on the 68040.&n; */
DECL|macro|SWP_TYPE
mdefine_line|#define SWP_TYPE(entry)  (((entry) &gt;&gt; 2) &amp; 0x7f)
macro_line|#if 0
mdefine_line|#define SWP_OFFSET(entry) ((entry) &gt;&gt; 9)
mdefine_line|#define SWP_ENTRY(type,offset) (((type) &lt;&lt; 2) | ((offset) &lt;&lt; 9))
macro_line|#else
DECL|macro|SWP_OFFSET
mdefine_line|#define SWP_OFFSET(entry) ((entry) &gt;&gt; PAGE_SHIFT)
DECL|macro|SWP_ENTRY
mdefine_line|#define SWP_ENTRY(type,offset) (((type) &lt;&lt; 2) | ((offset) &lt;&lt; PAGE_SHIFT))
macro_line|#endif
macro_line|#endif /* __ASSEMBLY__ */
macro_line|#endif /* _M68K_PGTABLE_H */
eof
