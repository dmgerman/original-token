multiline_comment|/*&n; *  linux/include/asm-m68k/segment.h&n; *&n; *  Copyright (C) 1991, 1992  Linus Torvalds&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file README.legal in the main directory of this archive&n; * for more details.&n; */
multiline_comment|/*&n; * 680x0 support added by Hamish Macdonald&n; */
macro_line|#ifndef _M68K_SEGMENT_H
DECL|macro|_M68K_SEGMENT_H
mdefine_line|#define _M68K_SEGMENT_H
DECL|function|get_user_byte
r_static
r_inline
r_int
r_char
id|get_user_byte
c_func
(paren
r_const
r_char
op_star
id|addr
)paren
(brace
r_register
r_int
r_char
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;movesb %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|macro|get_fs_byte
mdefine_line|#define get_fs_byte(addr) get_user_byte((char *)(addr))
DECL|function|get_user_word
r_static
r_inline
r_int
r_int
id|get_user_word
c_func
(paren
r_const
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;movesw %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|macro|get_fs_word
mdefine_line|#define get_fs_word(addr) get_user_word((short *)(addr))
DECL|function|get_user_long
r_static
r_inline
r_int
r_int
id|get_user_long
c_func
(paren
r_const
r_int
op_star
id|addr
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;movesl %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
"&bslash;"
r_return
id|_v
suffix:semicolon
)brace
DECL|macro|get_fs_long
mdefine_line|#define get_fs_long(addr) get_user_long((int *)(addr))
DECL|function|put_user_byte
r_static
r_inline
r_void
id|put_user_byte
c_func
(paren
r_char
id|val
comma
r_char
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;movesb %0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|put_fs_byte
mdefine_line|#define put_fs_byte(x,addr) put_user_byte((x),(char *)(addr))
DECL|function|put_user_word
r_static
r_inline
r_void
id|put_user_word
c_func
(paren
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;movesw %0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|put_fs_word
mdefine_line|#define put_fs_word(x,addr) put_user_word((x),(short *)(addr))
DECL|function|put_user_long
r_static
r_inline
r_void
id|put_user_long
c_func
(paren
r_int
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;movesl %0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|macro|put_fs_long
mdefine_line|#define put_fs_long(x,addr) put_user_long((x),(int *)(addr))
DECL|function|__generic_memcpy_tofs
r_static
r_inline
r_void
id|__generic_memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
r_return
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;1:&bslash;n&bslash;t&quot;
l_string|&quot;moveb %1@+,d0&bslash;n&bslash;t&quot;
l_string|&quot;movesb d0,%2@+&bslash;n&bslash;t&quot;
l_string|&quot;dbra %0,1b&bslash;n&bslash;t&quot;
l_string|&quot;clrw %0&bslash;n&bslash;t&quot;
l_string|&quot;subql #1,%0&bslash;n&bslash;t&quot;
l_string|&quot;bccs 1b&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|n
)paren
comma
l_string|&quot;=a&quot;
(paren
id|from
)paren
comma
l_string|&quot;=a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|from
)paren
comma
l_string|&quot;2&quot;
(paren
id|to
)paren
comma
l_string|&quot;0&quot;
(paren
id|n
op_minus
l_int|1
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|__constant_memcpy_tofs
r_static
r_inline
r_void
id|__constant_memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
(brace
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|1
)paren
(brace
id|put_user_byte
c_func
(paren
op_star
(paren
r_const
r_char
op_star
)paren
id|from
comma
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|2
)paren
(brace
id|put_user_word
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|3
)paren
(brace
id|put_user_word
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|2
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|4
)paren
(brace
id|put_user_long
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#if 0
mdefine_line|#define COMMON(x) &bslash;&n;__asm__(&quot;cld&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;push %%es&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;push %%fs&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;pop %%es&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;rep ; movsl&bslash;n&bslash;t&quot; &bslash;&n;&t;x &bslash;&n;&t;&quot;pop %%es&quot; &bslash;&n;&t;: /* no outputs */ &bslash;&n;&t;:&quot;c&quot; (n/4),&quot;D&quot; ((long) to),&quot;S&quot; ((long) from) &bslash;&n;&t;:&quot;cx&quot;,&quot;di&quot;,&quot;si&quot;)
r_switch
c_cond
(paren
id|n
op_mod
l_int|4
)paren
(brace
r_case
l_int|0
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movsb&bslash;n&bslash;t&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movsw&bslash;n&bslash;t&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movsw&bslash;n&bslash;tmovsb&bslash;n&bslash;t&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#undef COMMON
macro_line|#else
id|__generic_memcpy_tofs
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|__generic_memcpy_fromfs
r_static
r_inline
r_void
id|__generic_memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
r_return
suffix:semicolon
id|__asm__
id|__volatile__
(paren
l_string|&quot;1:&bslash;n&bslash;t&quot;
l_string|&quot;movesb %1@+,d0&bslash;n&bslash;t&quot;
l_string|&quot;moveb d0,%2@+&bslash;n&bslash;t&quot;
l_string|&quot;dbra %0,1b&bslash;n&bslash;t&quot;
l_string|&quot;clrw %0&bslash;n&bslash;t&quot;
l_string|&quot;subql #1,%0&bslash;n&bslash;t&quot;
l_string|&quot;bccs 1b&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|n
)paren
comma
l_string|&quot;=a&quot;
(paren
id|from
)paren
comma
l_string|&quot;=a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|from
)paren
comma
l_string|&quot;2&quot;
(paren
id|to
)paren
comma
l_string|&quot;0&quot;
(paren
id|n
op_minus
l_int|1
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|__constant_memcpy_fromfs
r_static
r_inline
r_void
id|__constant_memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
(brace
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|1
)paren
(brace
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|2
)paren
(brace
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|get_user_word
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|3
)paren
(brace
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|get_user_word
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
l_int|2
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
op_assign
id|get_user_byte
c_func
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|n
op_eq
l_int|4
)paren
(brace
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|get_user_long
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#if 0
mdefine_line|#define COMMON(x) &bslash;&n;__asm__(&quot;cld&bslash;n&bslash;t&quot; &bslash;&n;&t;&quot;rep ; fs ; movsl&bslash;n&bslash;t&quot; &bslash;&n;&t;x &bslash;&n;&t;: /* no outputs */ &bslash;&n;&t;:&quot;c&quot; (n/4),&quot;D&quot; ((long) to),&quot;S&quot; ((long) from) &bslash;&n;&t;:&quot;cx&quot;,&quot;di&quot;,&quot;si&quot;,&quot;memory&quot;)
r_switch
c_cond
(paren
id|n
op_mod
l_int|4
)paren
(brace
r_case
l_int|0
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;fs ; movsb&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;fs ; movsw&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;fs ; movsw&bslash;n&bslash;tfs ; movsb&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#undef COMMON
macro_line|#else
id|__generic_memcpy_fromfs
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|macro|memcpy_fromfs
mdefine_line|#define memcpy_fromfs(to, from, n) &bslash;&n;(__builtin_constant_p(n) ? &bslash;&n; __constant_memcpy_fromfs((to),(from),(n)) : &bslash;&n; __generic_memcpy_fromfs((to),(from),(n)))
DECL|macro|memcpy_tofs
mdefine_line|#define memcpy_tofs(to, from, n) &bslash;&n;(__builtin_constant_p(n) ? &bslash;&n; __constant_memcpy_tofs((to),(from),(n)) : &bslash;&n; __generic_memcpy_tofs((to),(from),(n)))
multiline_comment|/*&n; * Get/set the SFC/DFC registers for MOVES instructions&n; */
DECL|function|get_fs
r_static
r_inline
r_int
r_int
id|get_fs
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
(paren
l_string|&quot;movec dfc,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|get_ds
r_static
r_inline
r_int
r_int
id|get_ds
c_func
(paren
r_void
)paren
(brace
multiline_comment|/* return the supervisor data space code */
r_return
l_int|0x5
suffix:semicolon
)brace
DECL|function|set_fs
r_static
r_inline
r_void
id|set_fs
c_func
(paren
r_int
r_int
id|val
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;movec %0,sfc&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,dfc&bslash;n&bslash;t&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
comma
l_string|&quot;r&quot;
(paren
id|val
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/* define constants */
multiline_comment|/* Address spaces (FC0-FC2) */
macro_line|#ifndef USER_DS
DECL|macro|USER_DS
mdefine_line|#define USER_DS       (1)
macro_line|#endif
macro_line|#ifndef KERNEL_DS
DECL|macro|KERNEL_DS
mdefine_line|#define KERNEL_DS     (5)
macro_line|#endif
macro_line|#endif /* _M68K_SEGMENT_H */
eof
