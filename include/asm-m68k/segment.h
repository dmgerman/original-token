macro_line|#ifndef _M68K_SEGMENT_H
DECL|macro|_M68K_SEGMENT_H
mdefine_line|#define _M68K_SEGMENT_H
multiline_comment|/* define constants */
multiline_comment|/* Address spaces (FC0-FC2) */
DECL|macro|USER_DATA
mdefine_line|#define USER_DATA     (1)
macro_line|#ifndef USER_DS
DECL|macro|USER_DS
mdefine_line|#define USER_DS       (USER_DATA)
macro_line|#endif
DECL|macro|USER_PROGRAM
mdefine_line|#define USER_PROGRAM  (2)
DECL|macro|SUPER_DATA
mdefine_line|#define SUPER_DATA    (5)
macro_line|#ifndef KERNEL_DS
DECL|macro|KERNEL_DS
mdefine_line|#define KERNEL_DS     (SUPER_DATA)
macro_line|#endif
DECL|macro|SUPER_PROGRAM
mdefine_line|#define SUPER_PROGRAM (6)
DECL|macro|CPU_SPACE
mdefine_line|#define CPU_SPACE     (7)
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/*&n; * Uh, these should become the main single-value transfer routines..&n; * They automatically use the right size if we just have the right&n; * pointer type..&n; */
DECL|macro|put_user
mdefine_line|#define put_user(x,ptr) __put_user((unsigned long)(x),(ptr),sizeof(*(ptr)))
DECL|macro|get_user
mdefine_line|#define get_user(ptr) ((__typeof__(*(ptr)))__get_user((ptr),sizeof(*(ptr))))
multiline_comment|/*&n; * This is a silly but good way to make sure that&n; * the __put_user function is indeed always optimized,&n; * and that we use the correct sizes..&n; */
r_extern
r_int
id|bad_user_access_length
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|macro|__ptr
mdefine_line|#define __ptr(x) ((unsigned long *)(x))
DECL|function|__put_user
r_static
r_inline
r_void
id|__put_user
c_func
(paren
r_int
r_int
id|x
comma
r_void
op_star
id|y
comma
r_int
id|size
)paren
(brace
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
id|__asm__
(paren
l_string|&quot;movesb %0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|x
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|__ptr
c_func
(paren
id|y
)paren
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|__asm__
(paren
l_string|&quot;movesw %0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|x
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|__ptr
c_func
(paren
id|y
)paren
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|__asm__
(paren
l_string|&quot;movesl %0,%1&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|x
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|__ptr
c_func
(paren
id|y
)paren
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|bad_user_access_length
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|__get_user
r_static
r_inline
r_int
r_int
id|__get_user
c_func
(paren
r_const
r_void
op_star
id|y
comma
r_int
id|size
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
id|__asm__
(paren
l_string|&quot;movesb %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|__ptr
c_func
(paren
id|y
)paren
)paren
)paren
suffix:semicolon
r_return
(paren
r_int
r_char
)paren
id|result
suffix:semicolon
r_case
l_int|2
suffix:colon
id|__asm__
(paren
l_string|&quot;movesw %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|__ptr
c_func
(paren
id|y
)paren
)paren
)paren
suffix:semicolon
r_return
(paren
r_int
r_int
)paren
id|result
suffix:semicolon
r_case
l_int|4
suffix:colon
id|__asm__
(paren
l_string|&quot;movesl %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|__ptr
c_func
(paren
id|y
)paren
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
r_default
suffix:colon
r_return
id|bad_user_access_length
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|macro|__ptr
macro_line|#undef __ptr
multiline_comment|/*&n; * These are deprecated..&n; *&n; * Use &quot;put_user()&quot; and &quot;get_user()&quot; with the proper pointer types instead.&n; */
DECL|macro|get_fs_byte
mdefine_line|#define get_fs_byte(addr) __get_user((const unsigned char *)(addr),1)
DECL|macro|get_fs_word
mdefine_line|#define get_fs_word(addr) __get_user((const unsigned short *)(addr),2)
DECL|macro|get_fs_long
mdefine_line|#define get_fs_long(addr) __get_user((const unsigned int *)(addr),4)
DECL|macro|put_fs_byte
mdefine_line|#define put_fs_byte(x,addr) __put_user((x),(unsigned char *)(addr),1)
DECL|macro|put_fs_word
mdefine_line|#define put_fs_word(x,addr) __put_user((x),(unsigned short *)(addr),2)
DECL|macro|put_fs_long
mdefine_line|#define put_fs_long(x,addr) __put_user((x),(unsigned int *)(addr),4)
macro_line|#ifdef WE_REALLY_WANT_TO_USE_A_BROKEN_INTERFACE
DECL|function|get_user_byte
r_static
r_inline
r_int
r_char
id|get_user_byte
c_func
(paren
r_const
r_char
op_star
id|addr
)paren
(brace
r_return
id|__get_user
c_func
(paren
id|addr
comma
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|get_user_word
r_static
r_inline
r_int
r_int
id|get_user_word
c_func
(paren
r_const
r_int
op_star
id|addr
)paren
(brace
r_return
id|__get_user
c_func
(paren
id|addr
comma
l_int|2
)paren
suffix:semicolon
)brace
DECL|function|get_user_long
r_static
r_inline
r_int
r_int
id|get_user_long
c_func
(paren
r_const
r_int
op_star
id|addr
)paren
(brace
r_return
id|__get_user
c_func
(paren
id|addr
comma
l_int|4
)paren
suffix:semicolon
)brace
DECL|function|put_user_byte
r_static
r_inline
r_void
id|put_user_byte
c_func
(paren
r_char
id|val
comma
r_char
op_star
id|addr
)paren
(brace
id|__put_user
c_func
(paren
id|val
comma
id|addr
comma
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|put_user_word
r_static
r_inline
r_void
id|put_user_word
c_func
(paren
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
id|__put_user
c_func
(paren
id|val
comma
id|addr
comma
l_int|2
)paren
suffix:semicolon
)brace
DECL|function|put_user_long
r_static
r_inline
r_void
id|put_user_long
c_func
(paren
r_int
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
id|__put_user
c_func
(paren
id|val
comma
id|addr
comma
l_int|4
)paren
suffix:semicolon
)brace
macro_line|#endif
DECL|function|__generic_memcpy_tofs
r_static
r_inline
r_void
id|__generic_memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
r_return
suffix:semicolon
id|tmp
op_assign
id|n
suffix:semicolon
id|n
op_rshift_assign
l_int|2
suffix:semicolon
r_if
c_cond
(paren
id|n
op_ne
l_int|0
)paren
id|__asm__
(paren
l_string|&quot;1:&bslash;t&quot;
l_string|&quot;movel %1@+,%/d0&bslash;n&bslash;t&quot;
l_string|&quot;movesl %/d0,%2@+&bslash;n&bslash;t&quot;
l_string|&quot;dbra %0,1b&bslash;n&bslash;t&quot;
l_string|&quot;clrw %0&bslash;n&bslash;t&quot;
l_string|&quot;subql #1,%0&bslash;n&bslash;t&quot;
l_string|&quot;bccs 1b&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|n
)paren
comma
l_string|&quot;=a&quot;
(paren
id|from
)paren
comma
l_string|&quot;=a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|n
op_minus
l_int|1
)paren
comma
l_string|&quot;1&quot;
(paren
id|from
)paren
comma
l_string|&quot;2&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_amp
l_int|2
)paren
id|__asm__
(paren
l_string|&quot;movew %0@+,%/d0&bslash;n&bslash;t&quot;
l_string|&quot;movesw %/d0,%1@+&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|from
)paren
comma
l_string|&quot;=a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|from
)paren
comma
l_string|&quot;1&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_amp
l_int|1
)paren
id|__asm__
(paren
l_string|&quot;moveb %0@,%/d0&bslash;n&bslash;t&quot;
l_string|&quot;movesb %/d0,%1@&bslash;n&bslash;t&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;a&quot;
(paren
id|from
)paren
comma
l_string|&quot;a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|__constant_memcpy_tofs
r_static
r_inline
r_void
id|__constant_memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_switch
c_cond
(paren
id|n
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_char
op_star
)paren
id|from
comma
(paren
r_char
op_star
)paren
id|to
comma
l_int|1
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
comma
l_int|2
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
comma
l_int|2
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|2
op_plus
(paren
r_char
op_star
)paren
id|to
comma
l_int|1
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|4
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|8
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|1
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
)paren
comma
l_int|1
op_plus
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|12
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|1
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
)paren
comma
l_int|1
op_plus
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|2
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
)paren
comma
l_int|2
op_plus
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|16
suffix:colon
id|__put_user
c_func
(paren
op_star
(paren
r_const
r_int
op_star
)paren
id|from
comma
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|1
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
)paren
comma
l_int|1
op_plus
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|2
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
)paren
comma
l_int|2
op_plus
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
id|__put_user
c_func
(paren
op_star
(paren
l_int|3
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
)paren
comma
l_int|3
op_plus
(paren
r_int
op_star
)paren
id|to
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|macro|COMMON
mdefine_line|#define COMMON(x)                     &bslash;&n;__asm__ __volatile__ (&quot;1:&bslash;n&bslash;t&quot;        &bslash;&n;            &quot;movel %1@+,%/d0&bslash;n&bslash;t&quot;     &bslash;&n;            &quot;movesl %/d0,%2@+&bslash;n&bslash;t&quot;    &bslash;&n;            &quot;dbra %0,1b&bslash;n&bslash;t&quot;          &bslash;&n;            &quot;clrw %0&bslash;n&bslash;t&quot;             &bslash;&n;            &quot;subql #1,%0&bslash;n&bslash;t&quot;         &bslash;&n;            &quot;bccs 1b&bslash;n&bslash;t&quot;             &bslash;&n;            x                     &bslash;&n;            : &quot;=d&quot; (n), &quot;=a&quot; (from), &quot;=a&quot; (to)    &bslash;&n;            : &quot;1&quot; (from), &quot;2&quot; (to), &quot;0&quot; (n/4-1)   &bslash;&n;            : &quot;d0&quot;, &quot;memory&quot;);
r_switch
c_cond
(paren
id|n
op_mod
l_int|4
)paren
(brace
r_case
l_int|0
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;moveb %1@+,%/d0; movesb %/d0,%2@+&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movew %1@+,%/d0; movesw %/d0,%2@+&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movew %1@+,%/d0; movesw %/d0,%2@+&bslash;n&bslash;t&quot;
l_string|&quot;moveb %1@+,%/d0; movesb %/d0,%2@+&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|macro|COMMON
macro_line|#undef COMMON
)brace
DECL|function|__generic_memcpy_fromfs
r_static
r_inline
r_void
id|__generic_memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|n
op_eq
l_int|0
)paren
r_return
suffix:semicolon
id|tmp
op_assign
id|n
suffix:semicolon
id|n
op_rshift_assign
l_int|2
suffix:semicolon
r_if
c_cond
(paren
id|n
op_ne
l_int|0
)paren
id|__asm__
(paren
l_string|&quot;1:&bslash;t&quot;
l_string|&quot;movesl %1@+,%/d0&bslash;n&bslash;t&quot;
l_string|&quot;movel %/d0,%2@+&bslash;n&bslash;t&quot;
l_string|&quot;dbra %0,1b&bslash;n&bslash;t&quot;
l_string|&quot;clrw %0&bslash;n&bslash;t&quot;
l_string|&quot;subql #1,%0&bslash;n&bslash;t&quot;
l_string|&quot;bccs 1b&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=d&quot;
(paren
id|n
)paren
comma
l_string|&quot;=a&quot;
(paren
id|from
)paren
comma
l_string|&quot;=a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|n
op_minus
l_int|1
)paren
comma
l_string|&quot;1&quot;
(paren
id|from
)paren
comma
l_string|&quot;2&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_amp
l_int|2
)paren
id|__asm__
(paren
l_string|&quot;movesw %0@+,%/d0&bslash;n&bslash;t&quot;
l_string|&quot;movew %/d0,%1@+&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=a&quot;
(paren
id|from
)paren
comma
l_string|&quot;=a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|from
)paren
comma
l_string|&quot;1&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_amp
l_int|1
)paren
id|__asm__
(paren
l_string|&quot;movesb %0@,%/d0&bslash;n&bslash;t&quot;
l_string|&quot;moveb %/d0,%1@&bslash;n&bslash;t&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;a&quot;
(paren
id|from
)paren
comma
l_string|&quot;a&quot;
(paren
id|to
)paren
suffix:colon
l_string|&quot;d0&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|__constant_memcpy_fromfs
r_static
r_inline
r_void
id|__constant_memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
r_switch
c_cond
(paren
id|n
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_char
op_star
)paren
id|from
comma
l_int|1
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|2
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|2
)paren
suffix:semicolon
op_star
(paren
(paren
r_char
op_star
)paren
id|to
op_plus
l_int|2
)paren
op_assign
id|__get_user
c_func
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
comma
l_int|1
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|4
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|8
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
op_star
(paren
l_int|1
op_plus
(paren
r_int
op_star
)paren
id|to
)paren
op_assign
id|__get_user
c_func
(paren
l_int|1
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|12
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
op_star
(paren
l_int|1
op_plus
(paren
r_int
op_star
)paren
id|to
)paren
op_assign
id|__get_user
c_func
(paren
l_int|1
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
op_star
(paren
l_int|2
op_plus
(paren
r_int
op_star
)paren
id|to
)paren
op_assign
id|__get_user
c_func
(paren
l_int|2
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|16
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|to
op_assign
id|__get_user
c_func
(paren
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
op_star
(paren
l_int|1
op_plus
(paren
r_int
op_star
)paren
id|to
)paren
op_assign
id|__get_user
c_func
(paren
l_int|1
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
op_star
(paren
l_int|2
op_plus
(paren
r_int
op_star
)paren
id|to
)paren
op_assign
id|__get_user
c_func
(paren
l_int|2
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
op_star
(paren
l_int|3
op_plus
(paren
r_int
op_star
)paren
id|to
)paren
op_assign
id|__get_user
c_func
(paren
l_int|3
op_plus
(paren
r_const
r_int
op_star
)paren
id|from
comma
l_int|4
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|macro|COMMON
mdefine_line|#define COMMON(x)                     &bslash;&n;__asm__ __volatile__ (&quot;1:&bslash;n&bslash;t&quot;        &bslash;&n;            &quot;movesl %1@+,%/d0&bslash;n&bslash;t&quot;    &bslash;&n;            &quot;movel %/d0,%2@+&bslash;n&bslash;t&quot;     &bslash;&n;            &quot;dbra %0,1b&bslash;n&bslash;t&quot;          &bslash;&n;            &quot;clrw %0&bslash;n&bslash;t&quot;             &bslash;&n;            &quot;subql #1,%0&bslash;n&bslash;t&quot;         &bslash;&n;            &quot;bccs 1b&bslash;n&bslash;t&quot;             &bslash;&n;            x                         &bslash;&n;            : &quot;=d&quot; (n), &quot;=a&quot; (from), &quot;=a&quot; (to)    &bslash;&n;            : &quot;1&quot; (from), &quot;2&quot; (to), &quot;0&quot; (n/4-1)   &bslash;&n;            : &quot;d0&quot;, &quot;memory&quot;);
r_switch
c_cond
(paren
id|n
op_mod
l_int|4
)paren
(brace
r_case
l_int|0
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movesb %1@+,%/d0; moveb %/d0,%2@+&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movesw %1@+,%/d0; movew %/d0,%2@+&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
id|COMMON
c_func
(paren
l_string|&quot;movesw %1@+,%/d0; movew %/d0,%2@+&bslash;n&bslash;t&quot;
l_string|&quot;movesb %1@+,%/d0; moveb %/d0,%2@+&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|macro|COMMON
macro_line|#undef COMMON
)brace
DECL|macro|memcpy_fromfs
mdefine_line|#define memcpy_fromfs(to, from, n) &bslash;&n;(__builtin_constant_p(n) ? &bslash;&n; __constant_memcpy_fromfs((to),(from),(n)) : &bslash;&n; __generic_memcpy_fromfs((to),(from),(n)))
DECL|macro|memcpy_tofs
mdefine_line|#define memcpy_tofs(to, from, n) &bslash;&n;(__builtin_constant_p(n) ? &bslash;&n; __constant_memcpy_tofs((to),(from),(n)) : &bslash;&n; __generic_memcpy_tofs((to),(from),(n)))
multiline_comment|/*&n; * Get/set the SFC/DFC registers for MOVES instructions&n; */
DECL|function|get_fs
r_static
r_inline
r_int
r_int
id|get_fs
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|_v
suffix:semicolon
id|__asm__
(paren
l_string|&quot;movec %/dfc,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|_v
)paren
suffix:colon
)paren
suffix:semicolon
r_return
id|_v
suffix:semicolon
)brace
DECL|function|get_ds
r_static
r_inline
r_int
r_int
id|get_ds
c_func
(paren
r_void
)paren
(brace
multiline_comment|/* return the supervisor data space code */
r_return
id|KERNEL_DS
suffix:semicolon
)brace
DECL|function|set_fs
r_static
r_inline
r_void
id|set_fs
c_func
(paren
r_int
r_int
id|val
)paren
(brace
id|__asm__
id|__volatile__
(paren
l_string|&quot;movec %0,%/sfc&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%/dfc&bslash;n&bslash;t&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|val
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif /* __ASSEMBLY__ */
macro_line|#endif /* _M68K_SEGMENT_H */
eof
