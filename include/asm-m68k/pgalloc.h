macro_line|#ifndef _M68K_PGALLOC_H
DECL|macro|_M68K_PGALLOC_H
mdefine_line|#define _M68K_PGALLOC_H
macro_line|#include &lt;asm/setup.h&gt;
macro_line|#include &lt;asm/virtconvert.h&gt;
DECL|struct|pgtable_cache_struct
r_extern
r_struct
id|pgtable_cache_struct
(brace
DECL|member|pmd_cache
r_int
r_int
op_star
id|pmd_cache
suffix:semicolon
DECL|member|pte_cache
r_int
r_int
op_star
id|pte_cache
suffix:semicolon
multiline_comment|/* This counts in units of pointer tables, of which can be eight per page. */
DECL|member|pgtable_cache_sz
r_int
r_int
id|pgtable_cache_sz
suffix:semicolon
)brace
id|quicklists
suffix:semicolon
DECL|macro|pgd_quicklist
mdefine_line|#define pgd_quicklist ((unsigned long *)0)
DECL|macro|pmd_quicklist
mdefine_line|#define pmd_quicklist (quicklists.pmd_cache)
DECL|macro|pte_quicklist
mdefine_line|#define pte_quicklist (quicklists.pte_cache)
multiline_comment|/* This isn&squot;t accurate because of fragmentation of allocated pages for&n;   pointer tables, but that should not be a problem. */
DECL|macro|pgtable_cache_size
mdefine_line|#define pgtable_cache_size ((quicklists.pgtable_cache_sz+7)/8)
r_extern
id|pte_t
op_star
id|get_pte_slow
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|offset
)paren
suffix:semicolon
r_extern
id|pmd_t
op_star
id|get_pmd_slow
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|offset
)paren
suffix:semicolon
r_extern
id|pmd_t
op_star
id|get_pointer_table
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|free_pointer_table
c_func
(paren
id|pmd_t
op_star
)paren
suffix:semicolon
DECL|function|get_pte_fast
r_extern
r_inline
id|pte_t
op_star
id|get_pte_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
id|ret
op_assign
id|pte_quicklist
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
(brace
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
op_star
id|ret
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|quicklists.pgtable_cache_sz
op_sub_assign
l_int|8
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|free_pte_fast
r_extern
r_inline
r_void
id|free_pte_fast
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
id|pte
op_assign
(paren
r_int
r_int
)paren
id|pte_quicklist
suffix:semicolon
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pte
suffix:semicolon
id|quicklists.pgtable_cache_sz
op_add_assign
l_int|8
suffix:semicolon
)brace
DECL|function|free_pte_slow
r_extern
r_inline
r_void
id|free_pte_slow
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|cache_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|get_pmd_fast
r_extern
r_inline
id|pmd_t
op_star
id|get_pmd_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
id|ret
op_assign
id|pmd_quicklist
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
(brace
id|pmd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
op_star
id|ret
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|quicklists.pgtable_cache_sz
op_decrement
suffix:semicolon
)brace
r_return
(paren
id|pmd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|free_pmd_fast
r_extern
r_inline
r_void
id|free_pmd_fast
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
id|pmd
op_assign
(paren
r_int
r_int
)paren
id|pmd_quicklist
suffix:semicolon
id|pmd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pmd
suffix:semicolon
id|quicklists.pgtable_cache_sz
op_increment
suffix:semicolon
)brace
DECL|function|free_pmd_slow
r_extern
r_inline
r_int
id|free_pmd_slow
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
r_return
id|free_pointer_table
c_func
(paren
id|pmd
)paren
suffix:semicolon
)brace
multiline_comment|/* The pgd cache is folded into the pmd cache, so these are dummy routines. */
DECL|function|get_pgd_fast
r_extern
r_inline
id|pgd_t
op_star
id|get_pgd_fast
c_func
(paren
r_void
)paren
(brace
r_return
(paren
id|pgd_t
op_star
)paren
l_int|0
suffix:semicolon
)brace
DECL|function|free_pgd_fast
r_extern
r_inline
r_void
id|free_pgd_fast
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
)brace
DECL|function|free_pgd_slow
r_extern
r_inline
r_void
id|free_pgd_slow
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
)brace
r_extern
r_void
id|__bad_pte
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
suffix:semicolon
r_extern
r_void
id|__bad_pmd
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
suffix:semicolon
DECL|function|pte_free
r_extern
r_inline
r_void
id|pte_free
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_pte_fast
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
id|get_pte_fast
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|page
)paren
r_return
id|get_pte_slow
c_func
(paren
id|pmd
comma
id|address
)paren
suffix:semicolon
id|pmd_set
c_func
(paren
id|pmd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|__bad_pte
c_func
(paren
id|pmd
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|__pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pmd_free
r_extern
r_inline
r_void
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_pmd_fast
c_func
(paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PMD_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PMD
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|pmd_t
op_star
id|page
op_assign
id|get_pmd_fast
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|page
)paren
r_return
id|get_pmd_slow
c_func
(paren
id|pgd
comma
id|address
)paren
suffix:semicolon
id|pgd_set
c_func
(paren
id|pgd
comma
id|page
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pgd_bad
c_func
(paren
op_star
id|pgd
)paren
)paren
(brace
id|__bad_pmd
c_func
(paren
id|pgd
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pmd_t
op_star
)paren
id|__pgd_page
c_func
(paren
op_star
id|pgd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pte_free_kernel
r_extern
r_inline
r_void
id|pte_free_kernel
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_pte_fast
c_func
(paren
id|pte
)paren
suffix:semicolon
)brace
DECL|function|pte_alloc_kernel
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
r_return
id|pte_alloc
c_func
(paren
id|pmd
comma
id|address
)paren
suffix:semicolon
)brace
DECL|function|pmd_free_kernel
r_extern
r_inline
r_void
id|pmd_free_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
id|free_pmd_fast
c_func
(paren
id|pmd
)paren
suffix:semicolon
)brace
DECL|function|pmd_alloc_kernel
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc_kernel
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
r_return
id|pmd_alloc
c_func
(paren
id|pgd
comma
id|address
)paren
suffix:semicolon
)brace
DECL|function|pgd_free
r_extern
r_inline
r_void
id|pgd_free
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_pmd_fast
c_func
(paren
(paren
id|pmd_t
op_star
)paren
id|pgd
)paren
suffix:semicolon
)brace
DECL|function|pgd_alloc
r_extern
r_inline
id|pgd_t
op_star
id|pgd_alloc
c_func
(paren
r_void
)paren
(brace
id|pgd_t
op_star
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|get_pmd_fast
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|pgd
)paren
id|pgd
op_assign
(paren
id|pgd_t
op_star
)paren
id|get_pointer_table
c_func
(paren
)paren
suffix:semicolon
r_return
id|pgd
suffix:semicolon
)brace
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
DECL|function|set_pgdir
r_extern
r_inline
r_void
id|set_pgdir
c_func
(paren
r_int
r_int
id|address
comma
id|pgd_t
id|entry
)paren
(brace
)brace
multiline_comment|/*&n; * Cache handling functions&n; */
DECL|macro|flush_icache
mdefine_line|#define flush_icache()&t;&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_040_OR_060)&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__(&quot;nop&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;.chip 68040&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;cinva %%ic&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;.chip 68k&quot; : );&t;&t;&bslash;&n;&t;else {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long _tmp;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__(&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&t;&t;&t;     &quot;orw %1,%0&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;movec %0,%%cacr&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     : &quot;=&amp;d&quot; (_tmp)&t;&t;&bslash;&n;&t;&t;&t;&t;     : &quot;id&quot; (FLUSH_I));&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
multiline_comment|/*&n; * invalidate the cache for the specified memory range.&n; * It starts at the physical address specified for&n; * the given number of bytes.&n; */
r_extern
r_void
id|cache_clear
c_func
(paren
r_int
r_int
id|paddr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/*&n; * push any dirty cache in the specified memory range.&n; * It starts at the physical address specified for&n; * the given number of bytes.&n; */
r_extern
r_void
id|cache_push
c_func
(paren
r_int
r_int
id|paddr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/*&n; * push and invalidate pages in the specified user virtual&n; * memory range.&n; */
r_extern
r_void
id|cache_push_v
c_func
(paren
r_int
r_int
id|vaddr
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/* cache code */
DECL|macro|FLUSH_I_AND_D
mdefine_line|#define FLUSH_I_AND_D&t;(0x00000808)
DECL|macro|FLUSH_I
mdefine_line|#define FLUSH_I &t;(0x00000008)
multiline_comment|/* This is needed whenever the virtual mapping of the current&n;   process changes.  */
DECL|macro|__flush_cache_all
mdefine_line|#define __flush_cache_all()&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_040_OR_060)&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__(&quot;nop&bslash;n&bslash;t&quot;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;.chip 68040&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;cpusha %dc&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;.chip 68k&quot;);&t;&t;&bslash;&n;&t;else {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long _tmp;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__(&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&t;&t;&t;     &quot;orw %1,%0&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;movec %0,%%cacr&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     : &quot;=&amp;d&quot; (_tmp)&t;&t;&bslash;&n;&t;&t;&t;&t;     : &quot;di&quot; (FLUSH_I_AND_D));&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|__flush_cache_030
mdefine_line|#define __flush_cache_030()&t;&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (CPU_IS_020_OR_030) {&t;&t;&t;&t;&bslash;&n;&t;&t;unsigned long _tmp;&t;&t;&t;&t;&bslash;&n;&t;&t;__asm__ __volatile__(&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;&t;&bslash;&n;&t;&t;&t;&t;     &quot;orw %1,%0&bslash;n&bslash;t&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     &quot;movec %0,%%cacr&quot;&t;&t;&bslash;&n;&t;&t;&t;&t;     : &quot;=&amp;d&quot; (_tmp)&t;&t;&bslash;&n;&t;&t;&t;&t;     : &quot;di&quot; (FLUSH_I_AND_D));&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|flush_cache_all
mdefine_line|#define flush_cache_all() __flush_cache_all()
DECL|function|flush_cache_mm
r_extern
r_inline
r_void
id|flush_cache_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_cache_030
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_cache_range
r_extern
r_inline
r_void
id|flush_cache_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_cache_030
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_cache_page
r_extern
r_inline
r_void
id|flush_cache_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|vmaddr
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;mm
)paren
id|__flush_cache_030
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/* Push the page at kernel virtual address and clear the icache */
DECL|macro|flush_page_to_ram
mdefine_line|#define flush_page_to_ram(page) __flush_page_to_ram(page_address(page))
DECL|function|__flush_page_to_ram
r_extern
r_inline
r_void
id|__flush_page_to_ram
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;nop&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;cpushp %%dc,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;cinvp %%ic,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|__pa
c_func
(paren
(paren
r_void
op_star
)paren
id|address
)paren
)paren
)paren
suffix:semicolon
)brace
r_else
(brace
r_int
r_int
id|_tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;
l_string|&quot;orw %1,%0&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%%cacr&quot;
suffix:colon
l_string|&quot;=&amp;d&quot;
(paren
id|_tmp
)paren
suffix:colon
l_string|&quot;di&quot;
(paren
id|FLUSH_I
)paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/* Push n pages at kernel virtual address and clear the icache */
DECL|function|flush_icache_range
r_extern
r_inline
r_void
id|flush_icache_range
(paren
r_int
r_int
id|address
comma
r_int
r_int
id|endaddr
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
r_int
id|n
op_assign
(paren
id|endaddr
op_minus
id|address
op_plus
id|PAGE_SIZE
op_minus
l_int|1
)paren
op_div
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
op_decrement
id|n
op_ge
l_int|0
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;nop&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;cpushp %%dc,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;cinvp %%ic,(%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|virt_to_phys
c_func
(paren
(paren
r_void
op_star
)paren
id|address
)paren
)paren
)paren
suffix:semicolon
id|address
op_add_assign
id|PAGE_SIZE
suffix:semicolon
)brace
)brace
r_else
(brace
r_int
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;movec %%cacr,%0&bslash;n&bslash;t&quot;
l_string|&quot;orw %1,%0&bslash;n&bslash;t&quot;
l_string|&quot;movec %0,%%cacr&quot;
suffix:colon
l_string|&quot;=&amp;d&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;di&quot;
(paren
id|FLUSH_I
)paren
)paren
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * flush all user-space atc entries.&n; */
DECL|function|__flush_tlb
r_static
r_inline
r_void
id|__flush_tlb
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflushan&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
)paren
suffix:semicolon
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflush #0,#4&quot;
)paren
suffix:semicolon
)brace
DECL|function|__flush_tlb_one
r_static
r_inline
r_void
id|__flush_tlb_one
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflush (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflush #0,#4,(%0)&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb() __flush_tlb()
multiline_comment|/*&n; * flush all atc entries (both kernel and user-space entries).&n; */
DECL|function|flush_tlb_all
r_static
r_inline
r_void
id|flush_tlb_all
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflusha&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
)paren
suffix:semicolon
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflusha&quot;
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_mm
r_static
r_inline
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_page
r_static
r_inline
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|vma-&gt;vm_mm
op_eq
id|current-&gt;mm
)paren
id|__flush_tlb_one
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
id|mm
op_eq
id|current-&gt;mm
)paren
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_kernel_page
r_extern
r_inline
r_void
id|flush_tlb_kernel_page
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_if
c_cond
(paren
id|CPU_IS_040_OR_060
)paren
(brace
id|mm_segment_t
id|old_fs
op_assign
id|get_fs
c_func
(paren
)paren
suffix:semicolon
id|set_fs
c_func
(paren
id|KERNEL_DS
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.chip 68040&bslash;n&bslash;t&quot;
l_string|&quot;pflush (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.chip 68k&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
id|set_fs
c_func
(paren
id|old_fs
)paren
suffix:semicolon
)brace
r_else
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;pflush #4,#4,(%0)&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|addr
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif /* _M68K_PGALLOC_H */
eof
