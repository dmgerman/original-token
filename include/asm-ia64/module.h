macro_line|#ifndef _ASM_IA64_MODULE_H
DECL|macro|_ASM_IA64_MODULE_H
mdefine_line|#define _ASM_IA64_MODULE_H
multiline_comment|/*&n; * This file contains the ia64 architecture specific module code.&n; *&n; * Copyright (C) 2000 Intel Corporation.&n; * Copyright (C) 2000 Mike Stephens &lt;mike.stephens@intel.com&gt;&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/module.h&gt;
macro_line|#include &lt;linux/vmalloc.h&gt;
macro_line|#include &lt;asm/unwind.h&gt;
DECL|macro|module_map
mdefine_line|#define module_map(x)&t;&t;vmalloc(x)
DECL|macro|module_unmap
mdefine_line|#define module_unmap(x)&t;&t;ia64_module_unmap(x)
DECL|macro|module_arch_init
mdefine_line|#define module_arch_init(x)&t;ia64_module_init(x)
multiline_comment|/*&n; * This must match in size and layout the data created by&n; * modutils/obj/obj-ia64.c&n; */
DECL|struct|archdata
r_struct
id|archdata
(brace
DECL|member|unw_table
r_const
r_char
op_star
id|unw_table
suffix:semicolon
DECL|member|segment_base
r_const
r_char
op_star
id|segment_base
suffix:semicolon
DECL|member|unw_start
r_const
r_char
op_star
id|unw_start
suffix:semicolon
DECL|member|unw_end
r_const
r_char
op_star
id|unw_end
suffix:semicolon
DECL|member|gp
r_const
r_char
op_star
id|gp
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * functions to add/remove a modules unwind info when&n; * it is loaded or unloaded.&n; */
r_static
r_inline
r_int
DECL|function|ia64_module_init
id|ia64_module_init
c_func
(paren
r_struct
id|module
op_star
id|mod
)paren
(brace
macro_line|#ifdef CONFIG_IA64_NEW_UNWIND
r_struct
id|archdata
op_star
id|archdata
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|mod_member_present
c_func
(paren
id|mod
comma
id|archdata_start
)paren
op_logical_or
op_logical_neg
id|mod-&gt;archdata_start
)paren
r_return
l_int|0
suffix:semicolon
id|archdata
op_assign
(paren
r_struct
id|archdata
op_star
)paren
(paren
id|mod-&gt;archdata_start
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * Make sure the unwind pointers are sane.&n;&t; */
r_if
c_cond
(paren
id|archdata-&gt;unw_table
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;arch_init_module: archdata-&gt;unw_table must be zero.&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|mod_bound
c_func
(paren
id|archdata-&gt;gp
comma
l_int|0
comma
id|mod
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;arch_init_module: archdata-&gt;gp out of bounds.&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|mod_bound
c_func
(paren
id|archdata-&gt;unw_start
comma
l_int|0
comma
id|mod
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;arch_init_module: archdata-&gt;unw_start out of bounds.&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|mod_bound
c_func
(paren
id|archdata-&gt;unw_end
comma
l_int|0
comma
id|mod
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;arch_init_module: archdata-&gt;unw_end out of bounds.&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|mod_bound
c_func
(paren
id|archdata-&gt;segment_base
comma
l_int|0
comma
id|mod
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;arch_init_module: archdata-&gt;unw_table out of bounds.&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/*&n;&t; * Pointers are reasonable, add the module unwind table&n;&t; */
id|archdata-&gt;unw_table
op_assign
id|unw_add_unwind_table
c_func
(paren
id|mod-&gt;name
comma
(paren
r_int
r_int
)paren
id|archdata-&gt;segment_base
comma
(paren
r_int
r_int
)paren
id|archdata-&gt;gp
comma
id|archdata-&gt;unw_start
comma
id|archdata-&gt;unw_end
)paren
suffix:semicolon
macro_line|#endif /* CONFIG_IA64_NEW_UNWIND */
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|ia64_module_unmap
id|ia64_module_unmap
c_func
(paren
r_void
op_star
id|addr
)paren
(brace
macro_line|#ifdef CONFIG_IA64_NEW_UNWIND
r_struct
id|module
op_star
id|mod
op_assign
(paren
r_struct
id|module
op_star
)paren
id|addr
suffix:semicolon
r_struct
id|archdata
op_star
id|archdata
suffix:semicolon
multiline_comment|/*&n;&t; * Before freeing the module memory remove the unwind table entry&n;&t; */
r_if
c_cond
(paren
id|mod_member_present
c_func
(paren
id|mod
comma
id|archdata_start
)paren
op_logical_and
id|mod-&gt;archdata_start
)paren
(brace
id|archdata
op_assign
(paren
r_struct
id|archdata
op_star
)paren
(paren
id|mod-&gt;archdata_start
)paren
suffix:semicolon
r_if
c_cond
(paren
id|archdata-&gt;unw_table
op_ne
l_int|NULL
)paren
id|unw_remove_unwind_table
c_func
(paren
(paren
r_void
op_star
)paren
id|archdata-&gt;unw_table
)paren
suffix:semicolon
)brace
macro_line|#endif /* CONFIG_IA64_NEW_UNWIND */
id|vfree
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif /* _ASM_IA64_MODULE_H */
eof
