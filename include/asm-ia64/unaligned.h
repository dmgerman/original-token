macro_line|#ifndef _ASM_IA64_UNALIGNED_H
DECL|macro|_ASM_IA64_UNALIGNED_H
mdefine_line|#define _ASM_IA64_UNALIGNED_H
multiline_comment|/*&n; * The main single-value unaligned transfer routines.  Derived from&n; * the Linux/Alpha version.&n; *&n; * Copyright (C) 1998, 1999 Hewlett-Packard Co&n; * Copyright (C) 1998, 1999 David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; */
DECL|macro|get_unaligned
mdefine_line|#define get_unaligned(ptr) &bslash;&n;&t;((__typeof__(*(ptr)))ia64_get_unaligned((ptr), sizeof(*(ptr))))
DECL|macro|put_unaligned
mdefine_line|#define put_unaligned(x,ptr) &bslash;&n;&t;ia64_put_unaligned((unsigned long)(x), (ptr), sizeof(*(ptr)))
multiline_comment|/*&n; * EGCS 1.1 knows about arbitrary unaligned loads.  Define some&n; * packed structures to talk about such things with.&n; */
DECL|struct|__una_u64
DECL|member|x
r_struct
id|__una_u64
(brace
id|__u64
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|__una_u32
DECL|member|x
r_struct
id|__una_u32
(brace
id|__u32
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|__una_u16
DECL|member|x
r_struct
id|__una_u16
(brace
id|__u16
id|x
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
r_static
r_inline
r_int
r_int
DECL|function|__uldq
id|__uldq
(paren
r_const
r_int
r_int
op_star
id|r11
)paren
(brace
r_const
r_struct
id|__una_u64
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u64
op_star
)paren
id|r11
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|__uldl
id|__uldl
(paren
r_const
r_int
r_int
op_star
id|r11
)paren
(brace
r_const
r_struct
id|__una_u32
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u32
op_star
)paren
id|r11
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
DECL|function|__uldw
id|__uldw
(paren
r_const
r_int
r_int
op_star
id|r11
)paren
(brace
r_const
r_struct
id|__una_u16
op_star
id|ptr
op_assign
(paren
r_const
r_struct
id|__una_u16
op_star
)paren
id|r11
suffix:semicolon
r_return
id|ptr-&gt;x
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__ustq
id|__ustq
(paren
r_int
r_int
id|r5
comma
r_int
r_int
op_star
id|r11
)paren
(brace
r_struct
id|__una_u64
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u64
op_star
)paren
id|r11
suffix:semicolon
id|ptr-&gt;x
op_assign
id|r5
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__ustl
id|__ustl
(paren
r_int
r_int
id|r5
comma
r_int
r_int
op_star
id|r11
)paren
(brace
r_struct
id|__una_u32
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u32
op_star
)paren
id|r11
suffix:semicolon
id|ptr-&gt;x
op_assign
id|r5
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|__ustw
id|__ustw
(paren
r_int
r_int
id|r5
comma
r_int
r_int
op_star
id|r11
)paren
(brace
r_struct
id|__una_u16
op_star
id|ptr
op_assign
(paren
r_struct
id|__una_u16
op_star
)paren
id|r11
suffix:semicolon
id|ptr-&gt;x
op_assign
id|r5
suffix:semicolon
)brace
multiline_comment|/*&n; * This function doesn&squot;t actually exist.  The idea is that when&n; * someone uses the macros below with an unsupported size (datatype),&n; * the linker will alert us to the problem via an unresolved reference&n; * error.&n; */
r_extern
r_int
r_int
id|ia64_bad_unaligned_access_length
(paren
r_void
)paren
suffix:semicolon
DECL|macro|ia64_get_unaligned
mdefine_line|#define ia64_get_unaligned(_ptr,size)&t;&t;&t;&t;&bslash;&n;({&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;const void *ptr = (_ptr);&t;&t;&t;&t;&bslash;&n;&t;unsigned long val;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (size) {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 1:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;val = *(const unsigned char *) ptr;&t;&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 2:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;val = __uldw((const unsigned short *)ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 4:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;val = __uldl((const unsigned int *)ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 8:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;val = __uldq((const unsigned long *)ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;      default:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;val = ia64_bad_unaligned_access_length();&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;val;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|ia64_put_unaligned
mdefine_line|#define ia64_put_unaligned(_val,_ptr,size)&t;&t;&bslash;&n;do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;const void *ptr = (_ptr);&t;&t;&t;&bslash;&n;&t;unsigned long val = (_val);&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;switch (size) {&t;&t;&t;&t;&t;&bslash;&n;&t;      case 1:&t;&t;&t;&t;&t;&bslash;&n;&t;&t;*(unsigned char *)ptr = (val);&t;&t;&bslash;&n;&t;        break;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 2:&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ustw(val, (unsigned short *)ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 4:&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ustl(val, (unsigned int *)ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&bslash;&n;&t;      case 8:&t;&t;&t;&t;&t;&bslash;&n;&t;&t;__ustq(val, (unsigned long *)ptr);&t;&bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&bslash;&n;&t;      default:&t;&t;&t;&t;&t;&bslash;&n;&t;    &t;ia64_bad_unaligned_access_length();&t;&bslash;&n;&t;}&t;&t;&t;&t;&t;&t;&bslash;&n;} while (0)
macro_line|#endif /* _ASM_IA64_UNALIGNED_H */
eof
