macro_line|#ifndef _ASM_IA64_RSE_H
DECL|macro|_ASM_IA64_RSE_H
mdefine_line|#define _ASM_IA64_RSE_H
multiline_comment|/*&n; * Copyright (C) 1998, 1999 Hewlett-Packard Co&n; * Copyright (C) 1998, 1999 David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; *&n; * Register stack engine related helper functions.  This file may be&n; * used in applications, so be careful about the name-space and give&n; * some consideration to non-GNU C compilers (though __inline__ is&n; * fine).&n; */
r_static
id|__inline__
r_int
r_int
DECL|function|ia64_rse_slot_num
id|ia64_rse_slot_num
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
r_return
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_rshift
l_int|3
)paren
op_amp
l_int|0x3f
suffix:semicolon
)brace
multiline_comment|/*&n; * Return TRUE if ADDR is the address of an RNAT slot.&n; */
r_static
id|__inline__
r_int
r_int
DECL|function|ia64_rse_is_rnat_slot
id|ia64_rse_is_rnat_slot
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
r_return
id|ia64_rse_slot_num
c_func
(paren
id|addr
)paren
op_eq
l_int|0x3f
suffix:semicolon
)brace
multiline_comment|/*&n; * Returns the address of the RNAT slot that covers the slot at&n; * address SLOT_ADDR.&n; */
r_static
id|__inline__
r_int
r_int
op_star
DECL|function|ia64_rse_rnat_addr
id|ia64_rse_rnat_addr
(paren
r_int
r_int
op_star
id|slot_addr
)paren
(brace
r_return
(paren
r_int
r_int
op_star
)paren
(paren
(paren
r_int
r_int
)paren
id|slot_addr
op_or
(paren
l_int|0x3f
op_lshift
l_int|3
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Calcuate the number of registers in the dirty partition starting at&n; * BSPSTORE with a size of DIRTY bytes.  This isn&squot;t simply DIRTY&n; * divided by eight because the 64th slot is used to store ar.rnat.&n; */
r_static
id|__inline__
r_int
r_int
DECL|function|ia64_rse_num_regs
id|ia64_rse_num_regs
(paren
r_int
r_int
op_star
id|bspstore
comma
r_int
r_int
op_star
id|bsp
)paren
(brace
r_int
r_int
id|slots
op_assign
(paren
id|bsp
op_minus
id|bspstore
)paren
suffix:semicolon
r_return
id|slots
op_minus
(paren
id|ia64_rse_slot_num
c_func
(paren
id|bspstore
)paren
op_plus
id|slots
)paren
op_div
l_int|0x40
suffix:semicolon
)brace
multiline_comment|/*&n; * The inverse of the above: given bspstore and the number of&n; * registers, calculate ar.bsp.&n; */
r_static
id|__inline__
r_int
r_int
op_star
DECL|function|ia64_rse_skip_regs
id|ia64_rse_skip_regs
(paren
r_int
r_int
op_star
id|addr
comma
r_int
id|num_regs
)paren
(brace
r_int
id|delta
op_assign
id|ia64_rse_slot_num
c_func
(paren
id|addr
)paren
op_plus
id|num_regs
suffix:semicolon
r_if
c_cond
(paren
id|num_regs
OL
l_int|0
)paren
id|delta
op_sub_assign
l_int|0x3e
suffix:semicolon
r_return
id|addr
op_plus
id|num_regs
op_plus
id|delta
op_div
l_int|0x3f
suffix:semicolon
)brace
macro_line|#endif /* _ASM_IA64_RSE_H */
eof
