macro_line|#ifndef _ASM_IA64_SAL_H
DECL|macro|_ASM_IA64_SAL_H
mdefine_line|#define _ASM_IA64_SAL_H
multiline_comment|/*&n; * System Abstraction Layer definitions.&n; *&n; * This is based on version 2.5 of the manual &quot;IA-64 System&n; * Abstraction Layer&quot;.&n; *&n; * Copyright (C) 1998, 1999 Hewlett-Packard Co&n; * Copyright (C) 1998, 1999 David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; * Copyright (C) 1999 Srinivasa Prasad Thirumalachar &lt;sprasad@sprasad.engr.sgi.com&gt;&n; *&n; * 99/09/29 davidm&t;Updated for SAL 2.6.&n; * 00/03/29 cfleck      Updated SAL Error Logging info for processor (SAL 2.6) &n; *                      (plus examples of platform error info structures from smariset @ Intel)&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;asm/pal.h&gt;
macro_line|#include &lt;asm/system.h&gt;
r_extern
id|spinlock_t
id|sal_lock
suffix:semicolon
multiline_comment|/* SAL spec _requires_ eight args for each call. */
DECL|macro|__SAL_CALL
mdefine_line|#define __SAL_CALL(result,a0,a1,a2,a3,a4,a5,a6,a7)&t;&bslash;&n;&t;result = (*ia64_sal)(a0,a1,a2,a3,a4,a5,a6,a7)
macro_line|#ifdef CONFIG_SMP
DECL|macro|SAL_CALL
macro_line|# define SAL_CALL(result,args...) do {&t;&t;&bslash;&n;&t;  spin_lock(&amp;sal_lock);&t;&t;&t;&bslash;&n;&t;  __SAL_CALL(result,args);&t;&t;&bslash;&n;&t;  spin_unlock(&amp;sal_lock);&t;&t;&bslash;&n;} while (0)
macro_line|#else
DECL|macro|SAL_CALL
macro_line|# define SAL_CALL(result,args...)&t;__SAL_CALL(result,args)
macro_line|#endif
DECL|macro|SAL_SET_VECTORS
mdefine_line|#define SAL_SET_VECTORS&t;&t;&t;0x01000000
DECL|macro|SAL_GET_STATE_INFO
mdefine_line|#define SAL_GET_STATE_INFO&t;&t;0x01000001
DECL|macro|SAL_GET_STATE_INFO_SIZE
mdefine_line|#define SAL_GET_STATE_INFO_SIZE&t;&t;0x01000002
DECL|macro|SAL_CLEAR_STATE_INFO
mdefine_line|#define SAL_CLEAR_STATE_INFO&t;&t;0x01000003
DECL|macro|SAL_MC_RENDEZ
mdefine_line|#define SAL_MC_RENDEZ&t;&t;&t;0x01000004
DECL|macro|SAL_MC_SET_PARAMS
mdefine_line|#define SAL_MC_SET_PARAMS&t;&t;0x01000005
DECL|macro|SAL_REGISTER_PHYSICAL_ADDR
mdefine_line|#define SAL_REGISTER_PHYSICAL_ADDR&t;0x01000006
DECL|macro|SAL_CACHE_FLUSH
mdefine_line|#define SAL_CACHE_FLUSH&t;&t;&t;0x01000008
DECL|macro|SAL_CACHE_INIT
mdefine_line|#define SAL_CACHE_INIT&t;&t;&t;0x01000009
DECL|macro|SAL_PCI_CONFIG_READ
mdefine_line|#define SAL_PCI_CONFIG_READ&t;&t;0x01000010
DECL|macro|SAL_PCI_CONFIG_WRITE
mdefine_line|#define SAL_PCI_CONFIG_WRITE&t;&t;0x01000011
DECL|macro|SAL_FREQ_BASE
mdefine_line|#define SAL_FREQ_BASE&t;&t;&t;0x01000012
DECL|macro|SAL_UPDATE_PAL
mdefine_line|#define SAL_UPDATE_PAL&t;&t;&t;0x01000020
DECL|struct|ia64_sal_retval
r_struct
id|ia64_sal_retval
(brace
multiline_comment|/*&n;&t; * A zero status value indicates call completed without error.&n;&t; * A negative status value indicates reason of call failure.&n;&t; * A positive status value indicates success but an&n;&t; * informational value should be printed (e.g., &quot;reboot for&n;&t; * change to take effect&quot;).&n;&t; */
DECL|member|status
id|s64
id|status
suffix:semicolon
DECL|member|v0
id|u64
id|v0
suffix:semicolon
DECL|member|v1
id|u64
id|v1
suffix:semicolon
DECL|member|v2
id|u64
id|v2
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|ia64_sal_handler
r_typedef
r_struct
id|ia64_sal_retval
(paren
op_star
id|ia64_sal_handler
)paren
(paren
id|u64
comma
dot
dot
dot
)paren
suffix:semicolon
r_enum
(brace
DECL|enumerator|SAL_FREQ_BASE_PLATFORM
id|SAL_FREQ_BASE_PLATFORM
op_assign
l_int|0
comma
DECL|enumerator|SAL_FREQ_BASE_INTERVAL_TIMER
id|SAL_FREQ_BASE_INTERVAL_TIMER
op_assign
l_int|1
comma
DECL|enumerator|SAL_FREQ_BASE_REALTIME_CLOCK
id|SAL_FREQ_BASE_REALTIME_CLOCK
op_assign
l_int|2
)brace
suffix:semicolon
multiline_comment|/*&n; * The SAL system table is followed by a variable number of variable&n; * length descriptors.  The structure of these descriptors follows&n; * below.&n; * The defininition follows SAL specs from July 2000&n; */
DECL|struct|ia64_sal_systab
r_struct
id|ia64_sal_systab
(brace
DECL|member|signature
id|u8
id|signature
(braket
l_int|4
)braket
suffix:semicolon
multiline_comment|/* should be &quot;SST_&quot; */
DECL|member|size
id|u32
id|size
suffix:semicolon
multiline_comment|/* size of this table in bytes */
DECL|member|sal_rev_minor
id|u8
id|sal_rev_minor
suffix:semicolon
DECL|member|sal_rev_major
id|u8
id|sal_rev_major
suffix:semicolon
DECL|member|entry_count
id|u16
id|entry_count
suffix:semicolon
multiline_comment|/* # of entries in variable portion */
DECL|member|checksum
id|u8
id|checksum
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|7
)braket
suffix:semicolon
DECL|member|sal_a_rev_minor
id|u8
id|sal_a_rev_minor
suffix:semicolon
DECL|member|sal_a_rev_major
id|u8
id|sal_a_rev_major
suffix:semicolon
DECL|member|sal_b_rev_minor
id|u8
id|sal_b_rev_minor
suffix:semicolon
DECL|member|sal_b_rev_major
id|u8
id|sal_b_rev_major
suffix:semicolon
multiline_comment|/* oem_id &amp; product_id: terminating NUL is missing if string is exactly 32 bytes long. */
DECL|member|oem_id
id|u8
id|oem_id
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|product_id
id|u8
id|product_id
(braket
l_int|32
)braket
suffix:semicolon
multiline_comment|/* ASCII product id  */
DECL|member|reserved2
id|u8
id|reserved2
(braket
l_int|8
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|sal_systab_entry_type
r_enum
id|sal_systab_entry_type
(brace
DECL|enumerator|SAL_DESC_ENTRY_POINT
id|SAL_DESC_ENTRY_POINT
op_assign
l_int|0
comma
DECL|enumerator|SAL_DESC_MEMORY
id|SAL_DESC_MEMORY
op_assign
l_int|1
comma
DECL|enumerator|SAL_DESC_PLATFORM_FEATURE
id|SAL_DESC_PLATFORM_FEATURE
op_assign
l_int|2
comma
DECL|enumerator|SAL_DESC_TR
id|SAL_DESC_TR
op_assign
l_int|3
comma
DECL|enumerator|SAL_DESC_PTC
id|SAL_DESC_PTC
op_assign
l_int|4
comma
DECL|enumerator|SAL_DESC_AP_WAKEUP
id|SAL_DESC_AP_WAKEUP
op_assign
l_int|5
)brace
suffix:semicolon
multiline_comment|/*&n; * Entry type:&t;Size:&n; *&t;0&t;48&n; *&t;1&t;32&n; *&t;2&t;16&n; *&t;3&t;32&n; *&t;4&t;16&n; *&t;5&t;16&n; */
DECL|macro|SAL_DESC_SIZE
mdefine_line|#define SAL_DESC_SIZE(type)&t;&quot;&bslash;060&bslash;040&bslash;020&bslash;040&bslash;020&bslash;020&quot;[(unsigned) type]
DECL|struct|ia64_sal_desc_entry_point
r_typedef
r_struct
id|ia64_sal_desc_entry_point
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|7
)braket
suffix:semicolon
DECL|member|pal_proc
id|u64
id|pal_proc
suffix:semicolon
DECL|member|sal_proc
id|u64
id|sal_proc
suffix:semicolon
DECL|member|gp
id|u64
id|gp
suffix:semicolon
DECL|member|reserved2
id|u8
id|reserved2
(braket
l_int|16
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_entry_point_t
)brace
id|ia64_sal_desc_entry_point_t
suffix:semicolon
DECL|struct|ia64_sal_desc_memory
r_typedef
r_struct
id|ia64_sal_desc_memory
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|used_by_sal
id|u8
id|used_by_sal
suffix:semicolon
multiline_comment|/* needs to be mapped for SAL? */
DECL|member|mem_attr
id|u8
id|mem_attr
suffix:semicolon
multiline_comment|/* current memory attribute setting */
DECL|member|access_rights
id|u8
id|access_rights
suffix:semicolon
multiline_comment|/* access rights set up by SAL */
DECL|member|mem_attr_mask
id|u8
id|mem_attr_mask
suffix:semicolon
multiline_comment|/* mask of supported memory attributes */
DECL|member|reserved1
id|u8
id|reserved1
suffix:semicolon
DECL|member|mem_type
id|u8
id|mem_type
suffix:semicolon
multiline_comment|/* memory type */
DECL|member|mem_usage
id|u8
id|mem_usage
suffix:semicolon
multiline_comment|/* memory usage */
DECL|member|addr
id|u64
id|addr
suffix:semicolon
multiline_comment|/* physical address of memory */
DECL|member|length
id|u32
id|length
suffix:semicolon
multiline_comment|/* length (multiple of 4KB pages) */
DECL|member|reserved2
id|u32
id|reserved2
suffix:semicolon
DECL|member|oem_reserved
id|u8
id|oem_reserved
(braket
l_int|8
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_memory_t
)brace
id|ia64_sal_desc_memory_t
suffix:semicolon
DECL|macro|IA64_SAL_PLATFORM_FEATURE_BUS_LOCK
mdefine_line|#define IA64_SAL_PLATFORM_FEATURE_BUS_LOCK&t;&t;(1 &lt;&lt; 0)
DECL|macro|IA64_SAL_PLATFORM_FEATURE_IRQ_REDIR_HINT
mdefine_line|#define IA64_SAL_PLATFORM_FEATURE_IRQ_REDIR_HINT&t;(1 &lt;&lt; 1)
DECL|macro|IA64_SAL_PLATFORM_FEATURE_IPI_REDIR_HINT
mdefine_line|#define IA64_SAL_PLATFORM_FEATURE_IPI_REDIR_HINT&t;(1 &lt;&lt; 2)
DECL|struct|ia64_sal_desc_platform_feature
r_typedef
r_struct
id|ia64_sal_desc_platform_feature
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|feature_mask
id|u8
id|feature_mask
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|14
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_platform_feature_t
)brace
id|ia64_sal_desc_platform_feature_t
suffix:semicolon
DECL|struct|ia64_sal_desc_tr
r_typedef
r_struct
id|ia64_sal_desc_tr
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|tr_type
id|u8
id|tr_type
suffix:semicolon
multiline_comment|/* 0 == instruction, 1 == data */
DECL|member|regnum
id|u8
id|regnum
suffix:semicolon
multiline_comment|/* translation register number */
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|5
)braket
suffix:semicolon
DECL|member|addr
id|u64
id|addr
suffix:semicolon
multiline_comment|/* virtual address of area covered */
DECL|member|page_size
id|u64
id|page_size
suffix:semicolon
multiline_comment|/* encoded page size */
DECL|member|reserved2
id|u8
id|reserved2
(braket
l_int|8
)braket
suffix:semicolon
DECL|typedef|ia64_sal_desc_tr_t
)brace
id|ia64_sal_desc_tr_t
suffix:semicolon
DECL|struct|ia64_sal_desc_ptc
r_typedef
r_struct
id|ia64_sal_desc_ptc
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|num_domains
id|u32
id|num_domains
suffix:semicolon
multiline_comment|/* # of coherence domains */
DECL|member|domain_info
id|u64
id|domain_info
suffix:semicolon
multiline_comment|/* physical address of domain info table */
DECL|typedef|ia64_sal_desc_ptc_t
)brace
id|ia64_sal_desc_ptc_t
suffix:semicolon
DECL|struct|ia64_sal_ptc_domain_info
r_typedef
r_struct
id|ia64_sal_ptc_domain_info
(brace
DECL|member|proc_count
id|u64
id|proc_count
suffix:semicolon
multiline_comment|/* number of processors in domain */
DECL|member|proc_list
id|u64
id|proc_list
suffix:semicolon
multiline_comment|/* physical address of LID array */
DECL|typedef|ia64_sal_ptc_domain_info_t
)brace
id|ia64_sal_ptc_domain_info_t
suffix:semicolon
DECL|struct|ia64_sal_ptc_domain_proc_entry
r_typedef
r_struct
id|ia64_sal_ptc_domain_proc_entry
(brace
DECL|member|reserved
id|u64
id|reserved
suffix:colon
l_int|16
suffix:semicolon
DECL|member|eid
id|u64
id|eid
suffix:colon
l_int|8
suffix:semicolon
multiline_comment|/* eid of processor */
DECL|member|id
id|u64
id|id
suffix:colon
l_int|8
suffix:semicolon
multiline_comment|/* id of processor */
DECL|member|ignored
id|u64
id|ignored
suffix:colon
l_int|32
suffix:semicolon
DECL|typedef|ia64_sal_ptc_domain_proc_entry_t
)brace
id|ia64_sal_ptc_domain_proc_entry_t
suffix:semicolon
DECL|macro|IA64_SAL_AP_EXTERNAL_INT
mdefine_line|#define IA64_SAL_AP_EXTERNAL_INT 0
DECL|struct|ia64_sal_desc_ap_wakeup
r_typedef
r_struct
id|ia64_sal_desc_ap_wakeup
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|mechanism
id|u8
id|mechanism
suffix:semicolon
multiline_comment|/* 0 == external interrupt */
DECL|member|reserved1
id|u8
id|reserved1
(braket
l_int|6
)braket
suffix:semicolon
DECL|member|vector
id|u64
id|vector
suffix:semicolon
multiline_comment|/* interrupt vector in range 0x10-0xff */
DECL|typedef|ia64_sal_desc_ap_wakeup_t
)brace
id|ia64_sal_desc_ap_wakeup_t
suffix:semicolon
r_extern
id|ia64_sal_handler
id|ia64_sal
suffix:semicolon
r_extern
r_struct
id|ia64_sal_desc_ptc
op_star
id|ia64_ptc_domain_info
suffix:semicolon
r_extern
r_const
r_char
op_star
id|ia64_sal_strerror
(paren
r_int
id|status
)paren
suffix:semicolon
r_extern
r_void
id|ia64_sal_init
(paren
r_struct
id|ia64_sal_systab
op_star
id|sal_systab
)paren
suffix:semicolon
multiline_comment|/* SAL information type encodings */
r_enum
(brace
DECL|enumerator|SAL_INFO_TYPE_MCA
id|SAL_INFO_TYPE_MCA
op_assign
l_int|0
comma
multiline_comment|/* Machine check abort information */
DECL|enumerator|SAL_INFO_TYPE_INIT
id|SAL_INFO_TYPE_INIT
op_assign
l_int|1
comma
multiline_comment|/* Init information */
DECL|enumerator|SAL_INFO_TYPE_CMC
id|SAL_INFO_TYPE_CMC
op_assign
l_int|2
multiline_comment|/* Corrected machine check information */
)brace
suffix:semicolon
multiline_comment|/* Sub information type encodings */
r_enum
(brace
DECL|enumerator|SAL_SUB_INFO_TYPE_PROCESSOR
id|SAL_SUB_INFO_TYPE_PROCESSOR
op_assign
l_int|0
comma
multiline_comment|/* Processor information */
DECL|enumerator|SAL_SUB_INFO_TYPE_PLATFORM
id|SAL_SUB_INFO_TYPE_PLATFORM
op_assign
l_int|1
multiline_comment|/* Platform information */
)brace
suffix:semicolon
multiline_comment|/* Encodings for machine check parameter types */
r_enum
(brace
DECL|enumerator|SAL_MC_PARAM_RENDEZ_INT
id|SAL_MC_PARAM_RENDEZ_INT
op_assign
l_int|1
comma
multiline_comment|/* Rendezevous interrupt */
DECL|enumerator|SAL_MC_PARAM_RENDEZ_WAKEUP
id|SAL_MC_PARAM_RENDEZ_WAKEUP
op_assign
l_int|2
multiline_comment|/* Wakeup */
)brace
suffix:semicolon
multiline_comment|/* Encodings for rendezvous mechanisms */
r_enum
(brace
DECL|enumerator|SAL_MC_PARAM_MECHANISM_INT
id|SAL_MC_PARAM_MECHANISM_INT
op_assign
l_int|1
comma
multiline_comment|/* Use interrupt */
DECL|enumerator|SAL_MC_PARAM_MECHANISM_MEM
id|SAL_MC_PARAM_MECHANISM_MEM
op_assign
l_int|2
multiline_comment|/* Use memory synchronization variable*/
)brace
suffix:semicolon
multiline_comment|/* Encodings for vectors which can be registered by the OS with SAL */
r_enum
(brace
DECL|enumerator|SAL_VECTOR_OS_MCA
id|SAL_VECTOR_OS_MCA
op_assign
l_int|0
comma
DECL|enumerator|SAL_VECTOR_OS_INIT
id|SAL_VECTOR_OS_INIT
op_assign
l_int|1
comma
DECL|enumerator|SAL_VECTOR_OS_BOOT_RENDEZ
id|SAL_VECTOR_OS_BOOT_RENDEZ
op_assign
l_int|2
)brace
suffix:semicolon
multiline_comment|/* Definition of the SAL Error Log from the SAL spec */
multiline_comment|/* Definition of timestamp according to SAL spec for logging purposes */
DECL|struct|sal_log_timestamp
r_typedef
r_struct
id|sal_log_timestamp
(brace
DECL|member|slh_century
id|u8
id|slh_century
suffix:semicolon
multiline_comment|/* Century (19, 20, 21, ...) */
DECL|member|slh_year
id|u8
id|slh_year
suffix:semicolon
multiline_comment|/* Year (00..99) */
DECL|member|slh_month
id|u8
id|slh_month
suffix:semicolon
multiline_comment|/* Month (1..12) */
DECL|member|slh_day
id|u8
id|slh_day
suffix:semicolon
multiline_comment|/* Day (1..31) */
DECL|member|slh_reserved
id|u8
id|slh_reserved
suffix:semicolon
DECL|member|slh_hour
id|u8
id|slh_hour
suffix:semicolon
multiline_comment|/* Hour (0..23)&t;*/
DECL|member|slh_minute
id|u8
id|slh_minute
suffix:semicolon
multiline_comment|/* Minute (0..59) */
DECL|member|slh_second
id|u8
id|slh_second
suffix:semicolon
multiline_comment|/* Second (0..59) */
DECL|typedef|sal_log_timestamp_t
)brace
id|sal_log_timestamp_t
suffix:semicolon
DECL|macro|MAX_CACHE_ERRORS
mdefine_line|#define MAX_CACHE_ERRORS&t;&t;&t;6
DECL|macro|MAX_TLB_ERRORS
mdefine_line|#define MAX_TLB_ERRORS&t;&t;&t;&t;6
DECL|macro|MAX_BUS_ERRORS
mdefine_line|#define MAX_BUS_ERRORS&t;&t;&t;&t;1
DECL|struct|sal_log_processor_info
r_typedef
r_struct
id|sal_log_processor_info
(brace
r_struct
(brace
DECL|member|slpi_psi
id|u64
id|slpi_psi
suffix:colon
l_int|1
comma
DECL|member|slpi_cache_check
id|slpi_cache_check
suffix:colon
id|MAX_CACHE_ERRORS
comma
DECL|member|slpi_tlb_check
id|slpi_tlb_check
suffix:colon
id|MAX_TLB_ERRORS
comma
DECL|member|slpi_bus_check
id|slpi_bus_check
suffix:colon
id|MAX_BUS_ERRORS
comma
DECL|member|slpi_reserved2
id|slpi_reserved2
suffix:colon
(paren
l_int|31
op_minus
(paren
id|MAX_TLB_ERRORS
op_plus
id|MAX_CACHE_ERRORS
op_plus
id|MAX_BUS_ERRORS
)paren
)paren
comma
DECL|member|slpi_minstate
id|slpi_minstate
suffix:colon
l_int|1
comma
DECL|member|slpi_bank1_gr
id|slpi_bank1_gr
suffix:colon
l_int|1
comma
DECL|member|slpi_br
id|slpi_br
suffix:colon
l_int|1
comma
DECL|member|slpi_cr
id|slpi_cr
suffix:colon
l_int|1
comma
DECL|member|slpi_ar
id|slpi_ar
suffix:colon
l_int|1
comma
DECL|member|slpi_rr
id|slpi_rr
suffix:colon
l_int|1
comma
DECL|member|slpi_fr
id|slpi_fr
suffix:colon
l_int|1
comma
DECL|member|slpi_reserved1
id|slpi_reserved1
suffix:colon
l_int|25
suffix:semicolon
DECL|member|slpi_valid
)brace
id|slpi_valid
suffix:semicolon
DECL|member|slpi_processor_state_info
id|pal_processor_state_info_t
id|slpi_processor_state_info
suffix:semicolon
r_struct
(brace
DECL|member|slpi_cache_check
id|pal_cache_check_info_t
id|slpi_cache_check
suffix:semicolon
DECL|member|slpi_target_address
id|u64
id|slpi_target_address
suffix:semicolon
DECL|member|slpi_cache_check_info
)brace
id|slpi_cache_check_info
(braket
id|MAX_CACHE_ERRORS
)braket
suffix:semicolon
DECL|member|slpi_tlb_check_info
id|pal_tlb_check_info_t
id|slpi_tlb_check_info
(braket
id|MAX_TLB_ERRORS
)braket
suffix:semicolon
r_struct
(brace
DECL|member|slpi_bus_check
id|pal_bus_check_info_t
id|slpi_bus_check
suffix:semicolon
DECL|member|slpi_requestor_addr
id|u64
id|slpi_requestor_addr
suffix:semicolon
DECL|member|slpi_responder_addr
id|u64
id|slpi_responder_addr
suffix:semicolon
DECL|member|slpi_target_addr
id|u64
id|slpi_target_addr
suffix:semicolon
DECL|member|slpi_bus_check_info
)brace
id|slpi_bus_check_info
(braket
id|MAX_BUS_ERRORS
)braket
suffix:semicolon
DECL|member|slpi_min_state_area
id|pal_min_state_area_t
id|slpi_min_state_area
suffix:semicolon
DECL|member|slpi_br
id|u64
id|slpi_br
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|slpi_cr
id|u64
id|slpi_cr
(braket
l_int|128
)braket
suffix:semicolon
DECL|member|slpi_ar
id|u64
id|slpi_ar
(braket
l_int|128
)braket
suffix:semicolon
DECL|member|slpi_rr
id|u64
id|slpi_rr
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|slpi_fr
id|u64
id|slpi_fr
(braket
l_int|128
)braket
suffix:semicolon
DECL|typedef|sal_log_processor_info_t
)brace
id|sal_log_processor_info_t
suffix:semicolon
multiline_comment|/* platform error log structures */
DECL|struct|platerr_logheader
r_typedef
r_struct
id|platerr_logheader
(brace
DECL|member|nextlog
id|u64
id|nextlog
suffix:semicolon
multiline_comment|/* next log offset if present */
DECL|member|loglength
id|u64
id|loglength
suffix:semicolon
multiline_comment|/* log length */
DECL|member|logsubtype
id|u64
id|logsubtype
suffix:semicolon
multiline_comment|/* log subtype memory/bus/component */
DECL|member|eseverity
id|u64
id|eseverity
suffix:semicolon
multiline_comment|/* error severity */
DECL|typedef|ehdr_t
)brace
id|ehdr_t
suffix:semicolon
DECL|struct|sysmem_errlog
r_typedef
r_struct
id|sysmem_errlog
(brace
DECL|member|lhdr
id|ehdr_t
id|lhdr
suffix:semicolon
multiline_comment|/* header */
DECL|member|vflag
id|u64
id|vflag
suffix:semicolon
multiline_comment|/* valid bits for each field in the log */
DECL|member|addr
id|u64
id|addr
suffix:semicolon
multiline_comment|/* memory address */
DECL|member|data
id|u64
id|data
suffix:semicolon
multiline_comment|/* memory data */
DECL|member|cmd
id|u64
id|cmd
suffix:semicolon
multiline_comment|/* command bus value if any */
DECL|member|ctrl
id|u64
id|ctrl
suffix:semicolon
multiline_comment|/* control bus value if any */
DECL|member|addrsyndrome
id|u64
id|addrsyndrome
suffix:semicolon
multiline_comment|/* memory address ecc/parity syndrome bits */
DECL|member|datasyndrome
id|u64
id|datasyndrome
suffix:semicolon
multiline_comment|/* data ecc/parity syndrome */
DECL|member|cacheinfo
id|u64
id|cacheinfo
suffix:semicolon
multiline_comment|/* platform cache info as defined in pal spec. table 7-34 */
DECL|typedef|merrlog_t
)brace
id|merrlog_t
suffix:semicolon
DECL|struct|sysbus_errlog
r_typedef
r_struct
id|sysbus_errlog
(brace
DECL|member|lhdr
id|ehdr_t
id|lhdr
suffix:semicolon
multiline_comment|/* linkded list header */
DECL|member|vflag
id|u64
id|vflag
suffix:semicolon
multiline_comment|/* valid bits for each field in the log */
DECL|member|busnum
id|u64
id|busnum
suffix:semicolon
multiline_comment|/* bus number in error */
DECL|member|reqaddr
id|u64
id|reqaddr
suffix:semicolon
multiline_comment|/* requestor address */
DECL|member|resaddr
id|u64
id|resaddr
suffix:semicolon
multiline_comment|/* responder address */
DECL|member|taraddr
id|u64
id|taraddr
suffix:semicolon
multiline_comment|/* target address */
DECL|member|data
id|u64
id|data
suffix:semicolon
multiline_comment|/* requester r/w data */
DECL|member|cmd
id|u64
id|cmd
suffix:semicolon
multiline_comment|/* bus commands */
DECL|member|ctrl
id|u64
id|ctrl
suffix:semicolon
multiline_comment|/* bus controls (be# &amp;-0) */
DECL|member|addrsyndrome
id|u64
id|addrsyndrome
suffix:semicolon
multiline_comment|/* addr bus ecc/parity bits */
DECL|member|datasyndrome
id|u64
id|datasyndrome
suffix:semicolon
multiline_comment|/* data bus ecc/parity bits */
DECL|member|cmdsyndrome
id|u64
id|cmdsyndrome
suffix:semicolon
multiline_comment|/* command bus ecc/parity bits */
DECL|member|ctrlsyndrome
id|u64
id|ctrlsyndrome
suffix:semicolon
multiline_comment|/* control bus ecc/parity bits */
DECL|typedef|berrlog_t
)brace
id|berrlog_t
suffix:semicolon
multiline_comment|/* platform error log structures */
DECL|struct|syserr_chdr
r_typedef
r_struct
id|syserr_chdr
(brace
multiline_comment|/* one header per component */
DECL|member|busnum
id|u64
id|busnum
suffix:semicolon
multiline_comment|/* bus number on which the component resides */
DECL|member|devnum
id|u64
id|devnum
suffix:semicolon
multiline_comment|/* same as device select */
DECL|member|funcid
id|u64
id|funcid
suffix:semicolon
multiline_comment|/* function id of the device */
DECL|member|devid
id|u64
id|devid
suffix:semicolon
multiline_comment|/* pci device id */
DECL|member|classcode
id|u64
id|classcode
suffix:semicolon
multiline_comment|/* pci class code for the device */
DECL|member|cmdreg
id|u64
id|cmdreg
suffix:semicolon
multiline_comment|/* pci command reg value */
DECL|member|statreg
id|u64
id|statreg
suffix:semicolon
multiline_comment|/* pci status reg value */
DECL|typedef|chdr_t
)brace
id|chdr_t
suffix:semicolon
DECL|struct|cfginfo
r_typedef
r_struct
id|cfginfo
(brace
DECL|member|cfgaddr
id|u64
id|cfgaddr
suffix:semicolon
DECL|member|cfgval
id|u64
id|cfgval
suffix:semicolon
DECL|typedef|cfginfo_t
)brace
id|cfginfo_t
suffix:semicolon
DECL|struct|sys_comperr
r_typedef
r_struct
id|sys_comperr
(brace
multiline_comment|/* per component */
DECL|member|lhdr
id|ehdr_t
id|lhdr
suffix:semicolon
multiline_comment|/* linked list header */
DECL|member|vflag
id|u64
id|vflag
suffix:semicolon
multiline_comment|/* valid bits for each field in the log */
DECL|member|scomphdr
id|chdr_t
id|scomphdr
suffix:semicolon
DECL|member|numregpair
id|u64
id|numregpair
suffix:semicolon
multiline_comment|/* number of reg addr/value pairs */
DECL|member|cfginfo
id|cfginfo_t
id|cfginfo
suffix:semicolon
DECL|typedef|cerrlog_t
)brace
id|cerrlog_t
suffix:semicolon
DECL|struct|sel_records
r_typedef
r_struct
id|sel_records
(brace
DECL|member|lhdr
id|ehdr_t
id|lhdr
suffix:semicolon
DECL|member|seldata
id|u64
id|seldata
suffix:semicolon
DECL|typedef|isel_t
)brace
id|isel_t
suffix:semicolon
DECL|struct|plat_errlog
r_typedef
r_struct
id|plat_errlog
(brace
DECL|member|mbcsvalid
id|u64
id|mbcsvalid
suffix:semicolon
multiline_comment|/* valid bits for each type of log */
DECL|member|smemerrlog
id|merrlog_t
id|smemerrlog
suffix:semicolon
multiline_comment|/* platform memory error logs */
DECL|member|sbuserrlog
id|berrlog_t
id|sbuserrlog
suffix:semicolon
multiline_comment|/* platform bus error logs */
DECL|member|scomperrlog
id|cerrlog_t
id|scomperrlog
suffix:semicolon
multiline_comment|/* platform chipset error logs */
DECL|member|selrecord
id|isel_t
id|selrecord
suffix:semicolon
multiline_comment|/* ipmi sel record */
DECL|typedef|platforminfo_t
)brace
id|platforminfo_t
suffix:semicolon
multiline_comment|/* over all log structure (processor+platform) */
DECL|union|udev_specific_log
r_typedef
r_union
id|udev_specific_log
(brace
DECL|member|proclog
id|sal_log_processor_info_t
id|proclog
suffix:semicolon
DECL|member|platlog
id|platforminfo_t
id|platlog
suffix:semicolon
DECL|typedef|devicelog_t
)brace
id|devicelog_t
suffix:semicolon
DECL|macro|sal_log_processor_info_psi_valid
mdefine_line|#define sal_log_processor_info_psi_valid&t;&t;slpi_valid.spli_psi
DECL|macro|sal_log_processor_info_cache_check_valid
mdefine_line|#define sal_log_processor_info_cache_check_valid&t;slpi_valid.spli_cache_check
DECL|macro|sal_log_processor_info_tlb_check_valid
mdefine_line|#define sal_log_processor_info_tlb_check_valid&t;&t;slpi_valid.spli_tlb_check
DECL|macro|sal_log_processor_info_bus_check_valid
mdefine_line|#define sal_log_processor_info_bus_check_valid&t;&t;slpi_valid.spli_bus_check
DECL|macro|sal_log_processor_info_minstate_valid
mdefine_line|#define sal_log_processor_info_minstate_valid&t;&t;slpi_valid.spli_minstate
DECL|macro|sal_log_processor_info_bank1_gr_valid
mdefine_line|#define sal_log_processor_info_bank1_gr_valid&t;&t;slpi_valid.slpi_bank1_gr
DECL|macro|sal_log_processor_info_br_valid
mdefine_line|#define sal_log_processor_info_br_valid&t;&t;&t;slpi_valid.slpi_br
DECL|macro|sal_log_processor_info_cr_valid
mdefine_line|#define sal_log_processor_info_cr_valid&t;&t;&t;slpi_valid.slpi_cr
DECL|macro|sal_log_processor_info_ar_valid
mdefine_line|#define sal_log_processor_info_ar_valid&t;&t;&t;slpi_valid.slpi_ar
DECL|macro|sal_log_processor_info_rr_valid
mdefine_line|#define sal_log_processor_info_rr_valid&t;&t;&t;slpi_valid.slpi_rr
DECL|macro|sal_log_processor_info_fr_valid
mdefine_line|#define sal_log_processor_info_fr_valid&t;&t;&t;slpi_valid.slpi_fr
DECL|struct|sal_log_header
r_typedef
r_struct
id|sal_log_header
(brace
DECL|member|slh_next_log
id|u64
id|slh_next_log
suffix:semicolon
multiline_comment|/* Offset of the next log from the beginning of this structure */
DECL|member|slh_log_len
id|u32
id|slh_log_len
suffix:semicolon
multiline_comment|/* Length of this error log in bytes */
DECL|member|slh_log_type
id|u16
id|slh_log_type
suffix:semicolon
multiline_comment|/* Type of log (0 - cpu ,1 - platform) */
DECL|member|slh_log_sub_type
id|u16
id|slh_log_sub_type
suffix:semicolon
multiline_comment|/* SGI specific sub type */
DECL|member|slh_log_timestamp
id|sal_log_timestamp_t
id|slh_log_timestamp
suffix:semicolon
multiline_comment|/* Timestamp */
DECL|typedef|sal_log_header_t
)brace
id|sal_log_header_t
suffix:semicolon
multiline_comment|/* SAL PSI log structure */
DECL|struct|psilog
r_typedef
r_struct
id|psilog
(brace
DECL|member|sal_elog_header
id|sal_log_header_t
id|sal_elog_header
suffix:semicolon
DECL|member|devlog
id|devicelog_t
id|devlog
suffix:semicolon
DECL|typedef|ia64_psilog_t
)brace
id|ia64_psilog_t
suffix:semicolon
multiline_comment|/*&n; * Now define a couple of inline functions for improved type checking&n; * and convenience.&n; */
r_static
r_inline
r_int
DECL|function|ia64_sal_freq_base
id|ia64_sal_freq_base
(paren
r_int
r_int
id|which
comma
r_int
r_int
op_star
id|ticks_per_second
comma
r_int
r_int
op_star
id|drift_info
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_FREQ_BASE
comma
id|which
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
op_star
id|ticks_per_second
op_assign
id|isrv.v0
suffix:semicolon
op_star
id|drift_info
op_assign
id|isrv.v1
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Flush all the processor and platform level instruction and/or data caches */
r_static
r_inline
id|s64
DECL|function|ia64_sal_cache_flush
id|ia64_sal_cache_flush
(paren
id|u64
id|cache_type
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_CACHE_FLUSH
comma
id|cache_type
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Initialize all the processor and platform level instruction and data caches */
r_static
r_inline
id|s64
DECL|function|ia64_sal_cache_init
id|ia64_sal_cache_init
(paren
r_void
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_CACHE_INIT
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Clear the processor and platform information logged by SAL with respect to the &n; * machine state at the time of MCA&squot;s, INITs or CMCs &n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_clear_state_info
id|ia64_sal_clear_state_info
(paren
id|u64
id|sal_info_type
comma
id|u64
id|sal_info_sub_type
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_CLEAR_STATE_INFO
comma
id|sal_info_type
comma
id|sal_info_sub_type
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Get the processor and platform information logged by SAL with respect to the machine&n; * state at the time of the MCAs, INITs or CMCs.&n; */
r_static
r_inline
id|u64
DECL|function|ia64_sal_get_state_info
id|ia64_sal_get_state_info
(paren
id|u64
id|sal_info_type
comma
id|u64
id|sal_info_sub_type
comma
id|u64
op_star
id|sal_info
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_GET_STATE_INFO
comma
id|sal_info_type
comma
id|sal_info_sub_type
comma
id|sal_info
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|isrv.status
)paren
r_return
l_int|0
suffix:semicolon
r_return
id|isrv.v0
suffix:semicolon
)brace
multiline_comment|/* Get the maximum size of the information logged by SAL with respect to the machine &n; * state at the time of MCAs, INITs or CMCs&n; */
r_static
r_inline
id|u64
DECL|function|ia64_sal_get_state_info_size
id|ia64_sal_get_state_info_size
(paren
id|u64
id|sal_info_type
comma
id|u64
id|sal_info_sub_type
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_GET_STATE_INFO_SIZE
comma
id|sal_info_type
comma
id|sal_info_sub_type
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|isrv.status
)paren
r_return
l_int|0
suffix:semicolon
r_return
id|isrv.v0
suffix:semicolon
)brace
multiline_comment|/* Causes the processor to go into a spin loop within SAL where SAL awaits a wakeup&n; * from the monarch processor.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_mc_rendez
id|ia64_sal_mc_rendez
(paren
r_void
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_MC_RENDEZ
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Allow the OS to specify the interrupt number to be used by SAL to interrupt OS during&n; * the machine check rendezvous sequence as well as the mechanism to wake up the &n; * non-monarch processor at the end of machine check processing.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_mc_set_params
id|ia64_sal_mc_set_params
(paren
id|u64
id|param_type
comma
id|u64
id|i_or_m
comma
id|u64
id|i_or_m_val
comma
id|u64
id|timeout
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_MC_SET_PARAMS
comma
id|param_type
comma
id|i_or_m
comma
id|i_or_m_val
comma
id|timeout
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Read from PCI configuration space */
r_static
r_inline
id|s64
DECL|function|ia64_sal_pci_config_read
id|ia64_sal_pci_config_read
(paren
id|u64
id|pci_config_addr
comma
id|u64
id|size
comma
id|u64
op_star
id|value
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_PCI_CONFIG_READ
comma
id|pci_config_addr
comma
id|size
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|value
)paren
op_star
id|value
op_assign
id|isrv.v0
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Write to PCI configuration space */
r_static
r_inline
id|s64
DECL|function|ia64_sal_pci_config_write
id|ia64_sal_pci_config_write
(paren
id|u64
id|pci_config_addr
comma
id|u64
id|size
comma
id|u64
id|value
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_PCI_CONFIG_WRITE
comma
id|pci_config_addr
comma
id|size
comma
id|value
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/*&n; * Register physical addresses of locations needed by SAL when SAL&n; * procedures are invoked in virtual mode.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_register_physical_addr
id|ia64_sal_register_physical_addr
(paren
id|u64
id|phys_entry
comma
id|u64
id|phys_addr
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_REGISTER_PHYSICAL_ADDR
comma
id|phys_entry
comma
id|phys_addr
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Register software dependent code locations within SAL. These locations are handlers&n; * or entry points where SAL will pass control for the specified event. These event&n; * handlers are for the bott rendezvous, MCAs and INIT scenarios.&n; */
r_static
r_inline
id|s64
DECL|function|ia64_sal_set_vectors
id|ia64_sal_set_vectors
(paren
id|u64
id|vector_type
comma
id|u64
id|handler_addr1
comma
id|u64
id|gp1
comma
id|u64
id|handler_len1
comma
id|u64
id|handler_addr2
comma
id|u64
id|gp2
comma
id|u64
id|handler_len2
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_SET_VECTORS
comma
id|vector_type
comma
id|handler_addr1
comma
id|gp1
comma
id|handler_len1
comma
id|handler_addr2
comma
id|gp2
comma
id|handler_len2
)paren
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
multiline_comment|/* Update the contents of PAL block in the non-volatile storage device */
r_static
r_inline
id|s64
DECL|function|ia64_sal_update_pal
id|ia64_sal_update_pal
(paren
id|u64
id|param_buf
comma
id|u64
id|scratch_buf
comma
id|u64
id|scratch_buf_size
comma
id|u64
op_star
id|error_code
comma
id|u64
op_star
id|scratch_buf_size_needed
)paren
(brace
r_struct
id|ia64_sal_retval
id|isrv
suffix:semicolon
id|SAL_CALL
c_func
(paren
id|isrv
comma
id|SAL_UPDATE_PAL
comma
id|param_buf
comma
id|scratch_buf
comma
id|scratch_buf_size
comma
l_int|0
comma
l_int|0
comma
l_int|0
comma
l_int|0
)paren
suffix:semicolon
r_if
c_cond
(paren
id|error_code
)paren
op_star
id|error_code
op_assign
id|isrv.v0
suffix:semicolon
r_if
c_cond
(paren
id|scratch_buf_size_needed
)paren
op_star
id|scratch_buf_size_needed
op_assign
id|isrv.v1
suffix:semicolon
r_return
id|isrv.status
suffix:semicolon
)brace
macro_line|#endif /* _ASM_IA64_PAL_H */
eof
