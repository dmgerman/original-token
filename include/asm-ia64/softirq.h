macro_line|#ifndef _ASM_IA64_SOFTIRQ_H
DECL|macro|_ASM_IA64_SOFTIRQ_H
mdefine_line|#define _ASM_IA64_SOFTIRQ_H
multiline_comment|/*&n; * Copyright (C) 1998, 1999 Hewlett-Packard Co&n; * Copyright (C) 1998, 1999 David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/stddef.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/hardirq.h&gt;
r_extern
r_int
r_int
id|local_bh_count
(braket
id|NR_CPUS
)braket
suffix:semicolon
DECL|macro|cpu_bh_disable
mdefine_line|#define cpu_bh_disable(cpu)&t;do { local_bh_count[(cpu)]++; barrier(); } while (0)
DECL|macro|cpu_bh_enable
mdefine_line|#define cpu_bh_enable(cpu)&t;do { barrier(); local_bh_count[(cpu)]--; } while (0)
DECL|macro|cpu_bh_trylock
mdefine_line|#define cpu_bh_trylock(cpu)&t;(local_bh_count[(cpu)] ? 0 : (local_bh_count[(cpu)] = 1))
DECL|macro|cpu_bh_endlock
mdefine_line|#define cpu_bh_endlock(cpu)&t;(local_bh_count[(cpu)] = 0)
DECL|macro|local_bh_disable
mdefine_line|#define local_bh_disable()&t;cpu_bh_disable(smp_processor_id())
DECL|macro|local_bh_enable
mdefine_line|#define local_bh_enable()&t;cpu_bh_enable(smp_processor_id())
DECL|macro|get_active_bhs
mdefine_line|#define get_active_bhs()&t;(bh_mask &amp; bh_active)
r_static
r_inline
r_void
DECL|function|clear_active_bhs
id|clear_active_bhs
(paren
r_int
r_int
id|x
)paren
(brace
r_int
r_int
id|old
comma
r_new
suffix:semicolon
r_volatile
r_int
r_int
op_star
id|bh_activep
op_assign
(paren
r_void
op_star
)paren
op_amp
id|bh_active
suffix:semicolon
id|CMPXCHG_BUGCHECK_DECL
r_do
(brace
id|CMPXCHG_BUGCHECK
c_func
(paren
id|bh_activep
)paren
suffix:semicolon
id|old
op_assign
op_star
id|bh_activep
suffix:semicolon
r_new
op_assign
id|old
op_amp
op_complement
id|x
suffix:semicolon
)brace
r_while
c_loop
(paren
id|ia64_cmpxchg
c_func
(paren
id|bh_activep
comma
id|old
comma
r_new
comma
l_int|8
)paren
op_ne
id|old
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|init_bh
id|init_bh
(paren
r_int
id|nr
comma
r_void
(paren
op_star
id|routine
)paren
(paren
r_void
)paren
)paren
(brace
id|bh_base
(braket
id|nr
)braket
op_assign
id|routine
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|bh_mask_count
(braket
id|nr
)braket
comma
l_int|0
)paren
suffix:semicolon
id|bh_mask
op_or_assign
l_int|1
op_lshift
id|nr
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|remove_bh
id|remove_bh
(paren
r_int
id|nr
)paren
(brace
id|bh_mask
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|nr
)paren
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
id|bh_base
(braket
id|nr
)braket
op_assign
l_int|NULL
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|mark_bh
id|mark_bh
(paren
r_int
id|nr
)paren
(brace
id|set_bit
c_func
(paren
id|nr
comma
op_amp
id|bh_active
)paren
suffix:semicolon
)brace
macro_line|#ifdef CONFIG_SMP
multiline_comment|/*&n; * The locking mechanism for base handlers, to prevent re-entrancy,&n; * is entirely private to an implementation, it should not be&n; * referenced at all outside of this file.&n; */
r_extern
id|atomic_t
id|global_bh_lock
suffix:semicolon
r_extern
id|atomic_t
id|global_bh_count
suffix:semicolon
r_extern
r_void
id|synchronize_bh
c_func
(paren
r_void
)paren
suffix:semicolon
r_static
r_inline
r_void
DECL|function|start_bh_atomic
id|start_bh_atomic
(paren
r_void
)paren
(brace
id|atomic_inc
c_func
(paren
op_amp
id|global_bh_lock
)paren
suffix:semicolon
id|synchronize_bh
c_func
(paren
)paren
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|end_bh_atomic
id|end_bh_atomic
(paren
r_void
)paren
(brace
id|atomic_dec
c_func
(paren
op_amp
id|global_bh_lock
)paren
suffix:semicolon
)brace
multiline_comment|/* These are for the irq&squot;s testing the lock */
r_static
r_inline
r_int
DECL|function|softirq_trylock
id|softirq_trylock
(paren
r_int
id|cpu
)paren
(brace
r_if
c_cond
(paren
id|cpu_bh_trylock
c_func
(paren
id|cpu
)paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|test_and_set_bit
c_func
(paren
l_int|0
comma
op_amp
id|global_bh_count
)paren
)paren
(brace
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|global_bh_lock
)paren
op_eq
l_int|0
)paren
r_return
l_int|1
suffix:semicolon
id|clear_bit
c_func
(paren
l_int|0
comma
op_amp
id|global_bh_count
)paren
suffix:semicolon
)brace
id|cpu_bh_endlock
c_func
(paren
id|cpu
)paren
suffix:semicolon
)brace
r_return
l_int|0
suffix:semicolon
)brace
r_static
r_inline
r_void
DECL|function|softirq_endlock
id|softirq_endlock
(paren
r_int
id|cpu
)paren
(brace
id|cpu_bh_enable
c_func
(paren
id|cpu
)paren
suffix:semicolon
id|clear_bit
c_func
(paren
l_int|0
comma
op_amp
id|global_bh_count
)paren
suffix:semicolon
)brace
macro_line|#else /* !CONFIG_SMP */
r_extern
r_inline
r_void
DECL|function|start_bh_atomic
id|start_bh_atomic
(paren
r_void
)paren
(brace
id|local_bh_disable
c_func
(paren
)paren
suffix:semicolon
id|barrier
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|end_bh_atomic
id|end_bh_atomic
(paren
r_void
)paren
(brace
id|barrier
c_func
(paren
)paren
suffix:semicolon
id|local_bh_enable
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/* These are for the irq&squot;s testing the lock */
DECL|macro|softirq_trylock
mdefine_line|#define softirq_trylock(cpu)&t;(cpu_bh_trylock(cpu))
DECL|macro|softirq_endlock
mdefine_line|#define softirq_endlock(cpu)&t;(cpu_bh_endlock(cpu))
DECL|macro|synchronize_bh
mdefine_line|#define synchronize_bh()&t;barrier()
macro_line|#endif /* !CONFIG_SMP */
multiline_comment|/*&n; * These use a mask count to correctly handle&n; * nested disable/enable calls&n; */
r_extern
r_inline
r_void
DECL|function|disable_bh
id|disable_bh
(paren
r_int
id|nr
)paren
(brace
id|bh_mask
op_and_assign
op_complement
(paren
l_int|1
op_lshift
id|nr
)paren
suffix:semicolon
id|atomic_inc
c_func
(paren
op_amp
id|bh_mask_count
(braket
id|nr
)braket
)paren
suffix:semicolon
id|synchronize_bh
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|enable_bh
id|enable_bh
(paren
r_int
id|nr
)paren
(brace
r_if
c_cond
(paren
id|atomic_dec_and_test
c_func
(paren
op_amp
id|bh_mask_count
(braket
id|nr
)braket
)paren
)paren
id|bh_mask
op_or_assign
l_int|1
op_lshift
id|nr
suffix:semicolon
)brace
macro_line|#endif /* _ASM_IA64_SOFTIRQ_H */
eof
