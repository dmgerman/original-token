multiline_comment|/*&n; * SMP Support&n; *&n; * Copyright (C) 1999 VA Linux Systems &n; * Copyright (C) 1999 Walt Drummond &lt;drummond@valinux.com&gt;&n; */
macro_line|#ifndef _ASM_IA64_SMP_H
DECL|macro|_ASM_IA64_SMP_H
mdefine_line|#define _ASM_IA64_SMP_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#ifdef CONFIG_SMP
macro_line|#include &lt;linux/init.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;asm/ptrace.h&gt;
macro_line|#include &lt;asm/io.h&gt;
DECL|macro|XTP_OFFSET
mdefine_line|#define XTP_OFFSET&t;&t;0x1e0008
DECL|macro|SMP_IRQ_REDIRECTION
mdefine_line|#define SMP_IRQ_REDIRECTION     (1 &lt;&lt; 0)
DECL|macro|SMP_IPI_REDIRECTION
mdefine_line|#define SMP_IPI_REDIRECTION     (1 &lt;&lt; 1)
DECL|macro|smp_processor_id
mdefine_line|#define smp_processor_id()&t;(current-&gt;processor)
DECL|struct|smp_boot_data
r_extern
r_struct
id|smp_boot_data
(brace
DECL|member|cpu_count
r_int
id|cpu_count
suffix:semicolon
DECL|member|cpu_phys_id
r_int
id|cpu_phys_id
(braket
id|NR_CPUS
)braket
suffix:semicolon
)brace
id|smp_boot_data
id|__initdata
suffix:semicolon
r_extern
r_int
r_int
id|cpu_present_map
suffix:semicolon
r_extern
r_int
r_int
id|cpu_online_map
suffix:semicolon
r_extern
r_int
r_int
id|ipi_base_addr
suffix:semicolon
r_extern
r_int
id|bootstrap_processor
suffix:semicolon
r_extern
r_volatile
r_int
id|__cpu_physical_id
(braket
id|NR_CPUS
)braket
suffix:semicolon
r_extern
r_int
r_char
id|smp_int_redirect
suffix:semicolon
r_extern
r_char
id|no_int_routing
suffix:semicolon
r_extern
r_int
id|smp_num_cpus
suffix:semicolon
DECL|macro|cpu_physical_id
mdefine_line|#define cpu_physical_id(i)&t;__cpu_physical_id[i]
DECL|macro|cpu_number_map
mdefine_line|#define cpu_number_map(i)&t;(i)
DECL|macro|cpu_logical_map
mdefine_line|#define cpu_logical_map(i)&t;(i)
r_extern
r_int
r_int
id|ap_wakeup_vector
suffix:semicolon
multiline_comment|/*&n; * Function to map hard smp processor id to logical id.  Slow, so&n; * don&squot;t use this in performance-critical code.&n; */
r_static
r_inline
r_int
DECL|function|cpu_logical_id
id|cpu_logical_id
(paren
r_int
id|cpuid
)paren
(brace
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|smp_num_cpus
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|cpu_physical_id
c_func
(paren
id|i
)paren
op_eq
id|cpuid
)paren
r_break
suffix:semicolon
)brace
r_return
id|i
suffix:semicolon
)brace
multiline_comment|/*&n; * XTP control functions:&n; *    min_xtp   :  route all interrupts to this CPU&n; *    normal_xtp:  nominal XTP value&n; *    max_xtp   :  never deliver interrupts to this CPU.&n; */
r_static
r_inline
r_void
DECL|function|min_xtp
id|min_xtp
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|smp_int_redirect
op_amp
id|SMP_IRQ_REDIRECTION
)paren
id|writeb
c_func
(paren
l_int|0x00
comma
id|ipi_base_addr
op_or
id|XTP_OFFSET
)paren
suffix:semicolon
multiline_comment|/* XTP to min */
)brace
r_static
r_inline
r_void
DECL|function|normal_xtp
id|normal_xtp
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|smp_int_redirect
op_amp
id|SMP_IRQ_REDIRECTION
)paren
id|writeb
c_func
(paren
l_int|0x08
comma
id|ipi_base_addr
op_or
id|XTP_OFFSET
)paren
suffix:semicolon
multiline_comment|/* XTP normal */
)brace
r_static
r_inline
r_void
DECL|function|max_xtp
id|max_xtp
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
id|smp_int_redirect
op_amp
id|SMP_IRQ_REDIRECTION
)paren
id|writeb
c_func
(paren
l_int|0x0f
comma
id|ipi_base_addr
op_or
id|XTP_OFFSET
)paren
suffix:semicolon
multiline_comment|/* Set XTP to max */
)brace
r_static
r_inline
r_int
r_int
DECL|function|hard_smp_processor_id
id|hard_smp_processor_id
c_func
(paren
r_void
)paren
(brace
r_struct
(brace
r_int
r_int
id|reserved
suffix:colon
l_int|16
suffix:semicolon
r_int
r_int
id|eid
suffix:colon
l_int|8
suffix:semicolon
r_int
r_int
id|id
suffix:colon
l_int|8
suffix:semicolon
r_int
r_int
id|ignored
suffix:colon
l_int|32
suffix:semicolon
)brace
id|lid
suffix:semicolon
id|__asm__
(paren
l_string|&quot;mov %0=cr.lid&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|lid
)paren
)paren
suffix:semicolon
r_return
id|lid.id
op_lshift
l_int|8
op_or
id|lid.eid
suffix:semicolon
)brace
DECL|macro|NO_PROC_ID
mdefine_line|#define NO_PROC_ID&t;&t;(-1)
DECL|macro|PROC_CHANGE_PENALTY
mdefine_line|#define PROC_CHANGE_PENALTY&t;20
r_extern
r_void
id|__init
id|init_smp_config
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|smp_do_timer
(paren
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_extern
r_int
id|smp_call_function_single
(paren
r_int
id|cpuid
comma
r_void
(paren
op_star
id|func
)paren
(paren
r_void
op_star
id|info
)paren
comma
r_void
op_star
id|info
comma
r_int
id|retry
comma
r_int
id|wait
)paren
suffix:semicolon
macro_line|#endif /* CONFIG_SMP */
macro_line|#endif /* _ASM_IA64_SMP_H */
eof
