macro_line|#ifndef _I386_BITOPS_H
DECL|macro|_I386_BITOPS_H
mdefine_line|#define _I386_BITOPS_H
multiline_comment|/*&n; * Copyright 1992, Linus Torvalds.&n; */
multiline_comment|/*&n; * These have to be done with inline assembly: that way the bit-setting&n; * is guaranteed to be atomic. All bit operations return 0 if the bit&n; * was cleared before the operation and != 0 if it was not.&n; *&n; * bit 0 is the LSB of addr; bit 32 is the LSB of (addr+1).&n; */
multiline_comment|/*&n; * Some hacks to defeat gcc over-optimizations..&n; */
DECL|struct|__dummy
DECL|member|a
r_struct
id|__dummy
(brace
r_int
r_int
id|a
(braket
l_int|100
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|ADDR
mdefine_line|#define ADDR (*(struct __dummy *) addr)
DECL|function|set_bit
r_extern
id|__inline__
r_int
id|set_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|oldbit
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;btsl %2,%1&bslash;n&bslash;tsbbl %0,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|oldbit
)paren
comma
l_string|&quot;=m&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|nr
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
id|clear_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|oldbit
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;btrl %2,%1&bslash;n&bslash;tsbbl %0,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|oldbit
)paren
comma
l_string|&quot;=m&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|nr
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_int
id|change_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|oldbit
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;btcl %2,%1&bslash;n&bslash;tsbbl %0,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|oldbit
)paren
comma
l_string|&quot;=m&quot;
(paren
id|ADDR
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|nr
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
multiline_comment|/*&n; * This routine doesn&squot;t need to be atomic, but it&squot;s faster to code it&n; * this way.&n; */
DECL|function|test_bit
r_extern
id|__inline__
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
id|oldbit
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;btl %2,%1&bslash;n&bslash;tsbbl %0,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;r&quot;
(paren
id|nr
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
macro_line|#endif /* _I386_BITOPS_H */
eof
