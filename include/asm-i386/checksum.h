macro_line|#ifndef _I386_CHECKSUM_H
DECL|macro|_I386_CHECKSUM_H
mdefine_line|#define _I386_CHECKSUM_H
multiline_comment|/*&n; * computes the checksum of a memory block at buff, length len,&n; * and adds in &quot;sum&quot; (32-bit)&n; *&n; * returns a 32-bit number suitable for feeding into itself&n; * or csum_tcpudp_magic&n; *&n; * this function must be called with even lengths, except&n; * for the last fragment, which may be odd&n; *&n; * it&squot;s best to have buff aligned on a 32-bit boundary&n; */
r_int
r_int
id|csum_partial
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
comma
r_int
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; * the same as csum_partial, but copies from fs:src while it&n; * checksums&n; *&n; * here even more important to align src and dst on a 32-bit (or even&n; * better 64-bit) boundary&n; */
r_int
r_int
id|csum_partial_copyffs
c_func
(paren
r_char
op_star
id|src
comma
r_char
op_star
id|dst
comma
r_int
id|len
comma
r_int
id|sum
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;This is a version of ip_compute_csum() optimized for IP headers,&n; *&t;which always checksum on 4 octet boundaries.&n; *&n; *&t;By Jorge Cwik &lt;jorge@laser.satlink.net&gt;, adapted for linux by&n; *&t;Arnt Gulbrandsen.&n; */
DECL|function|ip_fast_csum
r_static
r_inline
r_int
r_int
id|ip_fast_csum
c_func
(paren
r_int
r_char
op_star
id|iph
comma
r_int
r_int
id|ihl
)paren
(brace
r_int
r_int
r_int
id|sum
suffix:semicolon
id|__asm__
c_func
(paren
"&quot;"
id|movl
(paren
op_mod
op_mod
id|esi
)paren
comma
op_mod
op_mod
id|eax
id|andl
"$"
l_int|15
comma
op_mod
op_mod
id|ecx
id|subl
"$"
l_int|4
comma
op_mod
op_mod
id|ecx
id|jbe
l_float|2f
id|addl
l_int|4
(paren
op_mod
op_mod
id|esi
)paren
comma
op_mod
op_mod
id|eax
id|adcl
l_int|8
(paren
op_mod
op_mod
id|esi
)paren
comma
op_mod
op_mod
id|eax
id|adcl
l_int|12
(paren
op_mod
op_mod
id|esi
)paren
comma
op_mod
op_mod
id|eax
l_int|1
suffix:colon
id|adcl
l_int|16
(paren
op_mod
op_mod
id|esi
)paren
comma
op_mod
op_mod
id|eax
id|lea
l_int|4
(paren
op_mod
op_mod
id|esi
)paren
comma
op_mod
op_mod
id|esi
id|decl
op_mod
op_mod
id|ecx
id|jne
l_int|1
id|b
id|adcl
"$"
l_int|0
comma
op_mod
op_mod
id|eax
id|movl
op_mod
op_mod
id|eax
comma
op_mod
op_mod
id|ecx
id|shrl
"$"
l_int|16
comma
op_mod
op_mod
id|eax
id|addw
op_mod
op_mod
id|ecx
comma
op_mod
op_mod
id|eax
id|adcl
"$"
l_int|0
comma
op_mod
op_mod
id|eax
id|notl
op_mod
op_mod
id|eax
id|andl
"$"
l_int|65535
comma
op_mod
op_mod
id|eax
l_int|2
suffix:colon
"&quot;"
suffix:colon
l_string|&quot;=a&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;S&quot;
(paren
id|iph
)paren
comma
l_string|&quot;c&quot;
(paren
id|ihl
)paren
suffix:colon
l_string|&quot;ax&quot;
comma
l_string|&quot;cx&quot;
comma
l_string|&quot;si&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * computes the checksum of the TCP/UDP pseudo-header&n; * returns a 16-bit checksum, already complemented&n; */
DECL|function|csum_tcpudp_magic
r_static
r_inline
r_int
r_int
r_int
id|csum_tcpudp_magic
c_func
(paren
r_int
r_int
id|saddr
comma
r_int
r_int
id|daddr
comma
r_int
r_int
id|len
comma
r_int
r_int
id|proto
comma
r_int
r_int
id|sum
)paren
(brace
id|__asm__
c_func
(paren
"&quot;"
id|addl
op_mod
l_int|2
comma
op_mod
l_int|0
id|adcl
op_mod
l_int|3
comma
op_mod
l_int|0
id|adcl
op_mod
l_int|4
comma
op_mod
l_int|0
id|adcl
"$"
l_int|0
comma
op_mod
l_int|0
id|movl
op_mod
l_int|0
comma
op_mod
l_int|2
id|shrl
"$"
l_int|16
comma
op_mod
l_int|2
id|addw
op_mod
l_int|2
comma
op_mod
l_int|0
id|adcl
"$"
l_int|0
comma
op_mod
l_int|0
id|notl
op_mod
l_int|0
id|andl
"$"
l_int|65535
comma
op_mod
l_int|0
"&quot;"
suffix:colon
l_string|&quot;=r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;0&quot;
(paren
id|daddr
)paren
comma
l_string|&quot;S&quot;
(paren
id|saddr
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
id|ntohs
c_func
(paren
id|len
)paren
op_lshift
l_int|16
)paren
op_plus
id|proto
op_star
l_int|256
)paren
comma
l_string|&quot;r&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;si&quot;
)paren
suffix:semicolon
r_return
(paren
r_int
r_int
)paren
id|sum
suffix:semicolon
)brace
multiline_comment|/*&n; * this routine is used for miscellaneous IP-like checksums, mainly&n; * in icmp.c&n; */
DECL|function|ip_compute_csum
r_static
r_inline
r_int
r_int
id|ip_compute_csum
c_func
(paren
r_int
r_char
op_star
id|buff
comma
r_int
id|len
)paren
(brace
r_int
r_int
r_int
id|sum
suffix:semicolon
id|__asm__
c_func
(paren
"&quot;"
id|movl
op_mod
op_mod
id|eax
comma
op_mod
op_mod
id|ecx
id|shrl
"$"
l_int|16
comma
op_mod
op_mod
id|ecx
id|addw
op_mod
op_mod
id|cx
comma
op_mod
op_mod
id|ax
id|adcl
"$"
l_int|0
comma
op_mod
op_mod
id|eax
id|notl
op_mod
op_mod
id|eax
id|andl
"$"
l_int|65535
comma
op_mod
op_mod
id|eax
"&quot;"
suffix:colon
l_string|&quot;=a&quot;
(paren
id|sum
)paren
suffix:colon
l_string|&quot;a&quot;
(paren
id|csum_partial
c_func
(paren
id|buff
comma
id|len
comma
l_int|0
)paren
)paren
suffix:colon
l_string|&quot;cx&quot;
)paren
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
macro_line|#endif
eof
