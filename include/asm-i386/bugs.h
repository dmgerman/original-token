multiline_comment|/*&n; *  include/asm-i386/bugs.h&n; *&n; *  Copyright (C) 1994  Linus Torvalds&n; *&n; *  Cyrix stuff, June 1998 by:&n; *&t;- Rafael R. Reilova (moved everything from head.S),&n; *        &lt;rreilova@ececs.uc.edu&gt;&n; *&t;- Channing Corn (tests &amp; fixes),&n; *&t;- Andrew D. Balsa (code cleanup).&n; *&n; *  Pentium III FXSR, SSE support&n; *&t;Gareth Hughes &lt;gareth@valinux.com&gt;, May 2000&n; */
multiline_comment|/*&n; * This is included by init/main.c to check for architecture-dependent bugs.&n; *&n; * Needs:&n; *&t;void check_bugs(void);&n; */
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;asm/i387.h&gt;
macro_line|#include &lt;asm/msr.h&gt;
DECL|function|no_halt
r_static
r_int
id|__init
id|no_halt
c_func
(paren
r_char
op_star
id|s
)paren
(brace
id|boot_cpu_data.hlt_works_ok
op_assign
l_int|0
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
id|__setup
c_func
(paren
l_string|&quot;no-hlt&quot;
comma
id|no_halt
)paren
suffix:semicolon
DECL|function|mca_pentium
r_static
r_int
id|__init
id|mca_pentium
c_func
(paren
r_char
op_star
id|s
)paren
(brace
id|mca_pentium_flag
op_assign
l_int|1
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
id|__setup
c_func
(paren
l_string|&quot;mca-pentium&quot;
comma
id|mca_pentium
)paren
suffix:semicolon
DECL|function|no_387
r_static
r_int
id|__init
id|no_387
c_func
(paren
r_char
op_star
id|s
)paren
(brace
id|boot_cpu_data.hard_math
op_assign
l_int|0
suffix:semicolon
id|write_cr0
c_func
(paren
l_int|0xE
op_or
id|read_cr0
c_func
(paren
)paren
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
id|__setup
c_func
(paren
l_string|&quot;no387&quot;
comma
id|no_387
)paren
suffix:semicolon
DECL|variable|x
r_static
r_float
id|__initdata
id|x
op_assign
l_float|4195835.0
suffix:semicolon
DECL|variable|y
r_static
r_float
id|__initdata
id|y
op_assign
l_float|3145727.0
suffix:semicolon
multiline_comment|/*&n; * This used to check for exceptions.. &n; * However, it turns out that to support that,&n; * the XMM trap handlers basically had to&n; * be buggy. So let&squot;s have a correct XMM trap&n; * handler, and forget about printing out&n; * some status at boot.&n; *&n; * We should really only care about bugs here&n; * anyway. Not features.&n; */
DECL|function|check_fpu
r_static
r_void
id|__init
id|check_fpu
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|boot_cpu_data.hard_math
)paren
(brace
macro_line|#ifndef CONFIG_MATH_EMULATION
id|printk
c_func
(paren
id|KERN_EMERG
l_string|&quot;No coprocessor found and no math emulation present.&bslash;n&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_EMERG
l_string|&quot;Giving up.&bslash;n&quot;
)paren
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
suffix:semicolon
macro_line|#endif
r_return
suffix:semicolon
)brace
multiline_comment|/* Enable FXSR and company _before_ testing for FP problems. */
macro_line|#if defined(CONFIG_X86_FXSR) || defined(CONFIG_X86_RUNTIME_FXSR)
multiline_comment|/*&n;&t; * Verify that the FXSAVE/FXRSTOR data will be 16-byte aligned.&n;&t; */
r_if
c_cond
(paren
m_offsetof
(paren
r_struct
id|task_struct
comma
id|thread.i387.fxsave
)paren
op_amp
l_int|15
)paren
id|panic
c_func
(paren
l_string|&quot;Kernel compiled for PII/PIII+ with FXSR, data not 16-byte aligned!&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|cpu_has_fxsr
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Enabling fast FPU save and restore... &quot;
)paren
suffix:semicolon
id|set_in_cr4
c_func
(paren
id|X86_CR4_OSFXSR
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;done.&bslash;n&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef CONFIG_X86_XMM
r_if
c_cond
(paren
id|cpu_has_xmm
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Enabling unmasked SIMD FPU exception support... &quot;
)paren
suffix:semicolon
id|set_in_cr4
c_func
(paren
id|X86_CR4_OSXMMEXCPT
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;done.&bslash;n&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* Test for the divl bug.. */
id|__asm__
c_func
(paren
l_string|&quot;fninit&bslash;n&bslash;t&quot;
l_string|&quot;fldl %1&bslash;n&bslash;t&quot;
l_string|&quot;fdivl %2&bslash;n&bslash;t&quot;
l_string|&quot;fmull %2&bslash;n&bslash;t&quot;
l_string|&quot;fldl %1&bslash;n&bslash;t&quot;
l_string|&quot;fsubp %%st,%%st(1)&bslash;n&bslash;t&quot;
l_string|&quot;fistpl %0&bslash;n&bslash;t&quot;
l_string|&quot;fwait&bslash;n&bslash;t&quot;
l_string|&quot;fninit&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
op_star
op_amp
id|boot_cpu_data.fdiv_bug
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
op_amp
id|x
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
op_amp
id|y
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|boot_cpu_data.fdiv_bug
)paren
id|printk
c_func
(paren
l_string|&quot;Hmm, FPU with FDIV bug.&bslash;n&quot;
)paren
suffix:semicolon
)brace
DECL|function|check_hlt
r_static
r_void
id|__init
id|check_hlt
c_func
(paren
r_void
)paren
(brace
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Checking &squot;hlt&squot; instruction... &quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|boot_cpu_data.hlt_works_ok
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;disabled&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;hlt ; hlt ; hlt ; hlt&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;OK.&bslash;n&quot;
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Most 386 processors have a bug where a POPAD can lock the &n; *&t;machine even from user space.&n; */
DECL|function|check_popad
r_static
r_void
id|__init
id|check_popad
c_func
(paren
r_void
)paren
(brace
macro_line|#ifndef CONFIG_X86_POPAD_OK
r_int
id|res
comma
id|inp
op_assign
(paren
r_int
)paren
op_amp
id|res
suffix:semicolon
id|printk
c_func
(paren
id|KERN_INFO
l_string|&quot;Checking for popad bug... &quot;
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;movl $12345678,%%eax; movl $0,%%edi; pusha; popa; movl (%%edx,%%edi),%%ecx &quot;
suffix:colon
l_string|&quot;=&amp;a&quot;
(paren
id|res
)paren
suffix:colon
l_string|&quot;d&quot;
(paren
id|inp
)paren
suffix:colon
l_string|&quot;ecx&quot;
comma
l_string|&quot;edi&quot;
)paren
suffix:semicolon
multiline_comment|/* If this fails, it means that any user program may lock the CPU hard. Too bad. */
r_if
c_cond
(paren
id|res
op_ne
l_int|12345678
)paren
id|printk
c_func
(paren
l_string|&quot;Buggy.&bslash;n&quot;
)paren
suffix:semicolon
r_else
id|printk
c_func
(paren
l_string|&quot;OK.&bslash;n&quot;
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * Check whether we are able to run this kernel safely on SMP.&n; *&n; * - In order to run on a i386, we need to be compiled for i386&n; *   (for due to lack of &quot;invlpg&quot; and working WP on a i386)&n; * - In order to run on anything without a TSC, we need to be&n; *   compiled for a i486.&n; * - In order to support the local APIC on a buggy Pentium machine,&n; *   we need to be compiled with CONFIG_X86_GOOD_APIC disabled,&n; *   which happens implicitly if compiled for a Pentium or lower&n; *   (unless an advanced selection of CPU features is used) as an&n; *   otherwise config implies a properly working local APIC without&n; *   the need to do extra reads from the APIC.&n;*/
DECL|function|check_config
r_static
r_void
id|__init
id|check_config
c_func
(paren
r_void
)paren
(brace
multiline_comment|/*&n; * We&squot;d better not be a i386 if we&squot;re configured to use some&n; * i486+ only features! (WP works in supervisor mode and the&n; * new &quot;invlpg&quot; and &quot;bswap&quot; instructions)&n; */
macro_line|#if defined(CONFIG_X86_WP_WORKS_OK) || defined(CONFIG_X86_INVLPG) || defined(CONFIG_X86_BSWAP)
r_if
c_cond
(paren
id|boot_cpu_data.x86
op_eq
l_int|3
)paren
id|panic
c_func
(paren
l_string|&quot;Kernel requires i486+ for &squot;invlpg&squot; and other features&quot;
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * If we configured ourselves for a TSC, we&squot;d better have one!&n; */
macro_line|#ifdef CONFIG_X86_TSC
r_if
c_cond
(paren
op_logical_neg
id|cpu_has_tsc
)paren
id|panic
c_func
(paren
l_string|&quot;Kernel compiled for Pentium+, requires TSC feature!&quot;
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * If we configured ourselves for PGE, we&squot;d better have it.&n; */
macro_line|#ifdef CONFIG_X86_PGE
r_if
c_cond
(paren
op_logical_neg
id|cpu_has_pge
)paren
id|panic
c_func
(paren
l_string|&quot;Kernel compiled for PPro+, requires PGE feature!&quot;
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * If we were told we had a good local APIC, check for buggy Pentia,&n; * i.e. all B steppings and the C2 stepping of P54C when using their&n; * integrated APIC (see 11AP erratum in &quot;Pentium Processor&n; * Specification Update&quot;).&n; */
macro_line|#if defined(CONFIG_X86_LOCAL_APIC) &amp;&amp; defined(CONFIG_X86_GOOD_APIC)
r_if
c_cond
(paren
id|boot_cpu_data.x86_vendor
op_eq
id|X86_VENDOR_INTEL
op_logical_and
id|test_bit
c_func
(paren
id|X86_FEATURE_APIC
comma
op_amp
id|boot_cpu_data.x86_capability
)paren
op_logical_and
id|boot_cpu_data.x86
op_eq
l_int|5
op_logical_and
id|boot_cpu_data.x86_model
op_eq
l_int|2
op_logical_and
(paren
id|boot_cpu_data.x86_mask
OL
l_int|6
op_logical_or
id|boot_cpu_data.x86_mask
op_eq
l_int|11
)paren
)paren
id|panic
c_func
(paren
l_string|&quot;Kernel compiled for PMMX+, assumes a local APIC without the read-before-write bug!&quot;
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * If we configured ourselves for FXSR, we&squot;d better have it.&n; */
macro_line|#ifdef CONFIG_X86_FXSR
r_if
c_cond
(paren
op_logical_neg
id|cpu_has_fxsr
)paren
id|panic
c_func
(paren
l_string|&quot;Kernel compiled for PII/PIII+, requires FXSR feature!&quot;
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|check_bugs
r_static
r_void
id|__init
id|check_bugs
c_func
(paren
r_void
)paren
(brace
id|identify_cpu
c_func
(paren
op_amp
id|boot_cpu_data
)paren
suffix:semicolon
macro_line|#ifndef CONFIG_SMP
id|printk
c_func
(paren
l_string|&quot;CPU: &quot;
)paren
suffix:semicolon
id|print_cpu_info
c_func
(paren
op_amp
id|boot_cpu_data
)paren
suffix:semicolon
macro_line|#endif
id|check_config
c_func
(paren
)paren
suffix:semicolon
id|check_fpu
c_func
(paren
)paren
suffix:semicolon
id|check_hlt
c_func
(paren
)paren
suffix:semicolon
id|check_popad
c_func
(paren
)paren
suffix:semicolon
id|system_utsname.machine
(braket
l_int|1
)braket
op_assign
l_char|&squot;0&squot;
op_plus
(paren
id|boot_cpu_data.x86
OG
l_int|6
ques
c_cond
l_int|6
suffix:colon
id|boot_cpu_data.x86
)paren
suffix:semicolon
)brace
eof
