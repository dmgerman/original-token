macro_line|#ifndef _I386_TYPES_H
DECL|macro|_I386_TYPES_H
mdefine_line|#define _I386_TYPES_H
macro_line|#ifndef _SIZE_T
DECL|macro|_SIZE_T
mdefine_line|#define _SIZE_T
DECL|typedef|size_t
r_typedef
r_int
r_int
r_int
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _SSIZE_T
DECL|macro|_SSIZE_T
mdefine_line|#define _SSIZE_T
DECL|typedef|ssize_t
r_typedef
r_int
id|ssize_t
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _PTRDIFF_T
DECL|macro|_PTRDIFF_T
mdefine_line|#define _PTRDIFF_T
DECL|typedef|ptrdiff_t
r_typedef
r_int
r_int
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _TIME_T
DECL|macro|_TIME_T
mdefine_line|#define _TIME_T
DECL|typedef|time_t
r_typedef
r_int
id|time_t
suffix:semicolon
macro_line|#endif
macro_line|#ifndef _CLOCK_T
DECL|macro|_CLOCK_T
mdefine_line|#define _CLOCK_T
DECL|typedef|clock_t
r_typedef
r_int
id|clock_t
suffix:semicolon
macro_line|#endif
DECL|typedef|pid_t
r_typedef
r_int
id|pid_t
suffix:semicolon
DECL|typedef|uid_t
r_typedef
r_int
r_int
id|uid_t
suffix:semicolon
DECL|typedef|gid_t
r_typedef
r_int
r_int
id|gid_t
suffix:semicolon
DECL|typedef|dev_t
r_typedef
r_int
r_int
id|dev_t
suffix:semicolon
DECL|typedef|ino_t
r_typedef
r_int
r_int
id|ino_t
suffix:semicolon
DECL|typedef|mode_t
r_typedef
r_int
r_int
id|mode_t
suffix:semicolon
DECL|typedef|umode_t
r_typedef
r_int
r_int
id|umode_t
suffix:semicolon
DECL|typedef|nlink_t
r_typedef
r_int
r_int
id|nlink_t
suffix:semicolon
DECL|typedef|daddr_t
r_typedef
r_int
id|daddr_t
suffix:semicolon
DECL|typedef|off_t
r_typedef
r_int
id|off_t
suffix:semicolon
multiline_comment|/*&n; * __xx is ok: it doesn&squot;t pollute the POSIX namespace. Use these in the&n; * header files exported to user space&n; */
DECL|typedef|__s8
r_typedef
id|__signed__
r_char
id|__s8
suffix:semicolon
DECL|typedef|__u8
r_typedef
r_int
r_char
id|__u8
suffix:semicolon
DECL|typedef|__s16
r_typedef
id|__signed__
r_int
id|__s16
suffix:semicolon
DECL|typedef|__u16
r_typedef
r_int
r_int
id|__u16
suffix:semicolon
DECL|typedef|__s32
r_typedef
id|__signed__
r_int
id|__s32
suffix:semicolon
DECL|typedef|__u32
r_typedef
r_int
r_int
id|__u32
suffix:semicolon
macro_line|#if defined(__GNUC__) &amp;&amp; !defined(__STRICT_ANSI__)
DECL|typedef|__s64
r_typedef
id|__signed__
r_int
r_int
id|__s64
suffix:semicolon
DECL|typedef|__u64
r_typedef
r_int
r_int
r_int
id|__u64
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; * These aren&squot;t exported outside the kernel to avoid name space clashes&n; */
macro_line|#ifdef __KERNEL__
DECL|typedef|s8
r_typedef
r_int
r_char
id|s8
suffix:semicolon
DECL|typedef|u8
r_typedef
r_int
r_char
id|u8
suffix:semicolon
DECL|typedef|s16
r_typedef
r_int
r_int
id|s16
suffix:semicolon
DECL|typedef|u16
r_typedef
r_int
r_int
id|u16
suffix:semicolon
DECL|typedef|s32
r_typedef
r_int
r_int
id|s32
suffix:semicolon
DECL|typedef|u32
r_typedef
r_int
r_int
id|u32
suffix:semicolon
DECL|typedef|s64
r_typedef
r_int
r_int
r_int
id|s64
suffix:semicolon
DECL|typedef|u64
r_typedef
r_int
r_int
r_int
id|u64
suffix:semicolon
macro_line|#endif /* __KERNEL__ */
DECL|macro|__FD_SET
macro_line|#undef&t;__FD_SET
DECL|macro|__FD_SET
mdefine_line|#define __FD_SET(fd,fdsetp) &bslash;&n;&t;&t;__asm__ __volatile__(&quot;btsl %1,%0&quot;: &bslash;&n;&t;&t;&t;&quot;=m&quot; (*(fd_set *) (fdsetp)):&quot;r&quot; ((int) (fd)))
DECL|macro|__FD_CLR
macro_line|#undef&t;__FD_CLR
DECL|macro|__FD_CLR
mdefine_line|#define __FD_CLR(fd,fdsetp) &bslash;&n;&t;&t;__asm__ __volatile__(&quot;btrl %1,%0&quot;: &bslash;&n;&t;&t;&t;&quot;=m&quot; (*(fd_set *) (fdsetp)):&quot;r&quot; ((int) (fd)))
DECL|macro|__FD_ISSET
macro_line|#undef&t;__FD_ISSET
DECL|macro|__FD_ISSET
mdefine_line|#define __FD_ISSET(fd,fdsetp) (__extension__ ({ &bslash;&n;&t;&t;unsigned char __result; &bslash;&n;&t;&t;__asm__ __volatile__(&quot;btl %1,%2 ; setb %0&quot; &bslash;&n;&t;&t;&t;:&quot;=q&quot; (__result) :&quot;r&quot; ((int) (fd)), &bslash;&n;&t;&t;&t;&quot;m&quot; (*(fd_set *) (fdsetp))); &bslash;&n;&t;&t;__result; }))
DECL|macro|__FD_ZERO
macro_line|#undef&t;__FD_ZERO
DECL|macro|__FD_ZERO
mdefine_line|#define __FD_ZERO(fdsetp) &bslash;&n;&t;&t;__asm__ __volatile__(&quot;cld ; rep ; stosl&quot; &bslash;&n;&t;&t;&t;:&quot;=m&quot; (*(fd_set *) (fdsetp)) &bslash;&n;&t;&t;&t;:&quot;a&quot; (0), &quot;c&quot; (__FDSET_INTS), &bslash;&n;&t;&t;&t;&quot;D&quot; ((fd_set *) (fdsetp)) :&quot;cx&quot;,&quot;di&quot;)
macro_line|#endif
eof
