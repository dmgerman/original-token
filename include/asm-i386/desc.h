macro_line|#ifndef __ARCH_DESC_H
DECL|macro|__ARCH_DESC_H
mdefine_line|#define __ARCH_DESC_H
macro_line|#include &lt;asm/ldt.h&gt;
multiline_comment|/*&n; * The layout of the GDT under Linux:&n; *&n; *   0 - null&n; *   1 - not used&n; *   2 - kernel code segment&n; *   3 - kernel data segment&n; *   4 - user code segment                  &lt;-- new cacheline &n; *   5 - user data segment&n; *   6 - not used&n; *   7 - not used&n; *   8 - APM BIOS support                   &lt;-- new cacheline &n; *   9 - APM BIOS support&n; *  10 - APM BIOS support&n; *  11 - APM BIOS support&n; *&n; * The TSS+LDT descriptors are spread out a bit so that every CPU&n; * has an exclusive cacheline for the per-CPU TSS and LDT:&n; *&n; *  12 - CPU#0 TSS                          &lt;-- new cacheline &n; *  13 - CPU#0 LDT&n; *  14 - not used &n; *  15 - not used &n; *  16 - CPU#1 TSS                          &lt;-- new cacheline &n; *  17 - CPU#1 LDT&n; *  18 - not used &n; *  19 - not used &n; *  ... NR_CPUS per-CPU TSS+LDT&squot;s if on SMP&n; *&n; * Entry into gdt where to find first TSS.&n; */
DECL|macro|__FIRST_TSS_ENTRY
mdefine_line|#define __FIRST_TSS_ENTRY 12
DECL|macro|__FIRST_LDT_ENTRY
mdefine_line|#define __FIRST_LDT_ENTRY (__FIRST_TSS_ENTRY+1)
DECL|macro|__TSS
mdefine_line|#define __TSS(n) (((n)&lt;&lt;2) + __FIRST_TSS_ENTRY)
DECL|macro|__LDT
mdefine_line|#define __LDT(n) (((n)&lt;&lt;2) + __FIRST_LDT_ENTRY)
macro_line|#ifndef __ASSEMBLY__
DECL|struct|desc_struct
r_struct
id|desc_struct
(brace
DECL|member|a
DECL|member|b
r_int
r_int
id|a
comma
id|b
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|desc_struct
id|gdt_table
(braket
)braket
suffix:semicolon
r_extern
r_struct
id|desc_struct
op_star
id|idt
comma
op_star
id|gdt
suffix:semicolon
DECL|struct|Xgt_desc_struct
r_struct
id|Xgt_desc_struct
(brace
DECL|member|size
r_int
r_int
id|size
suffix:semicolon
DECL|member|address
r_int
r_int
id|address
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|idt_descr
mdefine_line|#define idt_descr (*(struct Xgt_desc_struct *)((char *)&amp;idt - 2))
DECL|macro|gdt_descr
mdefine_line|#define gdt_descr (*(struct Xgt_desc_struct *)((char *)&amp;gdt - 2))
DECL|macro|load_TR
mdefine_line|#define load_TR(n) __asm__ __volatile__(&quot;ltr %%ax&quot;::&quot;a&quot; (__TSS(n)&lt;&lt;3))
DECL|macro|__load_LDT
mdefine_line|#define __load_LDT(n) __asm__ __volatile__(&quot;lldt %%ax&quot;::&quot;a&quot; (__LDT(n)&lt;&lt;3))
multiline_comment|/*&n; * This is the ldt that every process will get unless we need&n; * something other than this.&n; */
r_extern
r_struct
id|desc_struct
id|default_ldt
(braket
)braket
suffix:semicolon
r_extern
r_void
id|set_intr_gate
c_func
(paren
r_int
r_int
id|irq
comma
r_void
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|set_ldt_desc
c_func
(paren
r_int
r_int
id|n
comma
r_void
op_star
id|addr
comma
r_int
r_int
id|size
)paren
suffix:semicolon
r_extern
r_void
id|set_tss_desc
c_func
(paren
r_int
r_int
id|n
comma
r_void
op_star
id|addr
)paren
suffix:semicolon
DECL|function|clear_LDT
r_extern
r_inline
r_void
id|clear_LDT
c_func
(paren
r_void
)paren
(brace
r_int
id|cpu
op_assign
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
id|set_ldt_desc
c_func
(paren
id|cpu
comma
op_amp
id|default_ldt
(braket
l_int|0
)braket
comma
l_int|5
)paren
suffix:semicolon
id|__load_LDT
c_func
(paren
id|cpu
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * load one particular LDT into the current CPU&n; */
DECL|function|load_LDT
r_extern
r_inline
r_void
id|load_LDT
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_int
id|cpu
op_assign
id|smp_processor_id
c_func
(paren
)paren
suffix:semicolon
r_void
op_star
id|segments
op_assign
id|mm-&gt;context.segments
suffix:semicolon
r_int
id|count
op_assign
id|LDT_ENTRIES
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|segments
)paren
(brace
id|segments
op_assign
op_amp
id|default_ldt
(braket
l_int|0
)braket
suffix:semicolon
id|count
op_assign
l_int|5
suffix:semicolon
)brace
id|set_ldt_desc
c_func
(paren
id|cpu
comma
id|segments
comma
id|count
)paren
suffix:semicolon
id|__load_LDT
c_func
(paren
id|cpu
)paren
suffix:semicolon
)brace
macro_line|#endif /* !__ASSEMBLY__ */
macro_line|#endif
eof
