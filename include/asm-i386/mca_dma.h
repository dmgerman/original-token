macro_line|#ifndef MCA_DMA_H
DECL|macro|MCA_DMA_H
mdefine_line|#define MCA_DMA_H
macro_line|#include &lt;asm/io.h&gt;
macro_line|#include &lt;linux/ioport.h&gt;
multiline_comment|/*&n; * Microchannel specific DMA stuff.  DMA on an MCA machine is fairly similar to&n; *   standard PC dma, but it certainly has its quirks.  DMA register addresses&n; *   are in a different place and there are some added functions.  Most of this&n; *   should be pretty obvious on inspection.  Note that the user must divide&n; *   count by 2 when using 16-bit dma; that is not handled by these functions.&n; *&n; * Ramen Noodles are yummy.&n; * &n; *  1998 Tymm Twillman &lt;tymm@computer.org&gt;  &n; */
multiline_comment|/*&n; * Registers that are used by the DMA controller; FN is the function register &n; *   (tell the controller what to do) and EXE is the execution register (how&n; *   to do it)&n; */
DECL|macro|MCA_DMA_REG_FN
mdefine_line|#define MCA_DMA_REG_FN  0x18
DECL|macro|MCA_DMA_REG_EXE
mdefine_line|#define MCA_DMA_REG_EXE 0x1A 
multiline_comment|/*&n; * Functions that the DMA controller can do&n; */
DECL|macro|MCA_DMA_FN_SET_IO
mdefine_line|#define MCA_DMA_FN_SET_IO       0x00
DECL|macro|MCA_DMA_FN_SET_ADDR
mdefine_line|#define MCA_DMA_FN_SET_ADDR     0x20
DECL|macro|MCA_DMA_FN_GET_ADDR
mdefine_line|#define MCA_DMA_FN_GET_ADDR     0x30
DECL|macro|MCA_DMA_FN_SET_COUNT
mdefine_line|#define MCA_DMA_FN_SET_COUNT    0x40
DECL|macro|MCA_DMA_FN_GET_COUNT
mdefine_line|#define MCA_DMA_FN_GET_COUNT    0x50
DECL|macro|MCA_DMA_FN_GET_STATUS
mdefine_line|#define MCA_DMA_FN_GET_STATUS   0x60
DECL|macro|MCA_DMA_FN_SET_MODE
mdefine_line|#define MCA_DMA_FN_SET_MODE     0x70
DECL|macro|MCA_DMA_FN_SET_ARBUS
mdefine_line|#define MCA_DMA_FN_SET_ARBUS    0x80
DECL|macro|MCA_DMA_FN_MASK
mdefine_line|#define MCA_DMA_FN_MASK         0x90
DECL|macro|MCA_DMA_FN_RESET_MASK
mdefine_line|#define MCA_DMA_FN_RESET_MASK   0xA0
DECL|macro|MCA_DMA_FN_MASTER_CLEAR
mdefine_line|#define MCA_DMA_FN_MASTER_CLEAR 0xD0
multiline_comment|/*&n; * Modes (used by setting MCA_DMA_FN_MODE in the function register)&n; * &n; * Note that the MODE_READ is read from memory (write to device), and&n; *   MODE_WRITE is vice-versa.  &n; */
DECL|macro|MCA_DMA_MODE_XFER
mdefine_line|#define MCA_DMA_MODE_XFER  0x04  /* read by default */
DECL|macro|MCA_DMA_MODE_READ
mdefine_line|#define MCA_DMA_MODE_READ  0x04  /* same as XFER */
DECL|macro|MCA_DMA_MODE_WRITE
mdefine_line|#define MCA_DMA_MODE_WRITE 0x08  /* OR with MODE_XFER to use */
DECL|macro|MCA_DMA_MODE_IO
mdefine_line|#define MCA_DMA_MODE_IO    0x01  /* DMA from IO register */
DECL|macro|MCA_DMA_MODE_16
mdefine_line|#define MCA_DMA_MODE_16    0x40  /* 16 bit xfers */
multiline_comment|/**&n; *&t;mca_enable_dma&t;-&t;channel to enable DMA on&n; *&t;@dmanr: DMA channel&n; *&n; *&t;Enable the MCA bus DMA on a channel. This can be called from&n; *&t;IRQ context.&n; */
DECL|function|mca_enable_dma
r_static
id|__inline__
r_void
id|mca_enable_dma
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
id|outb
c_func
(paren
id|MCA_DMA_FN_RESET_MASK
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_disble_dma&t;-&t;channel to disable DMA on&n; *&t;@dmanr: DMA channel&n; *&n; *&t;Enable the MCA bus DMA on a channel. This can be called from&n; *&t;IRQ context.&n; */
DECL|function|mca_disable_dma
r_static
id|__inline__
r_void
id|mca_disable_dma
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
id|outb
c_func
(paren
id|MCA_DMA_FN_MASK
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_set_dma_addr -&t;load a 24bit DMA address&n; *&t;@dmanr: DMA channel&n; *&t;@a: 24bit bus address&n; *&n; *&t;Load the address register in the DMA controller. This has a 24bit&n; *&t;limitation (16Mb). &n; */
DECL|function|mca_set_dma_addr
r_static
id|__inline__
r_void
id|mca_set_dma_addr
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|a
)paren
(brace
id|outb
c_func
(paren
id|MCA_DMA_FN_SET_ADDR
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
id|outb
c_func
(paren
id|a
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
id|outb
c_func
(paren
(paren
id|a
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
id|outb
c_func
(paren
(paren
id|a
op_rshift
l_int|16
)paren
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_get_dma_addr -&t;load a 24bit DMA address&n; *&t;@dmanr: DMA channel&n; *&n; *&t;Read the address register in the DMA controller. This has a 24bit&n; *&t;limitation (16Mb). The return is a bus address.&n; */
DECL|function|mca_get_dma_addr
r_static
id|__inline__
r_int
r_int
id|mca_get_dma_addr
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|addr
suffix:semicolon
id|outb
c_func
(paren
id|MCA_DMA_FN_GET_ADDR
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
id|addr
op_assign
id|inb
c_func
(paren
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
id|addr
op_or_assign
id|inb
c_func
(paren
id|MCA_DMA_REG_EXE
)paren
op_lshift
l_int|8
suffix:semicolon
id|addr
op_or_assign
id|inb
c_func
(paren
id|MCA_DMA_REG_EXE
)paren
op_lshift
l_int|16
suffix:semicolon
r_return
id|addr
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_set_dma_count -&t;load a 16bit transfer count&n; *&t;@dmanr: DMA channel&n; *&t;@count: count&n; *&n; *&t;Set the DMA count for this channel. This can be up to 64Kbytes.&n; *&t;Setting a count of zero will not do what you expect.&n; */
DECL|function|mca_set_dma_count
r_static
id|__inline__
r_void
id|mca_set_dma_count
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|count
)paren
(brace
id|count
op_decrement
suffix:semicolon
multiline_comment|/* transfers one more than count -- correct for this */
id|outb
c_func
(paren
id|MCA_DMA_FN_SET_COUNT
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
id|outb
c_func
(paren
id|count
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
id|outb
c_func
(paren
(paren
id|count
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_get_dma_residue -&t;get the remaining bytes to transfer&n; *&t;@dmanr: DMA channel&n; *&n; *&t;This function returns the number of bytes left to transfer&n; *&t;on this DMA channel.&n; */
DECL|function|mca_get_dma_residue
r_static
id|__inline__
r_int
r_int
id|mca_get_dma_residue
c_func
(paren
r_int
r_int
id|dmanr
)paren
(brace
r_int
r_int
id|count
suffix:semicolon
id|outb
c_func
(paren
id|MCA_DMA_FN_GET_COUNT
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
id|count
op_assign
l_int|1
op_plus
id|inb
c_func
(paren
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
id|count
op_add_assign
id|inb
c_func
(paren
id|MCA_DMA_REG_EXE
)paren
op_lshift
l_int|8
suffix:semicolon
r_return
id|count
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_set_dma_io -&t;set the port for an I/O transfer&n; *&t;@dmanr: DMA channel&n; *&t;@io_addr: an I/O port number&n; *&n; *&t;Unlike the ISA bus DMA controllers the DMA on MCA bus can transfer&n; *&t;with an I/O port target.&n; */
DECL|function|mca_set_dma_io
r_static
id|__inline__
r_void
id|mca_set_dma_io
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|io_addr
)paren
(brace
multiline_comment|/*&n;&t; * DMA from a port address -- set the io address&n;&t; */
id|outb
c_func
(paren
id|MCA_DMA_FN_SET_IO
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
id|outb
c_func
(paren
id|io_addr
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
id|outb
c_func
(paren
(paren
id|io_addr
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
)brace
multiline_comment|/**&n; *&t;mca_set_dma_mode -&t;set the DMA mode&n; *&t;@dmanr: DMA channel&n; *&t;@mode: mode to set&n; *&n; *&t;The DMA controller supports several modes. The mode values you can&n; *&t;set are :&n; *&n; *&t;%MCA_DMA_MODE_READ when reading from the DMA device.&n; *&n; *&t;%MCA_DMA_MODE_WRITE to writing to the DMA device.&n; *&n; *&t;%MCA_DMA_MODE_IO to do DMA to or from an I/O port.&n; *&n; *&t;%MCA_DMA_MODE_16 to do 16bit transfers.&n; *&n; */
DECL|function|mca_set_dma_mode
r_static
id|__inline__
r_void
id|mca_set_dma_mode
c_func
(paren
r_int
r_int
id|dmanr
comma
r_int
r_int
id|mode
)paren
(brace
id|outb
c_func
(paren
id|MCA_DMA_FN_SET_MODE
op_or
id|dmanr
comma
id|MCA_DMA_REG_FN
)paren
suffix:semicolon
id|outb
c_func
(paren
id|mode
comma
id|MCA_DMA_REG_EXE
)paren
suffix:semicolon
)brace
macro_line|#endif MCA_DMA_H
eof
