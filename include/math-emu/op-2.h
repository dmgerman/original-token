multiline_comment|/* Software floating-point emulation.&n;   Basic two-word fraction declaration and manipulation.&n;   Copyright (C) 1997,1998,1999 Free Software Foundation, Inc.&n;   This file is part of the GNU C Library.&n;   Contributed by Richard Henderson (rth@cygnus.com),&n;&t;&t;  Jakub Jelinek (jj@ultra.linux.cz),&n;&t;&t;  David S. Miller (davem@redhat.com) and&n;&t;&t;  Peter Maydell (pmaydell@chiark.greenend.org.uk).&n;&n;   The GNU C Library is free software; you can redistribute it and/or&n;   modify it under the terms of the GNU Library General Public License as&n;   published by the Free Software Foundation; either version 2 of the&n;   License, or (at your option) any later version.&n;&n;   The GNU C Library is distributed in the hope that it will be useful,&n;   but WITHOUT ANY WARRANTY; without even the implied warranty of&n;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&n;   Library General Public License for more details.&n;&n;   You should have received a copy of the GNU Library General Public&n;   License along with the GNU C Library; see the file COPYING.LIB.  If&n;   not, write to the Free Software Foundation, Inc.,&n;   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
DECL|macro|_FP_FRAC_DECL_2
mdefine_line|#define _FP_FRAC_DECL_2(X)&t;_FP_W_TYPE X##_f0, X##_f1
DECL|macro|_FP_FRAC_COPY_2
mdefine_line|#define _FP_FRAC_COPY_2(D,S)&t;(D##_f0 = S##_f0, D##_f1 = S##_f1)
DECL|macro|_FP_FRAC_SET_2
mdefine_line|#define _FP_FRAC_SET_2(X,I)&t;__FP_FRAC_SET_2(X, I)
DECL|macro|_FP_FRAC_HIGH_2
mdefine_line|#define _FP_FRAC_HIGH_2(X)&t;(X##_f1)
DECL|macro|_FP_FRAC_LOW_2
mdefine_line|#define _FP_FRAC_LOW_2(X)&t;(X##_f0)
DECL|macro|_FP_FRAC_WORD_2
mdefine_line|#define _FP_FRAC_WORD_2(X,w)&t;(X##_f##w)
DECL|macro|_FP_FRAC_SLL_2
mdefine_line|#define _FP_FRAC_SLL_2(X,N)&t;&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if ((N) &lt; _FP_W_TYPE_SIZE)&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (__builtin_constant_p(N) &amp;&amp; (N) == 1) &t;&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    X##_f1 = X##_f1 + X##_f1 + (((_FP_WS_TYPE)(X##_f0)) &lt; 0);&t;&bslash;&n;&t;    X##_f0 += X##_f0;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    X##_f1 = X##_f1 &lt;&lt; (N) | X##_f0 &gt;&gt; (_FP_W_TYPE_SIZE - (N));&t;&bslash;&n;&t;    X##_f0 &lt;&lt;= (N);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f1 = X##_f0 &lt;&lt; ((N) - _FP_W_TYPE_SIZE);&t;&t;&t;&bslash;&n;&t;X##_f0 = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_FRAC_SRL_2
mdefine_line|#define _FP_FRAC_SRL_2(X,N)&t;&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if ((N) &lt; _FP_W_TYPE_SIZE)&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f0 = X##_f0 &gt;&gt; (N) | X##_f1 &lt;&lt; (_FP_W_TYPE_SIZE - (N));&t;&bslash;&n;&t;X##_f1 &gt;&gt;= (N);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f0 = X##_f1 &gt;&gt; ((N) - _FP_W_TYPE_SIZE);&t;&t;&t;&bslash;&n;&t;X##_f1 = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* Right shift with sticky-lsb.  */
DECL|macro|_FP_FRAC_SRS_2
mdefine_line|#define _FP_FRAC_SRS_2(X,N,sz)&t;&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if ((N) &lt; _FP_W_TYPE_SIZE)&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f0 = (X##_f1 &lt;&lt; (_FP_W_TYPE_SIZE - (N)) | X##_f0 &gt;&gt; (N) |&t;&bslash;&n;&t;&t;  (__builtin_constant_p(N) &amp;&amp; (N) == 1&t;&t;&t;&bslash;&n;&t;&t;   ? X##_f0 &amp; 1&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;   : (X##_f0 &lt;&lt; (_FP_W_TYPE_SIZE - (N))) != 0));&t;&bslash;&n;&t;X##_f1 &gt;&gt;= (N);&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f0 = (X##_f1 &gt;&gt; ((N) - _FP_W_TYPE_SIZE) |&t;&t;&t;&bslash;&n;&t;&t;  (((X##_f1 &lt;&lt; (sz - (N))) | X##_f0) != 0));&t;&t;&bslash;&n;&t;X##_f1 = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_FRAC_ADDI_2
mdefine_line|#define _FP_FRAC_ADDI_2(X,I)&t;&bslash;&n;  __FP_FRAC_ADDI_2(X##_f1, X##_f0, I)
DECL|macro|_FP_FRAC_ADD_2
mdefine_line|#define _FP_FRAC_ADD_2(R,X,Y)&t;&bslash;&n;  __FP_FRAC_ADD_2(R##_f1, R##_f0, X##_f1, X##_f0, Y##_f1, Y##_f0)
DECL|macro|_FP_FRAC_SUB_2
mdefine_line|#define _FP_FRAC_SUB_2(R,X,Y)&t;&bslash;&n;  __FP_FRAC_SUB_2(R##_f1, R##_f0, X##_f1, X##_f0, Y##_f1, Y##_f0)
DECL|macro|_FP_FRAC_DEC_2
mdefine_line|#define _FP_FRAC_DEC_2(X,Y)&t;&bslash;&n;  __FP_FRAC_DEC_2(X##_f1, X##_f0, Y##_f1, Y##_f0)
DECL|macro|_FP_FRAC_CLZ_2
mdefine_line|#define _FP_FRAC_CLZ_2(R,X)&t;&bslash;&n;  do {&t;&t;&t;&t;&bslash;&n;    if (X##_f1)&t;&t;&t;&bslash;&n;      __FP_CLZ(R,X##_f1);&t;&bslash;&n;    else &t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&bslash;&n;      __FP_CLZ(R,X##_f0);&t;&bslash;&n;      R += _FP_W_TYPE_SIZE;&t;&bslash;&n;    }&t;&t;&t;&t;&bslash;&n;  } while(0)
multiline_comment|/* Predicates */
DECL|macro|_FP_FRAC_NEGP_2
mdefine_line|#define _FP_FRAC_NEGP_2(X)&t;((_FP_WS_TYPE)X##_f1 &lt; 0)
DECL|macro|_FP_FRAC_ZEROP_2
mdefine_line|#define _FP_FRAC_ZEROP_2(X)&t;((X##_f1 | X##_f0) == 0)
DECL|macro|_FP_FRAC_OVERP_2
mdefine_line|#define _FP_FRAC_OVERP_2(fs,X)&t;(_FP_FRAC_HIGH_##fs(X) &amp; _FP_OVERFLOW_##fs)
DECL|macro|_FP_FRAC_EQ_2
mdefine_line|#define _FP_FRAC_EQ_2(X, Y)&t;(X##_f1 == Y##_f1 &amp;&amp; X##_f0 == Y##_f0)
DECL|macro|_FP_FRAC_GT_2
mdefine_line|#define _FP_FRAC_GT_2(X, Y)&t;&bslash;&n;  (X##_f1 &gt; Y##_f1 || (X##_f1 == Y##_f1 &amp;&amp; X##_f0 &gt; Y##_f0))
DECL|macro|_FP_FRAC_GE_2
mdefine_line|#define _FP_FRAC_GE_2(X, Y)&t;&bslash;&n;  (X##_f1 &gt; Y##_f1 || (X##_f1 == Y##_f1 &amp;&amp; X##_f0 &gt;= Y##_f0))
DECL|macro|_FP_ZEROFRAC_2
mdefine_line|#define _FP_ZEROFRAC_2&t;&t;0, 0
DECL|macro|_FP_MINFRAC_2
mdefine_line|#define _FP_MINFRAC_2&t;&t;0, 1
DECL|macro|_FP_MAXFRAC_2
mdefine_line|#define _FP_MAXFRAC_2&t;&t;(~(_FP_WS_TYPE)0), (~(_FP_WS_TYPE)0)
multiline_comment|/*&n; * Internals &n; */
DECL|macro|__FP_FRAC_SET_2
mdefine_line|#define __FP_FRAC_SET_2(X,I1,I0)&t;(X##_f0 = I0, X##_f1 = I1)
DECL|macro|__FP_CLZ_2
mdefine_line|#define __FP_CLZ_2(R, xh, xl)&t;&bslash;&n;  do {&t;&t;&t;&t;&bslash;&n;    if (xh)&t;&t;&t;&bslash;&n;      __FP_CLZ(R,xh);&t;&t;&bslash;&n;    else &t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&bslash;&n;      __FP_CLZ(R,xl);&t;&t;&bslash;&n;      R += _FP_W_TYPE_SIZE;&t;&bslash;&n;    }&t;&t;&t;&t;&bslash;&n;  } while(0)
macro_line|#if 0
macro_line|#ifndef __FP_FRAC_ADDI_2
mdefine_line|#define __FP_FRAC_ADDI_2(xh, xl, i)&t;&bslash;&n;  (xh += ((xl += i) &lt; i))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_ADD_2
mdefine_line|#define __FP_FRAC_ADD_2(rh, rl, xh, xl, yh, yl)&t;&bslash;&n;  (rh = xh + yh + ((rl = xl + yl) &lt; xl))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_SUB_2
mdefine_line|#define __FP_FRAC_SUB_2(rh, rl, xh, xl, yh, yl)&t;&bslash;&n;  (rh = xh - yh - ((rl = xl - yl) &gt; xl))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_DEC_2
mdefine_line|#define __FP_FRAC_DEC_2(xh, xl, yh, yl)&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&bslash;&n;    UWtype _t = xl;&t;&t;&t;&bslash;&n;    xh -= yh + ((xl -= yl) &gt; _t);&t;&bslash;&n;  } while (0)
macro_line|#endif
macro_line|#else
DECL|macro|__FP_FRAC_ADDI_2
macro_line|#undef __FP_FRAC_ADDI_2
DECL|macro|__FP_FRAC_ADDI_2
mdefine_line|#define __FP_FRAC_ADDI_2(xh, xl, i)&t;add_ssaaaa(xh, xl, xh, xl, 0, i)
DECL|macro|__FP_FRAC_ADD_2
macro_line|#undef __FP_FRAC_ADD_2
DECL|macro|__FP_FRAC_ADD_2
mdefine_line|#define __FP_FRAC_ADD_2&t;&t;&t;add_ssaaaa
DECL|macro|__FP_FRAC_SUB_2
macro_line|#undef __FP_FRAC_SUB_2
DECL|macro|__FP_FRAC_SUB_2
mdefine_line|#define __FP_FRAC_SUB_2&t;&t;&t;sub_ddmmss
DECL|macro|__FP_FRAC_DEC_2
macro_line|#undef __FP_FRAC_DEC_2
DECL|macro|__FP_FRAC_DEC_2
mdefine_line|#define __FP_FRAC_DEC_2(xh, xl, yh, yl)&t;sub_ddmmss(xh, xl, xh, xl, yh, yl)
macro_line|#endif
multiline_comment|/*&n; * Unpack the raw bits of a native fp value.  Do not classify or&n; * normalize the data.&n; */
DECL|macro|_FP_UNPACK_RAW_2
mdefine_line|#define _FP_UNPACK_RAW_2(fs, X, val)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs _flo; _flo.flt = (val);&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f0 = _flo.bits.frac0;&t;&t;&t;&t;&bslash;&n;    X##_f1 = _flo.bits.frac1;&t;&t;&t;&t;&bslash;&n;    X##_e  = _flo.bits.exp;&t;&t;&t;&t;&bslash;&n;    X##_s  = _flo.bits.sign;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_UNPACK_RAW_2_P
mdefine_line|#define _FP_UNPACK_RAW_2_P(fs, X, val)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs *_flo =&t;&t;&t;&bslash;&n;      (union _FP_UNION_##fs *)(val);&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f0 = _flo-&gt;bits.frac0;&t;&t;&t;&t;&bslash;&n;    X##_f1 = _flo-&gt;bits.frac1;&t;&t;&t;&t;&bslash;&n;    X##_e  = _flo-&gt;bits.exp;&t;&t;&t;&t;&bslash;&n;    X##_s  = _flo-&gt;bits.sign;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Repack the raw bits of a native fp value.&n; */
DECL|macro|_FP_PACK_RAW_2
mdefine_line|#define _FP_PACK_RAW_2(fs, val, X)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs _flo;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.frac0 = X##_f0;&t;&t;&t;&t;&bslash;&n;    _flo.bits.frac1 = X##_f1;&t;&t;&t;&t;&bslash;&n;    _flo.bits.exp   = X##_e;&t;&t;&t;&t;&bslash;&n;    _flo.bits.sign  = X##_s;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    (val) = _flo.flt;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_PACK_RAW_2_P
mdefine_line|#define _FP_PACK_RAW_2_P(fs, val, X)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs *_flo =&t;&t;&t;&bslash;&n;      (union _FP_UNION_##fs *)(val);&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.frac0 = X##_f0;&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.frac1 = X##_f1;&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.exp   = X##_e;&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.sign  = X##_s;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Multiplication algorithms:&n; */
multiline_comment|/* Given a 1W * 1W =&gt; 2W primitive, do the extended multiplication.  */
DECL|macro|_FP_MUL_MEAT_2_wide
mdefine_line|#define _FP_MUL_MEAT_2_wide(wfracbits, R, X, Y, doit)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_DECL_4(_z); _FP_FRAC_DECL_2(_b); _FP_FRAC_DECL_2(_c);&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    doit(_FP_FRAC_WORD_4(_z,1), _FP_FRAC_WORD_4(_z,0), X##_f0, Y##_f0);&t;&bslash;&n;    doit(_b_f1, _b_f0, X##_f0, Y##_f1);&t;&t;&t;&t;&t;&bslash;&n;    doit(_c_f1, _c_f0, X##_f1, Y##_f0);&t;&t;&t;&t;&t;&bslash;&n;    doit(_FP_FRAC_WORD_4(_z,3), _FP_FRAC_WORD_4(_z,2), X##_f1, Y##_f1);&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1), 0, _b_f1, _b_f0,&t;&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1));&t;&t;&t;&t;&bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1), 0, _c_f1, _c_f0,&t;&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1));&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    /* Normalize since we know where the msb of the multiplicands&t;&bslash;&n;       were (bit B), we know that the msb of the of the product is&t;&bslash;&n;       at either 2B or 2B-1.  */&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_SRS_4(_z, wfracbits-1, 2*wfracbits);&t;&t;&t;&bslash;&n;    R##_f0 = _FP_FRAC_WORD_4(_z,0);&t;&t;&t;&t;&t;&bslash;&n;    R##_f1 = _FP_FRAC_WORD_4(_z,1);&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* Given a 1W * 1W =&gt; 2W primitive, do the extended multiplication.&n;   Do only 3 multiplications instead of four. This one is for machines&n;   where multiplication is much more expensive than subtraction.  */
DECL|macro|_FP_MUL_MEAT_2_wide_3mul
mdefine_line|#define _FP_MUL_MEAT_2_wide_3mul(wfracbits, R, X, Y, doit)&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_DECL_4(_z); _FP_FRAC_DECL_2(_b); _FP_FRAC_DECL_2(_c);&t;&bslash;&n;    _FP_W_TYPE _d;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    int _c1, _c2;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _b_f0 = X##_f0 + X##_f1;&t;&t;&t;&t;&t;&t;&bslash;&n;    _c1 = _b_f0 &lt; X##_f0;&t;&t;&t;&t;&t;&t;&bslash;&n;    _b_f1 = Y##_f0 + Y##_f1;&t;&t;&t;&t;&t;&t;&bslash;&n;    _c2 = _b_f1 &lt; Y##_f0;&t;&t;&t;&t;&t;&t;&bslash;&n;    doit(_d, _FP_FRAC_WORD_4(_z,0), X##_f0, Y##_f0);&t;&t;&t;&bslash;&n;    doit(_FP_FRAC_WORD_4(_z,2), _FP_FRAC_WORD_4(_z,1), _b_f0, _b_f1);&t;&bslash;&n;    doit(_c_f1, _c_f0, X##_f1, Y##_f1);&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _b_f0 &amp;= -_c2;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _b_f1 &amp;= -_c1;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1), (_c1 &amp; _c2), 0, _d,&t;&t;&bslash;&n;&t;&t;    0, _FP_FRAC_WORD_4(_z,2), _FP_FRAC_WORD_4(_z,1));&t;&bslash;&n;    __FP_FRAC_ADDI_2(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;     _b_f0);&t;&t;&t;&t;&t;&t;&bslash;&n;    __FP_FRAC_ADDI_2(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;     _b_f1);&t;&t;&t;&t;&t;&t;&bslash;&n;    __FP_FRAC_DEC_3(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1),&t;&t;&t;&t;&bslash;&n;&t;&t;    0, _d, _FP_FRAC_WORD_4(_z,0));&t;&t;&t;&bslash;&n;    __FP_FRAC_DEC_3(_FP_FRAC_WORD_4(_z,3),_FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,1), 0, _c_f1, _c_f0);&t;&t;&bslash;&n;    __FP_FRAC_ADD_2(_FP_FRAC_WORD_4(_z,3), _FP_FRAC_WORD_4(_z,2),&t;&bslash;&n;&t;&t;    _c_f1, _c_f0,&t;&t;&t;&t;&t;&bslash;&n;&t;&t;    _FP_FRAC_WORD_4(_z,3), _FP_FRAC_WORD_4(_z,2));&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    /* Normalize since we know where the msb of the multiplicands&t;&bslash;&n;       were (bit B), we know that the msb of the of the product is&t;&bslash;&n;       at either 2B or 2B-1.  */&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_SRS_4(_z, wfracbits-1, 2*wfracbits);&t;&t;&t;&bslash;&n;    R##_f0 = _FP_FRAC_WORD_4(_z,0);&t;&t;&t;&t;&t;&bslash;&n;    R##_f1 = _FP_FRAC_WORD_4(_z,1);&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_MUL_MEAT_2_gmp
mdefine_line|#define _FP_MUL_MEAT_2_gmp(wfracbits, R, X, Y)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_DECL_4(_z);&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_W_TYPE _x[2], _y[2];&t;&t;&t;&t;&t;&t;&bslash;&n;    _x[0] = X##_f0; _x[1] = X##_f1;&t;&t;&t;&t;&t;&bslash;&n;    _y[0] = Y##_f0; _y[1] = Y##_f1;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    mpn_mul_n(_z_f, _x, _y, 2);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    /* Normalize since we know where the msb of the multiplicands&t;&bslash;&n;       were (bit B), we know that the msb of the of the product is&t;&bslash;&n;       at either 2B or 2B-1.  */&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_SRS_4(_z, wfracbits-1, 2*wfracbits);&t;&t;&t;&bslash;&n;    R##_f0 = _z_f[0];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    R##_f1 = _z_f[1];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* Do at most 120x120=240 bits multiplication using double floating&n;   point multiplication.  This is useful if floating point&n;   multiplication has much bigger throughput than integer multiply.&n;   It is supposed to work for _FP_W_TYPE_SIZE 64 and wfracbits&n;   between 106 and 120 only.  &n;   Caller guarantees that X and Y has (1LLL &lt;&lt; (wfracbits - 1)) set.&n;   SETFETZ is a macro which will disable all FPU exceptions and set rounding&n;   towards zero,  RESETFE should optionally reset it back.  */
DECL|macro|_FP_MUL_MEAT_2_120_240_double
mdefine_line|#define _FP_MUL_MEAT_2_120_240_double(wfracbits, R, X, Y, setfetz, resetfe)&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    static const double _const[] = {&t;&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-24 */ 5.9604644775390625e-08,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-48 */ 3.5527136788005009e-15,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-72 */ 2.1175823681357508e-22,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-96 */ 1.2621774483536189e-29,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^28 */ 2.68435456e+08,&t;&t;&t;&t;&t;&t;&bslash;&n;      /* 2^4 */ 1.600000e+01,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-20 */ 9.5367431640625e-07,&t;&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-44 */ 5.6843418860808015e-14,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-68 */ 3.3881317890172014e-21,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-92 */ 2.0194839173657902e-28,&t;&t;&t;&t;&t;&bslash;&n;      /* 2^-116 */ 1.2037062152420224e-35};&t;&t;&t;&t;&t;&bslash;&n;    double _a240, _b240, _c240, _d240, _e240, _f240, &t;&t;&t;&t;&bslash;&n;&t;   _g240, _h240, _i240, _j240, _k240;&t;&t;&t;&t;&t;&bslash;&n;    union { double d; UDItype i; } _l240, _m240, _n240, _o240,&t;&t;&t;&bslash;&n;&t;&t;&t;&t;   _p240, _q240, _r240, _s240;&t;&t;&t;&bslash;&n;    UDItype _t240, _u240, _v240, _w240, _x240, _y240 = 0;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (wfracbits &lt; 106 || wfracbits &gt; 120)&t;&t;&t;&t;&t;&bslash;&n;      abort();&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    setfetz;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _e240 = (double)(long)(X##_f0 &amp; 0xffffff);&t;&t;&t;&t;&t;&bslash;&n;    _j240 = (double)(long)(Y##_f0 &amp; 0xffffff);&t;&t;&t;&t;&t;&bslash;&n;    _d240 = (double)(long)((X##_f0 &gt;&gt; 24) &amp; 0xffffff);&t;&t;&t;&t;&bslash;&n;    _i240 = (double)(long)((Y##_f0 &gt;&gt; 24) &amp; 0xffffff);&t;&t;&t;&t;&bslash;&n;    _c240 = (double)(long)(((X##_f1 &lt;&lt; 16) &amp; 0xffffff) | (X##_f0 &gt;&gt; 48));&t;&bslash;&n;    _h240 = (double)(long)(((Y##_f1 &lt;&lt; 16) &amp; 0xffffff) | (Y##_f0 &gt;&gt; 48));&t;&bslash;&n;    _b240 = (double)(long)((X##_f1 &gt;&gt; 8) &amp; 0xffffff);&t;&t;&t;&t;&bslash;&n;    _g240 = (double)(long)((Y##_f1 &gt;&gt; 8) &amp; 0xffffff);&t;&t;&t;&t;&bslash;&n;    _a240 = (double)(long)(X##_f1 &gt;&gt; 32);&t;&t;&t;&t;&t;&bslash;&n;    _f240 = (double)(long)(Y##_f1 &gt;&gt; 32);&t;&t;&t;&t;&t;&bslash;&n;    _e240 *= _const[3];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _j240 *= _const[3];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _d240 *= _const[2];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _i240 *= _const[2];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _c240 *= _const[1];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _h240 *= _const[1];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _b240 *= _const[0];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _g240 *= _const[0];&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _s240.d =&t;&t;&t;&t;&t;&t;&t;      _e240*_j240;&bslash;&n;    _r240.d =&t;&t;&t;&t;&t;&t;_d240*_j240 + _e240*_i240;&bslash;&n;    _q240.d =&t;&t;&t;&t;  _c240*_j240 + _d240*_i240 + _e240*_h240;&bslash;&n;    _p240.d =&t;&t;    _b240*_j240 + _c240*_i240 + _d240*_h240 + _e240*_g240;&bslash;&n;    _o240.d = _a240*_j240 + _b240*_i240 + _c240*_h240 + _d240*_g240 + _e240*_f240;&bslash;&n;    _n240.d = _a240*_i240 + _b240*_h240 + _c240*_g240 + _d240*_f240;&t;&t;&bslash;&n;    _m240.d = _a240*_h240 + _b240*_g240 + _c240*_f240;&t;&t;&t;&t;&bslash;&n;    _l240.d = _a240*_g240 + _b240*_f240;&t;&t;&t;&t;&t;&bslash;&n;    _k240 =   _a240*_f240;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _r240.d += _s240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _q240.d += _r240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _p240.d += _q240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _o240.d += _p240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _n240.d += _o240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _m240.d += _n240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _l240.d += _m240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _k240 += _l240.d;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _s240.d -= ((_const[10]+_s240.d)-_const[10]);&t;&t;&t;&t;&bslash;&n;    _r240.d -= ((_const[9]+_r240.d)-_const[9]);&t;&t;&t;&t;&t;&bslash;&n;    _q240.d -= ((_const[8]+_q240.d)-_const[8]);&t;&t;&t;&t;&t;&bslash;&n;    _p240.d -= ((_const[7]+_p240.d)-_const[7]);&t;&t;&t;&t;&t;&bslash;&n;    _o240.d += _const[7];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _n240.d += _const[6];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _m240.d += _const[5];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _l240.d += _const[4];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_s240.d != 0.0) _y240 = 1;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_r240.d != 0.0) _y240 = 1;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_q240.d != 0.0) _y240 = 1;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_p240.d != 0.0) _y240 = 1;&t;&t;&t;&t;&t;&t;&bslash;&n;    _t240 = (DItype)_k240;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _u240 = _l240.i;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _v240 = _m240.i;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _w240 = _n240.i;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _x240 = _o240.i;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    R##_f1 = (_t240 &lt;&lt; (128 - (wfracbits - 1)))&t;&t;&t;&t;&t;&bslash;&n;&t;     | ((_u240 &amp; 0xffffff) &gt;&gt; ((wfracbits - 1) - 104));&t;&t;&t;&bslash;&n;    R##_f0 = ((_u240 &amp; 0xffffff) &lt;&lt; (168 - (wfracbits - 1)))&t;&t;&t;&bslash;&n;    &t;     | ((_v240 &amp; 0xffffff) &lt;&lt; (144 - (wfracbits - 1)))&t;&t;&t;&bslash;&n;    &t;     | ((_w240 &amp; 0xffffff) &lt;&lt; (120 - (wfracbits - 1)))&t;&t;&t;&bslash;&n;    &t;     | ((_x240 &amp; 0xffffff) &gt;&gt; ((wfracbits - 1) - 96))&t;&t;&t;&bslash;&n;    &t;     | _y240;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    resetfe;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Division algorithms:&n; */
DECL|macro|_FP_DIV_MEAT_2_udiv
mdefine_line|#define _FP_DIV_MEAT_2_udiv(fs, R, X, Y)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_W_TYPE _n_f2, _n_f1, _n_f0, _r_f1, _r_f0, _m_f1, _m_f0;&t;&t;&bslash;&n;    if (_FP_FRAC_GT_2(X, Y))&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_n_f2 = X##_f1 &gt;&gt; 1;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_n_f1 = X##_f1 &lt;&lt; (_FP_W_TYPE_SIZE - 1) | X##_f0 &gt;&gt; 1;&t;&t;&bslash;&n;&t;_n_f0 = X##_f0 &lt;&lt; (_FP_W_TYPE_SIZE - 1);&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;R##_e--;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_n_f2 = X##_f1;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_n_f1 = X##_f0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_n_f0 = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    /* Normalize, i.e. make the most significant bit of the &t;&t;&bslash;&n;       denominator set. */&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_SLL_2(Y, _FP_WFRACXBITS_##fs);&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    udiv_qrnnd(R##_f1, _r_f1, _n_f2, _n_f1, Y##_f1);&t;&t;&t;&bslash;&n;    umul_ppmm(_m_f1, _m_f0, R##_f1, Y##_f0);&t;&t;&t;&t;&bslash;&n;    _r_f0 = _n_f0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_FP_FRAC_GT_2(_m, _r))&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;R##_f1--;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_ADD_2(_r, Y, _r);&t;&t;&t;&t;&t;&bslash;&n;&t;if (_FP_FRAC_GE_2(_r, Y) &amp;&amp; _FP_FRAC_GT_2(_m, _r))&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    R##_f1--;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    _FP_FRAC_ADD_2(_r, Y, _r);&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_DEC_2(_r, _m);&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_r_f1 == Y##_f1)&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;/* This is a special case, not an optimization&t;&t;&t;&bslash;&n;&t;   (_r/Y##_f1 would not fit into UWtype).&t;&t;&t;&bslash;&n;&t;   As _r is guaranteed to be &lt; Y,  R##_f0 can be either&t;&t;&bslash;&n;&t;   (UWtype)-1 or (UWtype)-2.  But as we know what kind&t;&t;&bslash;&n;&t;   of bits it is (sticky, guard, round),  we don&squot;t care.&t;&bslash;&n;&t;   We also don&squot;t care what the reminder is,  because the&t;&bslash;&n;&t;   guard bit will be set anyway.  -jj */&t;&t;&t;&bslash;&n;&t;R##_f0 = -1;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;udiv_qrnnd(R##_f0, _r_f1, _r_f1, _r_f0, Y##_f1);&t;&t;&bslash;&n;&t;umul_ppmm(_m_f1, _m_f0, R##_f0, Y##_f0);&t;&t;&t;&bslash;&n;&t;_r_f0 = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (_FP_FRAC_GT_2(_m, _r))&t;&t;&t;&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    R##_f0--;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    _FP_FRAC_ADD_2(_r, Y, _r);&t;&t;&t;&t;&t;&bslash;&n;&t;    if (_FP_FRAC_GE_2(_r, Y) &amp;&amp; _FP_FRAC_GT_2(_m, _r))&t;&t;&bslash;&n;&t;      {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;R##_f0--;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;_FP_FRAC_ADD_2(_r, Y, _r);&t;&t;&t;&t;&bslash;&n;&t;      }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (!_FP_FRAC_EQ_2(_r, _m))&t;&t;&t;&t;&t;&bslash;&n;&t;  R##_f0 |= _FP_WORK_STICKY;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_DIV_MEAT_2_gmp
mdefine_line|#define _FP_DIV_MEAT_2_gmp(fs, R, X, Y)&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_W_TYPE _x[4], _y[2], _z[4];&t;&t;&t;&t;&t;&bslash;&n;    _y[0] = Y##_f0; _y[1] = Y##_f1;&t;&t;&t;&t;&t;&bslash;&n;    _x[0] = _x[3] = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (_FP_FRAC_GT_2(X, Y))&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;R##_e++;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_x[1] = (X##_f0 &lt;&lt; (_FP_WFRACBITS_##fs-1 - _FP_W_TYPE_SIZE) |&t;&bslash;&n;&t;&t; X##_f1 &gt;&gt; (_FP_W_TYPE_SIZE -&t;&t;&t;&t;&bslash;&n;&t;&t;&t;    (_FP_WFRACBITS_##fs-1 - _FP_W_TYPE_SIZE)));&t;&bslash;&n;&t;_x[2] = X##_f1 &lt;&lt; (_FP_WFRACBITS_##fs-1 - _FP_W_TYPE_SIZE);&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_x[1] = (X##_f0 &lt;&lt; (_FP_WFRACBITS_##fs - _FP_W_TYPE_SIZE) |&t;&bslash;&n;&t;&t; X##_f1 &gt;&gt; (_FP_W_TYPE_SIZE -&t;&t;&t;&t;&bslash;&n;&t;&t;&t;    (_FP_WFRACBITS_##fs - _FP_W_TYPE_SIZE)));&t;&bslash;&n;&t;_x[2] = X##_f1 &lt;&lt; (_FP_WFRACBITS_##fs - _FP_W_TYPE_SIZE);&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    (void) mpn_divrem (_z, 0, _x, 4, _y, 2);&t;&t;&t;&t;&bslash;&n;    R##_f1 = _z[1];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    R##_f0 = _z[0] | ((_x[0] | _x[1]) != 0);&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Square root algorithms:&n; * We have just one right now, maybe Newton approximation&n; * should be added for those machines where division is fast.&n; */
DECL|macro|_FP_SQRT_MEAT_2
mdefine_line|#define _FP_SQRT_MEAT_2(R, S, T, X, q)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    while (q)&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f1 = S##_f1 + q;&t;&t;&t;&t;&bslash;&n;&t;if (T##_f1 &lt;= X##_f1)&t;&t;&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    S##_f1 = T##_f1 + q;&t;&t;&t;&bslash;&n;&t;    X##_f1 -= T##_f1;&t;&t;&t;&t;&bslash;&n;&t;    R##_f1 += q;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_SLL_2(X, 1);&t;&t;&t;&t;&bslash;&n;&t;q &gt;&gt;= 1;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    q = (_FP_W_TYPE)1 &lt;&lt; (_FP_W_TYPE_SIZE - 1);&t;&t;&bslash;&n;    while (q != _FP_WORK_ROUND)&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f0 = S##_f0 + q;&t;&t;&t;&t;&bslash;&n;&t;T##_f1 = S##_f1;&t;&t;&t;&t;&bslash;&n;&t;if (T##_f1 &lt; X##_f1 || &t;&t;&t;&t;&bslash;&n;&t;    (T##_f1 == X##_f1 &amp;&amp; T##_f0 &lt;= X##_f0))&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    S##_f0 = T##_f0 + q;&t;&t;&t;&bslash;&n;&t;    S##_f1 += (T##_f0 &gt; S##_f0);&t;&t;&bslash;&n;&t;    _FP_FRAC_DEC_2(X, T);&t;&t;&t;&bslash;&n;&t;    R##_f0 += q;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_SLL_2(X, 1);&t;&t;&t;&t;&bslash;&n;&t;q &gt;&gt;= 1;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (X##_f0 | X##_f1)&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (S##_f1 &lt; X##_f1 || &t;&t;&t;&t;&bslash;&n;&t;    (S##_f1 == X##_f1 &amp;&amp; S##_f0 &lt; X##_f0))&t;&bslash;&n;&t;  R##_f0 |= _FP_WORK_ROUND;&t;&t;&t;&bslash;&n;&t;R##_f0 |= _FP_WORK_STICKY;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Assembly/disassembly for converting to/from integral types.  &n; * No shifting or overflow handled here.&n; */
DECL|macro|_FP_FRAC_ASSEMBLE_2
mdefine_line|#define _FP_FRAC_ASSEMBLE_2(r, X, rsize)&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&bslash;&n;    if (rsize &lt;= _FP_W_TYPE_SIZE)&t;&t;&bslash;&n;      r = X##_f0;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&bslash;&n;&t;r = X##_f1;&t;&t;&t;&t;&bslash;&n;&t;r &lt;&lt;= _FP_W_TYPE_SIZE;&t;&t;&t;&bslash;&n;&t;r += X##_f0;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_FRAC_DISASSEMBLE_2
mdefine_line|#define _FP_FRAC_DISASSEMBLE_2(X, r, rsize)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f0 = r;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f1 = (rsize &lt;= _FP_W_TYPE_SIZE ? 0 : r &gt;&gt; _FP_W_TYPE_SIZE);&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Convert FP values between word sizes&n; */
DECL|macro|_FP_FRAC_CONV_1_2
mdefine_line|#define _FP_FRAC_CONV_1_2(dfs, sfs, D, S)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (S##_c != FP_CLS_NAN)&t;&t;&t;&t;&t;&t;&bslash;&n;      _FP_FRAC_SRS_2(S, (_FP_WFRACBITS_##sfs - _FP_WFRACBITS_##dfs),&t;&bslash;&n;&t;&t;     _FP_WFRACBITS_##sfs);&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      _FP_FRAC_SRL_2(S, (_FP_WFRACBITS_##sfs - _FP_WFRACBITS_##dfs));&t;&bslash;&n;    D##_f = S##_f0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_FRAC_CONV_2_1
mdefine_line|#define _FP_FRAC_CONV_2_1(dfs, sfs, D, S)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    D##_f0 = S##_f;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    D##_f1 = 0;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_FRAC_SLL_2(D, (_FP_WFRACBITS_##dfs - _FP_WFRACBITS_##sfs));&t;&bslash;&n;  } while (0)
eof
