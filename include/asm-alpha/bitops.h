macro_line|#ifndef _ALPHA_BITOPS_H
DECL|macro|_ALPHA_BITOPS_H
mdefine_line|#define _ALPHA_BITOPS_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
multiline_comment|/*&n; * Copyright 1994, Linus Torvalds.&n; */
multiline_comment|/*&n; * These have to be done with inline assembly: that way the bit-setting&n; * is guaranteed to be atomic. All bit operations return 0 if the bit&n; * was cleared before the operation and != 0 if it was not.&n; *&n; * To get proper branch prediction for the main line, we must branch&n; * forward to code at the end of this object&squot;s .text section, then&n; * branch back to restart the operation.&n; *&n; * bit 0 is the LSB of addr; bit 64 is the LSB of (addr+1).&n; */
r_extern
id|__inline__
r_void
DECL|function|set_bit
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|temp
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldl_l %0,%3&bslash;n&quot;
l_string|&quot;&t;bis %0,%2,%0&bslash;n&quot;
l_string|&quot;&t;stl_c %0,%1&bslash;n&quot;
l_string|&quot;&t;beq %0,2f&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br 1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * WARNING: non atomic version.&n; */
r_extern
id|__inline__
r_void
DECL|function|__set_bit
id|__set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
op_star
id|m
op_or_assign
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
suffix:semicolon
)brace
DECL|macro|smp_mb__before_clear_bit
mdefine_line|#define smp_mb__before_clear_bit()&t;smp_mb()
DECL|macro|smp_mb__after_clear_bit
mdefine_line|#define smp_mb__after_clear_bit()&t;smp_mb()
r_extern
id|__inline__
r_void
DECL|function|clear_bit
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|temp
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldl_l %0,%3&bslash;n&quot;
l_string|&quot;&t;and %0,%2,%0&bslash;n&quot;
l_string|&quot;&t;stl_c %0,%1&bslash;n&quot;
l_string|&quot;&t;beq %0,2f&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br 1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
op_complement
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
r_extern
id|__inline__
r_void
DECL|function|change_bit
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|temp
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldl_l %0,%3&bslash;n&quot;
l_string|&quot;&t;xor %0,%2,%0&bslash;n&quot;
l_string|&quot;&t;stl_c %0,%1&bslash;n&quot;
l_string|&quot;&t;beq %0,2f&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;2:&t;br 1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
)paren
suffix:semicolon
)brace
r_extern
id|__inline__
r_int
DECL|function|test_and_set_bit
id|test_and_set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldl_l %0,%4&bslash;n&quot;
l_string|&quot;&t;and %0,%3,%2&bslash;n&quot;
l_string|&quot;&t;bne %2,2f&bslash;n&quot;
l_string|&quot;&t;xor %0,%3,%0&bslash;n&quot;
l_string|&quot;&t;stl_c %0,%1&bslash;n&quot;
l_string|&quot;&t;beq %0,3f&bslash;n&quot;
l_string|&quot;2:&bslash;n&quot;
macro_line|#ifdef CONFIG_SMP
l_string|&quot;&t;mb&bslash;n&quot;
macro_line|#endif
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;3:&t;br 1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * WARNING: non atomic version.&n; */
r_extern
id|__inline__
r_int
DECL|function|__test_and_set_bit
id|__test_and_set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
id|old
op_assign
op_star
id|m
suffix:semicolon
op_star
id|m
op_assign
id|old
op_or
id|mask
suffix:semicolon
r_return
(paren
id|old
op_amp
id|mask
)paren
op_ne
l_int|0
suffix:semicolon
)brace
r_extern
id|__inline__
r_int
DECL|function|test_and_clear_bit
id|test_and_clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldl_l %0,%4&bslash;n&quot;
l_string|&quot;&t;and %0,%3,%2&bslash;n&quot;
l_string|&quot;&t;beq %2,2f&bslash;n&quot;
l_string|&quot;&t;xor %0,%3,%0&bslash;n&quot;
l_string|&quot;&t;stl_c %0,%1&bslash;n&quot;
l_string|&quot;&t;beq %0,3f&bslash;n&quot;
l_string|&quot;2:&bslash;n&quot;
macro_line|#ifdef CONFIG_SMP
l_string|&quot;&t;mb&bslash;n&quot;
macro_line|#endif
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;3:&t;br 1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * WARNING: non atomic version.&n; */
r_extern
id|__inline__
r_int
DECL|function|__test_and_clear_bit
id|__test_and_clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|mask
op_assign
l_int|1
op_lshift
(paren
id|nr
op_amp
l_int|0x1f
)paren
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
r_int
id|old
op_assign
op_star
id|m
suffix:semicolon
op_star
id|m
op_assign
id|old
op_amp
op_complement
id|mask
suffix:semicolon
r_return
(paren
id|old
op_amp
id|mask
)paren
op_ne
l_int|0
suffix:semicolon
)brace
r_extern
id|__inline__
r_int
DECL|function|test_and_change_bit
id|test_and_change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
r_int
op_star
id|m
op_assign
(paren
(paren
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|nr
op_rshift
l_int|5
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldl_l %0,%4&bslash;n&quot;
l_string|&quot;&t;and %0,%3,%2&bslash;n&quot;
l_string|&quot;&t;xor %0,%3,%0&bslash;n&quot;
l_string|&quot;&t;stl_c %0,%1&bslash;n&quot;
l_string|&quot;&t;beq %0,3f&bslash;n&quot;
macro_line|#ifdef CONFIG_SMP
l_string|&quot;&t;mb&bslash;n&quot;
macro_line|#endif
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;3:&t;br 1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
op_star
id|m
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
op_star
id|m
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|oldbit
op_ne
l_int|0
suffix:semicolon
)brace
r_extern
id|__inline__
r_int
DECL|function|test_bit
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_volatile
r_void
op_star
id|addr
)paren
(brace
r_return
(paren
l_int|1UL
op_amp
(paren
(paren
(paren
r_const
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|5
)braket
op_rshift
(paren
id|nr
op_amp
l_int|31
)paren
)paren
)paren
op_ne
l_int|0UL
suffix:semicolon
)brace
multiline_comment|/*&n; * ffz = Find First Zero in word. Undefined if no zero exists,&n; * so code should check against ~0UL first..&n; *&n; * Do a binary search on the bits.  Due to the nature of large&n; * constants on the alpha, it is worthwhile to split the search.&n; */
DECL|function|ffz_b
r_extern
r_inline
r_int
r_int
id|ffz_b
c_func
(paren
r_int
r_int
id|x
)paren
(brace
r_int
r_int
id|sum
op_assign
l_int|0
suffix:semicolon
id|x
op_assign
op_complement
id|x
op_amp
op_minus
op_complement
id|x
suffix:semicolon
multiline_comment|/* set first 0 bit, clear others */
r_if
c_cond
(paren
id|x
op_amp
l_int|0xF0
)paren
id|sum
op_add_assign
l_int|4
suffix:semicolon
r_if
c_cond
(paren
id|x
op_amp
l_int|0xCC
)paren
id|sum
op_add_assign
l_int|2
suffix:semicolon
r_if
c_cond
(paren
id|x
op_amp
l_int|0xAA
)paren
id|sum
op_add_assign
l_int|1
suffix:semicolon
r_return
id|sum
suffix:semicolon
)brace
DECL|function|ffz
r_extern
r_inline
r_int
r_int
id|ffz
c_func
(paren
r_int
r_int
id|word
)paren
(brace
macro_line|#if defined(__alpha_cix__) &amp;&amp; defined(__alpha_fix__)
multiline_comment|/* Whee.  EV67 can calculate it directly.  */
r_int
r_int
id|result
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;cttz %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
op_complement
id|word
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
macro_line|#else
r_int
r_int
id|bits
comma
id|qofs
comma
id|bofs
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;cmpbge %1,%2,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|bits
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|word
)paren
comma
l_string|&quot;r&quot;
(paren
op_complement
l_int|0UL
)paren
)paren
suffix:semicolon
id|qofs
op_assign
id|ffz_b
c_func
(paren
id|bits
)paren
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;extbl %1,%2,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|bits
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|word
)paren
comma
l_string|&quot;r&quot;
(paren
id|qofs
)paren
)paren
suffix:semicolon
id|bofs
op_assign
id|ffz_b
c_func
(paren
id|bits
)paren
suffix:semicolon
r_return
id|qofs
op_star
l_int|8
op_plus
id|bofs
suffix:semicolon
macro_line|#endif
)brace
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; * ffs: find first bit set. This is defined the same way as&n; * the libc and compiler builtin ffs routines, therefore&n; * differs in spirit from the above ffz (man ffs).&n; */
DECL|function|ffs
r_extern
r_inline
r_int
id|ffs
c_func
(paren
r_int
id|word
)paren
(brace
r_int
id|result
op_assign
id|ffz
c_func
(paren
op_complement
id|word
)paren
suffix:semicolon
r_return
id|word
ques
c_cond
id|result
op_plus
l_int|1
suffix:colon
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * hweightN: returns the hamming weight (i.e. the number&n; * of bits set) of a N-bit word&n; */
macro_line|#if defined(__alpha_cix__) &amp;&amp; defined(__alpha_fix__)
multiline_comment|/* Whee.  EV67 can calculate it directly.  */
DECL|function|hweight64
r_extern
id|__inline__
r_int
r_int
id|hweight64
c_func
(paren
r_int
r_int
id|w
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;ctpop %1,%0&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|w
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
DECL|macro|hweight32
mdefine_line|#define hweight32(x) hweight64((x) &amp; 0xfffffffful)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) hweight64((x) &amp; 0xfffful)
DECL|macro|hweight8
mdefine_line|#define hweight8(x)  hweight64((x) &amp; 0xfful)
macro_line|#else
DECL|macro|hweight32
mdefine_line|#define hweight32(x) generic_hweight32(x)
DECL|macro|hweight16
mdefine_line|#define hweight16(x) generic_hweight16(x)
DECL|macro|hweight8
mdefine_line|#define hweight8(x)  generic_hweight8(x)
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
multiline_comment|/*&n; * Find next zero bit in a bitmap reasonably efficiently..&n; */
r_extern
r_inline
r_int
r_int
DECL|function|find_next_zero_bit
id|find_next_zero_bit
c_func
(paren
r_void
op_star
id|addr
comma
r_int
r_int
id|size
comma
r_int
r_int
id|offset
)paren
(brace
r_int
r_int
op_star
id|p
op_assign
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
op_plus
(paren
id|offset
op_rshift
l_int|6
)paren
suffix:semicolon
r_int
r_int
id|result
op_assign
id|offset
op_amp
op_complement
l_int|63UL
suffix:semicolon
r_int
r_int
id|tmp
suffix:semicolon
r_if
c_cond
(paren
id|offset
op_ge
id|size
)paren
r_return
id|size
suffix:semicolon
id|size
op_sub_assign
id|result
suffix:semicolon
id|offset
op_and_assign
l_int|63UL
suffix:semicolon
r_if
c_cond
(paren
id|offset
)paren
(brace
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
suffix:semicolon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_rshift
(paren
l_int|64
op_minus
id|offset
)paren
suffix:semicolon
r_if
c_cond
(paren
id|size
OL
l_int|64
)paren
r_goto
id|found_first
suffix:semicolon
r_if
c_cond
(paren
op_complement
id|tmp
)paren
r_goto
id|found_middle
suffix:semicolon
id|size
op_sub_assign
l_int|64
suffix:semicolon
id|result
op_add_assign
l_int|64
suffix:semicolon
)brace
r_while
c_loop
(paren
id|size
op_amp
op_complement
l_int|63UL
)paren
(brace
r_if
c_cond
(paren
op_complement
(paren
id|tmp
op_assign
op_star
(paren
id|p
op_increment
)paren
)paren
)paren
r_goto
id|found_middle
suffix:semicolon
id|result
op_add_assign
l_int|64
suffix:semicolon
id|size
op_sub_assign
l_int|64
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id|size
)paren
r_return
id|result
suffix:semicolon
id|tmp
op_assign
op_star
id|p
suffix:semicolon
id|found_first
suffix:colon
id|tmp
op_or_assign
op_complement
l_int|0UL
op_lshift
id|size
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_eq
op_complement
l_int|0UL
)paren
multiline_comment|/* Are any bits zero? */
r_return
id|result
op_plus
id|size
suffix:semicolon
multiline_comment|/* Nope. */
id|found_middle
suffix:colon
r_return
id|result
op_plus
id|ffz
c_func
(paren
id|tmp
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * The optimizer actually does good code for this case..&n; */
DECL|macro|find_first_zero_bit
mdefine_line|#define find_first_zero_bit(addr, size) &bslash;&n;&t;find_next_zero_bit((addr), (size), 0)
macro_line|#ifdef __KERNEL__
DECL|macro|ext2_set_bit
mdefine_line|#define ext2_set_bit                 __test_and_set_bit
DECL|macro|ext2_clear_bit
mdefine_line|#define ext2_clear_bit               __test_and_clear_bit
DECL|macro|ext2_test_bit
mdefine_line|#define ext2_test_bit                test_bit
DECL|macro|ext2_find_first_zero_bit
mdefine_line|#define ext2_find_first_zero_bit     find_first_zero_bit
DECL|macro|ext2_find_next_zero_bit
mdefine_line|#define ext2_find_next_zero_bit      find_next_zero_bit
multiline_comment|/* Bitmap functions for the minix filesystem.  */
DECL|macro|minix_test_and_set_bit
mdefine_line|#define minix_test_and_set_bit(nr,addr) __test_and_set_bit(nr,addr)
DECL|macro|minix_set_bit
mdefine_line|#define minix_set_bit(nr,addr) __set_bit(nr,addr)
DECL|macro|minix_test_and_clear_bit
mdefine_line|#define minix_test_and_clear_bit(nr,addr) __test_and_clear_bit(nr,addr)
DECL|macro|minix_test_bit
mdefine_line|#define minix_test_bit(nr,addr) test_bit(nr,addr)
DECL|macro|minix_find_first_zero_bit
mdefine_line|#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _ALPHA_BITOPS_H */
eof
