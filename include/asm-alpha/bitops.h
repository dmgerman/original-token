macro_line|#ifndef _ALPHA_BITOPS_H
DECL|macro|_ALPHA_BITOPS_H
mdefine_line|#define _ALPHA_BITOPS_H
multiline_comment|/*&n; * Copyright 1994, Linus Torvalds.&n; */
multiline_comment|/*&n; * These have to be done with inline assembly: that way the bit-setting&n; * is guaranteed to be atomic. All bit operations return 0 if the bit&n; * was cleared before the operation and != 0 if it was not.&n; *&n; * bit 0 is the LSB of addr; bit 64 is the LSB of (addr+1).&n; */
DECL|function|set_bit
r_extern
id|__inline__
r_int
r_int
id|set_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n1:&bslash;t&quot;
l_string|&quot;ldq_l %0,%1&bslash;n&bslash;t&quot;
l_string|&quot;and %0,%3,%2&bslash;n&bslash;t&quot;
l_string|&quot;bne %2,2f&bslash;n&bslash;t&quot;
l_string|&quot;xor %0,%3,%0&bslash;n&bslash;t&quot;
l_string|&quot;stq_c %0,%1&bslash;n&bslash;t&quot;
l_string|&quot;beq %0,1b&bslash;n&quot;
l_string|&quot;2:&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|63
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|clear_bit
r_extern
id|__inline__
r_int
r_int
id|clear_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n1:&bslash;t&quot;
l_string|&quot;ldq_l %0,%1&bslash;n&bslash;t&quot;
l_string|&quot;and %0,%3,%2&bslash;n&bslash;t&quot;
l_string|&quot;beq %2,2f&bslash;n&bslash;t&quot;
l_string|&quot;xor %0,%3,%0&bslash;n&bslash;t&quot;
l_string|&quot;stq_c %0,%1&bslash;n&bslash;t&quot;
l_string|&quot;beq %0,1b&bslash;n&quot;
l_string|&quot;2:&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|63
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|change_bit
r_extern
id|__inline__
r_int
r_int
id|change_bit
c_func
(paren
r_int
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|oldbit
suffix:semicolon
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&bslash;n1:&bslash;t&quot;
l_string|&quot;ldq_l %0,%1&bslash;n&bslash;t&quot;
l_string|&quot;and %0,%3,%2&bslash;n&bslash;t&quot;
l_string|&quot;xor %0,%3,%0&bslash;n&bslash;t&quot;
l_string|&quot;stq_c %0,%1&bslash;n&bslash;t&quot;
l_string|&quot;beq %0,1b&bslash;n&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|oldbit
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|63
)paren
)paren
comma
l_string|&quot;m&quot;
(paren
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
)paren
)paren
suffix:semicolon
r_return
id|oldbit
suffix:semicolon
)brace
DECL|function|test_bit
r_extern
id|__inline__
r_int
r_int
id|test_bit
c_func
(paren
r_int
id|nr
comma
r_void
op_star
id|addr
)paren
(brace
r_return
(paren
l_int|1UL
op_lshift
(paren
id|nr
op_amp
l_int|63
)paren
)paren
op_amp
(paren
(paren
r_int
r_int
op_star
)paren
id|addr
)paren
(braket
id|nr
op_rshift
l_int|6
)braket
suffix:semicolon
)brace
macro_line|#endif /* _ALPHA_BITOPS_H */
eof
