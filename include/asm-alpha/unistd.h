macro_line|#ifndef _ALPHA_UNISTD_H
DECL|macro|_ALPHA_UNISTD_H
mdefine_line|#define _ALPHA_UNISTD_H
multiline_comment|/*&n; * &quot;.long 131&quot; is &quot;PAL_callsys&quot;..&n; *&n; * Duh, the alpha gcc compiler doesn&squot;t allow us to specify regs&n; * yet. I&squot;ll have to see about this later..&n; */
multiline_comment|/* XXX - _foo needs to be __foo, while __NR_bar could be _NR_bar. */
DECL|macro|_syscall0
mdefine_line|#define _syscall0(type,name) &bslash;&n;type name(void) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall1
mdefine_line|#define _syscall1(type,name,type1,arg1) &bslash;&n;type name(type1 arg1) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall2
mdefine_line|#define _syscall2(type,name,type1,arg1,type2,arg2) &bslash;&n;type name(type1 arg1,type2 arg2) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall3
mdefine_line|#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) &bslash;&n;type name(type1 arg1,type2 arg2,type3 arg3) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall4
mdefine_line|#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) &bslash;&n;type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;} 
DECL|macro|_syscall5
mdefine_line|#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, &bslash;&n;&t;  type5,arg5) &bslash;&n;type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
macro_line|#ifdef __KERNEL_SYSCALLS__
r_extern
r_int
r_int
id|kernel_fork
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|fork
r_static
r_inline
r_int
r_int
id|fork
c_func
(paren
r_void
)paren
(brace
r_return
id|kernel_fork
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_void
id|sys_idle
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|idle
r_static
r_inline
r_void
id|idle
c_func
(paren
r_void
)paren
(brace
id|sys_idle
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_setup
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|setup
r_static
r_inline
r_int
id|setup
c_func
(paren
r_void
)paren
(brace
r_return
id|sys_setup
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_open
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|function|open
r_static
r_inline
r_int
id|open
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_int
id|mode
comma
r_int
id|flags
)paren
(brace
r_return
id|sys_open
c_func
(paren
id|name
comma
id|mode
comma
id|flags
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_dup
c_func
(paren
r_int
)paren
suffix:semicolon
DECL|function|dup
r_static
r_inline
r_int
id|dup
c_func
(paren
r_int
id|fd
)paren
(brace
r_return
id|sys_dup
c_func
(paren
id|fd
)paren
suffix:semicolon
)brace
DECL|function|close
r_static
r_inline
r_int
id|close
c_func
(paren
r_int
id|fd
)paren
(brace
r_return
id|sys_close
c_func
(paren
id|fd
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_exit
c_func
(paren
r_int
)paren
suffix:semicolon
DECL|function|_exit
r_static
r_inline
r_int
id|_exit
c_func
(paren
r_int
id|value
)paren
(brace
r_return
id|sys_exit
c_func
(paren
id|value
)paren
suffix:semicolon
)brace
DECL|macro|exit
mdefine_line|#define exit(x) _exit(x)
r_extern
r_int
id|sys_write
c_func
(paren
r_int
comma
r_const
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|write
r_static
r_inline
r_int
id|write
c_func
(paren
r_int
id|fd
comma
r_const
r_char
op_star
id|buf
comma
r_int
id|nr
)paren
(brace
r_return
id|sys_write
c_func
(paren
id|fd
comma
id|buf
comma
id|nr
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_read
c_func
(paren
r_int
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|read
r_static
r_inline
r_int
id|read
c_func
(paren
r_int
id|fd
comma
r_char
op_star
id|buf
comma
r_int
id|nr
)paren
(brace
r_return
id|sys_read
c_func
(paren
id|fd
comma
id|buf
comma
id|nr
)paren
suffix:semicolon
)brace
r_extern
r_int
id|do_execve
c_func
(paren
r_char
op_star
comma
r_char
op_star
op_star
comma
r_char
op_star
op_star
comma
r_struct
id|pt_regs
op_star
)paren
suffix:semicolon
r_extern
r_void
id|ret_from_sys_call
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|execve
r_static
r_inline
r_int
id|execve
c_func
(paren
r_char
op_star
id|file
comma
r_char
op_star
op_star
id|argvp
comma
r_char
op_star
op_star
id|envp
)paren
(brace
r_int
id|i
suffix:semicolon
r_struct
id|pt_regs
id|regs
suffix:semicolon
id|memset
c_func
(paren
op_amp
id|regs
comma
l_int|0
comma
r_sizeof
(paren
id|regs
)paren
)paren
suffix:semicolon
id|i
op_assign
id|do_execve
c_func
(paren
id|file
comma
id|argvp
comma
id|envp
comma
op_amp
id|regs
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|i
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;bis %0,%0,$30&bslash;n&bslash;t&quot;
l_string|&quot;bis %1,%1,$26&bslash;n&bslash;t&quot;
l_string|&quot;ret $31,($26),1&bslash;n&bslash;t&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
op_amp
id|regs
)paren
comma
l_string|&quot;r&quot;
(paren
id|ret_from_sys_call
)paren
)paren
suffix:semicolon
)brace
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_extern
r_int
id|sys_setsid
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|setsid
r_static
r_inline
r_int
id|setsid
c_func
(paren
r_void
)paren
(brace
r_return
id|sys_setsid
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_sync
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|sync
r_static
r_inline
r_int
id|sync
c_func
(paren
r_void
)paren
(brace
r_return
id|sys_sync
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_waitpid
c_func
(paren
r_int
comma
r_int
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|waitpid
r_static
r_inline
id|pid_t
id|waitpid
c_func
(paren
r_int
id|pid
comma
r_int
op_star
id|wait_stat
comma
r_int
id|flags
)paren
(brace
r_return
id|sys_waitpid
c_func
(paren
id|pid
comma
id|wait_stat
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|wait
r_static
r_inline
id|pid_t
id|wait
c_func
(paren
r_int
op_star
id|wait_stat
)paren
(brace
r_return
id|waitpid
c_func
(paren
op_minus
l_int|1
comma
id|wait_stat
comma
l_int|0
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* _ALPHA_UNISTD_H */
eof
