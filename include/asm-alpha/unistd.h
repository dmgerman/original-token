macro_line|#ifndef _ALPHA_UNISTD_H
DECL|macro|_ALPHA_UNISTD_H
mdefine_line|#define _ALPHA_UNISTD_H
multiline_comment|/*&n; * &quot;.long 131&quot; is &quot;PAL_callsys&quot;..&n; *&n; * Duh, the alpha gcc compiler doesn&squot;t allow us to specify regs&n; * yet. I&squot;ll have to see about this later..&n; */
multiline_comment|/* XXX - _foo needs to be __foo, while __NR_bar could be _NR_bar. */
DECL|macro|_syscall0
mdefine_line|#define _syscall0(type,name) &bslash;&n;type name(void) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall1
mdefine_line|#define _syscall1(type,name,type1,arg1) &bslash;&n;type name(type1 arg1) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall2
mdefine_line|#define _syscall2(type,name,type1,arg1,type2,arg2) &bslash;&n;type name(type1 arg1,type2 arg2) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall3
mdefine_line|#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) &bslash;&n;type name(type1 arg1,type2 arg2,type3 arg3) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
DECL|macro|_syscall4
mdefine_line|#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) &bslash;&n;type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;} 
DECL|macro|_syscall5
mdefine_line|#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, &bslash;&n;&t;  type5,arg5) &bslash;&n;type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) &bslash;&n;{ &bslash;&n;&t;return (type) -1; &bslash;&n;}
macro_line|#ifdef __KERNEL_SYSCALLS__
r_extern
r_int
r_int
id|kernel_fork
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|fork
r_static
r_inline
r_int
r_int
id|fork
c_func
(paren
r_void
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;[%d]fork()&bslash;n&quot;
comma
id|current-&gt;pid
)paren
suffix:semicolon
r_return
id|kernel_fork
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_void
id|sys_idle
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|idle
r_static
r_inline
r_void
id|idle
c_func
(paren
r_void
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;[%d]idle()&bslash;n&quot;
comma
id|current-&gt;pid
)paren
suffix:semicolon
id|sys_idle
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
(brace
suffix:semicolon
)brace
)brace
r_extern
r_int
id|sys_setup
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|setup
r_static
r_inline
r_int
id|setup
c_func
(paren
r_void
)paren
(brace
r_int
id|retval
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]setup()&bslash;n&quot;
comma
id|current-&gt;pid
)paren
suffix:semicolon
id|retval
op_assign
id|sys_setup
c_func
(paren
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]setup() returned %d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|retval
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_open
c_func
(paren
r_const
r_char
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
DECL|function|open
r_static
r_inline
r_int
id|open
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_int
id|mode
comma
r_int
id|flags
)paren
(brace
r_int
id|fd
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]open(%s,%d,%d)&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|name
comma
id|mode
comma
id|flags
)paren
suffix:semicolon
id|fd
op_assign
id|sys_open
c_func
(paren
id|name
comma
id|mode
comma
id|flags
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]open(%s,%d,%d)=%d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|name
comma
id|mode
comma
id|flags
comma
id|fd
)paren
suffix:semicolon
r_return
id|fd
suffix:semicolon
)brace
r_extern
r_int
id|sys_dup
c_func
(paren
r_int
)paren
suffix:semicolon
DECL|function|dup
r_static
r_inline
r_int
id|dup
c_func
(paren
r_int
id|fd
)paren
(brace
r_int
id|newfd
op_assign
id|sys_dup
c_func
(paren
id|fd
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]dup(%d)=%d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|fd
comma
id|newfd
)paren
suffix:semicolon
r_return
id|newfd
suffix:semicolon
)brace
DECL|function|close
r_static
r_inline
r_int
id|close
c_func
(paren
r_int
id|fd
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;[%d]close(%d)&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|fd
)paren
suffix:semicolon
r_return
id|sys_close
c_func
(paren
id|fd
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_exit
c_func
(paren
r_int
)paren
suffix:semicolon
DECL|function|_exit
r_static
r_inline
r_int
id|_exit
c_func
(paren
r_int
id|value
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;[%d]_exit(%d)&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|value
)paren
suffix:semicolon
r_return
id|sys_exit
c_func
(paren
id|value
)paren
suffix:semicolon
)brace
DECL|macro|exit
mdefine_line|#define exit(x) _exit(x)
r_extern
r_int
id|sys_write
c_func
(paren
r_int
comma
r_const
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|write
r_static
r_inline
r_int
id|write
c_func
(paren
r_int
id|fd
comma
r_const
r_char
op_star
id|buf
comma
r_int
id|nr
)paren
(brace
r_return
id|sys_write
c_func
(paren
id|fd
comma
id|buf
comma
id|nr
)paren
suffix:semicolon
)brace
r_extern
r_int
id|sys_read
c_func
(paren
r_int
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|read
r_static
r_inline
r_int
id|read
c_func
(paren
r_int
id|fd
comma
r_char
op_star
id|buf
comma
r_int
id|nr
)paren
(brace
r_int
id|res
op_assign
id|sys_read
c_func
(paren
id|fd
comma
id|buf
comma
id|nr
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]read(%d,%s,%d)=%d&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|fd
comma
id|buf
comma
id|nr
comma
id|res
)paren
suffix:semicolon
r_return
id|res
suffix:semicolon
)brace
DECL|macro|execve
mdefine_line|#define execve(x,y,z)&t;({ printk(&quot;[%d]execve(%s,%p,%p)&bslash;n&quot;,current-&gt;pid, x, y, z); -1; })
DECL|macro|waitpid
mdefine_line|#define waitpid(x,y,z)&t;sys_waitpid(x,y,z)
DECL|macro|setsid
mdefine_line|#define setsid()&t;({ printk(&quot;[%d]setsid()&bslash;n&quot;,current-&gt;pid); -1; })
DECL|macro|sync
mdefine_line|#define sync()&t;&t;({ printk(&quot;[%d]sync()&bslash;n&quot;,current-&gt;pid); -1; })
r_extern
r_int
id|sys_waitpid
c_func
(paren
r_int
comma
r_int
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|wait
r_static
r_inline
id|pid_t
id|wait
c_func
(paren
r_int
op_star
id|wait_stat
)paren
(brace
r_int
id|retval
comma
id|i
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]wait(%p)&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|wait_stat
)paren
suffix:semicolon
id|retval
op_assign
id|waitpid
c_func
(paren
op_minus
l_int|1
comma
id|wait_stat
comma
l_int|0
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%d]wait(%p) returned %ld&bslash;n&quot;
comma
id|current-&gt;pid
comma
id|wait_stat
comma
id|retval
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|1000000000
suffix:semicolon
id|i
op_increment
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* _ALPHA_UNISTD_H */
eof
