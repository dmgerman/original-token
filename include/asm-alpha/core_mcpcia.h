macro_line|#ifndef __ALPHA_MCPCIA__H__
DECL|macro|__ALPHA_MCPCIA__H__
mdefine_line|#define __ALPHA_MCPCIA__H__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/pci.h&gt;
macro_line|#include &lt;asm/compiler.h&gt;
multiline_comment|/*&n; * MCPCIA is the internal name for a core logic chipset which provides&n; * PCI access for the RAWHIDE family of systems.&n; *&n; * This file is based on:&n; *&n; * RAWHIDE System Programmer&squot;s Manual&n; * 16-May-96&n; * Rev. 1.4&n; *&n; */
multiline_comment|/*------------------------------------------------------------------------**&n;**                                                                        **&n;**  I/O procedures                                                        **&n;**                                                                        **&n;**      inport[b|w|t|l], outport[b|w|t|l] 8:16:24:32 IO xfers             **&n;**&t;inportbxt: 8 bits only                                            **&n;**      inport:    alias of inportw                                       **&n;**      outport:   alias of outportw                                      **&n;**                                                                        **&n;**      inmem[b|w|t|l], outmem[b|w|t|l] 8:16:24:32 ISA memory xfers       **&n;**&t;inmembxt: 8 bits only                                             **&n;**      inmem:    alias of inmemw                                         **&n;**      outmem:   alias of outmemw                                        **&n;**                                                                        **&n;**------------------------------------------------------------------------*/
multiline_comment|/* MCPCIA ADDRESS BIT DEFINITIONS&n; *&n; *  3333 3333 3322 2222 2222 1111 1111 11&n; *  9876 5432 1098 7654 3210 9876 5432 1098 7654 3210&n; *  ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&n; *  1                                             000&n; *  ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&n; *  |                                             |&bslash;|&n; *  |                               Byte Enable --+ |&n; *  |                             Transfer Length --+&n; *  +-- IO space, not cached&n; *&n; *   Byte      Transfer&n; *   Enable    Length    Transfer  Byte    Address&n; *   adr&lt;6:5&gt;  adr&lt;4:3&gt;  Length    Enable  Adder&n; *   ---------------------------------------------&n; *      00        00      Byte      1110   0x000&n; *      01        00      Byte      1101   0x020&n; *      10        00      Byte      1011   0x040&n; *      11        00      Byte      0111   0x060&n; *&n; *      00        01      Word      1100   0x008&n; *      01        01      Word      1001   0x028 &lt;= Not supported in this code.&n; *      10        01      Word      0011   0x048&n; *&n; *      00        10      Tribyte   1000   0x010&n; *      01        10      Tribyte   0001   0x030&n; *&n; *      10        11      Longword  0000   0x058&n; *&n; *      Note that byte enables are asserted low.&n; *&n; */
DECL|macro|MCPCIA_MEM_MASK
mdefine_line|#define MCPCIA_MEM_MASK 0x07ffffff /* SPARSE Mem region mask is 27 bits */
DECL|macro|MCPCIA_DMA_WIN_BASE_DEFAULT
mdefine_line|#define MCPCIA_DMA_WIN_BASE_DEFAULT    (2*1024*1024*1024U)
DECL|macro|MCPCIA_DMA_WIN_SIZE_DEFAULT
mdefine_line|#define MCPCIA_DMA_WIN_SIZE_DEFAULT    (2*1024*1024*1024U)
macro_line|#if defined(CONFIG_ALPHA_GENERIC) || defined(CONFIG_ALPHA_SRM_SETUP)
DECL|macro|MCPCIA_DMA_WIN_BASE
mdefine_line|#define MCPCIA_DMA_WIN_BASE&t;&t;alpha_mv.dma_win_base
DECL|macro|MCPCIA_DMA_WIN_SIZE
mdefine_line|#define MCPCIA_DMA_WIN_SIZE&t;&t;alpha_mv.dma_win_size
macro_line|#else
DECL|macro|MCPCIA_DMA_WIN_BASE
mdefine_line|#define MCPCIA_DMA_WIN_BASE&t;&t;MCPCIA_DMA_WIN_BASE_DEFAULT
DECL|macro|MCPCIA_DMA_WIN_SIZE
mdefine_line|#define MCPCIA_DMA_WIN_SIZE&t;&t;MCPCIA_DMA_WIN_SIZE_DEFAULT
macro_line|#endif
DECL|macro|HOSE
mdefine_line|#define HOSE(h) (((unsigned long)(h)) &lt;&lt; 33)
multiline_comment|/*&n; *  General Registers&n; */
DECL|macro|MCPCIA_REV
mdefine_line|#define MCPCIA_REV(h)&t;&t;(IDENT_ADDR + 0xf9e0000000UL + HOSE(h))
DECL|macro|MCPCIA_WHOAMI
mdefine_line|#define MCPCIA_WHOAMI(h)&t;(IDENT_ADDR + 0xf9e0000040UL + HOSE(h))
DECL|macro|MCPCIA_PCI_LAT
mdefine_line|#define MCPCIA_PCI_LAT(h)&t;(IDENT_ADDR + 0xf9e0000080UL + HOSE(h))
DECL|macro|MCPCIA_CAP_CTRL
mdefine_line|#define MCPCIA_CAP_CTRL(h)&t;(IDENT_ADDR + 0xf9e0000100UL + HOSE(h))
DECL|macro|MCPCIA_HAE_MEM
mdefine_line|#define MCPCIA_HAE_MEM(h)&t;(IDENT_ADDR + 0xf9e0000400UL + HOSE(h))
DECL|macro|MCPCIA_HAE_IO
mdefine_line|#define MCPCIA_HAE_IO(h)&t;(IDENT_ADDR + 0xf9e0000440UL + HOSE(h))
macro_line|#if 0
mdefine_line|#define MCPCIA_IACK_SC(h)&t;(IDENT_ADDR + 0xf9e0000480UL + HOSE(h))
macro_line|#endif
DECL|macro|MCPCIA_HAE_DENSE
mdefine_line|#define MCPCIA_HAE_DENSE(h)&t;(IDENT_ADDR + 0xf9e00004c0UL + HOSE(h))
multiline_comment|/*&n; * Interrupt Control registers&n; */
DECL|macro|MCPCIA_INT_CTL
mdefine_line|#define MCPCIA_INT_CTL(h)&t;(IDENT_ADDR + 0xf9e0000500UL + HOSE(h))
DECL|macro|MCPCIA_INT_REQ
mdefine_line|#define MCPCIA_INT_REQ(h)&t;(IDENT_ADDR + 0xf9e0000540UL + HOSE(h))
DECL|macro|MCPCIA_INT_TARG
mdefine_line|#define MCPCIA_INT_TARG(h)&t;(IDENT_ADDR + 0xf9e0000580UL + HOSE(h))
DECL|macro|MCPCIA_INT_ADR
mdefine_line|#define MCPCIA_INT_ADR(h)&t;(IDENT_ADDR + 0xf9e00005c0UL + HOSE(h))
DECL|macro|MCPCIA_INT_ADR_EXT
mdefine_line|#define MCPCIA_INT_ADR_EXT(h)&t;(IDENT_ADDR + 0xf9e0000600UL + HOSE(h))
DECL|macro|MCPCIA_INT_MASK0
mdefine_line|#define MCPCIA_INT_MASK0(h)&t;(IDENT_ADDR + 0xf9e0000640UL + HOSE(h))
DECL|macro|MCPCIA_INT_MASK1
mdefine_line|#define MCPCIA_INT_MASK1(h)&t;(IDENT_ADDR + 0xf9e0000680UL + HOSE(h))
DECL|macro|MCPCIA_INT_ACK0
mdefine_line|#define MCPCIA_INT_ACK0(h)&t;(IDENT_ADDR + 0xf9f0003f00UL + HOSE(h))
DECL|macro|MCPCIA_INT_ACK1
mdefine_line|#define MCPCIA_INT_ACK1(h)&t;(IDENT_ADDR + 0xf9e0003f40UL + HOSE(h))
multiline_comment|/*&n; * Performance Monitor registers&n; */
DECL|macro|MCPCIA_PERF_MONITOR
mdefine_line|#define MCPCIA_PERF_MONITOR(h)&t;(IDENT_ADDR + 0xf9e0000300UL + HOSE(h))
DECL|macro|MCPCIA_PERF_CONTROL
mdefine_line|#define MCPCIA_PERF_CONTROL(h)&t;(IDENT_ADDR + 0xf9e0000340UL + HOSE(h))
multiline_comment|/*&n; * Diagnostic Registers&n; */
DECL|macro|MCPCIA_CAP_DIAG
mdefine_line|#define MCPCIA_CAP_DIAG(h)&t;(IDENT_ADDR + 0xf9e0000700UL + HOSE(h))
DECL|macro|MCPCIA_TOP_OF_MEM
mdefine_line|#define MCPCIA_TOP_OF_MEM(h)&t;(IDENT_ADDR + 0xf9e00007c0UL + HOSE(h))
multiline_comment|/*&n; * Error registers&n; */
DECL|macro|MCPCIA_MC_ERR0
mdefine_line|#define MCPCIA_MC_ERR0(h)&t;(IDENT_ADDR + 0xf9e0000800UL + HOSE(h))
DECL|macro|MCPCIA_MC_ERR1
mdefine_line|#define MCPCIA_MC_ERR1(h)&t;(IDENT_ADDR + 0xf9e0000840UL + HOSE(h))
DECL|macro|MCPCIA_CAP_ERR
mdefine_line|#define MCPCIA_CAP_ERR(h)&t;(IDENT_ADDR + 0xf9e0000880UL + HOSE(h))
DECL|macro|MCPCIA_PCI_ERR1
mdefine_line|#define MCPCIA_PCI_ERR1(h)&t;(IDENT_ADDR + 0xf9e0001040UL + HOSE(h))
multiline_comment|/*&n; * PCI Address Translation Registers.&n; */
DECL|macro|MCPCIA_SG_TBIA
mdefine_line|#define MCPCIA_SG_TBIA(h)&t;(IDENT_ADDR + 0xf9e0001300UL + HOSE(h))
DECL|macro|MCPCIA_HBASE
mdefine_line|#define MCPCIA_HBASE(h)&t;&t;(IDENT_ADDR + 0xf9e0001340UL + HOSE(h))
DECL|macro|MCPCIA_W0_BASE
mdefine_line|#define MCPCIA_W0_BASE(h)&t;(IDENT_ADDR + 0xf9e0001400UL + HOSE(h))
DECL|macro|MCPCIA_W0_MASK
mdefine_line|#define MCPCIA_W0_MASK(h)&t;(IDENT_ADDR + 0xf9e0001440UL + HOSE(h))
DECL|macro|MCPCIA_T0_BASE
mdefine_line|#define MCPCIA_T0_BASE(h)&t;(IDENT_ADDR + 0xf9e0001480UL + HOSE(h))
DECL|macro|MCPCIA_W1_BASE
mdefine_line|#define MCPCIA_W1_BASE(h)&t;(IDENT_ADDR + 0xf9e0001500UL + HOSE(h))
DECL|macro|MCPCIA_W1_MASK
mdefine_line|#define MCPCIA_W1_MASK(h)&t;(IDENT_ADDR + 0xf9e0001540UL + HOSE(h))
DECL|macro|MCPCIA_T1_BASE
mdefine_line|#define MCPCIA_T1_BASE(h)&t;(IDENT_ADDR + 0xf9e0001580UL + HOSE(h))
DECL|macro|MCPCIA_W2_BASE
mdefine_line|#define MCPCIA_W2_BASE(h)&t;(IDENT_ADDR + 0xf9e0001600UL + HOSE(h))
DECL|macro|MCPCIA_W2_MASK
mdefine_line|#define MCPCIA_W2_MASK(h)&t;(IDENT_ADDR + 0xf9e0001640UL + HOSE(h))
DECL|macro|MCPCIA_T2_BASE
mdefine_line|#define MCPCIA_T2_BASE(h)&t;(IDENT_ADDR + 0xf9e0001680UL + HOSE(h))
DECL|macro|MCPCIA_W3_BASE
mdefine_line|#define MCPCIA_W3_BASE(h)&t;(IDENT_ADDR + 0xf9e0001700UL + HOSE(h))
DECL|macro|MCPCIA_W3_MASK
mdefine_line|#define MCPCIA_W3_MASK(h)&t;(IDENT_ADDR + 0xf9e0001740UL + HOSE(h))
DECL|macro|MCPCIA_T3_BASE
mdefine_line|#define MCPCIA_T3_BASE(h)&t;(IDENT_ADDR + 0xf9e0001780UL + HOSE(h))
multiline_comment|/*&n; * Memory spaces:&n; */
DECL|macro|MCPCIA_CONF
mdefine_line|#define MCPCIA_CONF(h)&t;&t;(IDENT_ADDR + 0xf9c0000000UL + HOSE(h))
DECL|macro|MCPCIA_IO
mdefine_line|#define MCPCIA_IO(h)&t;&t;(IDENT_ADDR + 0xf980000000UL + HOSE(h))
DECL|macro|MCPCIA_SPARSE
mdefine_line|#define MCPCIA_SPARSE(h)&t;(IDENT_ADDR + 0xf800000000UL + HOSE(h))
DECL|macro|MCPCIA_DENSE
mdefine_line|#define MCPCIA_DENSE(h)&t;&t;(IDENT_ADDR + 0xf900000000UL + HOSE(h))
DECL|macro|_MCPCIA_IACK_SC
mdefine_line|#define _MCPCIA_IACK_SC(h)&t;(IDENT_ADDR + 0xf9f0003f00UL + HOSE(h))
DECL|macro|MCPCIA_HAE_ADDRESS
mdefine_line|#define MCPCIA_HAE_ADDRESS&t;MCPCIA_HAE_MEM(0)
DECL|macro|MCPCIA_IACK_SC
mdefine_line|#define MCPCIA_IACK_SC&t;&t;_MCPCIA_IACK_SC(0)
multiline_comment|/*&n; * Data structure for handling MCPCIA machine checks:&n; */
DECL|struct|el_MCPCIA_uncorrected_frame_mcheck
r_struct
id|el_MCPCIA_uncorrected_frame_mcheck
(brace
DECL|member|header
r_struct
id|el_common
id|header
suffix:semicolon
DECL|member|procdata
r_struct
id|el_common_EV5_uncorrectable_mcheck
id|procdata
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifdef __KERNEL__
macro_line|#ifndef __EXTERN_INLINE
DECL|macro|__EXTERN_INLINE
mdefine_line|#define __EXTERN_INLINE extern inline
DECL|macro|__IO_EXTERN_INLINE
mdefine_line|#define __IO_EXTERN_INLINE
macro_line|#endif
multiline_comment|/*&n; * Translate physical memory address as seen on (PCI) bus into&n; * a kernel virtual address and vv.&n; */
DECL|function|mcpcia_virt_to_bus
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_virt_to_bus
c_func
(paren
r_void
op_star
id|address
)paren
(brace
r_return
id|virt_to_phys
c_func
(paren
id|address
)paren
op_plus
id|MCPCIA_DMA_WIN_BASE
suffix:semicolon
)brace
DECL|function|mcpcia_bus_to_virt
id|__EXTERN_INLINE
r_void
op_star
id|mcpcia_bus_to_virt
c_func
(paren
r_int
r_int
id|address
)paren
(brace
r_return
id|phys_to_virt
c_func
(paren
id|address
op_minus
id|MCPCIA_DMA_WIN_BASE
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * I/O functions:&n; *&n; * MCPCIA, the RAWHIDE family PCI/memory support chipset for the EV5 (21164)&n; * and EV56 (21164a) processors, can use either a sparse address mapping&n; * scheme, or the so-called byte-word PCI address space, to get at PCI memory&n; * and I/O.&n; *&n; * Unfortunately, we can&squot;t use BWIO with EV5, so for now, we always use SPARSE.&n; */
DECL|macro|vucp
mdefine_line|#define vucp&t;volatile unsigned char *
DECL|macro|vusp
mdefine_line|#define vusp&t;volatile unsigned short *
DECL|macro|vip
mdefine_line|#define vip&t;volatile int *
DECL|macro|vuip
mdefine_line|#define vuip&t;volatile unsigned int *
DECL|macro|vulp
mdefine_line|#define vulp&t;volatile unsigned long *
DECL|function|mcpcia_inb
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_inb
c_func
(paren
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
id|result
op_assign
op_star
(paren
id|vip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_IO
c_func
(paren
id|hose
)paren
op_plus
l_int|0x00
)paren
suffix:semicolon
r_return
id|__kernel_extbl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_outb
id|__EXTERN_INLINE
r_void
id|mcpcia_outb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
r_int
id|w
suffix:semicolon
id|w
op_assign
id|__kernel_insbl
c_func
(paren
id|b
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_IO
c_func
(paren
id|hose
)paren
op_plus
l_int|0x00
)paren
op_assign
id|w
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_inw
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_inw
c_func
(paren
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
id|result
op_assign
op_star
(paren
id|vip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_IO
c_func
(paren
id|hose
)paren
op_plus
l_int|0x08
)paren
suffix:semicolon
r_return
id|__kernel_extwl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_outw
id|__EXTERN_INLINE
r_void
id|mcpcia_outw
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
r_int
id|w
suffix:semicolon
id|w
op_assign
id|__kernel_inswl
c_func
(paren
id|b
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_IO
c_func
(paren
id|hose
)paren
op_plus
l_int|0x08
)paren
op_assign
id|w
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_inl
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_inl
c_func
(paren
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_return
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_IO
c_func
(paren
id|hose
)paren
op_plus
l_int|0x18
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_outl
id|__EXTERN_INLINE
r_void
id|mcpcia_outl
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_IO
c_func
(paren
id|hose
)paren
op_plus
l_int|0x18
)paren
op_assign
id|b
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Memory functions.  64-bit and 32-bit accesses are done through&n; * dense memory space, everything else through sparse space.&n; *&n; * For reading and writing 8 and 16 bit quantities we need to&n; * go through one of the three sparse address mapping regions&n; * and use the HAE_MEM CSR to provide some bits of the address.&n; * The following few routines use only sparse address region 1&n; * which gives 1Gbyte of accessible space which relates exactly&n; * to the amount of PCI memory mapping *into* system address space.&n; * See p 6-17 of the specification but it looks something like this:&n; *&n; * 21164 Address:&n; *&n; *          3         2         1&n; * 9876543210987654321098765432109876543210&n; * 1ZZZZ0.PCI.QW.Address............BBLL&n; *&n; * ZZ = SBZ&n; * BB = Byte offset&n; * LL = Transfer length&n; *&n; * PCI Address:&n; *&n; * 3         2         1&n; * 10987654321098765432109876543210&n; * HHH....PCI.QW.Address........ 00&n; *&n; * HHH = 31:29 HAE_MEM CSR&n; *&n; */
DECL|function|mcpcia_ioremap
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_ioremap
c_func
(paren
r_int
r_int
id|in_addr
)paren
(brace
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_return
id|addr
op_plus
id|MCPCIA_DENSE
c_func
(paren
id|hose
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_is_ioaddr
id|__EXTERN_INLINE
r_int
id|mcpcia_is_ioaddr
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
id|addr
op_ge
id|IDENT_ADDR
op_plus
l_int|0x8000000000UL
suffix:semicolon
)brace
DECL|function|mcpcia_srm_base
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_srm_base
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|mask
comma
id|base
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
id|addr
op_and_assign
l_int|0xfffffffful
suffix:semicolon
r_if
c_cond
(paren
id|addr
op_ge
id|alpha_mv.sm_base_r1
op_logical_and
id|addr
op_le
id|alpha_mv.sm_base_r1
op_plus
id|MCPCIA_MEM_MASK
)paren
(brace
id|mask
op_assign
id|MCPCIA_MEM_MASK
suffix:semicolon
id|base
op_assign
id|MCPCIA_SPARSE
c_func
(paren
id|hose
)paren
suffix:semicolon
)brace
r_else
(brace
macro_line|#if 0
id|printk
c_func
(paren
l_string|&quot;mcpcia: address 0x%lx not covered by HAE&bslash;n&quot;
comma
id|addr
)paren
suffix:semicolon
macro_line|#endif
r_return
l_int|0
suffix:semicolon
)brace
r_return
(paren
(paren
id|addr
op_amp
id|mask
)paren
op_lshift
l_int|5
)paren
op_plus
id|base
suffix:semicolon
)brace
DECL|function|mcpcia_srm_readb
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_srm_readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|result
comma
id|work
suffix:semicolon
r_if
c_cond
(paren
(paren
id|work
op_assign
id|mcpcia_srm_base
c_func
(paren
id|addr
)paren
)paren
op_eq
l_int|0
)paren
r_return
l_int|0xff
suffix:semicolon
id|work
op_add_assign
l_int|0x00
suffix:semicolon
multiline_comment|/* add transfer length */
id|result
op_assign
op_star
(paren
id|vip
)paren
id|work
suffix:semicolon
r_return
id|__kernel_extbl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_srm_readw
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_srm_readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|result
comma
id|work
suffix:semicolon
r_if
c_cond
(paren
(paren
id|work
op_assign
id|mcpcia_srm_base
c_func
(paren
id|addr
)paren
)paren
op_eq
l_int|0
)paren
r_return
l_int|0xffff
suffix:semicolon
id|work
op_add_assign
l_int|0x08
suffix:semicolon
multiline_comment|/* add transfer length */
id|result
op_assign
op_star
(paren
id|vip
)paren
id|work
suffix:semicolon
r_return
id|__kernel_extwl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_srm_writeb
id|__EXTERN_INLINE
r_void
id|mcpcia_srm_writeb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|w
comma
id|work
op_assign
id|mcpcia_srm_base
c_func
(paren
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|work
)paren
(brace
id|work
op_add_assign
l_int|0x00
suffix:semicolon
multiline_comment|/* add transfer length */
id|w
op_assign
id|__kernel_insbl
c_func
(paren
id|b
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
id|work
op_assign
id|w
suffix:semicolon
)brace
)brace
DECL|function|mcpcia_srm_writew
id|__EXTERN_INLINE
r_void
id|mcpcia_srm_writew
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
r_int
r_int
id|w
comma
id|work
op_assign
id|mcpcia_srm_base
c_func
(paren
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|work
)paren
(brace
id|work
op_add_assign
l_int|0x08
suffix:semicolon
multiline_comment|/* add transfer length */
id|w
op_assign
id|__kernel_inswl
c_func
(paren
id|b
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
id|work
op_assign
id|w
suffix:semicolon
)brace
)brace
DECL|function|mcpcia_readb
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_readb
c_func
(paren
r_int
r_int
id|in_addr
)paren
(brace
multiline_comment|/* Note that MCPCIA_DENSE(hose) has no bits not masked here, and&n;&t;   that the hose calculation is still correct.  */
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
r_int
id|result
comma
id|msb
comma
id|work
comma
id|temp
suffix:semicolon
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|in_addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
id|msb
op_assign
id|addr
op_amp
op_complement
id|MCPCIA_MEM_MASK
suffix:semicolon
id|temp
op_assign
id|addr
op_amp
id|MCPCIA_MEM_MASK
suffix:semicolon
id|set_hae
c_func
(paren
id|msb
)paren
suffix:semicolon
id|work
op_assign
(paren
(paren
id|temp
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_SPARSE
c_func
(paren
id|hose
)paren
op_plus
l_int|0x00
)paren
suffix:semicolon
id|result
op_assign
op_star
(paren
id|vip
)paren
id|work
suffix:semicolon
r_return
id|__kernel_extbl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_readw
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_readw
c_func
(paren
r_int
r_int
id|in_addr
)paren
(brace
multiline_comment|/* Note that MCPCIA_DENSE(hose) has no bits not masked here, and&n;&t;   that the hose calculation is still correct.  */
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
r_int
id|result
comma
id|msb
comma
id|work
comma
id|temp
suffix:semicolon
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|in_addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
id|msb
op_assign
id|addr
op_amp
op_complement
id|MCPCIA_MEM_MASK
suffix:semicolon
id|temp
op_assign
id|addr
op_amp
id|MCPCIA_MEM_MASK
suffix:semicolon
id|set_hae
c_func
(paren
id|msb
)paren
suffix:semicolon
id|work
op_assign
(paren
(paren
id|temp
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_SPARSE
c_func
(paren
id|hose
)paren
op_plus
l_int|0x08
)paren
suffix:semicolon
id|result
op_assign
op_star
(paren
id|vip
)paren
id|work
suffix:semicolon
r_return
id|__kernel_extwl
c_func
(paren
id|result
comma
id|addr
op_amp
l_int|3
)paren
suffix:semicolon
)brace
DECL|function|mcpcia_writeb
id|__EXTERN_INLINE
r_void
id|mcpcia_writeb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|in_addr
)paren
(brace
multiline_comment|/* Note that MCPCIA_DENSE(hose) has no bits not masked here, and&n;&t;   that the hose calculation is still correct.  */
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
r_int
id|msb
comma
id|w
suffix:semicolon
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|in_addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
id|msb
op_assign
id|addr
op_amp
op_complement
id|MCPCIA_MEM_MASK
suffix:semicolon
id|addr
op_and_assign
id|MCPCIA_MEM_MASK
suffix:semicolon
id|set_hae
c_func
(paren
id|msb
)paren
suffix:semicolon
id|w
op_assign
id|__kernel_insbl
c_func
(paren
id|b
comma
id|in_addr
op_amp
l_int|3
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_SPARSE
c_func
(paren
id|hose
)paren
op_plus
l_int|0x00
)paren
op_assign
id|w
suffix:semicolon
)brace
DECL|function|mcpcia_writew
id|__EXTERN_INLINE
r_void
id|mcpcia_writew
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|in_addr
)paren
(brace
multiline_comment|/* Note that MCPCIA_DENSE(hose) has no bits not masked here, and&n;&t;   that the hose calculation is still correct.  */
r_int
r_int
id|addr
op_assign
id|in_addr
op_amp
l_int|0xffffffffUL
suffix:semicolon
r_int
r_int
id|hose
op_assign
(paren
id|in_addr
op_rshift
l_int|32
)paren
op_amp
l_int|3
suffix:semicolon
r_int
r_int
id|msb
comma
id|w
suffix:semicolon
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|in_addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
)brace
macro_line|#endif
id|msb
op_assign
id|addr
op_amp
op_complement
id|MCPCIA_MEM_MASK
suffix:semicolon
id|addr
op_and_assign
id|MCPCIA_MEM_MASK
suffix:semicolon
id|set_hae
c_func
(paren
id|msb
)paren
suffix:semicolon
id|w
op_assign
id|__kernel_inswl
c_func
(paren
id|b
comma
id|in_addr
op_amp
l_int|3
)paren
suffix:semicolon
op_star
(paren
id|vuip
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|MCPCIA_SPARSE
c_func
(paren
id|hose
)paren
op_plus
l_int|0x08
)paren
op_assign
id|w
suffix:semicolon
)brace
DECL|function|mcpcia_readl
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
id|addr
op_assign
id|mcpcia_ioremap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif
r_return
op_star
(paren
id|vuip
)paren
id|addr
suffix:semicolon
)brace
DECL|function|mcpcia_readq
id|__EXTERN_INLINE
r_int
r_int
id|mcpcia_readq
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
id|addr
op_assign
id|mcpcia_ioremap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif
r_return
op_star
(paren
id|vulp
)paren
id|addr
suffix:semicolon
)brace
DECL|function|mcpcia_writel
id|__EXTERN_INLINE
r_void
id|mcpcia_writel
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
id|addr
op_assign
id|mcpcia_ioremap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif
op_star
(paren
id|vuip
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|function|mcpcia_writeq
id|__EXTERN_INLINE
r_void
id|mcpcia_writeq
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
macro_line|#if __DEBUG_IOREMAP
r_if
c_cond
(paren
id|addr
op_le
l_int|0x1000000000
)paren
(brace
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;mcpcia: 0x%lx not ioremapped (%p)&bslash;n&quot;
comma
id|addr
comma
id|__builtin_return_address
c_func
(paren
l_int|0
)paren
)paren
suffix:semicolon
id|addr
op_assign
id|mcpcia_ioremap
c_func
(paren
id|addr
)paren
suffix:semicolon
)brace
macro_line|#endif
op_star
(paren
id|vulp
)paren
id|addr
op_assign
id|b
suffix:semicolon
)brace
DECL|macro|vucp
macro_line|#undef vucp
DECL|macro|vusp
macro_line|#undef vusp
DECL|macro|vip
macro_line|#undef vip
DECL|macro|vuip
macro_line|#undef vuip
DECL|macro|vulp
macro_line|#undef vulp
macro_line|#ifdef __WANT_IO_DEF
DECL|macro|virt_to_bus
mdefine_line|#define virt_to_bus&t;mcpcia_virt_to_bus
DECL|macro|bus_to_virt
mdefine_line|#define bus_to_virt&t;mcpcia_bus_to_virt
DECL|macro|__inb
mdefine_line|#define __inb&t;&t;mcpcia_inb
DECL|macro|__inw
mdefine_line|#define __inw&t;&t;mcpcia_inw
DECL|macro|__inl
mdefine_line|#define __inl&t;&t;mcpcia_inl
DECL|macro|__outb
mdefine_line|#define __outb&t;&t;mcpcia_outb
DECL|macro|__outw
mdefine_line|#define __outw&t;&t;mcpcia_outw
DECL|macro|__outl
mdefine_line|#define __outl&t;&t;mcpcia_outl
macro_line|#ifdef CONFIG_ALPHA_SRM_SETUP
DECL|macro|__readb
macro_line|# define __readb&t;mcpcia_srm_readb
DECL|macro|__readw
macro_line|# define __readw&t;mcpcia_srm_readw
DECL|macro|__writeb
macro_line|# define __writeb&t;mcpcia_srm_writeb
DECL|macro|__writew
macro_line|# define __writew&t;mcpcia_srm_writew
macro_line|#else
DECL|macro|__readb
macro_line|# define __readb&t;mcpcia_readb
DECL|macro|__readw
macro_line|# define __readw&t;mcpcia_readw
DECL|macro|__writeb
macro_line|# define __writeb&t;mcpcia_writeb
DECL|macro|__writew
macro_line|# define __writew&t;mcpcia_writew
macro_line|#endif
DECL|macro|__readl
mdefine_line|#define __readl&t;&t;mcpcia_readl
DECL|macro|__readq
mdefine_line|#define __readq&t;&t;mcpcia_readq
DECL|macro|__writel
mdefine_line|#define __writel&t;mcpcia_writel
DECL|macro|__writeq
mdefine_line|#define __writeq&t;mcpcia_writeq
DECL|macro|__ioremap
mdefine_line|#define __ioremap&t;mcpcia_ioremap
DECL|macro|__is_ioaddr
mdefine_line|#define __is_ioaddr&t;mcpcia_is_ioaddr
DECL|macro|inb
macro_line|# define inb(port) &bslash;&n;  (__builtin_constant_p((port))?__inb(port):_inb(port))
DECL|macro|outb
macro_line|# define outb(x, port) &bslash;&n;  (__builtin_constant_p((port))?__outb((x),(port)):_outb((x),(port)))
macro_line|#if !__DEBUG_IOREMAP
DECL|macro|__raw_readl
mdefine_line|#define __raw_readl(a)&t;&t;__readl((unsigned long)(a))
DECL|macro|__raw_readq
mdefine_line|#define __raw_readq(a)&t;&t;__readq((unsigned long)(a))
DECL|macro|__raw_writel
mdefine_line|#define __raw_writel(v,a)&t;__writel((v),(unsigned long)(a))
DECL|macro|__raw_writeq
mdefine_line|#define __raw_writeq(v,a)&t;__writeq((v),(unsigned long)(a))
macro_line|#endif
macro_line|#endif /* __WANT_IO_DEF */
macro_line|#ifdef __IO_EXTERN_INLINE
DECL|macro|__EXTERN_INLINE
macro_line|#undef __EXTERN_INLINE
DECL|macro|__IO_EXTERN_INLINE
macro_line|#undef __IO_EXTERN_INLINE
macro_line|#endif
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* __ALPHA_MCPCIA__H__ */
eof
