macro_line|#ifndef _ASM_SEGMENT_H
DECL|macro|_ASM_SEGMENT_H
mdefine_line|#define _ASM_SEGMENT_H
macro_line|#include &lt;linux/string.h&gt;
multiline_comment|/*&n; * This is a gcc optimization barrier, which essentially&n; * inserts a sequence point in the gcc RTL tree that gcc&n; * can&squot;t move code around. This is needed when we enter&n; * or exit a critical region (in this case around user-level&n; * accesses that may sleep, and we can&squot;t let gcc optimize&n; * global state around them).&n; */
DECL|macro|__gcc_barrier
mdefine_line|#define __gcc_barrier() __asm__ __volatile__(&quot;&quot;: : :&quot;memory&quot;)
multiline_comment|/*&n; * Uh, these should become the main single-value transfer routines..&n; * They automatically use the right size if we just have the right&n; * pointer type..&n; */
DECL|macro|put_user
mdefine_line|#define put_user(x,ptr) __put_user((unsigned long)(x),(ptr),sizeof(*(ptr)))
DECL|macro|get_user
mdefine_line|#define get_user(ptr) ((__typeof__(*(ptr)))__get_user((ptr),sizeof(*(ptr))))
multiline_comment|/*&n; * This is a silly but good way to make sure that&n; * the __put_user function is indeed always optimized,&n; * and that we use the correct sizes..&n; */
r_extern
r_int
id|bad_user_access_length
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* I should make this use unaligned transfers etc.. */
DECL|function|__put_user
r_static
r_inline
r_void
id|__put_user
c_func
(paren
r_int
r_int
id|x
comma
r_void
op_star
id|y
comma
r_int
id|size
)paren
(brace
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
op_star
(paren
r_char
op_star
)paren
id|y
op_assign
id|x
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|y
op_assign
id|x
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|y
op_assign
id|x
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
op_star
(paren
r_int
op_star
)paren
id|y
op_assign
id|x
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|bad_user_access_length
c_func
(paren
)paren
suffix:semicolon
)brace
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/* I should make this use unaligned transfers etc.. */
DECL|function|__get_user
r_static
r_inline
r_int
r_int
id|__get_user
c_func
(paren
r_const
r_void
op_star
id|y
comma
r_int
id|size
)paren
(brace
r_int
r_int
id|result
suffix:semicolon
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
id|result
op_assign
op_star
(paren
r_int
r_char
op_star
)paren
id|y
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|result
op_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|y
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|result
op_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|y
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|result
op_assign
op_star
(paren
r_int
r_int
op_star
)paren
id|y
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|result
op_assign
id|bad_user_access_length
c_func
(paren
)paren
suffix:semicolon
)brace
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
DECL|macro|get_fs_byte
mdefine_line|#define get_fs_byte(addr) get_user((unsigned char *)(addr))
DECL|macro|get_fs_word
mdefine_line|#define get_fs_word(addr) get_user((unsigned short *)(addr))
DECL|macro|get_fs_long
mdefine_line|#define get_fs_long(addr) get_user((unsigned int *)(addr))
DECL|macro|get_fs_quad
mdefine_line|#define get_fs_quad(addr) get_user((unsigned long *)(addr))
DECL|macro|put_fs_byte
mdefine_line|#define put_fs_byte(x,addr) put_user((x),(char *)(addr))
DECL|macro|put_fs_word
mdefine_line|#define put_fs_word(x,addr) put_user((x),(short *)(addr))
DECL|macro|put_fs_long
mdefine_line|#define put_fs_long(x,addr) put_user((x),(int *)(addr))
DECL|macro|put_fs_quad
mdefine_line|#define put_fs_quad(x,addr) put_user((x),(long *)(addr))
DECL|function|memcpy_fromfs
r_static
r_inline
r_void
id|memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|memcpy_tofs
r_static
r_inline
r_void
id|memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
id|memcpy
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
id|__gcc_barrier
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * The fs value determines whether argument validity checking should be&n; * performed or not.  If get_fs() == USER_DS, checking is performed, with&n; * get_fs() == KERNEL_DS, checking is bypassed.&n; *&n; * For historical reasons, these macros are grossly misnamed.&n; */
DECL|macro|KERNEL_DS
mdefine_line|#define KERNEL_DS&t;0
DECL|macro|USER_DS
mdefine_line|#define USER_DS&t;&t;1
DECL|macro|get_fs
mdefine_line|#define get_fs()  (current-&gt;tss.flags &amp; 0x1)
DECL|macro|set_fs
mdefine_line|#define set_fs(x) (current-&gt;tss.flags = (current-&gt;tss.flags &amp; ~0x1) | ((x) &amp; 0x1))
DECL|function|get_ds
r_static
r_inline
r_int
r_int
id|get_ds
c_func
(paren
r_void
)paren
(brace
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* _ASM_SEGMENT_H */
eof
