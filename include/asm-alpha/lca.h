macro_line|#ifndef __ALPHA_LCA__H
DECL|macro|__ALPHA_LCA__H
mdefine_line|#define __ALPHA_LCA__H
multiline_comment|/*&n; * Low Cost Alpha (LCA) definitions (these apply to 21066 and 21068,&n; * for example).&n; *&n; * This file is based on:&n; *&n; *&t;DECchip 21066 and DECchip 21068 Alpha AXP Microprocessors&n; *&t;Hardware Reference Manual; Digital Equipment Corp.; May 1994;&n; *&t;Maynard, MA; Order Number: EC-N2681-71.&n; */
multiline_comment|/*&n; * NOTE! Currently, this never uses the HAE register, so it works only&n; * for the low 27 bits of the PCI sparse memory address space.  Dense&n; * memory space doesn&squot;t require the HAE, but is restricted to aligned&n; * 32 and 64 bit accesses.  Special Cycle and Interrupt Acknowledge&n; * cycles may also require the use of the HAE.  The LCA limits I/O&n; * address space to the bottom 24 bits of address space, but this&n; * easily covers the 16 bit ISA I/O address space.&n; */
multiline_comment|/*&n; * NOTE 2! The memory operations do not set any memory barriers, as&n; * it&squot;s not needed for cases like a frame buffer that is essentially&n; * memory-like.  You need to do them by hand if the operations depend&n; * on ordering.&n; *&n; * Similarly, the port I/O operations do a &quot;mb&quot; only after a write&n; * operation: if an mb is needed before (as in the case of doing&n; * memory mapped I/O first, and then a port I/O operation to the same&n; * device), it needs to be done by hand.&n; *&n; * After the above has bitten me 100 times, I&squot;ll give up and just do&n; * the mb all the time, but right now I&squot;m hoping this will work out.&n; * Avoiding mb&squot;s may potentially be a noticeable speed improvement,&n; * but I can&squot;t honestly say I&squot;ve tested it.&n; *&n; * Handling interrupts that need to do mb&squot;s to synchronize to&n; * non-interrupts is another fun race area.  Don&squot;t do it (because if&n; * you do, I&squot;ll have to do *everything* with interrupts disabled,&n; * ugh).&n; */
multiline_comment|/*&n; * Virtual -&gt; physical identity mapping starts at this offset.&n; */
DECL|macro|IDENT_ADDR
mdefine_line|#define IDENT_ADDR&t;(0xfffffc0000000000UL)
multiline_comment|/*&n; * I/O Controller registers:&n; */
DECL|macro|LCA_IOC_HAE
mdefine_line|#define LCA_IOC_HAE&t;&t;(IDENT_ADDR + 0x180000000UL)
DECL|macro|LCA_IOC_CONF
mdefine_line|#define LCA_IOC_CONF&t;&t;(IDENT_ADDR + 0x180000020UL)
DECL|macro|LCA_IOC_STAT0
mdefine_line|#define LCA_IOC_STAT0&t;&t;(IDENT_ADDR + 0x180000040UL)
DECL|macro|LCA_IOC_STAT1
mdefine_line|#define LCA_IOC_STAT1&t;&t;(IDENT_ADDR + 0x180000060UL)
DECL|macro|LCA_IOC_TBIA
mdefine_line|#define LCA_IOC_TBIA&t;&t;(IDENT_ADDR + 0x180000080UL)
DECL|macro|LCA_IOC_TB_ENA
mdefine_line|#define LCA_IOC_TB_ENA&t;&t;(IDENT_ADDR + 0x1800000a0UL)
DECL|macro|LCA_IOC_SFT_RST
mdefine_line|#define LCA_IOC_SFT_RST&t;&t;(IDENT_ADDR + 0x1800000c0UL)
DECL|macro|LCA_IOC_PAR_DIS
mdefine_line|#define LCA_IOC_PAR_DIS&t;&t;(IDENT_ADDR + 0x1800000e0UL)
DECL|macro|LCA_IOC_W_BASE0
mdefine_line|#define LCA_IOC_W_BASE0&t;&t;(IDENT_ADDR + 0x180000100UL)
DECL|macro|LCA_IOC_W_BASE1
mdefine_line|#define LCA_IOC_W_BASE1&t;&t;(IDENT_ADDR + 0x180000120UL)
DECL|macro|LCA_IOC_W_MASK0
mdefine_line|#define LCA_IOC_W_MASK0&t;&t;(IDENT_ADDR + 0x180000140UL)
DECL|macro|LCA_IOC_W_MASK1
mdefine_line|#define LCA_IOC_W_MASK1&t;&t;(IDENT_ADDR + 0x180000160UL)
DECL|macro|LCA_IOC_T_BASE0
mdefine_line|#define LCA_IOC_T_BASE0&t;&t;(IDENT_ADDR + 0x180000180UL)
DECL|macro|LCA_IOC_T_BASE1
mdefine_line|#define LCA_IOC_T_BASE1&t;&t;(IDENT_ADDR + 0x1800001a0UL)
DECL|macro|LCA_IOC_TB_TAG0
mdefine_line|#define LCA_IOC_TB_TAG0&t;&t;(IDENT_ADDR + 0x188000000UL)
DECL|macro|LCA_IOC_TB_TAG1
mdefine_line|#define LCA_IOC_TB_TAG1&t;&t;(IDENT_ADDR + 0x188000020UL)
DECL|macro|LCA_IOC_TB_TAG2
mdefine_line|#define LCA_IOC_TB_TAG2&t;&t;(IDENT_ADDR + 0x188000040UL)
DECL|macro|LCA_IOC_TB_TAG3
mdefine_line|#define LCA_IOC_TB_TAG3&t;&t;(IDENT_ADDR + 0x188000060UL)
DECL|macro|LCA_IOC_TB_TAG4
mdefine_line|#define LCA_IOC_TB_TAG4&t;&t;(IDENT_ADDR + 0x188000070UL)
DECL|macro|LCA_IOC_TB_TAG5
mdefine_line|#define LCA_IOC_TB_TAG5&t;&t;(IDENT_ADDR + 0x1880000a0UL)
DECL|macro|LCA_IOC_TB_TAG6
mdefine_line|#define LCA_IOC_TB_TAG6&t;&t;(IDENT_ADDR + 0x1880000c0UL)
DECL|macro|LCA_IOC_TB_TAG7
mdefine_line|#define LCA_IOC_TB_TAG7&t;&t;(IDENT_ADDR + 0x1880000e0UL)
multiline_comment|/*&n; * Memory spaces:&n; */
DECL|macro|LCA_IACK_SC
mdefine_line|#define LCA_IACK_SC&t;&t;(IDENT_ADDR + 0x1a0000000UL)
DECL|macro|LCA_CONF
mdefine_line|#define LCA_CONF&t;&t;(IDENT_ADDR + 0x1e0000000UL)
DECL|macro|LCA_IO
mdefine_line|#define LCA_IO&t;&t;&t;(IDENT_ADDR + 0x1c0000000UL)
DECL|macro|LCA_SPARSE_MEM
mdefine_line|#define LCA_SPARSE_MEM&t;&t;(IDENT_ADDR + 0x200000000UL)
DECL|macro|LCA_DENSE_MEM
mdefine_line|#define LCA_DENSE_MEM&t;&t;(IDENT_ADDR + 0x300000000UL)
multiline_comment|/*&n; * Bit definitions for I/O Controller status register 0:&n; */
DECL|macro|LCA_IOC_STAT0_CMD
mdefine_line|#define LCA_IOC_STAT0_CMD&t;&t;0xf
DECL|macro|LCA_IOC_STAT0_ERR
mdefine_line|#define LCA_IOC_STAT0_ERR&t;&t;(1&lt;&lt;4)
DECL|macro|LCA_IOC_STAT0_LOST
mdefine_line|#define LCA_IOC_STAT0_LOST&t;&t;(1&lt;&lt;5)
DECL|macro|LCA_IOC_STAT0_THIT
mdefine_line|#define LCA_IOC_STAT0_THIT&t;&t;(1&lt;&lt;6)
DECL|macro|LCA_IOC_STAT0_TREF
mdefine_line|#define LCA_IOC_STAT0_TREF&t;&t;(1&lt;&lt;7)
DECL|macro|LCA_IOC_STAT0_CODE_SHIFT
mdefine_line|#define LCA_IOC_STAT0_CODE_SHIFT&t;8
DECL|macro|LCA_IOC_STAT0_CODE_MASK
mdefine_line|#define LCA_IOC_STAT0_CODE_MASK&t;&t;0x7
DECL|macro|LCA_IOC_STAT0_P_NBR_SHIFT
mdefine_line|#define LCA_IOC_STAT0_P_NBR_SHIFT&t;13
DECL|macro|LCA_IOC_STAT0_P_NBR_MASK
mdefine_line|#define LCA_IOC_STAT0_P_NBR_MASK&t;0x7ffff
multiline_comment|/*&n; * I/O functions:&n; *&n; * Unlike Jensen, the Noname machines have no concept of local&n; * I/O---everything goes over the PCI bus.&n; *&n; * There is plenty room for optimization here.  In particular,&n; * the Alpha&squot;s insb/insw/extb/extw should be useful in moving&n; * data to/from the right byte-lanes.&n; */
r_extern
r_inline
r_int
r_int
DECL|function|inb
id|inb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_IO
op_plus
l_int|0x00
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffUL
op_amp
id|result
suffix:semicolon
)brace
r_extern
r_inline
r_int
r_int
DECL|function|inw
id|inw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_IO
op_plus
l_int|0x08
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffffUL
op_amp
id|result
suffix:semicolon
)brace
r_extern
r_inline
r_int
r_int
DECL|function|inl
id|inl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_IO
op_plus
l_int|0x18
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|outb
id|outb
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_IO
op_plus
l_int|0x00
)paren
op_assign
id|b
op_star
l_int|0x01010101
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|outw
id|outw
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_IO
op_plus
l_int|0x08
)paren
op_assign
id|b
op_star
l_int|0x00010001
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|outl
id|outl
c_func
(paren
r_int
r_char
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_IO
op_plus
l_int|0x18
)paren
op_assign
id|b
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Memory functions.  64-bit and 32-bit accesses are done through&n; * dense memory space, everything else through sparse space.&n; */
r_extern
r_inline
r_int
r_int
DECL|function|readb
id|readb
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_SPARSE_MEM
op_plus
l_int|0x00
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffUL
op_amp
id|result
suffix:semicolon
)brace
r_extern
r_inline
r_int
r_int
DECL|function|readw
id|readw
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_int
id|result
op_assign
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_SPARSE_MEM
op_plus
l_int|0x08
)paren
suffix:semicolon
id|result
op_rshift_assign
(paren
id|addr
op_amp
l_int|3
)paren
op_star
l_int|8
suffix:semicolon
r_return
l_int|0xffffUL
op_amp
id|result
suffix:semicolon
)brace
r_extern
r_inline
r_int
r_int
DECL|function|readl
id|readl
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
r_return
op_star
(paren
r_volatile
r_int
op_star
)paren
(paren
id|addr
op_plus
id|LCA_DENSE_MEM
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|writeb
id|writeb
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_SPARSE_MEM
op_plus
l_int|0x00
)paren
op_assign
id|b
op_star
l_int|0x01010101
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|writew
id|writew
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
(paren
id|addr
op_lshift
l_int|5
)paren
op_plus
id|LCA_SPARSE_MEM
op_plus
l_int|0x08
)paren
op_assign
id|b
op_star
l_int|0x00010001
suffix:semicolon
)brace
r_extern
r_inline
r_void
DECL|function|writel
id|writel
c_func
(paren
r_int
r_int
id|b
comma
r_int
r_int
id|addr
)paren
(brace
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
(paren
id|addr
op_plus
id|LCA_DENSE_MEM
)paren
op_assign
id|b
suffix:semicolon
)brace
DECL|macro|inb_local
mdefine_line|#define inb_local inb
DECL|macro|outb_local
mdefine_line|#define outb_local outb
DECL|macro|inb_p
mdefine_line|#define inb_p inb
DECL|macro|outb_p
mdefine_line|#define outb_p outb
macro_line|#endif
eof
