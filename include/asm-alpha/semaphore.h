macro_line|#ifndef _ALPHA_SEMAPHORE_H
DECL|macro|_ALPHA_SEMAPHORE_H
mdefine_line|#define _ALPHA_SEMAPHORE_H
multiline_comment|/*&n; * SMP- and interrupt-safe semaphores..&n; *&n; * (C) Copyright 1996 Linus Torvalds&n; */
DECL|struct|semaphore
r_struct
id|semaphore
(brace
DECL|member|count
r_int
id|count
suffix:semicolon
DECL|member|waiting
r_int
id|waiting
suffix:semicolon
DECL|member|wait
r_struct
id|wait_queue
op_star
id|wait
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|MUTEX
mdefine_line|#define MUTEX ((struct semaphore) { 1, 0, NULL })
DECL|macro|MUTEX_LOCKED
mdefine_line|#define MUTEX_LOCKED ((struct semaphore) { 0, 0, NULL })
r_extern
r_void
id|__down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
suffix:semicolon
r_extern
r_void
id|wake_up
c_func
(paren
r_struct
id|wait_queue
op_star
op_star
id|p
)paren
suffix:semicolon
multiline_comment|/*&n; * These are not yet interrupt-safe: should use ldl_l/stl_c here..&n; *&n; * See include/asm-i386/semaphore.h on how to do this correctly&n; * without any jumps or wakeups taken for the no-contention cases.&n; */
DECL|function|down
r_extern
r_inline
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|sem-&gt;count
op_decrement
suffix:semicolon
multiline_comment|/* &quot;down_failed&quot; */
r_if
c_cond
(paren
id|sem-&gt;count
OL
l_int|0
)paren
id|__down
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|up
r_extern
r_inline
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|sem-&gt;count
op_increment
suffix:semicolon
multiline_comment|/* &quot;up_wakeup&quot; */
id|__up
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
macro_line|#endif
eof
