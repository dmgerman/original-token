macro_line|#ifndef _ALPHA_SEMAPHORE_H
DECL|macro|_ALPHA_SEMAPHORE_H
mdefine_line|#define _ALPHA_SEMAPHORE_H
multiline_comment|/*&n; * SMP- and interrupt-safe semaphores..&n; *&n; * (C) Copyright 1996 Linus Torvalds&n; * (C) Copyright 1996, 2000 Richard Henderson&n; */
macro_line|#include &lt;asm/current.h&gt;
macro_line|#include &lt;asm/system.h&gt;
macro_line|#include &lt;asm/atomic.h&gt;
macro_line|#include &lt;asm/compiler.h&gt;&t;/* __builtin_expect */
DECL|macro|DEBUG_SEMAPHORE
mdefine_line|#define DEBUG_SEMAPHORE 0
DECL|macro|DEBUG_RW_SEMAPHORE
mdefine_line|#define DEBUG_RW_SEMAPHORE 0
DECL|struct|semaphore
r_struct
id|semaphore
(brace
multiline_comment|/* Careful, inline assembly knows about the position of these two.  */
DECL|member|count
id|atomic_t
id|count
id|__attribute__
c_func
(paren
(paren
id|aligned
c_func
(paren
l_int|8
)paren
)paren
)paren
suffix:semicolon
DECL|member|waking
id|atomic_t
id|waking
suffix:semicolon
multiline_comment|/* biased by -1 */
DECL|member|wait
id|wait_queue_head_t
id|wait
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|member|__magic
r_int
id|__magic
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|macro|__SEM_DEBUG_INIT
macro_line|# define __SEM_DEBUG_INIT(name)&t;&t;, (long)&amp;(name).__magic
macro_line|#else
DECL|macro|__SEM_DEBUG_INIT
macro_line|# define __SEM_DEBUG_INIT(name)
macro_line|#endif
DECL|macro|__SEMAPHORE_INITIALIZER
mdefine_line|#define __SEMAPHORE_INITIALIZER(name,count)&t;&t;&bslash;&n;&t;{ ATOMIC_INIT(count), ATOMIC_INIT(-1),&t;&t;&bslash;&n;&t;  __WAIT_QUEUE_HEAD_INITIALIZER((name).wait)&t;&bslash;&n;&t;  __SEM_DEBUG_INIT(name) }
DECL|macro|__MUTEX_INITIALIZER
mdefine_line|#define __MUTEX_INITIALIZER(name) &bslash;&n;&t;__SEMAPHORE_INITIALIZER(name,1)
DECL|macro|__DECLARE_SEMAPHORE_GENERIC
mdefine_line|#define __DECLARE_SEMAPHORE_GENERIC(name,count) &bslash;&n;&t;struct semaphore name = __SEMAPHORE_INITIALIZER(name,count)
DECL|macro|DECLARE_MUTEX
mdefine_line|#define DECLARE_MUTEX(name) __DECLARE_SEMAPHORE_GENERIC(name,1)
DECL|macro|DECLARE_MUTEX_LOCKED
mdefine_line|#define DECLARE_MUTEX_LOCKED(name) __DECLARE_SEMAPHORE_GENERIC(name,0)
DECL|function|sema_init
r_static
r_inline
r_void
id|sema_init
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
comma
r_int
id|val
)paren
(brace
multiline_comment|/*&n;&t; * Logically, &n;&t; *   *sem = (struct semaphore)__SEMAPHORE_INITIALIZER((*sem),val);&n;&t; * except that gcc produces better initializing by parts yet.&n;&t; */
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;count
comma
id|val
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;waking
comma
op_minus
l_int|1
)paren
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|sem-&gt;wait
)paren
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
id|sem-&gt;__magic
op_assign
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
suffix:semicolon
macro_line|#endif
)brace
DECL|function|init_MUTEX
r_static
r_inline
r_void
id|init_MUTEX
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|sema_init
c_func
(paren
id|sem
comma
l_int|1
)paren
suffix:semicolon
)brace
DECL|function|init_MUTEX_LOCKED
r_static
r_inline
r_void
id|init_MUTEX_LOCKED
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|sema_init
c_func
(paren
id|sem
comma
l_int|0
)paren
suffix:semicolon
)brace
r_extern
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|__down_failed
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
r_extern
r_int
id|down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
r_extern
r_int
id|__down_failed_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
r_extern
r_int
id|down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|__up_wakeup
c_func
(paren
r_struct
id|semaphore
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Hidden out of line code is fun, but extremely messy.  Rely on newer&n; * compilers to do a respectable job with this.  The contention cases&n; * are handled out of line in arch/alpha/kernel/semaphore.c.&n; */
DECL|function|__down
r_static
r_inline
r_void
id|__down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
op_assign
id|atomic_dec_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|count
OL
l_int|0
comma
l_int|0
)paren
)paren
id|__down_failed
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|__down_interruptible
r_static
r_inline
r_int
id|__down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
op_assign
id|atomic_dec_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|count
OL
l_int|0
comma
l_int|0
)paren
)paren
r_return
id|__down_failed_interruptible
c_func
(paren
id|sem
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; * down_trylock returns 0 on success, 1 if we failed to get the lock.&n; *&n; * We must manipulate count and waking simultaneously and atomically.&n; * Do this by using ll/sc on the pair of 32-bit words.&n; */
DECL|function|__down_trylock
r_static
r_inline
r_int
id|__down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
comma
id|tmp
comma
id|tmp2
comma
id|sub
suffix:semicolon
multiline_comment|/* &quot;Equivalent&quot; C.  Note that we have to do this all without&n;&t;   (taken) branches in order to be a valid ll/sc sequence.&n;&n;&t;   do {&n;&t;&t;tmp = ldq_l;&n;&t;&t;sub = 0x0000000100000000;&t;&n;&t;&t;ret = ((int)tmp &lt;= 0);&t;&t;// count &lt;= 0 ?&n;&t;&t;// Note that if count=0, the decrement overflows into&n;&t;&t;// waking, so cancel the 1 loaded above.  Also cancel&n;&t;&t;// it if the lock was already free.&n;&t;&t;if ((int)tmp &gt;= 0) sub = 0;&t;// count &gt;= 0 ?&n;&t;&t;ret &amp;= ((long)tmp &lt; 0);&t;&t;// waking &lt; 0 ?&n;&t;&t;sub += 1;&n;&t;&t;if (ret) break;&t;&n;&t;&t;tmp -= sub;&n;&t;&t;tmp = stq_c = tmp;&n;&t;   } while (tmp == 0);&n;&t;*/
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&t;ldq_l&t;%1,%4&bslash;n&quot;
l_string|&quot;&t;lda&t;%3,1&bslash;n&quot;
l_string|&quot;&t;addl&t;%1,0,%2&bslash;n&quot;
l_string|&quot;&t;sll&t;%3,32,%3&bslash;n&quot;
l_string|&quot;&t;cmple&t;%2,0,%0&bslash;n&quot;
l_string|&quot;&t;cmovge&t;%2,0,%3&bslash;n&quot;
l_string|&quot;&t;cmplt&t;%1,0,%2&bslash;n&quot;
l_string|&quot;&t;addq&t;%3,1,%3&bslash;n&quot;
l_string|&quot;&t;and&t;%0,%2,%0&bslash;n&quot;
l_string|&quot;&t;bne&t;%0,2f&bslash;n&quot;
l_string|&quot;&t;subq&t;%1,%3,%1&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%1,%4&bslash;n&quot;
l_string|&quot;&t;beq&t;%1,3f&bslash;n&quot;
l_string|&quot;2:&t;mb&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;3:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp2
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|sub
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|sem
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|__up
r_static
r_inline
r_void
id|__up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
id|ret
comma
id|tmp
comma
id|tmp2
comma
id|tmp3
suffix:semicolon
multiline_comment|/* We must manipulate count and waking simultaneously and atomically.&n;&t;   Otherwise we have races between up and __down_failed_interruptible&n;&t;   waking up on a signal.&n;&n;&t;   &quot;Equivalent&quot; C.  Note that we have to do this all without&n;&t;   (taken) branches in order to be a valid ll/sc sequence.&n;&n;&t;   do {&n;&t;&t;tmp = ldq_l;&n;&t;&t;ret = (int)tmp + 1;&t;&t;&t;// count += 1;&n;&t;&t;tmp2 = tmp &amp; 0xffffffff00000000;&t;// extract waking&n;&t;&t;if (ret &lt;= 0)&t;&t;&t;&t;// still sleepers?&n;&t;&t;&t;tmp2 += 0x0000000100000000;&t;// waking += 1;&n;&t;&t;tmp = ret &amp; 0x00000000ffffffff;&t;&t;// insert count&n;&t;&t;tmp |= tmp2;&t;&t;&t;&t;// insert waking;&n;&t;       tmp = stq_c = tmp;&n;&t;   } while (tmp == 0);&n;&t;*/
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;&t;mb&bslash;n&quot;
l_string|&quot;1:&t;ldq_l&t;%1,%4&bslash;n&quot;
l_string|&quot;&t;addl&t;%1,1,%0&bslash;n&quot;
l_string|&quot;&t;zapnot&t;%1,0xf0,%2&bslash;n&quot;
l_string|&quot;&t;addq&t;%2,%5,%3&bslash;n&quot;
l_string|&quot;&t;cmovle&t;%0,%3,%2&bslash;n&quot;
l_string|&quot;&t;zapnot&t;%0,0x0f,%1&bslash;n&quot;
l_string|&quot;&t;bis&t;%1,%2,%1&bslash;n&quot;
l_string|&quot;&t;stq_c&t;%1,%4&bslash;n&quot;
l_string|&quot;&t;beq&t;%1,3f&bslash;n&quot;
l_string|&quot;2:&bslash;n&quot;
l_string|&quot;.subsection 2&bslash;n&quot;
l_string|&quot;3:&t;br&t;1b&bslash;n&quot;
l_string|&quot;.previous&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|ret
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp2
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|tmp3
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|sem
)paren
comma
l_string|&quot;r&quot;
(paren
l_int|0x0000000100000000
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|ret
op_le
l_int|0
comma
l_int|0
)paren
)paren
id|__up_wakeup
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
macro_line|#if !WAITQUEUE_DEBUG &amp;&amp; !DEBUG_SEMAPHORE
DECL|function|down
r_extern
r_inline
r_void
id|down
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|__down
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|down_interruptible
r_extern
r_inline
r_int
id|down_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_return
id|__down_interruptible
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|down_trylock
r_extern
r_inline
r_int
id|down_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_return
id|__down_trylock
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|up
r_extern
r_inline
r_void
id|up
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
id|__up
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
macro_line|#endif
multiline_comment|/* rw mutexes (should that be mutices? =) -- throw rw&n; * spinlocks and semaphores together, and this is what we&n; * end up with...&n; *&n; * The lock is initialized to BIAS.  This way, a writer&n; * subtracts BIAS ands gets 0 for the case of an uncontended&n; * lock.  Readers decrement by 1 and see a positive value&n; * when uncontended, negative if there are writers waiting&n; * (in which case it goes to sleep).&n; *&n; * The value 0x01000000 supports up to 128 processors and&n; * lots of processes.  BIAS must be chosen such that subtracting&n; * BIAS once per CPU will result in the int remaining&n; * negative.&n; * In terms of fairness, this should result in the lock&n; * flopping back and forth between readers and writers&n; * under heavy use.&n; *&n; *&t;      -ben&n; *&n; * Once we start supporting machines with more than 128 CPUs,&n; * we should go for using a 64bit atomic type instead of 32bit&n; * as counter. We shall probably go for bias 0x80000000 then,&n; * so that single sethi can set it.&n; *&n; *&t;      -jj&n; */
DECL|macro|RW_LOCK_BIAS
mdefine_line|#define RW_LOCK_BIAS&t;&t;0x01000000
DECL|struct|rw_semaphore
r_struct
id|rw_semaphore
(brace
DECL|member|count
id|atomic_t
id|count
suffix:semicolon
multiline_comment|/* bit 0 means read bias granted;&n;&t;   bit 1 means write bias granted.  */
DECL|member|granted
r_int
id|granted
suffix:semicolon
DECL|member|wait
id|wait_queue_head_t
id|wait
suffix:semicolon
DECL|member|write_bias_wait
id|wait_queue_head_t
id|write_bias_wait
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|member|__magic
r_int
id|__magic
suffix:semicolon
DECL|member|readers
id|atomic_t
id|readers
suffix:semicolon
DECL|member|writers
id|atomic_t
id|writers
suffix:semicolon
macro_line|#endif
)brace
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT&t;, ATOMIC_INIT(0), ATOMIC_INIT(0)
macro_line|#else
DECL|macro|__RWSEM_DEBUG_INIT
mdefine_line|#define __RWSEM_DEBUG_INIT&t;/* */
macro_line|#endif
DECL|macro|__RWSEM_INITIALIZER
mdefine_line|#define __RWSEM_INITIALIZER(name,count)&t;&t;&t;&t;&t;&bslash;&n;&t;{ ATOMIC_INIT(count), 0, __WAIT_QUEUE_HEAD_INITIALIZER((name).wait), &bslash;&n;&t;  __WAIT_QUEUE_HEAD_INITIALIZER((name).write_bias_wait)&t;&t;&bslash;&n;&t;  __SEM_DEBUG_INIT(name) __RWSEM_DEBUG_INIT }
DECL|macro|__DECLARE_RWSEM_GENERIC
mdefine_line|#define __DECLARE_RWSEM_GENERIC(name,count) &bslash;&n;&t;struct rw_semaphore name = __RWSEM_INITIALIZER(name,count)
DECL|macro|DECLARE_RWSEM
mdefine_line|#define DECLARE_RWSEM(name) &bslash;&n;&t;__DECLARE_RWSEM_GENERIC(name, RW_LOCK_BIAS)
DECL|macro|DECLARE_RWSEM_READ_LOCKED
mdefine_line|#define DECLARE_RWSEM_READ_LOCKED(name) &bslash;&n;&t;__DECLARE_RWSEM_GENERIC(name, RW_LOCK_BIAS-1)
DECL|macro|DECLARE_RWSEM_WRITE_LOCKED
mdefine_line|#define DECLARE_RWSEM_WRITE_LOCKED(name) &bslash;&n;&t;__DECLARE_RWSEM_GENERIC(name, 0)
DECL|function|init_rwsem
r_static
r_inline
r_void
id|init_rwsem
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|atomic_set
(paren
op_amp
id|sem-&gt;count
comma
id|RW_LOCK_BIAS
)paren
suffix:semicolon
id|sem-&gt;granted
op_assign
l_int|0
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|sem-&gt;wait
)paren
suffix:semicolon
id|init_waitqueue_head
c_func
(paren
op_amp
id|sem-&gt;write_bias_wait
)paren
suffix:semicolon
macro_line|#if WAITQUEUE_DEBUG
id|sem-&gt;__magic
op_assign
(paren
r_int
)paren
op_amp
id|sem-&gt;__magic
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;readers
comma
l_int|0
)paren
suffix:semicolon
id|atomic_set
c_func
(paren
op_amp
id|sem-&gt;writers
comma
l_int|0
)paren
suffix:semicolon
macro_line|#endif
)brace
r_extern
r_void
id|down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
)paren
suffix:semicolon
r_extern
r_void
id|__down_read_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|__down_write_failed
c_func
(paren
r_struct
id|rw_semaphore
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|__rwsem_wake
c_func
(paren
r_struct
id|rw_semaphore
op_star
comma
r_int
)paren
suffix:semicolon
DECL|function|__down_read
r_static
r_inline
r_void
id|__down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
op_assign
id|atomic_dec_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|count
OL
l_int|0
comma
l_int|0
)paren
)paren
id|__down_read_failed
c_func
(paren
id|sem
comma
id|count
)paren
suffix:semicolon
)brace
DECL|function|__down_write
r_static
r_inline
r_void
id|__down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
op_assign
id|atomic_sub_return
c_func
(paren
id|RW_LOCK_BIAS
comma
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|count
op_ne
l_int|0
comma
l_int|0
)paren
)paren
id|__down_write_failed
c_func
(paren
id|sem
comma
id|count
)paren
suffix:semicolon
)brace
multiline_comment|/* When a reader does a release, the only significant case is when there&n;   was a writer waiting, and we&squot;ve bumped the count to 0, then we must&n;   wake the writer up.  */
DECL|function|__up_read
r_static
r_inline
r_void
id|__up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
id|count
op_assign
id|atomic_inc_return
c_func
(paren
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|count
op_eq
l_int|0
comma
l_int|0
)paren
)paren
id|__rwsem_wake
c_func
(paren
id|sem
comma
l_int|0
)paren
suffix:semicolon
)brace
multiline_comment|/* Releasing the writer is easy -- just release it and wake up&n;   any sleepers.  */
DECL|function|__up_write
r_static
r_inline
r_void
id|__up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
r_int
id|count
comma
id|wake
suffix:semicolon
id|mb
c_func
(paren
)paren
suffix:semicolon
id|count
op_assign
id|atomic_add_return
c_func
(paren
id|RW_LOCK_BIAS
comma
op_amp
id|sem-&gt;count
)paren
suffix:semicolon
multiline_comment|/* Only do the wake if we were, but are no longer, negative.  */
id|wake
op_assign
(paren
(paren
r_int
)paren
(paren
id|count
op_minus
id|RW_LOCK_BIAS
)paren
OL
l_int|0
)paren
op_logical_and
id|count
op_ge
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|__builtin_expect
c_func
(paren
id|wake
comma
l_int|0
)paren
)paren
id|__rwsem_wake
c_func
(paren
id|sem
comma
id|count
)paren
suffix:semicolon
)brace
macro_line|#if !WAITQUEUE_DEBUG &amp;&amp; !DEBUG_RW_SEMAPHORE
DECL|function|down_read
r_extern
r_inline
r_void
id|down_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|__down_read
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|down_write
r_extern
r_inline
r_void
id|down_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|__down_write
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|up_read
r_extern
r_inline
r_void
id|up_read
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|__up_read
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
DECL|function|up_write
r_extern
r_inline
r_void
id|up_write
c_func
(paren
r_struct
id|rw_semaphore
op_star
id|sem
)paren
(brace
id|__up_write
c_func
(paren
id|sem
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif
eof
