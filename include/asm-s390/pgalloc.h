multiline_comment|/*&n; *  include/asm-s390/bugs.h&n; *&n; *  S390 version&n; *    Copyright (C) 1999,2000 IBM Deutschland Entwicklung GmbH, IBM Corporation&n; *    Author(s): Hartmut Penner (hp@de.ibm.com)&n; *               Martin Schwidefsky (schwidefsky@de.ibm.com)&n; *&n; *  Derived from &quot;include/asm-i386/pgalloc.h&quot;&n; *    Copyright (C) 1994  Linus Torvalds&n; */
macro_line|#ifndef _S390_PGALLOC_H
DECL|macro|_S390_PGALLOC_H
mdefine_line|#define _S390_PGALLOC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;linux/threads.h&gt;
DECL|macro|pgd_quicklist
mdefine_line|#define pgd_quicklist (S390_lowcore.cpu_data.pgd_quick)
DECL|macro|pmd_quicklist
mdefine_line|#define pmd_quicklist ((unsigned long *)0)
DECL|macro|pte_quicklist
mdefine_line|#define pte_quicklist (S390_lowcore.cpu_data.pte_quick)
DECL|macro|pgtable_cache_size
mdefine_line|#define pgtable_cache_size (S390_lowcore.cpu_data.pgtable_cache_sz)
multiline_comment|/*&n; * Allocate and free page tables. The xxx_kernel() versions are&n; * used to allocate a kernel page table - this turns on ASN bits&n; * if any.&n; */
DECL|function|get_pgd_slow
r_extern
id|__inline__
id|pgd_t
op_star
id|get_pgd_slow
c_func
(paren
r_void
)paren
(brace
r_int
id|i
suffix:semicolon
id|pgd_t
op_star
id|pgd
comma
op_star
id|ret
op_assign
(paren
id|pgd_t
op_star
)paren
id|__get_free_pages
c_func
(paren
id|GFP_KERNEL
comma
l_int|2
)paren
suffix:semicolon
r_if
c_cond
(paren
id|ret
)paren
r_for
c_loop
(paren
id|i
op_assign
l_int|0
comma
id|pgd
op_assign
id|ret
suffix:semicolon
id|i
OL
id|USER_PTRS_PER_PGD
suffix:semicolon
id|i
op_increment
comma
id|pgd
op_increment
)paren
id|pmd_clear
c_func
(paren
id|pmd_offset
c_func
(paren
id|pgd
comma
id|i
op_star
id|PGDIR_SIZE
)paren
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
DECL|function|get_pgd_fast
r_extern
id|__inline__
id|pgd_t
op_star
id|get_pgd_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
id|pgd_quicklist
)paren
op_ne
l_int|NULL
)paren
(brace
id|pgd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
id|ret
(braket
l_int|1
)braket
suffix:semicolon
id|pgtable_cache_size
op_decrement
suffix:semicolon
multiline_comment|/*&n;&t;&t; * Need to flush tlb, since private page tables&n;&t;&t; * are unique thru address of pgd and virtual address.&n;&t;&t; * If we reuse pgd we need to be sure no tlb entry&n;&t;&t; * with that pdg is left -&gt; global flush&n;&t;&t; *&n;&t;&t; * Fixme: To avoid this global flush we should&n;&t;&t; * use pdg_quicklist as fix lenght fifo list&n;&t;&t; * and not as stack&n;&t;&t; */
)brace
r_else
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|get_pgd_slow
c_func
(paren
)paren
suffix:semicolon
r_return
(paren
id|pgd_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|free_pgd_fast
r_extern
id|__inline__
r_void
id|free_pgd_fast
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
id|pgd
op_assign
(paren
r_int
r_int
)paren
id|pgd_quicklist
suffix:semicolon
id|pgd_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pgd
suffix:semicolon
id|pgtable_cache_size
op_increment
suffix:semicolon
)brace
DECL|function|free_pgd_slow
r_extern
id|__inline__
r_void
id|free_pgd_slow
c_func
(paren
id|pgd_t
op_star
id|pgd
)paren
(brace
id|free_pages
c_func
(paren
(paren
r_int
r_int
)paren
id|pgd
comma
l_int|2
)paren
suffix:semicolon
)brace
r_extern
id|pte_t
op_star
id|get_pte_slow
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address_preadjusted
)paren
suffix:semicolon
r_extern
id|pte_t
op_star
id|get_pte_kernel_slow
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address_preadjusted
)paren
suffix:semicolon
DECL|function|get_pte_fast
r_extern
id|__inline__
id|pte_t
op_star
id|get_pte_fast
c_func
(paren
r_void
)paren
(brace
r_int
r_int
op_star
id|ret
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ret
op_assign
(paren
r_int
r_int
op_star
)paren
id|pte_quicklist
)paren
op_ne
l_int|NULL
)paren
(brace
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
(paren
op_star
id|ret
)paren
suffix:semicolon
id|ret
(braket
l_int|0
)braket
op_assign
id|ret
(braket
l_int|1
)braket
suffix:semicolon
id|pgtable_cache_size
op_decrement
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|ret
suffix:semicolon
)brace
DECL|function|free_pte_fast
r_extern
id|__inline__
r_void
id|free_pte_fast
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
id|pte
op_assign
(paren
r_int
r_int
)paren
id|pte_quicklist
suffix:semicolon
id|pte_quicklist
op_assign
(paren
r_int
r_int
op_star
)paren
id|pte
suffix:semicolon
id|pgtable_cache_size
op_increment
suffix:semicolon
)brace
DECL|function|free_pte_slow
r_extern
id|__inline__
r_void
id|free_pte_slow
c_func
(paren
id|pte_t
op_star
id|pte
)paren
(brace
id|free_page
c_func
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
suffix:semicolon
)brace
DECL|macro|pte_free_kernel
mdefine_line|#define pte_free_kernel(pte)    free_pte_fast(pte)
DECL|macro|pte_free
mdefine_line|#define pte_free(pte)           free_pte_fast(pte)
DECL|macro|pgd_free
mdefine_line|#define pgd_free(pgd)           free_pgd_fast(pgd)
DECL|macro|pgd_alloc
mdefine_line|#define pgd_alloc()             get_pgd_fast()
DECL|function|pte_alloc_kernel
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc_kernel
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|pte_t
op_star
id|page
op_assign
(paren
id|pte_t
op_star
)paren
id|get_pte_fast
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|page
)paren
r_return
id|get_pte_kernel_slow
c_func
(paren
id|pmd
comma
id|address
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|0
)braket
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
id|page
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|1
)braket
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
id|page
op_plus
l_int|1024
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|2
)braket
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
id|page
op_plus
l_int|2048
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|3
)braket
)paren
op_assign
id|_KERNPG_TABLE
op_plus
id|__pa
c_func
(paren
id|page
op_plus
l_int|3072
)paren
suffix:semicolon
r_return
id|page
op_plus
id|address
suffix:semicolon
)brace
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
(brace
id|__handle_bad_pmd_kernel
c_func
(paren
id|pmd
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
)brace
DECL|function|pte_alloc
r_extern
r_inline
id|pte_t
op_star
id|pte_alloc
c_func
(paren
id|pmd_t
op_star
id|pmd
comma
r_int
r_int
id|address
)paren
(brace
id|address
op_assign
(paren
id|address
op_rshift
id|PAGE_SHIFT
)paren
op_amp
(paren
id|PTRS_PER_PTE
op_minus
l_int|1
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
)paren
r_goto
id|getnew
suffix:semicolon
r_if
c_cond
(paren
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
r_goto
id|fix
suffix:semicolon
r_return
(paren
id|pte_t
op_star
)paren
id|pmd_page
c_func
(paren
op_star
id|pmd
)paren
op_plus
id|address
suffix:semicolon
id|getnew
suffix:colon
(brace
r_int
r_int
id|page
op_assign
(paren
r_int
r_int
)paren
id|get_pte_fast
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|page
)paren
r_return
id|get_pte_slow
c_func
(paren
id|pmd
comma
id|address
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|0
)braket
)paren
op_assign
id|_PAGE_TABLE
op_plus
id|__pa
c_func
(paren
id|page
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|1
)braket
)paren
op_assign
id|_PAGE_TABLE
op_plus
id|__pa
c_func
(paren
id|page
op_plus
l_int|1024
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|2
)braket
)paren
op_assign
id|_PAGE_TABLE
op_plus
id|__pa
c_func
(paren
id|page
op_plus
l_int|2048
)paren
suffix:semicolon
id|pmd_val
c_func
(paren
id|pmd
(braket
l_int|3
)braket
)paren
op_assign
id|_PAGE_TABLE
op_plus
id|__pa
c_func
(paren
id|page
op_plus
l_int|3072
)paren
suffix:semicolon
r_return
(paren
id|pte_t
op_star
)paren
id|page
op_plus
id|address
suffix:semicolon
)brace
id|fix
suffix:colon
id|__handle_bad_pmd
c_func
(paren
id|pmd
)paren
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
multiline_comment|/*&n; * allocating and freeing a pmd is trivial: the 1-entry pmd is&n; * inside the pgd, so has no extra memory associated with it.&n; */
DECL|function|pmd_free
r_extern
r_inline
r_void
id|pmd_free
c_func
(paren
id|pmd_t
op_star
id|pmd
)paren
(brace
)brace
DECL|function|pmd_alloc
r_extern
r_inline
id|pmd_t
op_star
id|pmd_alloc
c_func
(paren
id|pgd_t
op_star
id|pgd
comma
r_int
r_int
id|address
)paren
(brace
r_return
(paren
id|pmd_t
op_star
)paren
id|pgd
suffix:semicolon
)brace
DECL|macro|pmd_free_kernel
mdefine_line|#define pmd_free_kernel         pmd_free
DECL|macro|pmd_alloc_kernel
mdefine_line|#define pmd_alloc_kernel        pmd_alloc
r_extern
r_int
id|do_check_pgt_cache
c_func
(paren
r_int
comma
r_int
)paren
suffix:semicolon
DECL|macro|set_pgdir
mdefine_line|#define set_pgdir(addr,entry) do { } while(0)
multiline_comment|/*&n; * TLB flushing:&n; *&n; *  - flush_tlb() flushes the current mm struct TLBs&n; *  - flush_tlb_all() flushes all processes TLBs &n; *    called only from vmalloc/vfree&n; *  - flush_tlb_mm(mm) flushes the specified mm context TLB&squot;s&n; *  - flush_tlb_page(vma, vmaddr) flushes one page&n; *  - flush_tlb_range(mm, start, end) flushes a range of pages&n; *  - flush_tlb_pgtables(mm, start, end) flushes a range of page tables&n; */
multiline_comment|/*&n; * s390 has two ways of flushing TLBs&n; * &squot;ptlb&squot; does a flush of the local processor&n; * &squot;ipte&squot; invalidates a pte in a page table and flushes that out of &n; * the TLBs of all PUs of a SMP &n; */
DECL|macro|__flush_tlb
mdefine_line|#define __flush_tlb() &bslash;&n;do {  __asm__ __volatile__(&quot;ptlb&quot;: : :&quot;memory&quot;); } while (0)
DECL|function|__flush_global_tlb
r_static
r_inline
r_void
id|__flush_global_tlb
c_func
(paren
r_void
)paren
(brace
r_int
id|cs1
op_assign
l_int|0
comma
id|dum
op_assign
l_int|0
suffix:semicolon
r_int
op_star
id|adr
suffix:semicolon
r_int
r_int
id|dummy
op_assign
l_int|0
suffix:semicolon
id|adr
op_assign
(paren
r_int
op_star
)paren
(paren
(paren
(paren
r_int
)paren
(paren
(paren
(paren
r_int
op_star
)paren
op_amp
id|dummy
)paren
op_plus
l_int|1
)paren
op_amp
l_int|0xfffffffc
)paren
op_or
l_int|1
)paren
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lr    2,%0&bslash;n&bslash;t&quot;
l_string|&quot;lr    3,%1&bslash;n&bslash;t&quot;
l_string|&quot;lr    4,%2&bslash;n&bslash;t&quot;
l_string|&quot;.long 0xb2500024&quot;
suffix:colon
suffix:colon
l_string|&quot;d&quot;
(paren
id|cs1
)paren
comma
l_string|&quot;d&quot;
(paren
id|dum
)paren
comma
l_string|&quot;d&quot;
(paren
id|adr
)paren
suffix:colon
l_string|&quot;2&quot;
comma
l_string|&quot;3&quot;
comma
l_string|&quot;4&quot;
)paren
suffix:semicolon
)brace
macro_line|#if 0
mdefine_line|#define flush_tlb_one(a,b)     __flush_tlb()
mdefine_line|#define __flush_tlb_one(a,b)   __flush_tlb()
macro_line|#else
DECL|function|__flush_tlb_one
r_static
r_inline
r_void
id|__flush_tlb_one
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|addr
)paren
(brace
id|pgd_t
op_star
id|pgdir
suffix:semicolon
id|pmd_t
op_star
id|pmd
suffix:semicolon
id|pte_t
op_star
id|pte
comma
op_star
id|pto
suffix:semicolon
id|pgdir
op_assign
id|pgd_offset
c_func
(paren
id|mm
comma
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pgd_none
c_func
(paren
op_star
id|pgdir
)paren
op_logical_or
id|pgd_bad
c_func
(paren
op_star
id|pgdir
)paren
)paren
r_return
suffix:semicolon
id|pmd
op_assign
id|pmd_offset
c_func
(paren
id|pgdir
comma
id|addr
)paren
suffix:semicolon
r_if
c_cond
(paren
id|pmd_none
c_func
(paren
op_star
id|pmd
)paren
op_logical_or
id|pmd_bad
c_func
(paren
op_star
id|pmd
)paren
)paren
r_return
suffix:semicolon
id|pte
op_assign
id|pte_offset
c_func
(paren
id|pmd
comma
id|addr
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * S390 has 1mb segments, we are emulating 4MB segments&n;&t; */
id|pto
op_assign
(paren
id|pte_t
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|pte
)paren
op_amp
l_int|0x7ffffc00
)paren
suffix:semicolon
id|__asm__
id|__volatile
c_func
(paren
l_string|&quot;    ic   0,2(%0)&bslash;n&quot;
l_string|&quot;    ipte %1,%2&bslash;n&quot;
l_string|&quot;    stc  0,2(%0)&quot;
suffix:colon
suffix:colon
l_string|&quot;a&quot;
(paren
id|pte
)paren
comma
l_string|&quot;a&quot;
(paren
id|pto
)paren
comma
l_string|&quot;a&quot;
(paren
id|addr
)paren
suffix:colon
l_string|&quot;0&quot;
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifndef CONFIG_SMP
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb()       __flush_tlb()
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all()   __flush_tlb()
DECL|macro|local_flush_tlb
mdefine_line|#define local_flush_tlb() __flush_tlb()
multiline_comment|/*&n; * We always need to flush, since s390 does not flush tlb&n; * on each context switch&n; */
DECL|function|flush_tlb_mm
r_static
r_inline
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_page
r_static
r_inline
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|addr
)paren
(brace
id|__flush_tlb_one
c_func
(paren
id|vma-&gt;vm_mm
comma
id|addr
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
id|__flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
macro_line|#else
multiline_comment|/*&n; * We aren&squot;t very clever about this yet -  SMP could certainly&n; * avoid some global flushes..&n; */
macro_line|#include &lt;asm/smp.h&gt;
DECL|macro|local_flush_tlb
mdefine_line|#define local_flush_tlb() &bslash;&n;        __flush_tlb()
multiline_comment|/*&n; *      We only have to do global flush of tlb if process run since last&n; *      flush on any other pu than current. &n; *      If we have threads (mm-&gt;count &gt; 1) we always do a global flush, &n; *      since the process runs on more than one processor at the same time.&n; */
DECL|function|flush_tlb_current_task
r_static
r_inline
r_void
id|flush_tlb_current_task
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
(paren
id|atomic_read
c_func
(paren
op_amp
id|current-&gt;mm-&gt;mm_count
)paren
op_ne
l_int|1
)paren
op_logical_or
(paren
id|current-&gt;mm-&gt;cpu_vm_mask
op_ne
(paren
l_int|1UL
op_lshift
id|smp_processor_id
c_func
(paren
)paren
)paren
)paren
)paren
(brace
id|current-&gt;mm-&gt;cpu_vm_mask
op_assign
(paren
l_int|1UL
op_lshift
id|smp_processor_id
c_func
(paren
)paren
)paren
suffix:semicolon
id|__flush_global_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id|local_flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|macro|flush_tlb
mdefine_line|#define flush_tlb() flush_tlb_current_task()
DECL|macro|flush_tlb_all
mdefine_line|#define flush_tlb_all() __flush_global_tlb()
DECL|function|flush_tlb_mm
r_static
r_inline
r_void
id|flush_tlb_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
r_if
c_cond
(paren
(paren
id|atomic_read
c_func
(paren
op_amp
id|mm-&gt;mm_count
)paren
op_ne
l_int|1
)paren
op_logical_or
(paren
id|mm-&gt;cpu_vm_mask
op_ne
(paren
l_int|1UL
op_lshift
id|smp_processor_id
c_func
(paren
)paren
)paren
)paren
)paren
(brace
id|mm-&gt;cpu_vm_mask
op_assign
(paren
l_int|1UL
op_lshift
id|smp_processor_id
c_func
(paren
)paren
)paren
suffix:semicolon
id|__flush_global_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id|local_flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
DECL|function|flush_tlb_page
r_static
r_inline
r_void
id|flush_tlb_page
c_func
(paren
r_struct
id|vm_area_struct
op_star
id|vma
comma
r_int
r_int
id|va
)paren
(brace
id|__flush_tlb_one
c_func
(paren
id|vma-&gt;vm_mm
comma
id|va
)paren
suffix:semicolon
)brace
DECL|function|flush_tlb_range
r_static
r_inline
r_void
id|flush_tlb_range
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
r_if
c_cond
(paren
(paren
id|atomic_read
c_func
(paren
op_amp
id|mm-&gt;mm_count
)paren
op_ne
l_int|1
)paren
op_logical_or
(paren
id|mm-&gt;cpu_vm_mask
op_ne
(paren
l_int|1UL
op_lshift
id|smp_processor_id
c_func
(paren
)paren
)paren
)paren
)paren
(brace
id|mm-&gt;cpu_vm_mask
op_assign
(paren
l_int|1UL
op_lshift
id|smp_processor_id
c_func
(paren
)paren
)paren
suffix:semicolon
id|__flush_global_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id|local_flush_tlb
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
macro_line|#endif
DECL|function|flush_tlb_pgtables
r_extern
r_inline
r_void
id|flush_tlb_pgtables
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|start
comma
r_int
r_int
id|end
)paren
(brace
multiline_comment|/* S/390 does not keep any page table caches in TLB */
)brace
macro_line|#endif /* _S390_PGALLOC_H */
eof
