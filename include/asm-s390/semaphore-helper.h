multiline_comment|/*&n; *  include/asm-s390/semaphore-helper.h&n; *&n; *  S390 version&n; *    Copyright (C) 1999 IBM Deutschland Entwicklung GmbH, IBM Corporation&n; *&n; *  Derived from &quot;include/asm-i386/semaphore-helper.h&quot;&n; *    (C) Copyright 1996 Linus Torvalds&n; *    (C) Copyright 1999 Andrea Arcangeli&n; */
macro_line|#ifndef _S390_SEMAPHORE_HELPER_H
DECL|macro|_S390_SEMAPHORE_HELPER_H
mdefine_line|#define _S390_SEMAPHORE_HELPER_H
multiline_comment|/*&n; * These two _must_ execute atomically wrt each other.&n; *&n; * This is trivially done with load_locked/store_cond,&n; * but on the x86 we need an external synchronizer.&n; */
DECL|function|wake_one_more
r_static
r_inline
r_void
id|wake_one_more
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
id|sem-&gt;waking
op_increment
suffix:semicolon
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
)brace
DECL|function|waking_non_zero
r_static
r_inline
r_int
id|waking_non_zero
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sem-&gt;waking
OG
l_int|0
)paren
(brace
id|sem-&gt;waking
op_decrement
suffix:semicolon
id|ret
op_assign
l_int|1
suffix:semicolon
)brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * waking_non_zero_interruptible:&n; *&t;1&t;got the lock&n; *&t;0&t;go to sleep&n; *&t;-EINTR&t;interrupted&n; *&n; * If we give up we must undo our count-decrease we previously did in down().&n; * Subtle: up() can continue to happens and increase the semaphore count&n; * even during our critical section protected by the spinlock. So&n; * we must remeber to undo the sem-&gt;waking that will be run from&n; * wake_one_more() some time soon, if the semaphore count become &gt; 0.&n; */
DECL|function|waking_non_zero_interruptible
r_static
r_inline
r_int
id|waking_non_zero_interruptible
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
comma
r_struct
id|task_struct
op_star
id|tsk
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
id|ret
op_assign
l_int|0
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sem-&gt;waking
OG
l_int|0
)paren
(brace
id|sem-&gt;waking
op_decrement
suffix:semicolon
id|ret
op_assign
l_int|1
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id|signal_pending
c_func
(paren
id|tsk
)paren
)paren
(brace
r_if
c_cond
(paren
id|atomic_inc_and_test_greater_zero
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
id|sem-&gt;waking
op_decrement
suffix:semicolon
id|ret
op_assign
op_minus
id|EINTR
suffix:semicolon
)brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
multiline_comment|/*&n; * waking_non_zero_trylock:&n; *&t;1&t;failed to lock&n; *&t;0&t;got the lock&n; *&n; * Implementation details are the same of the interruptible case.&n; */
DECL|function|waking_non_zero_trylock
r_static
r_inline
r_int
id|waking_non_zero_trylock
c_func
(paren
r_struct
id|semaphore
op_star
id|sem
)paren
(brace
r_int
r_int
id|flags
suffix:semicolon
r_int
id|ret
op_assign
l_int|1
suffix:semicolon
id|spin_lock_irqsave
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sem-&gt;waking
op_le
l_int|0
)paren
(brace
r_if
c_cond
(paren
id|atomic_inc_and_test_greater_zero
c_func
(paren
op_amp
id|sem-&gt;count
)paren
)paren
id|sem-&gt;waking
op_decrement
suffix:semicolon
)brace
r_else
(brace
id|sem-&gt;waking
op_decrement
suffix:semicolon
id|ret
op_assign
l_int|0
suffix:semicolon
)brace
id|spin_unlock_irqrestore
c_func
(paren
op_amp
id|semaphore_wake_lock
comma
id|flags
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
macro_line|#endif
eof
