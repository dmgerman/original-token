multiline_comment|/*&n; *  include/asm-s390/queue.h&n; *&n; *  S390 version&n; *    Copyright (C) 1999,2000 IBM Deutschland Entwicklung GmbH, IBM Corporation&n; *    Author(s): Denis Joseph Barrow (djbarrow@de.ibm.com,barrow_dj@yahoo.com)&n; *&n; *  A little set of queue utilies.&n; */
macro_line|#include &lt;linux/stddef.h&gt;
macro_line|#include &lt;asm/types.h&gt;
DECL|struct|queue
r_typedef
r_struct
id|queue
(brace
DECL|member|next
r_struct
id|queue
op_star
id|next
suffix:semicolon
DECL|typedef|queue
)brace
id|queue
suffix:semicolon
DECL|typedef|list
r_typedef
id|queue
id|list
suffix:semicolon
r_typedef
r_struct
(brace
DECL|member|head
id|queue
op_star
id|head
suffix:semicolon
DECL|member|tail
id|queue
op_star
id|tail
suffix:semicolon
DECL|typedef|qheader
)brace
id|qheader
suffix:semicolon
DECL|function|init_queue
r_static
id|__inline__
r_void
id|init_queue
c_func
(paren
id|qheader
op_star
id|qhead
)paren
(brace
id|memset
c_func
(paren
id|qhead
comma
l_int|0
comma
r_sizeof
(paren
op_star
id|qhead
)paren
)paren
suffix:semicolon
)brace
DECL|function|enqueue_tail
r_static
id|__inline__
r_void
id|enqueue_tail
c_func
(paren
id|qheader
op_star
id|qhead
comma
id|queue
op_star
id|member
)paren
(brace
id|queue
op_star
id|tail
op_assign
id|qhead-&gt;tail
suffix:semicolon
id|member-&gt;next
op_assign
l_int|NULL
suffix:semicolon
r_if
c_cond
(paren
id|member
)paren
(brace
r_if
c_cond
(paren
id|tail
)paren
(brace
id|tail-&gt;next
op_assign
id|member
suffix:semicolon
)brace
r_else
id|qhead-&gt;head
op_assign
id|member
suffix:semicolon
id|qhead-&gt;tail
op_assign
id|member
suffix:semicolon
id|member-&gt;next
op_assign
l_int|NULL
suffix:semicolon
)brace
)brace
DECL|function|dequeue_head
r_static
id|__inline__
id|queue
op_star
id|dequeue_head
c_func
(paren
id|qheader
op_star
id|qhead
)paren
(brace
id|queue
op_star
id|head
op_assign
id|qhead-&gt;head
comma
op_star
id|next_head
suffix:semicolon
r_if
c_cond
(paren
id|head
)paren
(brace
id|next_head
op_assign
id|head-&gt;next
suffix:semicolon
id|qhead-&gt;head
op_assign
id|next_head
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|next_head
)paren
(brace
id|qhead-&gt;tail
op_assign
l_int|NULL
suffix:semicolon
)brace
)brace
r_return
id|head
suffix:semicolon
)brace
DECL|function|init_list
r_static
id|__inline__
r_void
id|init_list
c_func
(paren
id|list
op_star
op_star
id|lhead
)paren
(brace
op_star
id|lhead
op_assign
l_int|NULL
suffix:semicolon
)brace
DECL|function|add_to_list
r_static
id|__inline__
r_void
id|add_to_list
c_func
(paren
id|list
op_star
op_star
id|lhead
comma
id|list
op_star
id|member
)paren
(brace
id|member-&gt;next
op_assign
op_star
id|lhead
suffix:semicolon
op_star
id|lhead
op_assign
id|member
suffix:semicolon
)brace
DECL|function|is_in_list
r_static
id|__inline__
r_int
id|is_in_list
c_func
(paren
id|list
op_star
id|lhead
comma
id|list
op_star
id|member
)paren
(brace
id|list
op_star
id|curr
suffix:semicolon
r_for
c_loop
(paren
id|curr
op_assign
id|lhead
suffix:semicolon
id|curr
op_ne
l_int|NULL
suffix:semicolon
id|curr
op_assign
id|curr-&gt;next
)paren
r_if
c_cond
(paren
id|curr
op_eq
id|member
)paren
(brace
r_return
id|TRUE
suffix:semicolon
)brace
r_return
id|FALSE
suffix:semicolon
)brace
DECL|function|get_prev
r_static
id|__inline__
r_int
id|get_prev
c_func
(paren
id|list
op_star
id|lhead
comma
id|list
op_star
id|member
comma
id|list
op_star
op_star
id|prev
)paren
(brace
id|list
op_star
id|curr
suffix:semicolon
op_star
id|prev
op_assign
l_int|NULL
suffix:semicolon
r_for
c_loop
(paren
id|curr
op_assign
id|lhead
suffix:semicolon
id|curr
op_ne
l_int|NULL
suffix:semicolon
id|curr
op_assign
id|curr-&gt;next
)paren
(brace
r_if
c_cond
(paren
id|curr
op_eq
id|member
)paren
(brace
r_return
id|TRUE
suffix:semicolon
)brace
op_star
id|prev
op_assign
id|curr
suffix:semicolon
)brace
op_star
id|prev
op_assign
l_int|NULL
suffix:semicolon
r_return
id|FALSE
suffix:semicolon
)brace
DECL|function|remove_from_list
r_static
id|__inline__
r_int
id|remove_from_list
c_func
(paren
id|list
op_star
op_star
id|lhead
comma
id|list
op_star
id|member
)paren
(brace
id|list
op_star
id|prev
suffix:semicolon
r_if
c_cond
(paren
id|get_prev
c_func
(paren
op_star
id|lhead
comma
id|member
comma
op_amp
id|prev
)paren
)paren
(brace
r_if
c_cond
(paren
id|prev
)paren
(brace
id|prev-&gt;next
op_assign
id|member-&gt;next
suffix:semicolon
)brace
r_else
op_star
id|lhead
op_assign
id|member-&gt;next
suffix:semicolon
r_return
id|TRUE
suffix:semicolon
)brace
r_return
id|FALSE
suffix:semicolon
)brace
eof
