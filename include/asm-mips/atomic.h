multiline_comment|/*&n; * Atomic operations that C can&squot;t guarantee us.  Useful for&n; * resource counting etc..&n; *&n; * But use these as seldom as possible since they are much more slower&n; * than regular operations.&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1996, 1997 by Ralf Baechle&n; *&n; * $Id: atomic.h,v 1.6 1999/07/26 19:42:42 harald Exp $&n; */
macro_line|#ifndef __ASM_ATOMIC_H
DECL|macro|__ASM_ATOMIC_H
mdefine_line|#define __ASM_ATOMIC_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#ifdef CONFIG_SMP
DECL|member|counter
DECL|typedef|atomic_t
r_typedef
r_struct
(brace
r_volatile
r_int
id|counter
suffix:semicolon
)brace
id|atomic_t
suffix:semicolon
macro_line|#else
DECL|member|counter
DECL|typedef|atomic_t
r_typedef
r_struct
(brace
r_int
id|counter
suffix:semicolon
)brace
id|atomic_t
suffix:semicolon
macro_line|#endif
macro_line|#ifdef __KERNEL__
DECL|macro|ATOMIC_INIT
mdefine_line|#define ATOMIC_INIT(i)    { (i) }
DECL|macro|atomic_read
mdefine_line|#define atomic_read(v)&t;((v)-&gt;counter)
DECL|macro|atomic_set
mdefine_line|#define atomic_set(v,i)&t;((v)-&gt;counter = (i))
macro_line|#if !defined(CONFIG_CPU_HAS_LLSC)
macro_line|#include &lt;asm/system.h&gt;
multiline_comment|/*&n; * The MIPS I implementation is only atomic with respect to&n; * interrupts.  R3000 based multiprocessor machines are rare anyway ...&n; */
DECL|function|atomic_add
r_extern
id|__inline__
r_void
id|atomic_add
c_func
(paren
r_int
id|i
comma
r_volatile
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|flags
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|v-&gt;counter
op_add_assign
id|i
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
DECL|function|atomic_sub
r_extern
id|__inline__
r_void
id|atomic_sub
c_func
(paren
r_int
id|i
comma
r_volatile
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|flags
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|v-&gt;counter
op_sub_assign
id|i
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
DECL|function|atomic_add_return
r_extern
id|__inline__
r_int
id|atomic_add_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|temp
comma
id|flags
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|temp
op_assign
id|v-&gt;counter
suffix:semicolon
id|temp
op_add_assign
id|i
suffix:semicolon
id|v-&gt;counter
op_assign
id|temp
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|temp
suffix:semicolon
)brace
DECL|function|atomic_sub_return
r_extern
id|__inline__
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
id|temp
comma
id|flags
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|temp
op_assign
id|v-&gt;counter
suffix:semicolon
id|temp
op_sub_assign
id|i
suffix:semicolon
id|v-&gt;counter
op_assign
id|temp
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|temp
suffix:semicolon
)brace
DECL|function|atomic_clear_mask
r_extern
id|__inline__
r_void
id|atomic_clear_mask
c_func
(paren
r_int
r_int
id|mask
comma
r_int
r_int
op_star
id|v
)paren
(brace
r_int
r_int
id|temp
suffix:semicolon
r_int
id|flags
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|temp
op_assign
op_star
id|v
suffix:semicolon
id|temp
op_and_assign
op_complement
id|mask
suffix:semicolon
op_star
id|v
op_assign
id|temp
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
macro_line|#else
multiline_comment|/*&n; * ... while for MIPS II and better we can use ll/sc instruction.  This&n; * implementation is SMP safe ...&n; */
multiline_comment|/*&n; * Make sure gcc doesn&squot;t try to be clever and move things around&n; * on us. We need to use _exactly_ the address the user gave us,&n; * not some alias that contains the same information.&n; */
DECL|macro|__atomic_fool_gcc
mdefine_line|#define __atomic_fool_gcc(x) (*(volatile struct { int a[100]; } *)x)
DECL|function|atomic_add
r_extern
id|__inline__
r_void
id|atomic_add
c_func
(paren
r_int
id|i
comma
r_volatile
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tll&bslash;t%0,%1&bslash;n&bslash;t&quot;
l_string|&quot;addu&bslash;t%0,%2&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0,%1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0,1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|i
)paren
comma
l_string|&quot;m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
)paren
suffix:semicolon
)brace
DECL|function|atomic_sub
r_extern
id|__inline__
r_void
id|atomic_sub
c_func
(paren
r_int
id|i
comma
r_volatile
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|temp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;tll&bslash;t%0,%1&bslash;n&bslash;t&quot;
l_string|&quot;subu&bslash;t%0,%2&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0,%1&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0,1b&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|i
)paren
comma
l_string|&quot;m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Same as above, but return the result value&n; */
DECL|function|atomic_add_return
r_extern
id|__inline__
r_int
id|atomic_add_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|temp
comma
id|result
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&quot;
l_string|&quot;1:&bslash;tll&bslash;t%1,%2&bslash;n&bslash;t&quot;
l_string|&quot;addu&bslash;t%0,%1,%3&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0,%2&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0,1b&bslash;n&bslash;t&quot;
l_string|&quot;addu&bslash;t%0,%1,%3&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|result
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|i
)paren
comma
l_string|&quot;m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
DECL|function|atomic_sub_return
r_extern
id|__inline__
r_int
id|atomic_sub_return
c_func
(paren
r_int
id|i
comma
id|atomic_t
op_star
id|v
)paren
(brace
r_int
r_int
id|temp
comma
id|result
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&quot;
l_string|&quot;1:&bslash;tll&bslash;t%1,%2&bslash;n&bslash;t&quot;
l_string|&quot;subu&bslash;t%0,%1,%3&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t%0,%2&bslash;n&bslash;t&quot;
l_string|&quot;beqz&bslash;t%0,1b&bslash;n&bslash;t&quot;
l_string|&quot;subu&bslash;t%0,%1,%3&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|result
)paren
comma
l_string|&quot;=&amp;r&quot;
(paren
id|temp
)paren
comma
l_string|&quot;=m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
suffix:colon
l_string|&quot;Ir&quot;
(paren
id|i
)paren
comma
l_string|&quot;m&quot;
(paren
id|__atomic_fool_gcc
c_func
(paren
id|v
)paren
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
macro_line|#endif
DECL|macro|atomic_dec_return
mdefine_line|#define atomic_dec_return(v) atomic_sub_return(1,(v))
DECL|macro|atomic_inc_return
mdefine_line|#define atomic_inc_return(v) atomic_add_return(1,(v))
DECL|macro|atomic_sub_and_test
mdefine_line|#define atomic_sub_and_test(i,v) (atomic_sub_return((i), (v)) == 0)
DECL|macro|atomic_dec_and_test
mdefine_line|#define atomic_dec_and_test(v) (atomic_sub_return(1, (v)) == 0)
DECL|macro|atomic_inc
mdefine_line|#define atomic_inc(v) atomic_add(1,(v))
DECL|macro|atomic_dec
mdefine_line|#define atomic_dec(v) atomic_sub(1,(v))
macro_line|#endif /* defined(__KERNEL__) */
macro_line|#endif /* __ASM_MIPS_ATOMIC_H */
eof
