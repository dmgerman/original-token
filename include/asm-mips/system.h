multiline_comment|/*&n; * include/asm-mips/system.h&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1994, 1995 by Ralf Baechle&n; */
macro_line|#ifndef __ASM_MIPS_SYSTEM_H
DECL|macro|__ASM_MIPS_SYSTEM_H
mdefine_line|#define __ASM_MIPS_SYSTEM_H
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#if defined (__R4000__)
DECL|macro|sti
mdefine_line|#define sti()                            &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;                 &bslash;&n;&t;&quot;mfc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;ori&bslash;t$1,0x1f&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;xori&bslash;t$1,0x1e&bslash;n&bslash;t&quot;              &bslash;&n;&t;&quot;mtc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;.set&bslash;tat&bslash;n&bslash;t&quot;                   &bslash;&n;&t;&quot;.set&bslash;treorder&quot;                  &bslash;&n;&t;: /* no outputs */               &bslash;&n;&t;: /* no inputs */                &bslash;&n;&t;: &quot;$1&quot;)
DECL|macro|cli
mdefine_line|#define cli()                            &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;                 &bslash;&n;&t;&quot;mfc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;ori&bslash;t$1,1&bslash;n&bslash;t&quot;                  &bslash;&n;&t;&quot;xori&bslash;t$1,1&bslash;n&bslash;t&quot;                 &bslash;&n;&t;&quot;mtc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;nop&bslash;n&bslash;t&quot;                        &bslash;&n;&t;&quot;nop&bslash;n&bslash;t&quot;                        &bslash;&n;&t;&quot;nop&bslash;n&bslash;t&quot;                        &bslash;&n;&t;&quot;.set&bslash;tat&bslash;n&bslash;t&quot;                   &bslash;&n;&t;&quot;.set&bslash;treorder&quot;                  &bslash;&n;&t;: /* no outputs */               &bslash;&n;&t;: /* no inputs */                &bslash;&n;&t;: &quot;$1&quot;)
macro_line|#else /* !defined (__R4000__) */
multiline_comment|/*&n; * Untested goodies for the R3000 based DECstation et al.&n; */
DECL|macro|sti
mdefine_line|#define sti()                            &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;                 &bslash;&n;&t;&quot;mfc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;ori&bslash;t$1,0x01&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;mtc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;.set&bslash;tat&bslash;n&bslash;t&quot;                   &bslash;&n;&t;&quot;.set&bslash;treorder&quot;                  &bslash;&n;&t;: /* no outputs */               &bslash;&n;&t;: /* no inputs */                &bslash;&n;&t;: &quot;$1&quot;)
DECL|macro|cli
mdefine_line|#define cli()                            &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;                 &bslash;&n;&t;&quot;mfc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;ori&bslash;t$1,1&bslash;n&bslash;t&quot;                  &bslash;&n;&t;&quot;xori&bslash;t$1,1&bslash;n&bslash;t&quot;                 &bslash;&n;&t;&quot;mtc0&bslash;t$1,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;.set&bslash;tat&bslash;n&bslash;t&quot;                   &bslash;&n;&t;&quot;.set&bslash;treorder&quot;                  &bslash;&n;&t;: /* no outputs */               &bslash;&n;&t;: /* no inputs */                &bslash;&n;&t;: &quot;$1&quot;)
macro_line|#endif /* !defined (__R4000__) */
DECL|macro|nop
mdefine_line|#define nop() __asm__ __volatile__ (&quot;nop&quot;)
DECL|macro|save_flags
mdefine_line|#define save_flags(x)                    &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;mfc0&bslash;t%0,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;.set&bslash;treorder&quot;                  &bslash;&n;&t;: &quot;=r&quot; (x))                      &bslash;&n;
DECL|macro|restore_flags
mdefine_line|#define restore_flags(x)                 &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;mtc0&bslash;t%0,$12&bslash;n&bslash;t&quot;               &bslash;&n;&t;&quot;nop&bslash;n&bslash;t&quot;                        &bslash;&n;&t;&quot;nop&bslash;n&bslash;t&quot;                        &bslash;&n;&t;&quot;nop&bslash;n&bslash;t&quot;                        &bslash;&n;&t;&quot;.set&bslash;treorder&quot;                  &bslash;&n;&t;: /* no output */                &bslash;&n;&t;: &quot;r&quot; (x))                       &bslash;&n;
DECL|macro|sync_mem
mdefine_line|#define sync_mem()                       &bslash;&n;__asm__ __volatile__(                    &bslash;&n;&t;&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;            &bslash;&n;&t;&quot;sync&bslash;n&bslash;t&quot;                       &bslash;&n;&t;&quot;.set&bslash;treorder&quot;)                 &bslash;&n;
multiline_comment|/*&n; * The 8 and 16 bit variants have to disable interrupts temporarily.&n; * Both are currently unused.&n; */
DECL|function|xchg_u8
r_extern
r_inline
r_int
r_int
id|xchg_u8
c_func
(paren
r_volatile
r_char
op_star
id|m
comma
r_int
r_int
id|val
)paren
(brace
r_int
r_int
id|flags
comma
id|retval
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|sti
c_func
(paren
)paren
suffix:semicolon
id|retval
op_assign
op_star
id|m
suffix:semicolon
op_star
id|m
op_assign
id|val
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
DECL|function|xchg_u16
r_extern
r_inline
r_int
r_int
id|xchg_u16
c_func
(paren
r_volatile
r_int
op_star
id|m
comma
r_int
r_int
id|val
)paren
(brace
r_int
r_int
id|flags
comma
id|retval
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|sti
c_func
(paren
)paren
suffix:semicolon
id|retval
op_assign
op_star
id|m
suffix:semicolon
op_star
id|m
op_assign
id|val
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
multiline_comment|/*&n; * For 32 and 64 bit operands we can take advantage of ll and sc.&n; * FIXME: This doesn&squot;t work for R3000 machines.&n; */
DECL|function|xchg_u32
r_extern
r_inline
r_int
r_int
id|xchg_u32
c_func
(paren
r_volatile
r_int
op_star
id|m
comma
r_int
r_int
id|val
)paren
(brace
r_int
r_int
id|dummy
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;
l_string|&quot;ll&bslash;t%0,(%1)&bslash;n&quot;
l_string|&quot;1:&bslash;tmove&bslash;t$1,%2&bslash;n&bslash;t&quot;
l_string|&quot;sc&bslash;t$1,(%1)&bslash;n&bslash;t&quot;
l_string|&quot;beqzl&bslash;t$1,1b&bslash;n&bslash;t&quot;
l_string|&quot;ll&bslash;t%0,(%1)&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|val
)paren
comma
l_string|&quot;=r&quot;
(paren
id|m
)paren
comma
l_string|&quot;=r&quot;
(paren
id|dummy
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|m
)paren
comma
l_string|&quot;2&quot;
(paren
id|val
)paren
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
multiline_comment|/*&n; * Only used for 64 bit kernel.&n; */
DECL|function|xchg_u64
r_extern
r_inline
r_int
r_int
id|xchg_u64
c_func
(paren
r_volatile
r_int
op_star
id|m
comma
r_int
r_int
id|val
)paren
(brace
r_int
r_int
id|dummy
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&bslash;t&quot;
l_string|&quot;lld&bslash;t%0,(%1)&bslash;n&quot;
l_string|&quot;1:&bslash;tmove&bslash;t$1,%2&bslash;n&bslash;t&quot;
l_string|&quot;scd&bslash;t$1,(%1)&bslash;n&bslash;t&quot;
l_string|&quot;beqzl&bslash;t$1,1b&bslash;n&bslash;t&quot;
l_string|&quot;ll&bslash;t%0,(%1)&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|val
)paren
comma
l_string|&quot;=r&quot;
(paren
id|m
)paren
comma
l_string|&quot;=r&quot;
(paren
id|dummy
)paren
suffix:colon
l_string|&quot;1&quot;
(paren
id|m
)paren
comma
l_string|&quot;2&quot;
(paren
id|val
)paren
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|macro|xchg
mdefine_line|#define xchg(ptr,x) ((__typeof__(*(ptr)))__xchg((unsigned long)(x),(ptr),sizeof(*(ptr))))
DECL|macro|tas
mdefine_line|#define tas(ptr) (xchg((ptr),1))
multiline_comment|/*&n; * This function doesn&squot;t exist, so you&squot;ll get a linker error&n; * if something tries to do an invalid xchg().&n; *&n; * This only works if the compiler isn&squot;t horribly bad at optimizing.&n; * gcc-2.5.8 reportedly can&squot;t handle this, but I define that one to&n; * be dead anyway.&n; */
r_extern
r_void
id|__xchg_called_with_bad_pointer
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|__xchg
r_static
r_inline
r_int
r_int
id|__xchg
c_func
(paren
r_int
r_int
id|x
comma
r_volatile
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
r_return
id|xchg_u8
c_func
(paren
id|ptr
comma
id|x
)paren
suffix:semicolon
r_case
l_int|2
suffix:colon
r_return
id|xchg_u16
c_func
(paren
id|ptr
comma
id|x
)paren
suffix:semicolon
r_case
l_int|4
suffix:colon
r_return
id|xchg_u32
c_func
(paren
id|ptr
comma
id|x
)paren
suffix:semicolon
r_case
l_int|8
suffix:colon
r_return
id|xchg_u64
c_func
(paren
id|ptr
comma
id|x
)paren
suffix:semicolon
)brace
id|__xchg_called_with_bad_pointer
c_func
(paren
)paren
suffix:semicolon
r_return
id|x
suffix:semicolon
)brace
r_extern
r_int
r_int
id|IRQ_vectors
(braket
l_int|16
)braket
suffix:semicolon
r_extern
r_int
r_int
id|exception_handlers
(braket
l_int|32
)braket
suffix:semicolon
DECL|macro|set_int_vector
mdefine_line|#define set_int_vector(n,addr) &bslash;&n;&t;IRQ_vectors[n] = (unsigned long) (addr)
DECL|macro|set_except_vector
mdefine_line|#define set_except_vector(n,addr) &bslash;&n;&t;exception_handlers[n] = (unsigned long) (addr)
macro_line|#endif /* __ASM_MIPS_SYSTEM_H */
eof
