multiline_comment|/*&n; * include/asm-mips/segment.h&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1994 by Ralf Baechle&n; *&n; */
macro_line|#ifndef __ASM_MIPS_SEGMENT_H
DECL|macro|__ASM_MIPS_SEGMENT_H
mdefine_line|#define __ASM_MIPS_SEGMENT_H
multiline_comment|/*&n; * Memory segments (32bit kernel mode addresses)&n; */
DECL|macro|KUSEG
mdefine_line|#define KUSEG                   0x00000000
DECL|macro|KSEG0
mdefine_line|#define KSEG0                   0x80000000
DECL|macro|KSEG1
mdefine_line|#define KSEG1                   0xa0000000
DECL|macro|KSEG2
mdefine_line|#define KSEG2                   0xc0000000
DECL|macro|KSEG3
mdefine_line|#define KSEG3                   0xe0000000
multiline_comment|/*&n; * returns the kernel segment base of a given address&n; * Address space is a scarce resource on a R3000, so&n; * emulate the Intel segment braindamage...&n; */
DECL|macro|KSEGX
mdefine_line|#define KSEGX(a)                (a &amp; 0xe0000000)
DECL|macro|KERNEL_CS
mdefine_line|#define KERNEL_CS&t;KERNELBASE
DECL|macro|KERNEL_DS
mdefine_line|#define KERNEL_DS&t;KERNEL_CS
DECL|macro|USER_CS
mdefine_line|#define USER_CS&t;&t;0x00000000
DECL|macro|USER_DS
mdefine_line|#define USER_DS&t;&t;USER_CS
macro_line|#ifndef __ASSEMBLY__
multiline_comment|/*&n; * This variable is defined in arch/mips/kernel/head.S.&n; */
r_extern
r_int
r_int
id|segment_fs
suffix:semicolon
DECL|macro|get_fs_byte
mdefine_line|#define get_fs_byte(addr) get_user_byte((char *)(addr))
DECL|function|get_user_byte
r_static
r_inline
r_int
r_char
id|get_user_byte
c_func
(paren
r_const
r_char
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_const
r_char
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
suffix:semicolon
)brace
DECL|macro|get_fs_word
mdefine_line|#define get_fs_word(addr) get_user_word((short *)(addr))
DECL|function|get_user_word
r_static
r_inline
r_int
r_int
id|get_user_word
c_func
(paren
r_const
r_int
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_const
r_int
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
suffix:semicolon
)brace
DECL|macro|get_fs_long
mdefine_line|#define get_fs_long(addr) get_user_long((int *)(addr))
DECL|function|get_user_long
r_static
r_inline
r_int
r_int
id|get_user_long
c_func
(paren
r_const
r_int
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_const
r_int
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
suffix:semicolon
)brace
DECL|macro|get_fs_dlong
mdefine_line|#define get_fs_dlong(addr) get_user_dlong((long long *)(addr))
DECL|function|get_user_dlong
r_static
r_inline
r_int
r_int
id|get_user_dlong
c_func
(paren
r_const
r_int
r_int
op_star
id|addr
)paren
(brace
r_return
op_star
(paren
r_const
r_int
r_int
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
suffix:semicolon
)brace
DECL|macro|put_fs_byte
mdefine_line|#define put_fs_byte(x,addr) put_user_byte((x),(char *)(addr))
DECL|function|put_user_byte
r_static
r_inline
r_void
id|put_user_byte
c_func
(paren
r_char
id|val
comma
r_char
op_star
id|addr
)paren
(brace
op_star
(paren
r_char
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
op_assign
id|val
suffix:semicolon
)brace
DECL|macro|put_fs_word
mdefine_line|#define put_fs_word(x,addr) put_user_word((x),(short *)(addr))
DECL|function|put_user_word
r_static
r_inline
r_void
id|put_user_word
c_func
(paren
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
op_star
(paren
r_int
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
op_assign
id|val
suffix:semicolon
)brace
DECL|macro|put_fs_long
mdefine_line|#define put_fs_long(x,addr) put_user_long((x),(int *)(addr))
DECL|function|put_user_long
r_static
r_inline
r_void
id|put_user_long
c_func
(paren
r_int
r_int
id|val
comma
r_int
op_star
id|addr
)paren
(brace
op_star
(paren
r_int
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
op_assign
id|val
suffix:semicolon
)brace
DECL|macro|put_fs_dlong
mdefine_line|#define put_fs_dlong(x,addr) put_user_dlong((x),(int *)(addr))
DECL|function|put_user_dlong
r_static
r_inline
r_void
id|put_user_dlong
c_func
(paren
r_int
r_int
id|val
comma
r_int
r_int
op_star
id|addr
)paren
(brace
op_star
(paren
r_int
r_int
op_star
)paren
(paren
(paren
(paren
r_int
r_int
)paren
id|addr
)paren
op_plus
id|segment_fs
)paren
op_assign
id|val
suffix:semicolon
)brace
DECL|function|__generic_memcpy_tofs
r_static
r_inline
r_void
id|__generic_memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&quot;
l_string|&quot;1:&bslash;tlbu&bslash;t$1,(%2)&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%2,%2,1&bslash;n&bslash;t&quot;
l_string|&quot;sb&bslash;t$1,(%1)&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%0,%0,-1&bslash;n&bslash;t&quot;
l_string|&quot;bne&bslash;t$0,%0,1b&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%1,%1,1&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|n
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
(paren
r_int
)paren
id|to
)paren
op_or
id|segment_fs
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
r_int
)paren
id|from
)paren
suffix:colon
l_string|&quot;$1&quot;
)paren
suffix:semicolon
)brace
DECL|function|__constant_memcpy_tofs
r_static
r_inline
r_void
id|__constant_memcpy_tofs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
multiline_comment|/*&n;&t; * Use put_user_byte to avoid trouble with alignment.&n;&t; */
r_switch
c_cond
(paren
id|n
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
id|put_user_byte
c_func
(paren
op_star
(paren
r_const
r_char
op_star
)paren
id|from
comma
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
id|put_user_byte
c_func
(paren
op_star
(paren
r_const
r_char
op_star
)paren
id|from
comma
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|1
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|1
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
id|put_user_byte
c_func
(paren
op_star
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|1
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|1
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|2
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|4
suffix:colon
id|put_user_byte
c_func
(paren
op_star
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|1
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|1
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|2
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
id|put_user_byte
c_func
(paren
op_star
(paren
l_int|3
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
comma
l_int|3
op_plus
(paren
r_char
op_star
)paren
id|to
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|__generic_memcpy_tofs
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|function|__generic_memcpy_fromfs
r_static
r_inline
r_void
id|__generic_memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
id|__asm__
c_func
(paren
l_string|&quot;.set&bslash;tnoreorder&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tnoat&bslash;n&quot;
l_string|&quot;1:&bslash;tlbu&bslash;t$1,(%2)&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%2,%2,1&bslash;n&bslash;t&quot;
l_string|&quot;sb&bslash;t$1,(%1)&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%0,%0,-1&bslash;n&bslash;t&quot;
l_string|&quot;bne&bslash;t$0,%0,1b&bslash;n&bslash;t&quot;
l_string|&quot;addiu&bslash;t%1,%1,1&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;tat&bslash;n&bslash;t&quot;
l_string|&quot;.set&bslash;treorder&quot;
suffix:colon
multiline_comment|/* no outputs */
suffix:colon
l_string|&quot;r&quot;
(paren
id|n
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
r_int
)paren
id|to
)paren
comma
l_string|&quot;r&quot;
(paren
(paren
(paren
r_int
)paren
id|from
op_or
id|segment_fs
)paren
)paren
suffix:colon
l_string|&quot;$1&quot;
comma
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
DECL|function|__constant_memcpy_fromfs
r_static
r_inline
r_void
id|__constant_memcpy_fromfs
c_func
(paren
r_void
op_star
id|to
comma
r_const
r_void
op_star
id|from
comma
r_int
r_int
id|n
)paren
(brace
multiline_comment|/*&n;&t; * Use put_user_byte to avoid trouble with alignment.&n;&t; */
r_switch
c_cond
(paren
id|n
)paren
(brace
r_case
l_int|0
suffix:colon
r_return
suffix:semicolon
r_case
l_int|1
suffix:colon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|2
suffix:colon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
l_int|1
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|3
suffix:colon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
l_int|1
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
r_case
l_int|4
suffix:colon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
l_int|1
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
l_int|2
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
op_star
(paren
r_char
op_star
)paren
id|to
op_assign
id|get_user_byte
c_func
(paren
l_int|3
op_plus
(paren
r_const
r_char
op_star
)paren
id|from
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|__generic_memcpy_fromfs
c_func
(paren
id|to
comma
id|from
comma
id|n
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
DECL|macro|memcpy_fromfs
mdefine_line|#define memcpy_fromfs(to, from, n) &bslash;&n;(__builtin_constant_p(n) ? &bslash;&n; __constant_memcpy_fromfs((to),(from),(n)) : &bslash;&n; __generic_memcpy_fromfs((to),(from),(n)))
DECL|macro|memcpy_tofs
mdefine_line|#define memcpy_tofs(to, from, n) &bslash;&n;(__builtin_constant_p(n) ? &bslash;&n; __constant_memcpy_tofs((to),(from),(n)) : &bslash;&n; __generic_memcpy_tofs((to),(from),(n)))
DECL|function|get_fs
r_static
r_inline
r_int
r_int
id|get_fs
c_func
(paren
r_void
)paren
(brace
r_return
id|segment_fs
suffix:semicolon
)brace
DECL|function|get_ds
r_static
r_inline
r_int
r_int
id|get_ds
c_func
(paren
r_void
)paren
(brace
r_return
id|KERNEL_DS
suffix:semicolon
)brace
DECL|function|set_fs
r_static
r_inline
r_void
id|set_fs
c_func
(paren
r_int
r_int
id|val
)paren
(brace
id|segment_fs
op_assign
id|val
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* __ASM_MIPS_SEGMENT_H */
eof
