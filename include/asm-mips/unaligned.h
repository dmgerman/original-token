multiline_comment|/* $Id$&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1996, 1999 by Ralf Baechle&n; */
macro_line|#ifndef _ASM_UNALIGNED_H
DECL|macro|_ASM_UNALIGNED_H
mdefine_line|#define _ASM_UNALIGNED_H
r_extern
r_void
id|__get_unaligned_bad_length
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|__put_unaligned_bad_length
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * Load quad unaligned.&n; */
DECL|function|ldq_u
r_extern
id|__inline__
r_int
r_int
id|ldq_u
c_func
(paren
r_const
r_int
r_int
r_int
op_star
id|__addr
)paren
(brace
r_int
r_int
r_int
id|__res
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;uld&bslash;t%0,(%1)&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|__res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|__addr
)paren
)paren
suffix:semicolon
r_return
id|__res
suffix:semicolon
)brace
multiline_comment|/*&n; * Load long unaligned.&n; */
DECL|function|ldl_u
r_extern
id|__inline__
r_int
r_int
id|ldl_u
c_func
(paren
r_const
r_int
r_int
op_star
id|__addr
)paren
(brace
r_int
r_int
id|__res
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;ulw&bslash;t%0,(%1)&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|__res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|__addr
)paren
)paren
suffix:semicolon
r_return
id|__res
suffix:semicolon
)brace
multiline_comment|/*&n; * Load word unaligned.&n; */
DECL|function|ldw_u
r_extern
id|__inline__
r_int
r_int
id|ldw_u
c_func
(paren
r_const
r_int
r_int
op_star
id|__addr
)paren
(brace
r_int
r_int
id|__res
suffix:semicolon
id|__asm__
c_func
(paren
l_string|&quot;ulh&bslash;t%0,(%1)&quot;
suffix:colon
l_string|&quot;=&amp;r&quot;
(paren
id|__res
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|__addr
)paren
)paren
suffix:semicolon
r_return
id|__res
suffix:semicolon
)brace
multiline_comment|/*&n; * Store quad ununaligned.&n; */
DECL|function|stq_u
r_extern
id|__inline__
r_void
id|stq_u
c_func
(paren
r_int
r_int
id|__val
comma
r_int
r_int
r_int
op_star
id|__addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;usd&bslash;t%0,(%1)&quot;
suffix:colon
multiline_comment|/* No results */
suffix:colon
l_string|&quot;r&quot;
(paren
id|__val
)paren
comma
l_string|&quot;r&quot;
(paren
id|__addr
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Store long ununaligned.&n; */
DECL|function|stl_u
r_extern
id|__inline__
r_void
id|stl_u
c_func
(paren
r_int
r_int
id|__val
comma
r_int
r_int
op_star
id|__addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;usw&bslash;t%0,(%1)&quot;
suffix:colon
multiline_comment|/* No results */
suffix:colon
l_string|&quot;r&quot;
(paren
id|__val
)paren
comma
l_string|&quot;r&quot;
(paren
id|__addr
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Store word ununaligned.&n; */
DECL|function|stw_u
r_extern
id|__inline__
r_void
id|stw_u
c_func
(paren
r_int
r_int
id|__val
comma
r_int
r_int
op_star
id|__addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;ush&bslash;t%0,(%1)&quot;
suffix:colon
multiline_comment|/* No results */
suffix:colon
l_string|&quot;r&quot;
(paren
id|__val
)paren
comma
l_string|&quot;r&quot;
(paren
id|__addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|__get_unaligned
r_extern
r_inline
r_int
r_int
id|__get_unaligned
c_func
(paren
r_const
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_int
r_int
id|val
suffix:semicolon
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
id|val
op_assign
op_star
(paren
r_const
r_int
r_char
op_star
)paren
id|ptr
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|val
op_assign
id|ldw_u
c_func
(paren
(paren
r_const
r_int
r_int
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|val
op_assign
id|ldl_u
c_func
(paren
(paren
r_const
r_int
r_int
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|val
op_assign
id|ldq_u
c_func
(paren
(paren
r_const
r_int
r_int
r_int
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|__get_unaligned_bad_length
c_func
(paren
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
r_return
id|val
suffix:semicolon
)brace
DECL|function|__put_unaligned
r_extern
r_inline
r_void
id|__put_unaligned
c_func
(paren
r_int
r_int
id|val
comma
r_void
op_star
id|ptr
comma
r_int
id|size
)paren
(brace
r_switch
c_cond
(paren
id|size
)paren
(brace
r_case
l_int|1
suffix:colon
op_star
(paren
r_int
r_char
op_star
)paren
id|ptr
op_assign
(paren
id|val
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|2
suffix:colon
id|stw_u
c_func
(paren
id|val
comma
(paren
r_int
r_int
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|4
suffix:colon
id|stl_u
c_func
(paren
id|val
comma
(paren
r_int
r_int
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|8
suffix:colon
id|stq_u
c_func
(paren
id|val
comma
(paren
r_int
r_int
r_int
op_star
)paren
id|ptr
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|__put_unaligned_bad_length
c_func
(paren
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
multiline_comment|/* &n; * The main single-value unaligned transfer routines.&n; */
DECL|macro|get_unaligned
mdefine_line|#define get_unaligned(ptr) &bslash;&n;&t;((__typeof__(*(ptr)))__get_unaligned((ptr), sizeof(*(ptr))))
DECL|macro|put_unaligned
mdefine_line|#define put_unaligned(x,ptr) &bslash;&n;&t;__put_unaligned((unsigned long)(x), (ptr), sizeof(*(ptr)))
macro_line|#endif /* _ASM_UNALIGNED_H */
eof
