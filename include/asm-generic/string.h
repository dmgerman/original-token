multiline_comment|/*&n; * include/asm-generic/string.h&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; */
macro_line|#ifndef _ASM_GENERIC_STRING_H_
DECL|macro|_ASM_GENERIC_STRING_H_
mdefine_line|#define _ASM_GENERIC_STRING_H_
multiline_comment|/*&n; * Portable string functions. These are not complete:&n; * memcpy() and memmove() are still missing.&n; */
macro_line|#ifdef __USE_PORTABLE_strcpy
DECL|function|strcpy
r_extern
r_inline
r_char
op_star
id|strcpy
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|src
)paren
(brace
r_char
op_star
id|xdest
op_assign
id|dest
suffix:semicolon
r_while
c_loop
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|src
op_increment
)paren
(brace
suffix:semicolon
)brace
r_return
id|xdest
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strncpy
DECL|function|strncpy
r_extern
r_inline
r_char
op_star
id|strncpy
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|src
comma
r_int
id|count
)paren
(brace
r_char
op_star
id|xdest
op_assign
id|dest
suffix:semicolon
r_while
c_loop
(paren
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|src
op_increment
)paren
op_logical_and
op_decrement
id|count
)paren
(brace
suffix:semicolon
)brace
r_return
id|dest
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strcat
DECL|function|strcat
r_extern
r_inline
r_char
op_star
id|strcat
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|src
)paren
(brace
r_char
op_star
id|tmp
op_assign
id|dest
suffix:semicolon
r_while
c_loop
(paren
op_star
id|dest
)paren
id|dest
op_increment
suffix:semicolon
r_while
c_loop
(paren
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|src
op_increment
)paren
)paren
suffix:semicolon
r_return
id|tmp
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strncat
DECL|function|strncat
r_extern
r_inline
r_char
op_star
id|strncat
c_func
(paren
r_char
op_star
id|dest
comma
r_const
r_char
op_star
id|src
comma
r_int
id|count
)paren
(brace
r_char
op_star
id|tmp
op_assign
id|dest
suffix:semicolon
r_if
c_cond
(paren
id|count
)paren
(brace
r_while
c_loop
(paren
op_star
id|dest
)paren
id|dest
op_increment
suffix:semicolon
r_while
c_loop
(paren
(paren
op_star
id|dest
op_increment
op_assign
op_star
id|src
op_increment
)paren
)paren
(brace
r_if
c_cond
(paren
op_decrement
id|count
op_eq
l_int|0
)paren
r_break
suffix:semicolon
)brace
)brace
r_return
id|tmp
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strcmp
DECL|function|strcmp
r_extern
r_int
id|strcmp
c_func
(paren
r_const
r_char
op_star
id|cs
comma
r_const
r_char
op_star
id|ct
)paren
(brace
r_register
r_char
id|__res
suffix:semicolon
r_while
c_loop
(paren
l_int|1
)paren
(brace
r_if
c_cond
(paren
id|__res
op_assign
op_star
id|cs
op_minus
op_star
id|ct
op_increment
op_logical_and
op_star
id|cs
op_increment
)paren
(brace
r_break
suffix:semicolon
)brace
)brace
r_return
id|__res
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strncmp
DECL|function|strncmp
r_extern
r_inline
r_int
id|strncmp
c_func
(paren
r_const
r_char
op_star
id|cs
comma
r_const
r_char
op_star
id|ct
comma
r_int
id|count
)paren
(brace
r_register
r_char
id|__res
suffix:semicolon
r_while
c_loop
(paren
id|count
)paren
(brace
r_if
c_cond
(paren
id|__res
op_assign
op_star
id|cs
op_minus
op_star
id|ct
op_increment
op_logical_or
op_logical_neg
op_star
id|cs
op_increment
)paren
(brace
r_break
suffix:semicolon
)brace
id|count
op_decrement
suffix:semicolon
)brace
r_return
id|__res
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strchr
DECL|function|strchr
r_extern
r_inline
r_char
op_star
id|strchr
c_func
(paren
r_const
r_char
op_star
id|s
comma
r_char
id|c
)paren
(brace
r_const
r_char
id|ch
op_assign
id|c
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
op_star
id|s
op_ne
id|ch
suffix:semicolon
op_increment
id|s
)paren
r_if
c_cond
(paren
op_star
id|s
op_eq
l_char|&squot;&bslash;0&squot;
)paren
r_return
l_int|NULL
suffix:semicolon
r_return
(paren
r_char
op_star
)paren
id|s
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strlen
DECL|function|strlen
r_extern
r_inline
r_int
id|strlen
c_func
(paren
r_const
r_char
op_star
id|s
)paren
(brace
r_const
r_char
op_star
id|sc
suffix:semicolon
r_for
c_loop
(paren
id|sc
op_assign
id|s
suffix:semicolon
op_star
id|sc
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|sc
)paren
suffix:semicolon
r_return
id|sc
op_minus
id|s
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strspn
DECL|function|strspn
r_extern
r_inline
r_int
id|strspn
c_func
(paren
r_const
r_char
op_star
id|s
comma
r_const
r_char
op_star
id|accept
)paren
(brace
r_const
r_char
op_star
id|p
suffix:semicolon
r_const
r_char
op_star
id|a
suffix:semicolon
r_int
id|count
op_assign
l_int|0
suffix:semicolon
r_for
c_loop
(paren
id|p
op_assign
id|s
suffix:semicolon
op_star
id|p
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|p
)paren
(brace
r_for
c_loop
(paren
id|a
op_assign
id|accept
suffix:semicolon
op_star
id|a
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|a
)paren
r_if
c_cond
(paren
op_star
id|p
op_eq
op_star
id|a
)paren
r_break
suffix:semicolon
r_if
c_cond
(paren
op_star
id|a
op_eq
l_char|&squot;&bslash;0&squot;
)paren
r_return
id|count
suffix:semicolon
r_else
op_increment
id|count
suffix:semicolon
)brace
r_return
id|count
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strpbrk
DECL|function|strpbrk
r_extern
r_inline
r_char
op_star
id|strpbrk
c_func
(paren
r_const
r_char
op_star
id|cs
comma
r_const
r_char
op_star
id|ct
)paren
(brace
r_const
r_char
op_star
id|sc1
comma
op_star
id|sc2
suffix:semicolon
r_for
c_loop
(paren
id|sc1
op_assign
id|cs
suffix:semicolon
op_star
id|sc1
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|sc1
)paren
r_for
c_loop
(paren
id|sc2
op_assign
id|ct
suffix:semicolon
op_star
id|sc2
op_ne
l_char|&squot;&bslash;0&squot;
suffix:semicolon
op_increment
id|sc2
)paren
r_if
c_cond
(paren
op_star
id|sc1
op_eq
op_star
id|sc2
)paren
r_return
(paren
r_char
op_star
)paren
id|sc1
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_strtok
DECL|function|strtok
r_extern
r_inline
r_char
op_star
id|strtok
c_func
(paren
r_char
op_star
id|s
comma
r_const
r_char
op_star
id|ct
)paren
(brace
r_char
op_star
id|sbegin
comma
op_star
id|send
suffix:semicolon
r_static
r_char
op_star
id|ssave
op_assign
l_int|NULL
suffix:semicolon
id|sbegin
op_assign
id|s
ques
c_cond
id|s
suffix:colon
id|ssave
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|sbegin
)paren
(brace
r_return
l_int|NULL
suffix:semicolon
)brace
id|sbegin
op_add_assign
id|strspn
c_func
(paren
id|sbegin
comma
id|ct
)paren
suffix:semicolon
r_if
c_cond
(paren
op_star
id|sbegin
op_eq
l_char|&squot;&bslash;0&squot;
)paren
(brace
id|ssave
op_assign
l_int|NULL
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
id|send
op_assign
id|strpbrk
c_func
(paren
id|sbegin
comma
id|ct
)paren
suffix:semicolon
r_if
c_cond
(paren
id|send
op_logical_and
op_star
id|send
op_ne
l_char|&squot;&bslash;0&squot;
)paren
op_star
id|send
op_increment
op_assign
l_char|&squot;&bslash;0&squot;
suffix:semicolon
id|ssave
op_assign
id|send
suffix:semicolon
r_return
(paren
id|sbegin
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_memset
DECL|function|memset
r_extern
r_inline
r_void
op_star
id|memset
c_func
(paren
r_void
op_star
id|s
comma
r_char
id|c
comma
r_int
id|count
)paren
(brace
r_void
op_star
id|xs
op_assign
id|s
suffix:semicolon
r_while
c_loop
(paren
id|n
op_decrement
)paren
(brace
op_star
id|s
op_increment
op_assign
id|c
suffix:semicolon
)brace
r_return
id|xs
suffix:semicolon
)brace
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_memcpy
macro_line|#error &quot;Portable memcpy() not implemented yet&quot;
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_memmove
macro_line|#error &quot;Portable memmove() not implemented yet&quot;
macro_line|#endif
macro_line|#ifdef __USE_PORTABLE_memcmp
DECL|function|memcmp
r_extern
r_inline
r_int
id|memcmp
c_func
(paren
r_const
r_void
op_star
id|cs
comma
r_const
r_void
op_star
id|ct
comma
r_int
id|count
)paren
(brace
r_const
r_int
r_char
op_star
id|su1
comma
op_star
id|su2
suffix:semicolon
r_for
c_loop
(paren
id|su1
op_assign
id|cs
comma
id|su2
op_assign
id|ct
suffix:semicolon
l_int|0
OL
id|count
suffix:semicolon
op_increment
id|su1
comma
op_increment
id|su2
comma
id|count
op_decrement
)paren
r_if
c_cond
(paren
op_star
id|su1
op_ne
op_star
id|su2
)paren
r_return
(paren
op_star
id|su1
OL
op_star
id|su2
)paren
ques
c_cond
op_minus
l_int|1
suffix:colon
op_plus
l_int|1
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif /* _ASM_GENERIC_STRING_H_ */
eof
