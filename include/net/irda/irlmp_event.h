multiline_comment|/*********************************************************************&n; *                &n; * Filename:      irlmp_event.h&n; * Version:       0.1&n; * Description:   IrDA-LMP event handling&n; * Status:        Experimental.&n; * Author:        Dag Brattli &lt;dagb@cs.uit.no&gt;&n; * Created at:    Mon Aug  4 20:40:53 1997&n; * Modified at:   Thu Jul  8 12:18:54 1999&n; * Modified by:   Dag Brattli &lt;dagb@cs.uit.no&gt;&n; * &n; *     Copyright (c) 1997, 1999 Dag Brattli &lt;dagb@cs.uit.no&gt;, &n; *     All Rights Reserved.&n; *     &n; *     This program is free software; you can redistribute it and/or &n; *     modify it under the terms of the GNU General Public License as &n; *     published by the Free Software Foundation; either version 2 of &n; *     the License, or (at your option) any later version.&n; *&n; *     Neither Dag Brattli nor University of Troms&#xfffd; admit liability nor&n; *     provide warranty for any of this software. This material is &n; *     provided &quot;AS-IS&quot; and at no charge.&n; *&n; ********************************************************************/
macro_line|#ifndef IRLMP_EVENT_H
DECL|macro|IRLMP_EVENT_H
mdefine_line|#define IRLMP_EVENT_H
r_struct
id|irlmp_cb
suffix:semicolon
r_struct
id|lsap_cb
suffix:semicolon
r_struct
id|lap_cb
suffix:semicolon
multiline_comment|/* LAP states */
r_typedef
r_enum
(brace
multiline_comment|/* IrLAP connection control states */
DECL|enumerator|LAP_STANDBY
id|LAP_STANDBY
comma
multiline_comment|/* No LAP connection */
DECL|enumerator|LAP_U_CONNECT
id|LAP_U_CONNECT
comma
multiline_comment|/* Starting LAP connection */
DECL|enumerator|LAP_ACTIVE
id|LAP_ACTIVE
comma
multiline_comment|/* LAP connection is active */
DECL|typedef|IRLMP_STATE
)brace
id|IRLMP_STATE
suffix:semicolon
multiline_comment|/* LSAP connection control states */
r_typedef
r_enum
(brace
DECL|enumerator|LSAP_DISCONNECTED
id|LSAP_DISCONNECTED
comma
multiline_comment|/* No LSAP connection */
DECL|enumerator|LSAP_CONNECT
id|LSAP_CONNECT
comma
multiline_comment|/* Connect indication from peer */
DECL|enumerator|LSAP_CONNECT_PEND
id|LSAP_CONNECT_PEND
comma
multiline_comment|/* Connect request from service user */
DECL|enumerator|LSAP_DATA_TRANSFER_READY
id|LSAP_DATA_TRANSFER_READY
comma
multiline_comment|/* LSAP connection established */
DECL|enumerator|LSAP_SETUP
id|LSAP_SETUP
comma
multiline_comment|/* Trying to set up LSAP connection */
DECL|enumerator|LSAP_SETUP_PEND
id|LSAP_SETUP_PEND
comma
multiline_comment|/* Request to start LAP connection */
DECL|typedef|LSAP_STATE
)brace
id|LSAP_STATE
suffix:semicolon
r_typedef
r_enum
(brace
multiline_comment|/* LSAP events */
DECL|enumerator|LM_CONNECT_REQUEST
id|LM_CONNECT_REQUEST
comma
DECL|enumerator|LM_CONNECT_CONFIRM
id|LM_CONNECT_CONFIRM
comma
DECL|enumerator|LM_CONNECT_RESPONSE
id|LM_CONNECT_RESPONSE
comma
DECL|enumerator|LM_CONNECT_INDICATION
id|LM_CONNECT_INDICATION
comma
DECL|enumerator|LM_DISCONNECT_INDICATION
id|LM_DISCONNECT_INDICATION
comma
DECL|enumerator|LM_DISCONNECT_REQUEST
id|LM_DISCONNECT_REQUEST
comma
DECL|enumerator|LM_DATA_REQUEST
id|LM_DATA_REQUEST
comma
DECL|enumerator|LM_UDATA_REQUEST
id|LM_UDATA_REQUEST
comma
DECL|enumerator|LM_DATA_INDICATION
id|LM_DATA_INDICATION
comma
DECL|enumerator|LM_UDATA_INDICATION
id|LM_UDATA_INDICATION
comma
DECL|enumerator|LM_WATCHDOG_TIMEOUT
id|LM_WATCHDOG_TIMEOUT
comma
multiline_comment|/* IrLAP events */
DECL|enumerator|LM_LAP_CONNECT_REQUEST
id|LM_LAP_CONNECT_REQUEST
comma
DECL|enumerator|LM_LAP_CONNECT_INDICATION
id|LM_LAP_CONNECT_INDICATION
comma
DECL|enumerator|LM_LAP_CONNECT_CONFIRM
id|LM_LAP_CONNECT_CONFIRM
comma
DECL|enumerator|LM_LAP_DISCONNECT_INDICATION
id|LM_LAP_DISCONNECT_INDICATION
comma
DECL|enumerator|LM_LAP_DISCONNECT_REQUEST
id|LM_LAP_DISCONNECT_REQUEST
comma
DECL|enumerator|LM_LAP_DISCOVERY_REQUEST
id|LM_LAP_DISCOVERY_REQUEST
comma
DECL|enumerator|LM_LAP_DISCOVERY_CONFIRM
id|LM_LAP_DISCOVERY_CONFIRM
comma
DECL|enumerator|LM_LAP_IDLE_TIMEOUT
id|LM_LAP_IDLE_TIMEOUT
comma
DECL|typedef|IRLMP_EVENT
)brace
id|IRLMP_EVENT
suffix:semicolon
multiline_comment|/*&n; *  Information which is used by the current thread, when executing in the&n; *  state machine.&n; */
DECL|struct|irlmp_event
r_struct
id|irlmp_event
(brace
DECL|member|event
id|IRLMP_EVENT
op_star
id|event
suffix:semicolon
DECL|member|skb
r_struct
id|sk_buff
op_star
id|skb
suffix:semicolon
DECL|member|hint
id|__u8
id|hint
suffix:semicolon
DECL|member|daddr
id|__u32
id|daddr
suffix:semicolon
DECL|member|saddr
id|__u32
id|saddr
suffix:semicolon
DECL|member|slsap
id|__u8
id|slsap
suffix:semicolon
DECL|member|dlsap
id|__u8
id|dlsap
suffix:semicolon
DECL|member|reason
r_int
id|reason
suffix:semicolon
DECL|member|discovery
id|discovery_t
op_star
id|discovery
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_const
r_char
op_star
id|irlmp_state
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
op_star
id|irlsap_state
(braket
)braket
suffix:semicolon
r_void
id|irlmp_watchdog_timer_expired
c_func
(paren
r_void
op_star
id|data
)paren
suffix:semicolon
r_void
id|irlmp_discovery_timer_expired
c_func
(paren
r_void
op_star
id|data
)paren
suffix:semicolon
r_void
id|irlmp_idle_timer_expired
c_func
(paren
r_void
op_star
id|data
)paren
suffix:semicolon
r_void
id|irlmp_next_station_state
c_func
(paren
id|IRLMP_STATE
id|state
)paren
suffix:semicolon
r_void
id|irlmp_next_lsap_state
c_func
(paren
r_struct
id|lsap_cb
op_star
id|self
comma
id|LSAP_STATE
id|state
)paren
suffix:semicolon
r_void
id|irlmp_next_lap_state
c_func
(paren
r_struct
id|lap_cb
op_star
id|self
comma
id|IRLMP_STATE
id|state
)paren
suffix:semicolon
r_void
id|irlmp_do_lap_event
c_func
(paren
r_struct
id|lap_cb
op_star
id|self
comma
id|IRLMP_EVENT
id|event
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_int
id|irlmp_do_lsap_event
c_func
(paren
r_struct
id|lsap_cb
op_star
id|self
comma
id|IRLMP_EVENT
id|event
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
macro_line|#endif /* IRLMP_EVENT_H */
eof
