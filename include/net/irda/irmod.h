multiline_comment|/*********************************************************************&n; *                &n; * Filename:      irmod.h&n; * Version:       0.3&n; * Description:   IrDA module and utilities functions&n; * Status:        Experimental.&n; * Author:        Dag Brattli &lt;dagb@cs.uit.no&gt;&n; * Created at:    Mon Dec 15 13:58:52 1997&n; * Modified at:   Fri Jan 28 13:15:24 2000&n; * Modified by:   Dag Brattli &lt;dagb@cs.uit.no&gt;&n; *&n; *     Copyright (c) 1998-2000 Dag Brattli, All Rights Reserved.&n; *      &n; *     This program is free software; you can redistribute it and/or &n; *     modify it under the terms of the GNU General Public License as &n; *     published by the Free Software Foundation; either version 2 of &n; *     the License, or (at your option) any later version.&n; *  &n; *     Neither Dag Brattli nor University of Troms&#xfffd; admit liability nor&n; *     provide warranty for any of this software. This material is &n; *     provided &quot;AS-IS&quot; and at no charg.&n; *     &n; ********************************************************************/
macro_line|#ifndef IRMOD_H
DECL|macro|IRMOD_H
mdefine_line|#define IRMOD_H
macro_line|#include &lt;linux/skbuff.h&gt;
macro_line|#include &lt;linux/miscdevice.h&gt;
macro_line|#include &lt;net/irda/irqueue.h&gt;
DECL|macro|IRMGR_IOC_MAGIC
mdefine_line|#define IRMGR_IOC_MAGIC &squot;m&squot;
DECL|macro|IRMGR_IOCTNPC
mdefine_line|#define IRMGR_IOCTNPC     _IO(IRMGR_IOC_MAGIC, 1)
DECL|macro|IRMGR_IOC_MAXNR
mdefine_line|#define IRMGR_IOC_MAXNR   1 
multiline_comment|/*&n; *  Events that we pass to the user space manager&n; */
r_typedef
r_enum
(brace
DECL|enumerator|EVENT_DEVICE_DISCOVERED
id|EVENT_DEVICE_DISCOVERED
op_assign
l_int|0
comma
DECL|enumerator|EVENT_REQUEST_MODULE
id|EVENT_REQUEST_MODULE
comma
DECL|enumerator|EVENT_IRLAN_START
id|EVENT_IRLAN_START
comma
DECL|enumerator|EVENT_IRLAN_STOP
id|EVENT_IRLAN_STOP
comma
DECL|enumerator|EVENT_IRLPT_START
id|EVENT_IRLPT_START
comma
multiline_comment|/* Obsolete */
DECL|enumerator|EVENT_IRLPT_STOP
id|EVENT_IRLPT_STOP
comma
multiline_comment|/* Obsolete */
DECL|enumerator|EVENT_IROBEX_START
id|EVENT_IROBEX_START
comma
multiline_comment|/* Obsolete */
DECL|enumerator|EVENT_IROBEX_STOP
id|EVENT_IROBEX_STOP
comma
multiline_comment|/* Obsolete */
DECL|enumerator|EVENT_IRDA_STOP
id|EVENT_IRDA_STOP
comma
DECL|enumerator|EVENT_NEED_PROCESS_CONTEXT
id|EVENT_NEED_PROCESS_CONTEXT
comma
DECL|typedef|IRMGR_EVENT
)brace
id|IRMGR_EVENT
suffix:semicolon
multiline_comment|/*&n; *  Event information passed to the IrManager daemon process&n; */
DECL|struct|irmanager_event
r_struct
id|irmanager_event
(brace
DECL|member|event
id|IRMGR_EVENT
id|event
suffix:semicolon
DECL|member|devname
r_char
id|devname
(braket
l_int|10
)braket
suffix:semicolon
DECL|member|info
r_char
id|info
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|service
r_int
id|service
suffix:semicolon
DECL|member|saddr
id|__u32
id|saddr
suffix:semicolon
DECL|member|daddr
id|__u32
id|daddr
suffix:semicolon
)brace
suffix:semicolon
DECL|typedef|TODO_CALLBACK
r_typedef
r_void
(paren
op_star
id|TODO_CALLBACK
)paren
(paren
r_void
op_star
id|self
comma
id|__u32
id|param
)paren
suffix:semicolon
multiline_comment|/*&n; *  Same as irmanager_event but this one can be queued and inclueds some&n; *  addtional information&n; */
DECL|struct|irda_event
r_struct
id|irda_event
(brace
DECL|member|q
id|irda_queue_t
id|q
suffix:semicolon
multiline_comment|/* Must be first */
DECL|member|event
r_struct
id|irmanager_event
id|event
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *  Funtions with needs to be called with a process context&n; */
DECL|struct|irda_todo
r_struct
id|irda_todo
(brace
DECL|member|q
id|irda_queue_t
id|q
suffix:semicolon
multiline_comment|/* Must be first */
DECL|member|self
r_void
op_star
id|self
suffix:semicolon
DECL|member|callback
id|TODO_CALLBACK
id|callback
suffix:semicolon
DECL|member|param
id|__u32
id|param
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *  Main structure for the IrDA device (not much here :-)&n; */
DECL|struct|irda_cb
r_struct
id|irda_cb
(brace
DECL|member|dev
r_struct
id|miscdevice
id|dev
suffix:semicolon
DECL|member|wait_queue
id|wait_queue_head_t
id|wait_queue
suffix:semicolon
DECL|member|in_use
r_int
id|in_use
suffix:semicolon
DECL|member|event_queue
id|irda_queue_t
op_star
id|event_queue
suffix:semicolon
multiline_comment|/* Events queued for the irmanager */
DECL|member|todo_queue
id|irda_queue_t
op_star
id|todo_queue
suffix:semicolon
multiline_comment|/* Todo list */
)brace
suffix:semicolon
r_int
id|irmod_init_module
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|irmod_cleanup_module
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * Function irda_lock (lock)&n; *&n; *    Lock variable. Returns false if the lock is already set.&n; *    &n; */
DECL|function|irda_lock
r_static
r_inline
r_int
id|irda_lock
c_func
(paren
r_int
op_star
id|lock
)paren
(brace
r_if
c_cond
(paren
id|test_and_set_bit
c_func
(paren
l_int|0
comma
(paren
r_void
op_star
)paren
id|lock
)paren
)paren
(brace
id|IRDA_DEBUG
c_func
(paren
l_int|3
comma
id|__FUNCTION__
l_string|&quot;(), Trying to lock, already locked variable!&bslash;n&quot;
)paren
suffix:semicolon
r_return
id|FALSE
suffix:semicolon
)brace
r_return
id|TRUE
suffix:semicolon
)brace
r_inline
r_int
id|irda_unlock
c_func
(paren
r_int
op_star
id|lock
)paren
suffix:semicolon
r_void
id|irda_notify_init
c_func
(paren
id|notify_t
op_star
id|notify
)paren
suffix:semicolon
r_void
id|irda_execute_as_process
c_func
(paren
r_void
op_star
id|self
comma
id|TODO_CALLBACK
id|callback
comma
id|__u32
id|param
)paren
suffix:semicolon
r_void
id|irmanager_notify
c_func
(paren
r_struct
id|irmanager_event
op_star
id|event
)paren
suffix:semicolon
r_extern
r_void
id|irda_proc_modcount
c_func
(paren
r_struct
id|inode
op_star
comma
r_int
)paren
suffix:semicolon
r_void
id|irda_mod_inc_use_count
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|irda_mod_dec_use_count
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#endif /* IRMOD_H */
eof
