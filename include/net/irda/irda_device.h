multiline_comment|/*********************************************************************&n; *                &n; * Filename:      irda_device.h&n; * Version:       &n; * Description:   &n; * Status:        Experimental.&n; * Author:        Dag Brattli &lt;dagb@cs.uit.no&gt;&n; * Created at:    Tue Apr 14 12:41:42 1998&n; * Modified at:   Mon May 10 15:46:02 1999&n; * Modified by:   Dag Brattli &lt;dagb@cs.uit.no&gt;&n; * &n; *     Copyright (c) 1999 Dag Brattli, All Rights Reserved.&n; *     Copyright (c) 1998 Thomas Davis, &lt;ratbert@radiks.net&gt;,&n; *     Copyright (c) 1998 Haris Zukanovic, &lt;haris@stud.cs.uit.no&gt;&n; *&n; *     This program is free software; you can redistribute it and/or &n; *     modify it under the terms of the GNU General Public License as &n; *     published by the Free Software Foundation; either version 2 of &n; *     the License, or (at your option) any later version.&n; * &n; *     This program is distributed in the hope that it will be useful,&n; *     but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&n; *     GNU General Public License for more details.&n; * &n; *     You should have received a copy of the GNU General Public License &n; *     along with this program; if not, write to the Free Software &n; *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, &n; *     MA 02111-1307 USA&n; *     &n; ********************************************************************/
macro_line|#ifndef IRDA_DEVICE_H
DECL|macro|IRDA_DEVICE_H
mdefine_line|#define IRDA_DEVICE_H
macro_line|#include &lt;linux/tty.h&gt;
macro_line|#include &lt;linux/netdevice.h&gt;
macro_line|#include &lt;asm/spinlock.h&gt;
macro_line|#include &lt;net/irda/irda.h&gt;
macro_line|#include &lt;net/irda/qos.h&gt;
macro_line|#include &lt;net/irda/dongle.h&gt;
macro_line|#include &lt;net/irda/irqueue.h&gt;
macro_line|#include &lt;net/irda/irlap_frame.h&gt;
multiline_comment|/* Some non-standard interface flags (should not conflict with any in if.h) */
DECL|macro|IFF_SIR
mdefine_line|#define IFF_SIR &t;0x0001 /* Supports SIR speeds */
DECL|macro|IFF_MIR
mdefine_line|#define IFF_MIR &t;0x0002 /* Supports MIR speeds */
DECL|macro|IFF_FIR
mdefine_line|#define IFF_FIR &t;0x0004 /* Supports FIR speeds */
DECL|macro|IFF_VFIR
mdefine_line|#define IFF_VFIR        0x0008 /* Supports VFIR speeds */
DECL|macro|IFF_PIO
mdefine_line|#define IFF_PIO   &t;0x0010 /* Supports PIO transfer of data */
DECL|macro|IFF_DMA
mdefine_line|#define IFF_DMA&t;&t;0x0020 /* Supports DMA transfer of data */
DECL|macro|IFF_SHM
mdefine_line|#define IFF_SHM         0x0040 /* Supports shared memory data transfers */
DECL|macro|IFF_DONGLE
mdefine_line|#define IFF_DONGLE      0x0080 /* Interface has a dongle attached */
DECL|macro|IFF_AIR
mdefine_line|#define IFF_AIR         0x0100 /* Supports A(dvanced)IR standards */
DECL|macro|IO_XMIT
mdefine_line|#define IO_XMIT 0x01
DECL|macro|IO_RECV
mdefine_line|#define IO_RECV 0x02
DECL|struct|dongle_q
r_struct
id|dongle_q
(brace
DECL|member|q
id|QUEUE
id|q
suffix:semicolon
DECL|member|dongle
r_struct
id|dongle
op_star
id|dongle
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Chip specific info */
DECL|struct|chipio_t
r_struct
id|chipio_t
(brace
DECL|member|iobase
DECL|member|iobase2
r_int
id|iobase
comma
id|iobase2
suffix:semicolon
multiline_comment|/* IO base */
DECL|member|io_ext
DECL|member|io_ext2
r_int
id|io_ext
comma
id|io_ext2
suffix:semicolon
multiline_comment|/* Length of iobase */
DECL|member|membase
r_int
id|membase
suffix:semicolon
multiline_comment|/* Shared memory base */
DECL|member|irq
DECL|member|irq2
r_int
id|irq
comma
id|irq2
suffix:semicolon
multiline_comment|/* Interrupts used */
DECL|member|fifo_size
r_int
id|fifo_size
suffix:semicolon
multiline_comment|/* FIFO size */
DECL|member|dma
DECL|member|dma2
r_int
id|dma
comma
id|dma2
suffix:semicolon
multiline_comment|/* DMA channel used */
DECL|member|irqflags
r_int
id|irqflags
suffix:semicolon
multiline_comment|/* interrupt flags (ie, SA_SHIRQ|SA_INTERRUPT) */
DECL|member|direction
r_int
id|direction
suffix:semicolon
multiline_comment|/* Link direction, used by some FIR drivers */
DECL|member|baudrate
r_int
id|baudrate
suffix:semicolon
multiline_comment|/* Currently used baudrate */
DECL|member|dongle_id
r_int
id|dongle_id
suffix:semicolon
multiline_comment|/* Dongle or transceiver currently used */
)brace
suffix:semicolon
multiline_comment|/* IO buffer specific info (inspired by struct sk_buff) */
DECL|struct|iobuff_t
r_struct
id|iobuff_t
(brace
DECL|member|state
r_int
id|state
suffix:semicolon
multiline_comment|/* Receiving state (transmit state not used) */
DECL|member|in_frame
r_int
id|in_frame
suffix:semicolon
multiline_comment|/* True if receiving frame */
DECL|member|head
id|__u8
op_star
id|head
suffix:semicolon
multiline_comment|/* start of buffer */
DECL|member|data
id|__u8
op_star
id|data
suffix:semicolon
multiline_comment|/* start of data in buffer */
DECL|member|tail
id|__u8
op_star
id|tail
suffix:semicolon
multiline_comment|/* end of data in buffer */
DECL|member|len
r_int
id|len
suffix:semicolon
multiline_comment|/* length of data */
DECL|member|truesize
r_int
id|truesize
suffix:semicolon
multiline_comment|/* total size of buffer */
DECL|member|fcs
id|__u16
id|fcs
suffix:semicolon
DECL|member|flags
r_int
id|flags
suffix:semicolon
multiline_comment|/* Allocation flags (GFP_KERNEL | GFP_DMA ) */
)brace
suffix:semicolon
multiline_comment|/* &n; * This structure contains data that _we_ would have liked to be in the device&n; * structure, but we don&squot;t want to mess it up more than it is already. Better &n; * to keep the data in separate structures! This structure abstracts common &n; * stuff from IrDA port implementations.&n; */
DECL|struct|irda_device
r_struct
id|irda_device
(brace
DECL|member|q
id|QUEUE
id|q
suffix:semicolon
multiline_comment|/* Must be first */
DECL|member|magic
r_int
id|magic
suffix:semicolon
multiline_comment|/* Our magic bullet */
DECL|member|name
r_char
id|name
(braket
l_int|16
)braket
suffix:semicolon
multiline_comment|/* Name of device &quot;irda0&quot; */
DECL|member|description
r_char
id|description
(braket
l_int|32
)braket
suffix:semicolon
multiline_comment|/* Something like &quot;irda0 &lt;-&gt; ttyS0&quot; */
DECL|member|irlap
r_struct
id|irlap_cb
op_star
id|irlap
suffix:semicolon
multiline_comment|/* The link layer we are connected to  */
DECL|member|netdev
r_struct
id|device
id|netdev
suffix:semicolon
multiline_comment|/* Yes! we are some kind of netdevice */
DECL|member|stats
r_struct
id|enet_statistics
id|stats
suffix:semicolon
DECL|member|flags
r_int
id|flags
suffix:semicolon
multiline_comment|/* Interface flags (see defs above) */
DECL|member|priv
r_void
op_star
id|priv
suffix:semicolon
multiline_comment|/* Pointer to low level implementation */
DECL|member|qos
r_struct
id|qos_info
id|qos
suffix:semicolon
multiline_comment|/* QoS capabilities for this device */
DECL|member|io
r_struct
id|chipio_t
id|io
suffix:semicolon
DECL|member|tx_buff
r_struct
id|iobuff_t
id|tx_buff
suffix:semicolon
DECL|member|rx_buff
r_struct
id|iobuff_t
id|rx_buff
suffix:semicolon
DECL|member|dongle
r_struct
id|dongle
op_star
id|dongle
suffix:semicolon
multiline_comment|/* Dongle driver */
multiline_comment|/* spinlock_t lock; */
multiline_comment|/* For serializing operations */
multiline_comment|/* Media busy stuff */
DECL|member|media_busy
r_int
id|media_busy
suffix:semicolon
DECL|member|media_busy_timer
r_struct
id|timer_list
id|media_busy_timer
suffix:semicolon
multiline_comment|/* Callbacks for driver specific implementation */
DECL|member|change_speed
r_void
(paren
op_star
id|change_speed
)paren
(paren
r_struct
id|irda_device
op_star
id|driver
comma
r_int
id|baud
)paren
suffix:semicolon
DECL|member|is_receiving
r_int
(paren
op_star
id|is_receiving
)paren
(paren
r_struct
id|irda_device
op_star
)paren
suffix:semicolon
multiline_comment|/* receiving? */
DECL|member|set_dtr_rts
r_void
(paren
op_star
id|set_dtr_rts
)paren
(paren
r_struct
id|irda_device
op_star
id|idev
comma
r_int
id|dtr
comma
r_int
id|rts
)paren
suffix:semicolon
DECL|member|raw_write
r_int
(paren
op_star
id|raw_write
)paren
(paren
r_struct
id|irda_device
op_star
id|idev
comma
id|__u8
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
DECL|member|wait_until_sent
r_void
(paren
op_star
id|wait_until_sent
)paren
(paren
r_struct
id|irda_device
op_star
)paren
suffix:semicolon
DECL|member|set_caddr
r_void
(paren
op_star
id|set_caddr
)paren
(paren
r_struct
id|irda_device
op_star
)paren
suffix:semicolon
multiline_comment|/* Set connection addr */
)brace
suffix:semicolon
r_extern
id|hashbin_t
op_star
id|irda_device
suffix:semicolon
multiline_comment|/* Function prototypes */
r_int
id|irda_device_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|irda_device_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
r_int
id|irda_device_open
c_func
(paren
r_struct
id|irda_device
op_star
comma
r_char
op_star
id|name
comma
r_void
op_star
id|priv
)paren
suffix:semicolon
r_void
id|irda_device_close
c_func
(paren
r_struct
id|irda_device
op_star
)paren
suffix:semicolon
multiline_comment|/* Interface to be uses by IrLAP */
r_inline
r_void
id|irda_device_set_media_busy
c_func
(paren
r_struct
id|irda_device
op_star
comma
r_int
id|status
)paren
suffix:semicolon
r_inline
r_int
id|irda_device_is_media_busy
c_func
(paren
r_struct
id|irda_device
op_star
)paren
suffix:semicolon
r_inline
r_int
id|irda_device_is_receiving
c_func
(paren
r_struct
id|irda_device
op_star
)paren
suffix:semicolon
r_inline
r_void
id|irda_device_change_speed
c_func
(paren
r_struct
id|irda_device
op_star
comma
r_int
)paren
suffix:semicolon
r_inline
r_struct
id|qos_info
op_star
id|irda_device_get_qos
c_func
(paren
r_struct
id|irda_device
op_star
id|self
)paren
suffix:semicolon
r_int
id|irda_device_txqueue_empty
c_func
(paren
r_struct
id|irda_device
op_star
id|self
)paren
suffix:semicolon
r_void
id|irda_device_init_dongle
c_func
(paren
r_struct
id|irda_device
op_star
id|self
comma
r_int
id|type
)paren
suffix:semicolon
r_void
id|irda_device_unregister_dongle
c_func
(paren
r_struct
id|dongle
op_star
id|dongle
)paren
suffix:semicolon
r_int
id|irda_device_register_dongle
c_func
(paren
r_struct
id|dongle
op_star
id|dongle
)paren
suffix:semicolon
r_int
id|irda_device_setup
c_func
(paren
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
r_void
id|setup_dma
c_func
(paren
r_int
id|channel
comma
r_char
op_star
id|buffer
comma
r_int
id|count
comma
r_int
id|mode
)paren
suffix:semicolon
multiline_comment|/*&n; * Function irda_get_mtt (skb)&n; *&n; *    Utility function for getting the minimum turnaround time out of &n; *    the skb, where it has been hidden in the cb field.&n; */
DECL|function|irda_get_mtt
r_extern
r_inline
id|__u16
id|irda_get_mtt
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
id|__u16
id|mtt
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
r_struct
id|irlap_skb_cb
op_star
)paren
(paren
id|skb-&gt;cb
)paren
)paren
op_member_access_from_pointer
id|magic
op_ne
id|LAP_MAGIC
)paren
id|mtt
op_assign
l_int|10000
suffix:semicolon
r_else
id|mtt
op_assign
(paren
(paren
r_struct
id|irlap_skb_cb
op_star
)paren
(paren
id|skb-&gt;cb
)paren
)paren
op_member_access_from_pointer
id|mtt
suffix:semicolon
id|ASSERT
c_func
(paren
id|mtt
op_le
l_int|10000
comma
r_return
l_int|10000
suffix:semicolon
)paren
suffix:semicolon
r_return
id|mtt
suffix:semicolon
)brace
DECL|function|irda_device_set_dtr_rts
r_extern
r_inline
r_void
id|irda_device_set_dtr_rts
c_func
(paren
r_struct
id|irda_device
op_star
id|self
comma
r_int
id|dtr
comma
r_int
id|rts
)paren
(brace
r_if
c_cond
(paren
id|self-&gt;set_dtr_rts
)paren
id|self
op_member_access_from_pointer
id|set_dtr_rts
c_func
(paren
id|self
comma
id|dtr
comma
id|rts
)paren
suffix:semicolon
)brace
DECL|function|irda_device_raw_write
r_extern
r_inline
r_int
id|irda_device_raw_write
c_func
(paren
r_struct
id|irda_device
op_star
id|self
comma
id|__u8
op_star
id|buf
comma
r_int
id|len
)paren
(brace
r_int
id|ret
op_assign
op_minus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|self-&gt;raw_write
)paren
id|ret
op_assign
id|self
op_member_access_from_pointer
id|raw_write
c_func
(paren
id|self
comma
id|buf
comma
id|len
)paren
suffix:semicolon
r_return
id|ret
suffix:semicolon
)brace
macro_line|#endif
eof
