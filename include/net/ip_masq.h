multiline_comment|/*&n; * &t;IP masquerading functionality definitions&n; */
macro_line|#ifndef _IP_MASQ_H
DECL|macro|_IP_MASQ_H
mdefine_line|#define _IP_MASQ_H
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/netdevice.h&gt;
macro_line|#include &lt;linux/ip.h&gt;
macro_line|#include &lt;linux/skbuff.h&gt;
macro_line|#endif /* __KERNEL__ */
multiline_comment|/*&n; * This define affects the number of ports that can be handled&n; * by each of the protocol helper modules.&n; */
DECL|macro|MAX_MASQ_APP_PORTS
mdefine_line|#define MAX_MASQ_APP_PORTS 12
multiline_comment|/*&n; *&t;Linux ports don&squot;t normally get allocated above 32K.&n; *&t;I used an extra 4K port-space&n; */
multiline_comment|/*&n; *&t;Linux ports don&squot;t normally get allocated above 32K.&n; *&t;I used an extra 4K port-space&n; */
DECL|macro|PORT_MASQ_BEGIN
mdefine_line|#define PORT_MASQ_BEGIN&t;61000
DECL|macro|PORT_MASQ_END
mdefine_line|#define PORT_MASQ_END&t;(PORT_MASQ_BEGIN+4096)
DECL|macro|MASQUERADE_EXPIRE_TCP
mdefine_line|#define MASQUERADE_EXPIRE_TCP     15*60*HZ
DECL|macro|MASQUERADE_EXPIRE_TCP_FIN
mdefine_line|#define MASQUERADE_EXPIRE_TCP_FIN  2*60*HZ
DECL|macro|MASQUERADE_EXPIRE_UDP
mdefine_line|#define MASQUERADE_EXPIRE_UDP      5*60*HZ
multiline_comment|/* &n; * ICMP can no longer be modified on the fly using an ioctl - this&n; * define is the only way to change the timeouts &n; */
DECL|macro|MASQUERADE_EXPIRE_ICMP
mdefine_line|#define MASQUERADE_EXPIRE_ICMP      125*HZ
DECL|macro|IP_MASQ_F_OUT_SEQ
mdefine_line|#define IP_MASQ_F_OUT_SEQ              &t;0x01&t;/* must do output seq adjust */
DECL|macro|IP_MASQ_F_IN_SEQ
mdefine_line|#define IP_MASQ_F_IN_SEQ              &t;0x02&t;/* must do input seq adjust */
DECL|macro|IP_MASQ_F_NO_DPORT
mdefine_line|#define IP_MASQ_F_NO_DPORT     &t;        0x04&t;/* no dport set yet */
DECL|macro|IP_MASQ_F_NO_DADDR
mdefine_line|#define IP_MASQ_F_NO_DADDR&t;        0x08 &t;/* no daddr yet */
DECL|macro|IP_MASQ_F_HASHED
mdefine_line|#define IP_MASQ_F_HASHED&t;        0x10 &t;/* hashed entry */
DECL|macro|IP_MASQ_F_NO_SPORT
mdefine_line|#define IP_MASQ_F_NO_SPORT&t;       0x200&t;/* no sport set yet */
DECL|macro|IP_MASQ_F_NO_REPLY
mdefine_line|#define IP_MASQ_F_NO_REPLY&t;       0x800&t;/* no reply yet from outside */
DECL|macro|IP_MASQ_F_MPORT
mdefine_line|#define IP_MASQ_F_MPORT&t;&t;      0x1000 &t;/* own mport specified */
macro_line|#ifdef __KERNEL__
multiline_comment|/*&n; *&t;Delta seq. info structure&n; *&t;Each MASQ struct has 2 (output AND input seq. changes).&n; */
DECL|struct|ip_masq_seq
r_struct
id|ip_masq_seq
(brace
DECL|member|init_seq
id|__u32
id|init_seq
suffix:semicolon
multiline_comment|/* Add delta from this seq */
DECL|member|delta
r_int
id|delta
suffix:semicolon
multiline_comment|/* Delta in sequence numbers */
DECL|member|previous_delta
r_int
id|previous_delta
suffix:semicolon
multiline_comment|/* Delta in sequence numbers before last resized pkt */
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;MASQ structure allocated for each masqueraded association&n; */
DECL|struct|ip_masq
r_struct
id|ip_masq
(brace
DECL|member|m_link
DECL|member|s_link
r_struct
id|ip_masq
op_star
id|m_link
comma
op_star
id|s_link
suffix:semicolon
multiline_comment|/* hashed link ptrs */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
multiline_comment|/* reference count */
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
multiline_comment|/* Expiration timer */
DECL|member|protocol
id|__u16
id|protocol
suffix:semicolon
multiline_comment|/* Which protocol are we talking? */
DECL|member|sport
DECL|member|dport
DECL|member|mport
id|__u16
id|sport
comma
id|dport
comma
id|mport
suffix:semicolon
multiline_comment|/* src, dst &amp; masq ports */
DECL|member|saddr
DECL|member|daddr
DECL|member|maddr
id|__u32
id|saddr
comma
id|daddr
comma
id|maddr
suffix:semicolon
multiline_comment|/* src, dst &amp; masq addresses */
DECL|member|out_seq
DECL|member|in_seq
r_struct
id|ip_masq_seq
id|out_seq
comma
id|in_seq
suffix:semicolon
DECL|member|app
r_struct
id|ip_masq_app
op_star
id|app
suffix:semicolon
multiline_comment|/* bound ip_masq_app object */
DECL|member|app_data
r_void
op_star
id|app_data
suffix:semicolon
multiline_comment|/* Application private data */
DECL|member|control
r_struct
id|ip_masq
op_star
id|control
suffix:semicolon
multiline_comment|/* Master control connection */
DECL|member|n_control
id|atomic_t
id|n_control
suffix:semicolon
multiline_comment|/* Number of &quot;controlled&quot; masqs */
DECL|member|flags
r_int
id|flags
suffix:semicolon
multiline_comment|/* status flags */
DECL|member|timeout
r_int
id|timeout
suffix:semicolon
multiline_comment|/* timeout */
DECL|member|state
r_int
id|state
suffix:semicolon
multiline_comment|/* state info */
DECL|member|timeout_table
r_struct
id|ip_masq_timeout_table
op_star
id|timeout_table
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;timeout values&n; */
DECL|struct|ip_fw_masq
r_struct
id|ip_fw_masq
(brace
DECL|member|tcp_timeout
r_int
id|tcp_timeout
suffix:semicolon
DECL|member|tcp_fin_timeout
r_int
id|tcp_fin_timeout
suffix:semicolon
DECL|member|udp_timeout
r_int
id|udp_timeout
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_struct
id|ip_fw_masq
op_star
id|ip_masq_expire
suffix:semicolon
multiline_comment|/*&n; *&t;[0]: UDP free_ports&n; *&t;[1]: TCP free_ports&n; *&t;[2]: ICMP free_ports&n; */
r_extern
id|atomic_t
id|ip_masq_free_ports
(braket
l_int|3
)braket
suffix:semicolon
multiline_comment|/*&n; *&t;ip_masq initializer (registers symbols and /proc/net entries)&n; */
r_extern
r_int
id|ip_masq_init
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;functions called from ip layer&n; */
r_extern
r_int
id|ip_fw_masquerade
c_func
(paren
r_struct
id|sk_buff
op_star
op_star
comma
id|__u32
id|maddr
)paren
suffix:semicolon
r_extern
r_int
id|ip_fw_masq_icmp
c_func
(paren
r_struct
id|sk_buff
op_star
op_star
comma
id|__u32
id|maddr
)paren
suffix:semicolon
r_extern
r_int
id|ip_fw_demasquerade
c_func
(paren
r_struct
id|sk_buff
op_star
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;ip_masq obj creation/deletion functions.&n; */
r_extern
r_struct
id|ip_masq
op_star
id|ip_masq_new
c_func
(paren
r_int
id|proto
comma
id|__u32
id|maddr
comma
id|__u16
id|mport
comma
id|__u32
id|saddr
comma
id|__u16
id|sport
comma
id|__u32
id|daddr
comma
id|__u16
id|dport
comma
r_int
id|flags
)paren
suffix:semicolon
r_extern
r_void
id|ip_masq_control_add
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
comma
r_struct
id|ip_masq
op_star
id|ctl_ms
)paren
suffix:semicolon
r_extern
r_void
id|ip_masq_control_del
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
)paren
suffix:semicolon
r_extern
r_struct
id|ip_masq
op_star
id|ip_masq_control_get
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
)paren
suffix:semicolon
multiline_comment|/*&n; * &t;&n; *&t;IP_MASQ_APP: IP application masquerading definitions &n; *&n; */
DECL|struct|ip_masq_app
r_struct
id|ip_masq_app
(brace
DECL|member|next
r_struct
id|ip_masq_app
op_star
id|next
suffix:semicolon
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
multiline_comment|/* name of application proxy */
DECL|member|type
r_int
id|type
suffix:semicolon
multiline_comment|/* type = proto&lt;&lt;16 | port (host byte order)*/
DECL|member|n_attach
r_int
id|n_attach
suffix:semicolon
DECL|member|masq_init_1
r_int
(paren
op_star
id|masq_init_1
)paren
multiline_comment|/* ip_masq initializer */
(paren
r_struct
id|ip_masq_app
op_star
comma
r_struct
id|ip_masq
op_star
)paren
suffix:semicolon
DECL|member|masq_done_1
r_int
(paren
op_star
id|masq_done_1
)paren
multiline_comment|/* ip_masq fin. */
(paren
r_struct
id|ip_masq_app
op_star
comma
r_struct
id|ip_masq
op_star
)paren
suffix:semicolon
DECL|member|pkt_out
r_int
(paren
op_star
id|pkt_out
)paren
multiline_comment|/* output (masquerading) hook */
(paren
r_struct
id|ip_masq_app
op_star
comma
r_struct
id|ip_masq
op_star
comma
r_struct
id|sk_buff
op_star
op_star
comma
id|__u32
)paren
suffix:semicolon
DECL|member|pkt_in
r_int
(paren
op_star
id|pkt_in
)paren
multiline_comment|/* input (demasq) hook */
(paren
r_struct
id|ip_masq_app
op_star
comma
r_struct
id|ip_masq
op_star
comma
r_struct
id|sk_buff
op_star
op_star
comma
id|__u32
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;ip_masq_app initializer&n; */
r_extern
r_int
id|ip_masq_app_init
c_func
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * &t;ip_masq_app object registration functions (port: host byte order)&n; */
r_extern
r_int
id|register_ip_masq_app
c_func
(paren
r_struct
id|ip_masq_app
op_star
id|mapp
comma
r_int
r_int
id|proto
comma
id|__u16
id|port
)paren
suffix:semicolon
r_extern
r_int
id|unregister_ip_masq_app
c_func
(paren
r_struct
id|ip_masq_app
op_star
id|mapp
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;get ip_masq_app obj by proto,port(net_byte_order)&n; */
r_extern
r_struct
id|ip_masq_app
op_star
id|ip_masq_app_get
c_func
(paren
r_int
r_int
id|proto
comma
id|__u16
id|port
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;ip_masq TO ip_masq_app (un)binding functions.&n; */
r_extern
r_struct
id|ip_masq_app
op_star
id|ip_masq_bind_app
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
)paren
suffix:semicolon
r_extern
r_int
id|ip_masq_unbind_app
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;output and input app. masquerading hooks.&n; *&t;&n; */
r_extern
r_int
id|ip_masq_app_pkt_out
c_func
(paren
r_struct
id|ip_masq
op_star
comma
r_struct
id|sk_buff
op_star
op_star
id|skb_p
comma
id|__u32
id|maddr
)paren
suffix:semicolon
r_extern
r_int
id|ip_masq_app_pkt_in
c_func
(paren
r_struct
id|ip_masq
op_star
comma
r_struct
id|sk_buff
op_star
op_star
id|skb_p
comma
id|__u32
id|maddr
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;service routine(s).&n; */
r_extern
r_struct
id|ip_masq
op_star
id|ip_masq_out_get
c_func
(paren
r_int
id|protocol
comma
id|__u32
id|s_addr
comma
id|__u16
id|s_port
comma
id|__u32
id|d_addr
comma
id|__u16
id|d_port
)paren
suffix:semicolon
r_extern
r_struct
id|ip_masq
op_star
id|ip_masq_in_get
c_func
(paren
r_int
id|protocol
comma
id|__u32
id|s_addr
comma
id|__u16
id|s_port
comma
id|__u32
id|d_addr
comma
id|__u16
id|d_port
)paren
suffix:semicolon
r_extern
r_int
id|ip_masq_listen
c_func
(paren
r_struct
id|ip_masq
op_star
)paren
suffix:semicolon
DECL|function|ip_masq_in_get_iph
r_static
id|__inline__
r_struct
id|ip_masq
op_star
id|ip_masq_in_get_iph
c_func
(paren
r_const
r_struct
id|iphdr
op_star
id|iph
)paren
(brace
r_const
id|__u16
op_star
id|portp
op_assign
(paren
id|__u16
op_star
)paren
op_amp
(paren
(paren
(paren
r_char
op_star
)paren
id|iph
)paren
(braket
id|iph-&gt;ihl
op_star
l_int|4
)braket
)paren
suffix:semicolon
r_return
id|ip_masq_in_get
c_func
(paren
id|iph-&gt;protocol
comma
id|iph-&gt;saddr
comma
id|portp
(braket
l_int|0
)braket
comma
id|iph-&gt;daddr
comma
id|portp
(braket
l_int|1
)braket
)paren
suffix:semicolon
)brace
DECL|function|ip_masq_out_get_iph
r_static
id|__inline__
r_struct
id|ip_masq
op_star
id|ip_masq_out_get_iph
c_func
(paren
r_const
r_struct
id|iphdr
op_star
id|iph
)paren
(brace
r_const
id|__u16
op_star
id|portp
op_assign
(paren
id|__u16
op_star
)paren
op_amp
(paren
(paren
(paren
r_char
op_star
)paren
id|iph
)paren
(braket
id|iph-&gt;ihl
op_star
l_int|4
)braket
)paren
suffix:semicolon
r_return
id|ip_masq_out_get
c_func
(paren
id|iph-&gt;protocol
comma
id|iph-&gt;saddr
comma
id|portp
(braket
l_int|0
)braket
comma
id|iph-&gt;daddr
comma
id|portp
(braket
l_int|1
)braket
)paren
suffix:semicolon
)brace
r_extern
r_void
id|ip_masq_put
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
)paren
suffix:semicolon
multiline_comment|/* &n; *&t;Locking stuff&n; */
DECL|function|ip_masq_lock
r_static
id|__inline__
r_void
id|ip_masq_lock
c_func
(paren
id|atomic_t
op_star
id|lock
comma
r_int
id|rw
)paren
(brace
macro_line|#if 0
r_if
c_cond
(paren
id|rw
)paren
macro_line|#endif
id|start_bh_atomic
c_func
(paren
)paren
suffix:semicolon
id|atomic_inc
c_func
(paren
id|lock
)paren
suffix:semicolon
)brace
DECL|function|ip_masq_unlock
r_static
id|__inline__
r_void
id|ip_masq_unlock
c_func
(paren
id|atomic_t
op_star
id|lock
comma
r_int
id|rw
)paren
(brace
id|atomic_dec
c_func
(paren
id|lock
)paren
suffix:semicolon
macro_line|#if 0
r_if
c_cond
(paren
id|rw
)paren
macro_line|#endif
id|end_bh_atomic
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Sleep-able lockzzz...&n; */
DECL|function|ip_masq_lockz
r_static
id|__inline__
r_void
id|ip_masq_lockz
c_func
(paren
id|atomic_t
op_star
id|lock
comma
r_struct
id|wait_queue
op_star
op_star
id|waitq
comma
r_int
id|rw
)paren
(brace
r_if
c_cond
(paren
id|rw
)paren
r_while
c_loop
(paren
id|atomic_read
c_func
(paren
id|lock
)paren
)paren
(brace
id|sleep_on
c_func
(paren
id|waitq
)paren
suffix:semicolon
)brace
id|ip_masq_lock
c_func
(paren
id|lock
comma
id|rw
)paren
suffix:semicolon
)brace
DECL|function|ip_masq_unlockz
r_static
id|__inline__
r_void
id|ip_masq_unlockz
c_func
(paren
id|atomic_t
op_star
id|lock
comma
r_struct
id|wait_queue
op_star
op_star
id|waitq
comma
r_int
id|rw
)paren
(brace
id|ip_masq_unlock
c_func
(paren
id|lock
comma
id|rw
)paren
suffix:semicolon
r_if
c_cond
(paren
id|rw
)paren
id|wake_up
c_func
(paren
id|waitq
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Perfect for winning races ... ;)&n; */
DECL|function|ip_masq_nlocks
r_static
id|__inline__
r_int
id|ip_masq_nlocks
c_func
(paren
id|atomic_t
op_star
id|lock
)paren
(brace
r_return
id|atomic_read
c_func
(paren
id|lock
)paren
suffix:semicolon
)brace
r_extern
id|atomic_t
id|__ip_masq_lock
suffix:semicolon
multiline_comment|/*&n; *&t;Debugging stuff&n; */
r_extern
r_int
id|ip_masq_get_debug_level
c_func
(paren
r_void
)paren
suffix:semicolon
macro_line|#ifndef CONFIG_IP_MASQ_NDEBUG
DECL|macro|IP_MASQ_DEBUG
mdefine_line|#define IP_MASQ_DEBUG(level, msg...) &bslash;&n;&t;if (level &lt;= ip_masq_get_debug_level()) &bslash;&n;&t;&t;printk(KERN_DEBUG &quot;IP_MASQ:&quot; ## msg)
macro_line|#else&t;/* NO DEBUGGING at ALL */
DECL|macro|IP_MASQ_DEBUG
mdefine_line|#define IP_MASQ_DEBUG(level, msg...) do { } while (0)
macro_line|#endif
DECL|macro|IP_MASQ_INFO
mdefine_line|#define IP_MASQ_INFO(msg...) &bslash;&n;&t;printk(KERN_INFO &quot;IP_MASQ:&quot; ## msg)
DECL|macro|IP_MASQ_ERR
mdefine_line|#define IP_MASQ_ERR(msg...) &bslash;&n;&t;printk(KERN_ERR &quot;IP_MASQ:&quot; ## msg)
DECL|macro|IP_MASQ_WARNING
mdefine_line|#define IP_MASQ_WARNING(msg...) &bslash;&n;&t;printk(KERN_WARNING &quot;IP_MASQ:&quot; ## msg)
multiline_comment|/*&n; *&t;/proc/net entry&n; */
r_extern
r_int
id|ip_masq_app_getinfo
c_func
(paren
r_char
op_star
id|buffer
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|offset
comma
r_int
id|length
comma
r_int
id|dummy
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;skb_replace function used by &quot;client&quot; modules to replace&n; *&t;a segment of skb.&n; */
r_extern
r_struct
id|sk_buff
op_star
id|ip_masq_skb_replace
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
id|pri
comma
r_char
op_star
id|o_buf
comma
r_int
id|o_len
comma
r_char
op_star
id|n_buf
comma
r_int
id|n_len
)paren
suffix:semicolon
multiline_comment|/*&n; * masq_proto_num returns 0 for UDP, 1 for TCP, 2 for ICMP&n; */
DECL|function|masq_proto_num
r_static
id|__inline__
r_int
id|masq_proto_num
c_func
(paren
r_int
id|proto
)paren
(brace
r_switch
c_cond
(paren
id|proto
)paren
(brace
r_case
id|IPPROTO_UDP
suffix:colon
r_return
(paren
l_int|0
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|IPPROTO_TCP
suffix:colon
r_return
(paren
l_int|1
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|IPPROTO_ICMP
suffix:colon
r_return
(paren
l_int|2
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
r_return
(paren
op_minus
l_int|1
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
DECL|function|masq_proto_name
r_static
id|__inline__
r_const
r_char
op_star
id|masq_proto_name
c_func
(paren
r_int
id|proto
)paren
(brace
r_static
r_char
id|buf
(braket
l_int|20
)braket
suffix:semicolon
r_static
r_const
r_char
op_star
id|strProt
(braket
)braket
op_assign
(brace
l_string|&quot;UDP&quot;
comma
l_string|&quot;TCP&quot;
comma
l_string|&quot;ICMP&quot;
)brace
suffix:semicolon
r_int
id|msproto
op_assign
id|masq_proto_num
c_func
(paren
id|proto
)paren
suffix:semicolon
r_if
c_cond
(paren
id|msproto
l_int|2
)paren
(brace
id|sprintf
c_func
(paren
id|buf
comma
l_string|&quot;IP_%d&quot;
comma
id|proto
)paren
suffix:semicolon
r_return
id|buf
suffix:semicolon
)brace
r_return
id|strProt
(braket
id|msproto
)braket
suffix:semicolon
)brace
r_enum
(brace
DECL|enumerator|IP_MASQ_S_NONE
id|IP_MASQ_S_NONE
op_assign
l_int|0
comma
DECL|enumerator|IP_MASQ_S_ESTABLISHED
id|IP_MASQ_S_ESTABLISHED
comma
DECL|enumerator|IP_MASQ_S_SYN_SENT
id|IP_MASQ_S_SYN_SENT
comma
DECL|enumerator|IP_MASQ_S_SYN_RECV
id|IP_MASQ_S_SYN_RECV
comma
DECL|enumerator|IP_MASQ_S_FIN_WAIT
id|IP_MASQ_S_FIN_WAIT
comma
DECL|enumerator|IP_MASQ_S_TIME_WAIT
id|IP_MASQ_S_TIME_WAIT
comma
DECL|enumerator|IP_MASQ_S_CLOSE
id|IP_MASQ_S_CLOSE
comma
DECL|enumerator|IP_MASQ_S_CLOSE_WAIT
id|IP_MASQ_S_CLOSE_WAIT
comma
DECL|enumerator|IP_MASQ_S_LAST_ACK
id|IP_MASQ_S_LAST_ACK
comma
DECL|enumerator|IP_MASQ_S_LISTEN
id|IP_MASQ_S_LISTEN
comma
DECL|enumerator|IP_MASQ_S_UDP
id|IP_MASQ_S_UDP
comma
DECL|enumerator|IP_MASQ_S_ICMP
id|IP_MASQ_S_ICMP
comma
DECL|enumerator|IP_MASQ_S_LAST
id|IP_MASQ_S_LAST
)brace
suffix:semicolon
DECL|struct|ip_masq_timeout_table
r_struct
id|ip_masq_timeout_table
(brace
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
DECL|member|scale
r_int
id|scale
suffix:semicolon
DECL|member|timeout
r_int
id|timeout
(braket
id|IP_MASQ_S_LAST
op_plus
l_int|1
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|function|ip_masq_timeout_attach
r_static
id|__inline__
r_void
id|ip_masq_timeout_attach
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
comma
r_struct
id|ip_masq_timeout_table
op_star
id|mstim
)paren
(brace
id|atomic_inc
(paren
op_amp
id|mstim-&gt;refcnt
)paren
suffix:semicolon
id|ms-&gt;timeout_table
op_assign
id|mstim
suffix:semicolon
)brace
DECL|function|ip_masq_timeout_detach
r_static
id|__inline__
r_void
id|ip_masq_timeout_detach
c_func
(paren
r_struct
id|ip_masq
op_star
id|ms
)paren
(brace
r_struct
id|ip_masq_timeout_table
op_star
id|mstim
op_assign
id|ms-&gt;timeout_table
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|mstim
)paren
r_return
suffix:semicolon
id|atomic_dec
c_func
(paren
op_amp
id|mstim-&gt;refcnt
)paren
suffix:semicolon
)brace
macro_line|#endif /* __KERNEL__ */
macro_line|#endif /* _IP_MASQ_H */
eof
