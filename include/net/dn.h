macro_line|#ifndef _NET_DN_H
DECL|macro|_NET_DN_H
mdefine_line|#define _NET_DN_H
macro_line|#include &lt;linux/dn.h&gt;
macro_line|#include &lt;asm/byteorder.h&gt;
DECL|typedef|dn_address
r_typedef
r_int
r_int
id|dn_address
suffix:semicolon
DECL|macro|dn_ntohs
mdefine_line|#define dn_ntohs(x) le16_to_cpu((unsigned short)(x))
DECL|macro|dn_htons
mdefine_line|#define dn_htons(x) cpu_to_le16((unsigned short)(x))
DECL|struct|dn_scp
r_struct
id|dn_scp
multiline_comment|/* Session Control Port */
(brace
DECL|member|state
r_int
r_char
id|state
suffix:semicolon
DECL|macro|DN_O
mdefine_line|#define DN_O     1                      /* Open                 */
DECL|macro|DN_CR
mdefine_line|#define DN_CR    2                      /* Connect Receive      */
DECL|macro|DN_DR
mdefine_line|#define DN_DR    3                      /* Disconnect Reject    */
DECL|macro|DN_DRC
mdefine_line|#define DN_DRC   4                      /* Discon. Rej. Complete*/
DECL|macro|DN_CC
mdefine_line|#define DN_CC    5                      /* Connect Confirm      */
DECL|macro|DN_CI
mdefine_line|#define DN_CI    6                      /* Connect Initiate     */
DECL|macro|DN_NR
mdefine_line|#define DN_NR    7                      /* No resources         */
DECL|macro|DN_NC
mdefine_line|#define DN_NC    8                      /* No communication     */
DECL|macro|DN_CD
mdefine_line|#define DN_CD    9                      /* Connect Delivery     */
DECL|macro|DN_RJ
mdefine_line|#define DN_RJ    10                     /* Rejected             */
DECL|macro|DN_RUN
mdefine_line|#define DN_RUN   11                     /* Running              */
DECL|macro|DN_DI
mdefine_line|#define DN_DI    12                     /* Disconnect Initiate  */
DECL|macro|DN_DIC
mdefine_line|#define DN_DIC   13                     /* Disconnect Complete  */
DECL|macro|DN_DN
mdefine_line|#define DN_DN    14                     /* Disconnect Notificat */
DECL|macro|DN_CL
mdefine_line|#define DN_CL    15                     /* Closed               */
DECL|macro|DN_CN
mdefine_line|#define DN_CN    16                     /* Closed Notification  */
DECL|member|addrloc
r_int
r_int
id|addrloc
suffix:semicolon
DECL|member|addrrem
r_int
r_int
id|addrrem
suffix:semicolon
DECL|member|numdat
r_int
r_int
id|numdat
suffix:semicolon
DECL|member|numoth
r_int
r_int
id|numoth
suffix:semicolon
DECL|member|numoth_rcv
r_int
r_int
id|numoth_rcv
suffix:semicolon
DECL|member|numdat_rcv
r_int
r_int
id|numdat_rcv
suffix:semicolon
DECL|member|ackxmt_dat
r_int
r_int
id|ackxmt_dat
suffix:semicolon
DECL|member|ackxmt_oth
r_int
r_int
id|ackxmt_oth
suffix:semicolon
DECL|member|ackrcv_dat
r_int
r_int
id|ackrcv_dat
suffix:semicolon
DECL|member|ackrcv_oth
r_int
r_int
id|ackrcv_oth
suffix:semicolon
DECL|member|flowrem_sw
r_int
r_char
id|flowrem_sw
suffix:semicolon
DECL|member|flowloc_sw
r_int
r_char
id|flowloc_sw
suffix:semicolon
DECL|macro|DN_SEND
mdefine_line|#define DN_SEND         2
DECL|macro|DN_DONTSEND
mdefine_line|#define DN_DONTSEND     1
DECL|macro|DN_NOCHANGE
mdefine_line|#define DN_NOCHANGE     0
DECL|member|accept_mode
r_int
r_char
id|accept_mode
suffix:semicolon
DECL|member|mss
r_int
r_int
id|mss
suffix:semicolon
DECL|member|seg_size
r_int
r_int
id|seg_size
suffix:semicolon
multiline_comment|/* Running total of current segment */
DECL|member|conndata_in
r_struct
id|optdata_dn
id|conndata_in
suffix:semicolon
DECL|member|conndata_out
r_struct
id|optdata_dn
id|conndata_out
suffix:semicolon
DECL|member|discdata_in
r_struct
id|optdata_dn
id|discdata_in
suffix:semicolon
DECL|member|discdata_out
r_struct
id|optdata_dn
id|discdata_out
suffix:semicolon
DECL|member|accessdata
r_struct
id|accessdata_dn
id|accessdata
suffix:semicolon
DECL|member|addr
r_struct
id|sockaddr_dn
id|addr
suffix:semicolon
multiline_comment|/* Local address  */
DECL|member|peer
r_struct
id|sockaddr_dn
id|peer
suffix:semicolon
multiline_comment|/* Remote address */
multiline_comment|/*&n;&t; * In this case the RTT estimation is not specified in the&n;&t; * docs, nor is any back off algorithm. Here we follow well&n;&t; * known tcp algorithms with a few small variations.&n;&t; *&n;&t; * snd_window: Max number of packets we send before we wait for&n;&t; *             an ack to come back. This will become part of a&n;&t; *             more complicated scheme when we support flow&n;&t; *             control.&n;&t; *&n;&t; * nsp_srtt:   Round-Trip-Time (x8) in jiffies. This is a rolling&n;&t; *             average.&n;&t; * nsp_rttvar: Round-Trip-Time-Varience (x4) in jiffies. This is the&n;&t; *             varience of the smoothed average (but calculated in&n;&t; *             a simpler way than for normal statistical varience&n;&t; *             calculations).&n;&t; *&n;&t; * nsp_rxtshift: Backoff counter. Value is zero normally, each time&n;&t; *               a packet is lost is increases by one until an ack&n;&t; *               is received. Its used to index an array of backoff&n;&t; *               multipliers.&n;&t; */
DECL|macro|NSP_MIN_WINDOW
mdefine_line|#define NSP_MIN_WINDOW 1
DECL|macro|NSP_MAX_WINDOW
mdefine_line|#define NSP_MAX_WINDOW 512
DECL|member|snd_window
r_int
r_int
id|snd_window
suffix:semicolon
DECL|macro|NSP_INITIAL_SRTT
mdefine_line|#define NSP_INITIAL_SRTT (HZ)
DECL|member|nsp_srtt
r_int
r_int
id|nsp_srtt
suffix:semicolon
DECL|macro|NSP_INITIAL_RTTVAR
mdefine_line|#define NSP_INITIAL_RTTVAR (HZ*3)
DECL|member|nsp_rttvar
r_int
r_int
id|nsp_rttvar
suffix:semicolon
DECL|macro|NSP_MAXRXTSHIFT
mdefine_line|#define NSP_MAXRXTSHIFT 12
DECL|member|nsp_rxtshift
r_int
r_int
id|nsp_rxtshift
suffix:semicolon
multiline_comment|/*&n;&t; * Output queues, one for data, one for otherdata/linkservice&n;&t; */
DECL|member|data_xmit_queue
r_struct
id|sk_buff_head
id|data_xmit_queue
suffix:semicolon
DECL|member|other_xmit_queue
r_struct
id|sk_buff_head
id|other_xmit_queue
suffix:semicolon
multiline_comment|/*&n;&t; * Input queue for other data&n;&t; */
DECL|member|other_receive_queue
r_struct
id|sk_buff_head
id|other_receive_queue
suffix:semicolon
DECL|member|other_report
r_int
id|other_report
suffix:semicolon
multiline_comment|/*&n;&t; * Stuff to do with the slow timer&n;&t; */
DECL|member|stamp
r_int
r_int
id|stamp
suffix:semicolon
multiline_comment|/* time of last transmit */
DECL|member|persist
r_int
r_int
id|persist
suffix:semicolon
DECL|member|persist_fxn
r_int
(paren
op_star
id|persist_fxn
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|keepalive
r_int
r_int
id|keepalive
suffix:semicolon
DECL|member|keepalive_fxn
r_void
(paren
op_star
id|keepalive_fxn
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
multiline_comment|/*&n;&t; * This stuff is for the fast timer for delayed acks&n;&t; */
DECL|member|delack_timer
r_struct
id|timer_list
id|delack_timer
suffix:semicolon
DECL|member|delack_pending
r_int
id|delack_pending
suffix:semicolon
DECL|member|delack_fxn
r_void
(paren
op_star
id|delack_fxn
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * src,dst : Source and Destination DECnet addresses&n; * hops : Number of hops through the network&n; * dst_port, src_port : NSP port numbers&n; * services, info : Useful data extracted from conninit messages&n; * rt_flags : Routing flags byte&n; * nsp_flags : NSP layer flags byte&n; * segsize : Size of segment&n; * segnum : Number, for data, otherdata and linkservice&n; * xmit_count : Number of times we&squot;ve transmitted this skb&n; * stamp : Time stamp of first transmission, used in RTT calculations&n; * iif: Input interface number&n; *&n; * As a general policy, this structure keeps all addresses in network&n; * byte order, and all else in host byte order. Thus dst, src, dst_port&n; * and src_port are in network order. All else is in host order.&n; * &n; */
DECL|struct|dn_skb_cb
r_struct
id|dn_skb_cb
(brace
DECL|member|dst
r_int
r_int
id|dst
suffix:semicolon
DECL|member|src
r_int
r_int
id|src
suffix:semicolon
DECL|member|hops
r_int
r_int
id|hops
suffix:semicolon
DECL|member|dst_port
r_int
r_int
id|dst_port
suffix:semicolon
DECL|member|src_port
r_int
r_int
id|src_port
suffix:semicolon
DECL|member|services
r_int
r_char
id|services
suffix:semicolon
DECL|member|info
r_int
r_char
id|info
suffix:semicolon
DECL|member|rt_flags
r_int
r_char
id|rt_flags
suffix:semicolon
DECL|member|nsp_flags
r_int
r_char
id|nsp_flags
suffix:semicolon
DECL|member|segsize
r_int
r_int
id|segsize
suffix:semicolon
DECL|member|segnum
r_int
r_int
id|segnum
suffix:semicolon
DECL|member|xmit_count
r_int
r_int
id|xmit_count
suffix:semicolon
DECL|member|stamp
r_int
r_int
id|stamp
suffix:semicolon
DECL|member|iif
r_int
id|iif
suffix:semicolon
)brace
suffix:semicolon
DECL|function|dn_eth2dn
r_static
id|__inline__
id|dn_address
id|dn_eth2dn
c_func
(paren
r_int
r_char
op_star
id|ethaddr
)paren
(brace
r_return
id|ethaddr
(braket
l_int|4
)braket
op_or
(paren
id|ethaddr
(braket
l_int|5
)braket
op_lshift
l_int|8
)paren
suffix:semicolon
)brace
DECL|function|dn_saddr2dn
r_static
id|__inline__
id|dn_address
id|dn_saddr2dn
c_func
(paren
r_struct
id|sockaddr_dn
op_star
id|saddr
)paren
(brace
r_return
op_star
(paren
id|dn_address
op_star
)paren
id|saddr-&gt;sdn_nodeaddr
suffix:semicolon
)brace
DECL|function|dn_dn2eth
r_static
id|__inline__
r_void
id|dn_dn2eth
c_func
(paren
r_int
r_char
op_star
id|ethaddr
comma
id|dn_address
id|addr
)paren
(brace
id|ethaddr
(braket
l_int|0
)braket
op_assign
l_int|0xAA
suffix:semicolon
id|ethaddr
(braket
l_int|1
)braket
op_assign
l_int|0x00
suffix:semicolon
id|ethaddr
(braket
l_int|2
)braket
op_assign
l_int|0x04
suffix:semicolon
id|ethaddr
(braket
l_int|3
)braket
op_assign
l_int|0x00
suffix:semicolon
id|ethaddr
(braket
l_int|4
)braket
op_assign
(paren
r_int
r_char
)paren
(paren
id|addr
op_amp
l_int|0xff
)paren
suffix:semicolon
id|ethaddr
(braket
l_int|5
)braket
op_assign
(paren
r_int
r_char
)paren
(paren
id|addr
op_rshift
l_int|8
)paren
suffix:semicolon
)brace
DECL|macro|DN_MENUVER_ACC
mdefine_line|#define DN_MENUVER_ACC 0x01
DECL|macro|DN_MENUVER_USR
mdefine_line|#define DN_MENUVER_USR 0x02
DECL|macro|DN_MENUVER_PRX
mdefine_line|#define DN_MENUVER_PRX 0x04
DECL|macro|DN_MENUVER_UIC
mdefine_line|#define DN_MENUVER_UIC 0x08
r_extern
r_struct
id|sock
op_star
id|dn_sklist_find_listener
c_func
(paren
r_struct
id|sockaddr_dn
op_star
id|addr
)paren
suffix:semicolon
r_extern
r_struct
id|sock
op_star
id|dn_find_by_skb
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|macro|DN_ASCBUF_LEN
mdefine_line|#define DN_ASCBUF_LEN 9
r_extern
r_char
op_star
id|dn_addr2asc
c_func
(paren
id|dn_address
comma
r_char
op_star
)paren
suffix:semicolon
r_extern
r_int
id|dn_destroy_timer
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_int
id|dn_sockaddr2username
c_func
(paren
r_struct
id|sockaddr_dn
op_star
id|addr
comma
r_int
r_char
op_star
id|buf
comma
r_int
r_char
id|type
)paren
suffix:semicolon
r_extern
r_int
id|dn_username2sockaddr
c_func
(paren
r_int
r_char
op_star
id|data
comma
r_int
id|len
comma
r_struct
id|sockaddr_dn
op_star
id|addr
comma
r_int
r_char
op_star
id|type
)paren
suffix:semicolon
r_extern
r_void
id|dn_start_slow_timer
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|dn_stop_slow_timer
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|dn_start_fast_timer
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|dn_stop_fast_timer
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
id|dn_address
id|decnet_address
suffix:semicolon
r_extern
r_int
r_char
id|decnet_ether_address
(braket
l_int|6
)braket
suffix:semicolon
r_extern
r_int
id|decnet_debug_level
suffix:semicolon
r_extern
r_int
id|decnet_time_wait
suffix:semicolon
r_extern
r_int
id|decnet_dn_count
suffix:semicolon
r_extern
r_int
id|decnet_di_count
suffix:semicolon
r_extern
r_int
id|decnet_dr_count
suffix:semicolon
macro_line|#endif /* _NET_DN_H */
eof
