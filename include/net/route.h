multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET  is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the IP router.&n; *&n; * Version:&t;@(#)route.h&t;1.0.4&t;05/27/93&n; *&n; * Authors:&t;Ross Biro, &lt;bir7@leland.Stanford.Edu&gt;&n; *&t;&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; * Fixes:&n; *&t;&t;Alan Cox&t;:&t;Reformatted. Added ip_rt_local()&n; *&t;&t;Alan Cox&t;:&t;Support for TCP parameters.&n; *&t;&t;Alexey Kuznetsov:&t;Major changes for new routing code.&n; *&n; *&t;FIXME:&n; *&t;&t;Make atomic ops more generic and hide them in asm/...&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _ROUTE_H
DECL|macro|_ROUTE_H
mdefine_line|#define _ROUTE_H
macro_line|#include &lt;linux/config.h&gt;
multiline_comment|/*&n; * 0 - no debugging messages&n; * 1 - rare events and bugs situations (default)&n; * 2 - trace mode.&n; */
DECL|macro|RT_CACHE_DEBUG
mdefine_line|#define RT_CACHE_DEBUG&t;&t;0
DECL|macro|RT_HASH_DIVISOR
mdefine_line|#define RT_HASH_DIVISOR&t;    &t;256
DECL|macro|RT_CACHE_SIZE_MAX
mdefine_line|#define RT_CACHE_SIZE_MAX    &t;256
DECL|macro|RTZ_HASH_DIVISOR
mdefine_line|#define RTZ_HASH_DIVISOR&t;256
macro_line|#if RT_CACHE_DEBUG &gt;= 2
DECL|macro|RTZ_HASHING_LIMIT
mdefine_line|#define RTZ_HASHING_LIMIT 0
macro_line|#else
DECL|macro|RTZ_HASHING_LIMIT
mdefine_line|#define RTZ_HASHING_LIMIT 16
macro_line|#endif
multiline_comment|/*&n; * Maximal time to live for unused entry.&n; */
DECL|macro|RT_CACHE_TIMEOUT
mdefine_line|#define RT_CACHE_TIMEOUT&t;&t;(HZ*300)
multiline_comment|/*&n; * Prevents LRU trashing, entries considered equivalent,&n; * if the difference between last use times is less then this number.&n; */
DECL|macro|RT_CACHE_BUBBLE_THRESHOLD
mdefine_line|#define RT_CACHE_BUBBLE_THRESHOLD&t;(HZ*5)
macro_line|#include &lt;linux/route.h&gt;
macro_line|#ifdef __KERNEL__
DECL|macro|RTF_LOCAL
mdefine_line|#define RTF_LOCAL 0x8000
macro_line|#endif
multiline_comment|/*&n; * Semaphores.&n; */
macro_line|#if defined(__alpha__)
DECL|function|ATOMIC_INCR
r_static
id|__inline__
r_void
id|ATOMIC_INCR
c_func
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;n&bslash;&n;&t;&t; ldl_l %1,%2&bslash;n&bslash;&n;&t;&t; addl  %1,1,%1&bslash;n&bslash;&n;&t;&t; stl_c %1,%0&bslash;n&bslash;&n;&t;&t; beq   %1,1b&bslash;n&quot;
suffix:colon
l_string|&quot;m=&quot;
(paren
op_star
id|addr
)paren
comma
l_string|&quot;r=&amp;&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|ATOMIC_DECR
r_static
id|__inline__
r_void
id|ATOMIC_DECR
c_func
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|tmp
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;n&bslash;&n;&t;&t; ldl_l %1,%2&bslash;n&bslash;&n;&t;&t; subl  %1,1,%1&bslash;n&bslash;&n;&t;&t; stl_c %1,%0&bslash;n&bslash;&n;&t;&t; beq   %1,1b&bslash;n&quot;
suffix:colon
l_string|&quot;m=&quot;
(paren
op_star
id|addr
)paren
comma
l_string|&quot;r=&amp;&quot;
(paren
id|tmp
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
)brace
DECL|function|ATOMIC_DECR_AND_CHECK
r_static
id|__inline__
r_int
id|ATOMIC_DECR_AND_CHECK
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
r_int
id|tmp
suffix:semicolon
r_int
id|result
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;1:&bslash;n&bslash;&n;&t;&t; ldl_l %1,%3&bslash;n&bslash;&n;&t;&t; subl  %1,1,%1&bslash;n&bslash;&n;&t;&t; mov   %1,%2&bslash;n&bslash;&n;&t;&t; stl_c %1,%0&bslash;n&bslash;&n;&t;&t; beq   %1,1b&bslash;n&quot;
suffix:colon
l_string|&quot;m=&quot;
(paren
op_star
id|addr
)paren
comma
l_string|&quot;r=&amp;&quot;
(paren
id|tmp
)paren
comma
l_string|&quot;r=&amp;&quot;
(paren
id|result
)paren
suffix:colon
l_string|&quot;m&quot;
(paren
op_star
id|addr
)paren
)paren
suffix:semicolon
r_return
id|result
suffix:semicolon
)brace
macro_line|#elif defined(__i386__)
macro_line|#include &lt;asm/bitops.h&gt;
DECL|function|ATOMIC_INCR
r_extern
id|__inline__
r_void
id|ATOMIC_INCR
c_func
(paren
r_void
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;incl %0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|ADDR
)paren
)paren
suffix:semicolon
)brace
DECL|function|ATOMIC_DECR
r_extern
id|__inline__
r_void
id|ATOMIC_DECR
c_func
(paren
r_void
op_star
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;decl %0&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|ADDR
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * It is DECR that is ATOMIC, not CHECK!&n; * If you want to do atomic checks, use cli()/sti(). --ANK&n; */
DECL|function|ATOMIC_DECR_AND_CHECK
r_extern
id|__inline__
r_int
r_int
id|ATOMIC_DECR_AND_CHECK
c_func
(paren
r_void
op_star
id|addr
)paren
(brace
r_int
r_int
id|retval
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;decl %0&bslash;nmovl %0,%1&quot;
suffix:colon
l_string|&quot;=m&quot;
(paren
id|ADDR
)paren
comma
l_string|&quot;=r&quot;
(paren
id|retval
)paren
)paren
suffix:semicolon
r_return
id|retval
suffix:semicolon
)brace
macro_line|#else
DECL|function|ATOMIC_INCR
r_static
id|__inline__
r_void
id|ATOMIC_INCR
c_func
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
(paren
op_star
(paren
id|__volatile__
r_int
r_int
op_star
)paren
id|addr
)paren
op_increment
suffix:semicolon
)brace
DECL|function|ATOMIC_DECR
r_static
id|__inline__
r_void
id|ATOMIC_DECR
c_func
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
(paren
op_star
(paren
id|__volatile__
r_int
r_int
op_star
)paren
id|addr
)paren
op_decrement
suffix:semicolon
)brace
DECL|function|ATOMIC_DECR_AND_CHECK
r_static
id|__inline__
r_int
id|ATOMIC_DECR_AND_CHECK
(paren
r_int
r_int
op_star
id|addr
)paren
(brace
id|ATOMIC_DECR
c_func
(paren
id|addr
)paren
suffix:semicolon
r_return
op_star
(paren
r_volatile
r_int
r_int
op_star
)paren
id|addr
suffix:semicolon
)brace
macro_line|#endif
DECL|struct|rtable
r_struct
id|rtable
(brace
DECL|member|rt_next
r_struct
id|rtable
op_star
id|rt_next
suffix:semicolon
DECL|member|rt_dst
id|__u32
id|rt_dst
suffix:semicolon
DECL|member|rt_src
id|__u32
id|rt_src
suffix:semicolon
DECL|member|rt_gateway
id|__u32
id|rt_gateway
suffix:semicolon
DECL|member|rt_refcnt
r_int
id|rt_refcnt
suffix:semicolon
DECL|member|rt_use
r_int
id|rt_use
suffix:semicolon
DECL|member|rt_window
r_int
r_int
id|rt_window
suffix:semicolon
DECL|member|rt_lastuse
r_int
r_int
id|rt_lastuse
suffix:semicolon
DECL|member|rt_hh
r_struct
id|hh_cache
op_star
id|rt_hh
suffix:semicolon
DECL|member|rt_dev
r_struct
id|device
op_star
id|rt_dev
suffix:semicolon
DECL|member|rt_flags
r_int
r_int
id|rt_flags
suffix:semicolon
DECL|member|rt_mtu
r_int
r_int
id|rt_mtu
suffix:semicolon
DECL|member|rt_irtt
r_int
r_int
id|rt_irtt
suffix:semicolon
DECL|member|rt_tos
r_int
r_char
id|rt_tos
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_void
id|ip_rt_flush
c_func
(paren
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_redirect
c_func
(paren
id|__u32
id|src
comma
id|__u32
id|dst
comma
id|__u32
id|gw
comma
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_struct
id|rtable
op_star
id|ip_rt_slow_route
c_func
(paren
id|__u32
id|daddr
comma
r_int
id|local
)paren
suffix:semicolon
r_extern
r_int
id|rt_get_info
c_func
(paren
r_char
op_star
id|buffer
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|offset
comma
r_int
id|length
comma
r_int
id|dummy
)paren
suffix:semicolon
r_extern
r_int
id|rt_cache_get_info
c_func
(paren
r_char
op_star
id|buffer
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|offset
comma
r_int
id|length
comma
r_int
id|dummy
)paren
suffix:semicolon
r_extern
r_int
id|ip_rt_ioctl
c_func
(paren
r_int
r_int
id|cmd
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
r_extern
r_int
id|ip_rt_new
c_func
(paren
r_struct
id|rtentry
op_star
id|rt
)paren
suffix:semicolon
r_extern
r_int
id|ip_rt_kill
c_func
(paren
r_struct
id|rtentry
op_star
id|rt
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_check_expire
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_advice
c_func
(paren
r_struct
id|rtable
op_star
op_star
id|rp
comma
r_int
id|advice
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_run_bh
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|ip_rt_lock
suffix:semicolon
r_extern
r_int
id|ip_rt_bh_mask
suffix:semicolon
r_extern
r_struct
id|rtable
op_star
id|ip_rt_hash_table
(braket
id|RT_HASH_DIVISOR
)braket
suffix:semicolon
DECL|function|ip_rt_fast_lock
r_extern
id|__inline__
r_void
id|ip_rt_fast_lock
c_func
(paren
r_void
)paren
(brace
id|ATOMIC_INCR
c_func
(paren
op_amp
id|ip_rt_lock
)paren
suffix:semicolon
)brace
DECL|function|ip_rt_fast_unlock
r_extern
id|__inline__
r_void
id|ip_rt_fast_unlock
c_func
(paren
r_void
)paren
(brace
id|ATOMIC_DECR
c_func
(paren
op_amp
id|ip_rt_lock
)paren
suffix:semicolon
)brace
DECL|function|ip_rt_unlock
r_extern
id|__inline__
r_void
id|ip_rt_unlock
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|ATOMIC_DECR_AND_CHECK
c_func
(paren
op_amp
id|ip_rt_lock
)paren
op_logical_and
id|ip_rt_bh_mask
)paren
id|ip_rt_run_bh
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|ip_rt_hash_code
r_extern
id|__inline__
r_int
id|ip_rt_hash_code
c_func
(paren
id|__u32
id|addr
)paren
(brace
r_int
id|tmp
op_assign
id|addr
op_plus
(paren
id|addr
op_rshift
l_int|16
)paren
suffix:semicolon
r_return
(paren
id|tmp
op_plus
(paren
id|tmp
op_rshift
l_int|8
)paren
)paren
op_amp
l_int|0xFF
suffix:semicolon
)brace
DECL|function|ip_rt_put
r_extern
id|__inline__
r_void
id|ip_rt_put
c_func
(paren
r_struct
id|rtable
op_star
id|rt
)paren
macro_line|#ifndef MODULE
(brace
r_if
c_cond
(paren
id|rt
)paren
id|ATOMIC_DECR
c_func
(paren
op_amp
id|rt-&gt;rt_refcnt
)paren
suffix:semicolon
)brace
macro_line|#else
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_KERNELD
r_extern
r_struct
id|rtable
op_star
id|ip_rt_route
c_func
(paren
id|__u32
id|daddr
comma
r_int
id|local
)paren
suffix:semicolon
macro_line|#else
DECL|function|ip_rt_route
r_extern
id|__inline__
r_struct
id|rtable
op_star
id|ip_rt_route
c_func
(paren
id|__u32
id|daddr
comma
r_int
id|local
)paren
macro_line|#ifndef MODULE
(brace
r_struct
id|rtable
op_star
id|rth
suffix:semicolon
id|ip_rt_fast_lock
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
id|rth
op_assign
id|ip_rt_hash_table
(braket
id|ip_rt_hash_code
c_func
(paren
id|daddr
)paren
op_xor
id|local
)braket
suffix:semicolon
id|rth
suffix:semicolon
id|rth
op_assign
id|rth-&gt;rt_next
)paren
(brace
r_if
c_cond
(paren
id|rth-&gt;rt_dst
op_eq
id|daddr
)paren
(brace
id|rth-&gt;rt_lastuse
op_assign
id|jiffies
suffix:semicolon
id|ATOMIC_INCR
c_func
(paren
op_amp
id|rth-&gt;rt_use
)paren
suffix:semicolon
id|ATOMIC_INCR
c_func
(paren
op_amp
id|rth-&gt;rt_refcnt
)paren
suffix:semicolon
id|ip_rt_unlock
c_func
(paren
)paren
suffix:semicolon
r_return
id|rth
suffix:semicolon
)brace
)brace
r_return
id|ip_rt_slow_route
(paren
id|daddr
comma
id|local
)paren
suffix:semicolon
)brace
macro_line|#else
suffix:semicolon
macro_line|#endif
macro_line|#endif
DECL|function|ip_check_route
r_extern
id|__inline__
r_struct
id|rtable
op_star
id|ip_check_route
c_func
(paren
r_struct
id|rtable
op_star
op_star
id|rp
comma
id|__u32
id|daddr
comma
r_int
id|local
)paren
(brace
r_struct
id|rtable
op_star
id|rt
op_assign
op_star
id|rp
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|rt
op_logical_or
id|rt-&gt;rt_dst
op_ne
id|daddr
op_logical_or
op_logical_neg
(paren
id|rt-&gt;rt_flags
op_amp
id|RTF_UP
)paren
op_logical_or
(paren
(paren
id|local
op_eq
l_int|1
)paren
op_xor
(paren
(paren
id|rt-&gt;rt_flags
op_amp
id|RTF_LOCAL
)paren
op_ne
l_int|0
)paren
)paren
)paren
(brace
id|ip_rt_put
c_func
(paren
id|rt
)paren
suffix:semicolon
id|rt
op_assign
id|ip_rt_route
c_func
(paren
id|daddr
comma
id|local
)paren
suffix:semicolon
op_star
id|rp
op_assign
id|rt
suffix:semicolon
)brace
r_return
id|rt
suffix:semicolon
)brace
macro_line|#endif&t;/* _ROUTE_H */
eof
