multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET  is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the IP router.&n; *&n; * Version:&t;@(#)route.h&t;1.0.4&t;05/27/93&n; *&n; * Authors:&t;Ross Biro, &lt;bir7@leland.Stanford.Edu&gt;&n; *&t;&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; * Fixes:&n; *&t;&t;Alan Cox&t;:&t;Reformatted. Added ip_rt_local()&n; *&t;&t;Alan Cox&t;:&t;Support for TCP parameters.&n; *&t;&t;Alexey Kuznetsov:&t;Major changes for new routing code.&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _ROUTE_H
DECL|macro|_ROUTE_H
mdefine_line|#define _ROUTE_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;net/dst.h&gt;
macro_line|#include &lt;linux/in_route.h&gt;
macro_line|#include &lt;linux/rtnetlink.h&gt;
DECL|macro|RT_HASH_DIVISOR
mdefine_line|#define RT_HASH_DIVISOR&t;    &t;256
DECL|macro|RT_CACHE_MAX_SIZE
mdefine_line|#define RT_CACHE_MAX_SIZE    &t;256
multiline_comment|/*&n; * Maximal time to live for unused entry.&n; */
DECL|macro|RT_CACHE_TIMEOUT
mdefine_line|#define RT_CACHE_TIMEOUT&t;&t;(HZ*300)
multiline_comment|/*&n; * Periodic timer frequency&n; */
DECL|macro|RT_GC_INTERVAL
mdefine_line|#define RT_GC_INTERVAL&t;&t;&t;(HZ*60)
multiline_comment|/*&n; * Cache invalidations can be delayed by:&n; */
DECL|macro|RT_FLUSH_DELAY
mdefine_line|#define RT_FLUSH_DELAY (5*HZ)
DECL|macro|RT_REDIRECT_NUMBER
mdefine_line|#define RT_REDIRECT_NUMBER&t;&t;9
DECL|macro|RT_REDIRECT_LOAD
mdefine_line|#define RT_REDIRECT_LOAD&t;&t;(HZ/50)&t;/* 20 msec */
DECL|macro|RT_REDIRECT_SILENCE
mdefine_line|#define RT_REDIRECT_SILENCE&t;&t;(RT_REDIRECT_LOAD&lt;&lt;(RT_REDIRECT_NUMBER+1))
multiline_comment|/* 20sec */
DECL|macro|RT_ERROR_LOAD
mdefine_line|#define RT_ERROR_LOAD&t;&t;&t;(1*HZ)
multiline_comment|/*&n; * Prevents LRU trashing, entries considered equivalent,&n; * if the difference between last use times is less then this number.&n; */
DECL|macro|RT_CACHE_BUBBLE_THRESHOLD
mdefine_line|#define RT_CACHE_BUBBLE_THRESHOLD&t;(5*HZ)
macro_line|#include &lt;linux/route.h&gt;
DECL|struct|rt_key
r_struct
id|rt_key
(brace
DECL|member|dst
id|__u32
id|dst
suffix:semicolon
DECL|member|src
id|__u32
id|src
suffix:semicolon
DECL|member|iif
r_int
id|iif
suffix:semicolon
DECL|member|oif
r_int
id|oif
suffix:semicolon
DECL|member|tos
id|__u8
id|tos
suffix:semicolon
DECL|member|scope
id|__u8
id|scope
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|rtable
r_struct
id|rtable
(brace
r_union
(brace
DECL|member|dst
r_struct
id|dst_entry
id|dst
suffix:semicolon
DECL|member|rt_next
r_struct
id|rtable
op_star
id|rt_next
suffix:semicolon
DECL|member|u
)brace
id|u
suffix:semicolon
DECL|member|rt_flags
r_int
id|rt_flags
suffix:semicolon
DECL|member|rt_type
r_int
id|rt_type
suffix:semicolon
DECL|member|rt_dst
id|__u32
id|rt_dst
suffix:semicolon
multiline_comment|/* Path destination&t;*/
DECL|member|rt_src
id|__u32
id|rt_src
suffix:semicolon
multiline_comment|/* Path source&t;&t;*/
DECL|member|rt_iif
r_int
id|rt_iif
suffix:semicolon
multiline_comment|/* Info on neighbour */
DECL|member|rt_gateway
id|__u32
id|rt_gateway
suffix:semicolon
multiline_comment|/* Cache lookup keys */
DECL|member|key
r_struct
id|rt_key
id|key
suffix:semicolon
multiline_comment|/* Miscellaneous cached information */
DECL|member|rt_spec_dst
id|__u32
id|rt_spec_dst
suffix:semicolon
multiline_comment|/* RFC1122 specific destination */
macro_line|#ifdef CONFIG_IP_ROUTE_NAT
DECL|member|rt_src_map
id|__u32
id|rt_src_map
suffix:semicolon
DECL|member|rt_dst_map
id|__u32
id|rt_dst_map
suffix:semicolon
macro_line|#endif
multiline_comment|/* ICMP statistics */
DECL|member|last_error
r_int
r_int
id|last_error
suffix:semicolon
DECL|member|errors
r_int
r_int
id|errors
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifdef __KERNEL__
r_extern
r_void
id|ip_rt_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_redirect
c_func
(paren
id|u32
id|old_gw
comma
id|u32
id|dst
comma
id|u32
id|new_gw
comma
id|u32
id|src
comma
id|u8
id|tos
comma
r_struct
id|device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_advice
c_func
(paren
r_struct
id|rtable
op_star
op_star
id|rp
comma
r_int
id|advice
)paren
suffix:semicolon
r_extern
r_void
id|rt_cache_flush
c_func
(paren
r_int
id|how
)paren
suffix:semicolon
r_extern
r_int
id|ip_route_output
c_func
(paren
r_struct
id|rtable
op_star
op_star
comma
id|u32
id|dst
comma
id|u32
id|src
comma
id|u8
id|tos
comma
r_int
id|oif
)paren
suffix:semicolon
r_extern
r_int
id|ip_route_input
c_func
(paren
r_struct
id|sk_buff
op_star
comma
id|u32
id|dst
comma
id|u32
id|src
comma
id|u8
id|tos
comma
r_struct
id|device
op_star
id|devin
)paren
suffix:semicolon
r_extern
r_int
r_int
id|ip_rt_frag_needed
c_func
(paren
r_struct
id|iphdr
op_star
id|iph
comma
r_int
r_int
id|new_mtu
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_send_redirect
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
id|inet_addr_type
c_func
(paren
id|u32
id|addr
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_multicast_event
c_func
(paren
r_struct
id|in_device
op_star
)paren
suffix:semicolon
r_extern
r_int
id|ip_rt_ioctl
c_func
(paren
r_int
r_int
id|cmd
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
r_extern
r_void
id|ip_rt_get_source
c_func
(paren
id|u8
op_star
id|src
comma
r_struct
id|rtable
op_star
id|rt
)paren
suffix:semicolon
DECL|function|ip_rt_put
r_extern
id|__inline__
r_void
id|ip_rt_put
c_func
(paren
r_struct
id|rtable
op_star
id|rt
)paren
(brace
r_if
c_cond
(paren
id|rt
)paren
id|dst_release
c_func
(paren
op_amp
id|rt-&gt;u.dst
)paren
suffix:semicolon
)brace
r_extern
id|__u8
id|ip_tos2prio
(braket
l_int|16
)braket
suffix:semicolon
DECL|function|rt_tos2priority
r_extern
id|__inline__
r_char
id|rt_tos2priority
c_func
(paren
id|u8
id|tos
)paren
(brace
r_return
id|ip_tos2prio
(braket
id|IPTOS_TOS
c_func
(paren
id|tos
)paren
op_rshift
l_int|1
)braket
suffix:semicolon
)brace
DECL|function|ip_route_connect
r_extern
id|__inline__
r_int
id|ip_route_connect
c_func
(paren
r_struct
id|rtable
op_star
op_star
id|rp
comma
id|u32
id|dst
comma
id|u32
id|src
comma
id|u32
id|tos
comma
r_int
id|oif
)paren
(brace
r_int
id|err
suffix:semicolon
id|err
op_assign
id|ip_route_output
c_func
(paren
id|rp
comma
id|dst
comma
id|src
comma
id|tos
comma
id|oif
)paren
suffix:semicolon
r_if
c_cond
(paren
id|err
op_logical_or
(paren
id|dst
op_logical_and
id|src
)paren
)paren
r_return
id|err
suffix:semicolon
id|dst
op_assign
(paren
op_star
id|rp
)paren
op_member_access_from_pointer
id|rt_dst
suffix:semicolon
id|src
op_assign
(paren
op_star
id|rp
)paren
op_member_access_from_pointer
id|rt_src
suffix:semicolon
id|ip_rt_put
c_func
(paren
op_star
id|rp
)paren
suffix:semicolon
op_star
id|rp
op_assign
l_int|NULL
suffix:semicolon
r_return
id|ip_route_output
c_func
(paren
id|rp
comma
id|dst
comma
id|src
comma
id|tos
comma
id|oif
)paren
suffix:semicolon
)brace
macro_line|#endif
macro_line|#endif&t;/* _ROUTE_H */
eof
