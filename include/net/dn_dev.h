macro_line|#ifndef _NET_DN_DEV_H
DECL|macro|_NET_DN_DEV_H
mdefine_line|#define _NET_DN_DEV_H
r_struct
id|dn_dev
suffix:semicolon
DECL|struct|dn_ifaddr
r_struct
id|dn_ifaddr
(brace
DECL|member|ifa_next
r_struct
id|dn_ifaddr
op_star
id|ifa_next
suffix:semicolon
DECL|member|ifa_dev
r_struct
id|dn_dev
op_star
id|ifa_dev
suffix:semicolon
DECL|member|ifa_local
id|dn_address
id|ifa_local
suffix:semicolon
DECL|member|ifa_flags
r_int
r_char
id|ifa_flags
suffix:semicolon
DECL|member|ifa_scope
r_int
r_char
id|ifa_scope
suffix:semicolon
DECL|member|ifa_label
r_char
id|ifa_label
(braket
id|IFNAMSIZ
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|DN_DEV_S_RU
mdefine_line|#define DN_DEV_S_RU  0 /* Run - working normally   */
DECL|macro|DN_DEV_S_CR
mdefine_line|#define DN_DEV_S_CR  1 /* Circuit Rejected         */
DECL|macro|DN_DEV_S_DS
mdefine_line|#define DN_DEV_S_DS  2 /* Data Link Start          */
DECL|macro|DN_DEV_S_RI
mdefine_line|#define DN_DEV_S_RI  3 /* Routing Layer Initialize */
DECL|macro|DN_DEV_S_RV
mdefine_line|#define DN_DEV_S_RV  4 /* Routing Layer Verify     */
DECL|macro|DN_DEV_S_RC
mdefine_line|#define DN_DEV_S_RC  5 /* Routing Layer Complete   */
DECL|macro|DN_DEV_S_OF
mdefine_line|#define DN_DEV_S_OF  6 /* Off                      */
DECL|macro|DN_DEV_S_HA
mdefine_line|#define DN_DEV_S_HA  7 /* Halt                     */
multiline_comment|/*&n; * The dn_dev_parms structure contains the set of parameters&n; * for each device (hence inclusion in the dn_dev structure)&n; * and an array is used to store the default types of supported&n; * device (in dn_dev.c).&n; *&n; * The type field matches the ARPHRD_ constants and is used in&n; * searching the list for supported devices when new devices&n; * come up.&n; *&n; * The mode field is used to find out if a device is broadcast,&n; * multipoint, or pointopoint. Please note that DECnet thinks&n; * different ways about devices to the rest of the kernel&n; * so the normal IFF_xxx flags are invalid here. For devices&n; * which can be any combination of the previously mentioned&n; * attributes, you can set this on a per device basis by&n; * installing an up() routine.&n; *&n; * The device state field, defines the initial state in which the&n; * device will come up. In the dn_dev structure, it is the actual&n; * state.&n; *&n; * Things have changed here. I&squot;ve killed timer1 since its a user space&n; * issue for a user space routing deamon to sort out. The kernel does&n; * not need to be bothered with it.&n; *&n; * Timers:&n; * t2 - Rate limit timer, min time between routing and hello messages&n; * t3 - Hello timer, send hello messages when it expires&n; *&n; * Callbacks:&n; * up() - Called to initialize device, return value can veto use of&n; *        device with DECnet.&n; * down() - Called to turn device off when it goes down&n; * timer3() - Called when timer 3 goes off&n; * &n; * sysctl - Hook for sysctl things&n; *&n; */
DECL|struct|dn_dev_parms
r_struct
id|dn_dev_parms
(brace
DECL|member|type
r_int
id|type
suffix:semicolon
multiline_comment|/* ARPHRD_xxx                         */
DECL|member|mode
r_int
id|mode
suffix:semicolon
multiline_comment|/* Broadcast, Unicast, Mulitpoint     */
DECL|macro|DN_DEV_BCAST
mdefine_line|#define DN_DEV_BCAST  1
DECL|macro|DN_DEV_UCAST
mdefine_line|#define DN_DEV_UCAST  2
DECL|macro|DN_DEV_MPOINT
mdefine_line|#define DN_DEV_MPOINT 4
DECL|member|state
r_int
id|state
suffix:semicolon
multiline_comment|/* Initial state                      */
DECL|member|forwarding
r_int
id|forwarding
suffix:semicolon
multiline_comment|/* 0=EndNode, 1=L1Router, 2=L2Router  */
DECL|member|blksize
r_int
r_int
id|blksize
suffix:semicolon
multiline_comment|/* Block Size                         */
DECL|member|t2
r_int
r_int
id|t2
suffix:semicolon
multiline_comment|/* Default value of t2                */
DECL|member|t3
r_int
r_int
id|t3
suffix:semicolon
multiline_comment|/* Default value of t3                */
DECL|member|priority
r_int
id|priority
suffix:semicolon
multiline_comment|/* Priority to be a router            */
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
multiline_comment|/* Name for sysctl                    */
DECL|member|ctl_name
r_int
id|ctl_name
suffix:semicolon
multiline_comment|/* Index for sysctl                   */
DECL|member|up
r_int
(paren
op_star
id|up
)paren
(paren
r_struct
id|net_device
op_star
)paren
suffix:semicolon
DECL|member|down
r_void
(paren
op_star
id|down
)paren
(paren
r_struct
id|net_device
op_star
)paren
suffix:semicolon
DECL|member|timer3
r_void
(paren
op_star
id|timer3
)paren
(paren
r_struct
id|net_device
op_star
)paren
suffix:semicolon
DECL|member|sysctl
r_void
op_star
id|sysctl
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|dn_dev
r_struct
id|dn_dev
(brace
DECL|member|ifa_list
r_struct
id|dn_ifaddr
op_star
id|ifa_list
suffix:semicolon
DECL|member|dev
r_struct
id|net_device
op_star
id|dev
suffix:semicolon
DECL|member|parms
r_struct
id|dn_dev_parms
id|parms
suffix:semicolon
DECL|member|use_long
r_char
id|use_long
suffix:semicolon
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
DECL|member|t3
r_int
r_int
id|t3
suffix:semicolon
DECL|member|neigh_parms
r_struct
id|neigh_parms
op_star
id|neigh_parms
suffix:semicolon
DECL|member|addr
r_int
r_char
id|addr
(braket
id|ETH_ALEN
)braket
suffix:semicolon
DECL|member|router
r_struct
id|neighbour
op_star
id|router
suffix:semicolon
multiline_comment|/* Default router on circuit */
DECL|member|peer
r_struct
id|neighbour
op_star
id|peer
suffix:semicolon
multiline_comment|/* Peer on pointopoint links */
DECL|member|uptime
r_int
r_int
id|uptime
suffix:semicolon
multiline_comment|/* Time device went up in jiffies */
)brace
suffix:semicolon
DECL|struct|dn_short_packet
r_struct
id|dn_short_packet
(brace
DECL|member|msgflg
r_int
r_char
id|msgflg
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|dstnode
r_int
r_int
id|dstnode
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|srcnode
r_int
r_int
id|srcnode
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|forward
r_int
r_char
id|forward
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|dn_long_packet
r_struct
id|dn_long_packet
(brace
DECL|member|msgflg
r_int
r_char
id|msgflg
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|d_area
r_int
r_char
id|d_area
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|d_subarea
r_int
r_char
id|d_subarea
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|d_id
r_int
r_char
id|d_id
(braket
l_int|6
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|s_area
r_int
r_char
id|s_area
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|s_subarea
r_int
r_char
id|s_subarea
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|s_id
r_int
r_char
id|s_id
(braket
l_int|6
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|nl2
r_int
r_char
id|nl2
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|visit_ct
r_int
r_char
id|visit_ct
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|s_class
r_int
r_char
id|s_class
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|pt
r_int
r_char
id|pt
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*------------------------- DRP - Routing messages ---------------------*/
DECL|struct|endnode_hello_message
r_struct
id|endnode_hello_message
(brace
DECL|member|msgflg
r_int
r_char
id|msgflg
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|tiver
r_int
r_char
id|tiver
(braket
l_int|3
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|id
r_int
r_char
id|id
(braket
l_int|6
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|iinfo
r_int
r_char
id|iinfo
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|blksize
r_int
r_int
id|blksize
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|area
r_int
r_char
id|area
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|seed
r_int
r_char
id|seed
(braket
l_int|8
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|neighbor
r_int
r_char
id|neighbor
(braket
l_int|6
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|timer
r_int
r_int
id|timer
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|mpd
r_int
r_char
id|mpd
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|datalen
r_int
r_char
id|datalen
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|data
r_int
r_char
id|data
(braket
l_int|2
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|rtnode_hello_message
r_struct
id|rtnode_hello_message
(brace
DECL|member|msgflg
r_int
r_char
id|msgflg
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|tiver
r_int
r_char
id|tiver
(braket
l_int|3
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|id
r_int
r_char
id|id
(braket
l_int|6
)braket
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|iinfo
r_int
r_char
id|iinfo
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|blksize
r_int
r_int
id|blksize
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|priority
r_int
r_char
id|priority
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|area
r_int
r_char
id|area
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|timer
r_int
r_int
id|timer
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|member|mpd
r_int
r_char
id|mpd
id|__attribute__
c_func
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_void
id|dn_dev_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|dn_dev_ioctl
c_func
(paren
r_int
r_int
id|cmd
comma
r_void
op_star
id|arg
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_devices_off
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_devices_on
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_init_pkt
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_veri_pkt
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_hello
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_up
c_func
(paren
r_struct
id|net_device
op_star
)paren
suffix:semicolon
r_extern
r_void
id|dn_dev_down
c_func
(paren
r_struct
id|net_device
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|net_device
op_star
id|decnet_default_device
suffix:semicolon
DECL|function|dn_dev_islocal
r_static
id|__inline__
r_int
id|dn_dev_islocal
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
id|dn_address
id|addr
)paren
(brace
r_struct
id|dn_dev
op_star
id|dn_db
op_assign
id|dev-&gt;dn_ptr
suffix:semicolon
r_struct
id|dn_ifaddr
op_star
id|ifa
suffix:semicolon
r_if
c_cond
(paren
id|dn_db
op_eq
l_int|NULL
)paren
(brace
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;dn_dev_islocal: Called for non DECnet device&bslash;n&quot;
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_for
c_loop
(paren
id|ifa
op_assign
id|dn_db-&gt;ifa_list
suffix:semicolon
id|ifa
suffix:semicolon
id|ifa
op_assign
id|ifa-&gt;ifa_next
)paren
r_if
c_cond
(paren
(paren
id|addr
op_xor
id|ifa-&gt;ifa_local
)paren
op_eq
l_int|0
)paren
r_return
l_int|1
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* _NET_DN_DEV_H */
eof
