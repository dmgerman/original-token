multiline_comment|/*&n; * INET&t;&t;An implementation of the TCP/IP protocol suite for the LINUX&n; *&t;&t;operating system.  INET is implemented using the  BSD Socket&n; *&t;&t;interface as the means of communication with the user level.&n; *&n; *&t;&t;Definitions for the AF_INET socket handler.&n; *&n; * Version:&t;@(#)sock.h&t;1.0.4&t;05/13/93&n; *&n; * Authors:&t;Ross Biro, &lt;bir7@leland.Stanford.Edu&gt;&n; *&t;&t;Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;&n; *&t;&t;Corey Minyard &lt;wf-rch!minyard@relay.EU.net&gt;&n; *&t;&t;Florian La Roche &lt;flla@stud.uni-sb.de&gt;&n; *&n; * Fixes:&n; *&t;&t;Alan Cox&t;:&t;Volatiles in skbuff pointers. See&n; *&t;&t;&t;&t;&t;skbuff comments. May be overdone,&n; *&t;&t;&t;&t;&t;better to prove they can be removed&n; *&t;&t;&t;&t;&t;than the reverse.&n; *&t;&t;Alan Cox&t;:&t;Added a zapped field for tcp to note&n; *&t;&t;&t;&t;&t;a socket is reset and must stay shut up&n; *&t;&t;Alan Cox&t;:&t;New fields for options&n; *&t;Pauline Middelink&t;:&t;identd support&n; *&t;&t;Alan Cox&t;:&t;Eliminate low level recv/recvfrom&n; *&t;&t;David S. Miller&t;:&t;New socket lookup architecture.&n; *              Steve Whitehouse:       Default routines for sock_ops&n; *&n; *&t;&t;This program is free software; you can redistribute it and/or&n; *&t;&t;modify it under the terms of the GNU General Public License&n; *&t;&t;as published by the Free Software Foundation; either version&n; *&t;&t;2 of the License, or (at your option) any later version.&n; */
macro_line|#ifndef _SOCK_H
DECL|macro|_SOCK_H
mdefine_line|#define _SOCK_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/timer.h&gt;
macro_line|#include &lt;linux/in.h&gt;&t;&t;/* struct sockaddr_in */
macro_line|#if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)
macro_line|#include &lt;linux/in6.h&gt;&t;&t;/* struct sockaddr_in6 */
macro_line|#include &lt;linux/ipv6.h&gt;&t;&t;/* dest_cache, inet6_options */
macro_line|#include &lt;linux/icmpv6.h&gt;
macro_line|#include &lt;net/if_inet6.h&gt;&t;/* struct ipv6_mc_socklist */
macro_line|#endif
macro_line|#if defined(CONFIG_INET) || defined (CONFIG_INET_MODULE)
macro_line|#include &lt;linux/icmp.h&gt;
macro_line|#endif
macro_line|#include &lt;linux/tcp.h&gt;&t;&t;/* struct tcphdr */
macro_line|#include &lt;linux/netdevice.h&gt;
macro_line|#include &lt;linux/skbuff.h&gt;&t;/* struct sk_buff */
macro_line|#include &lt;net/protocol.h&gt;&t;&t;/* struct inet_protocol */
macro_line|#if defined(CONFIG_X25) || defined(CONFIG_X25_MODULE)
macro_line|#include &lt;net/x25.h&gt;
macro_line|#endif
macro_line|#if defined(CONFIG_AX25) || defined(CONFIG_AX25_MODULE)
macro_line|#include &lt;net/ax25.h&gt;
macro_line|#if defined(CONFIG_NETROM) || defined(CONFIG_NETROM_MODULE)
macro_line|#include &lt;net/netrom.h&gt;
macro_line|#endif
macro_line|#if defined(CONFIG_ROSE) || defined(CONFIG_ROSE_MODULE)
macro_line|#include &lt;net/rose.h&gt;
macro_line|#endif
macro_line|#endif
macro_line|#if defined(CONFIG_IPX) || defined(CONFIG_IPX_MODULE)
macro_line|#include &lt;net/ipx.h&gt;
macro_line|#endif
macro_line|#if defined(CONFIG_ATALK) || defined(CONFIG_ATALK_MODULE)
macro_line|#include &lt;linux/atalk.h&gt;
macro_line|#endif
macro_line|#if defined(CONFIG_DECNET) || defined(CONFIG_DECNET_MODULE)
macro_line|#include &lt;net/dn.h&gt;
macro_line|#endif
macro_line|#ifdef CONFIG_FILTER
macro_line|#include &lt;linux/filter.h&gt;
macro_line|#endif
macro_line|#include &lt;asm/atomic.h&gt;
multiline_comment|/*&n; *&t;The AF_UNIX specific socket options&n; */
DECL|struct|unix_opt
r_struct
id|unix_opt
(brace
DECL|member|family
r_int
id|family
suffix:semicolon
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|locks
r_int
id|locks
suffix:semicolon
DECL|member|addr
r_struct
id|unix_address
op_star
id|addr
suffix:semicolon
DECL|member|dentry
r_struct
id|dentry
op_star
id|dentry
suffix:semicolon
DECL|member|readsem
r_struct
id|semaphore
id|readsem
suffix:semicolon
DECL|member|other
r_struct
id|sock
op_star
id|other
suffix:semicolon
DECL|member|list
r_struct
id|sock
op_star
op_star
id|list
suffix:semicolon
DECL|member|marksweep
r_int
id|marksweep
suffix:semicolon
DECL|macro|MARKED
mdefine_line|#define MARKED&t;&t;&t;1
DECL|member|inflight
r_int
id|inflight
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifdef CONFIG_NETLINK
r_struct
id|netlink_callback
suffix:semicolon
DECL|struct|netlink_opt
r_struct
id|netlink_opt
(brace
DECL|member|pid
id|pid_t
id|pid
suffix:semicolon
DECL|member|groups
r_int
id|groups
suffix:semicolon
DECL|member|dst_pid
id|pid_t
id|dst_pid
suffix:semicolon
DECL|member|dst_groups
r_int
id|dst_groups
suffix:semicolon
DECL|member|handler
r_int
(paren
op_star
id|handler
)paren
(paren
r_int
id|unit
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|member|locks
id|atomic_t
id|locks
suffix:semicolon
DECL|member|cb
r_struct
id|netlink_callback
op_star
id|cb
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif
multiline_comment|/*&n; *&t;Once the IPX ncpd patches are in these are going into protinfo&n; */
macro_line|#if defined(CONFIG_IPX) || defined(CONFIG_IPX_MODULE)
DECL|struct|ipx_opt
r_struct
id|ipx_opt
(brace
DECL|member|dest_addr
id|ipx_address
id|dest_addr
suffix:semicolon
DECL|member|intrfc
id|ipx_interface
op_star
id|intrfc
suffix:semicolon
DECL|member|port
r_int
r_int
id|port
suffix:semicolon
macro_line|#ifdef CONFIG_IPX_INTERN
DECL|member|node
r_int
r_char
id|node
(braket
id|IPX_NODE_LEN
)braket
suffix:semicolon
macro_line|#endif
DECL|member|type
r_int
r_int
id|type
suffix:semicolon
multiline_comment|/* &n; * To handle asynchronous messages from the NetWare server, we have to&n; * know the connection this socket belongs to. &n; */
DECL|member|ncp_server
r_struct
id|ncp_server
op_star
id|ncp_server
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)
DECL|struct|ipv6_pinfo
r_struct
id|ipv6_pinfo
(brace
DECL|member|saddr
r_struct
id|in6_addr
id|saddr
suffix:semicolon
DECL|member|rcv_saddr
r_struct
id|in6_addr
id|rcv_saddr
suffix:semicolon
DECL|member|daddr
r_struct
id|in6_addr
id|daddr
suffix:semicolon
DECL|member|flow_lbl
id|__u32
id|flow_lbl
suffix:semicolon
DECL|member|priority
id|__u8
id|priority
suffix:semicolon
DECL|member|hop_limit
id|__u8
id|hop_limit
suffix:semicolon
DECL|member|mcast_hops
id|__u8
id|mcast_hops
suffix:semicolon
multiline_comment|/* sockopt flags */
DECL|member|recvsrcrt
id|__u8
id|recvsrcrt
suffix:colon
l_int|1
comma
DECL|member|rxinfo
id|rxinfo
suffix:colon
l_int|1
comma
DECL|member|rxhlim
id|rxhlim
suffix:colon
l_int|1
comma
DECL|member|hopopts
id|hopopts
suffix:colon
l_int|1
comma
DECL|member|dstopts
id|dstopts
suffix:colon
l_int|1
comma
DECL|member|mc_loop
id|mc_loop
suffix:colon
l_int|1
comma
DECL|member|unused
id|unused
suffix:colon
l_int|2
suffix:semicolon
multiline_comment|/* device for outgoing packets */
DECL|member|oif
r_struct
id|device
op_star
id|oif
suffix:semicolon
DECL|member|ipv6_mc_list
r_struct
id|ipv6_mc_socklist
op_star
id|ipv6_mc_list
suffix:semicolon
multiline_comment|/* &n;&t; * destination cache entry pointer&n;&t; * contains a pointer to neighbour cache&n;&t; * and other info related to network level &n;&t; * (ex. PMTU)&n;&t; */
DECL|member|dst
r_struct
id|dst_entry
op_star
id|dst
suffix:semicolon
DECL|member|dst_cookie
id|__u32
id|dst_cookie
suffix:semicolon
DECL|member|opt
r_struct
id|ipv6_options
op_star
id|opt
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|raw6_opt
r_struct
id|raw6_opt
(brace
DECL|member|checksum
id|__u32
id|checksum
suffix:semicolon
multiline_comment|/* perform checksum */
DECL|member|offset
id|__u32
id|offset
suffix:semicolon
multiline_comment|/* checksum offset  */
DECL|member|filter
r_struct
id|icmp6_filter
id|filter
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif /* IPV6 */
macro_line|#if defined(CONFIG_INET) || defined(CONFIG_INET_MODULE)
DECL|struct|raw_opt
r_struct
id|raw_opt
(brace
DECL|member|filter
r_struct
id|icmp_filter
id|filter
suffix:semicolon
)brace
suffix:semicolon
macro_line|#endif
DECL|struct|tcp_opt
r_struct
id|tcp_opt
(brace
multiline_comment|/*&n; *&t;RFC793 variables by their proper names. This means you can&n; *&t;read the code and the spec side by side (and laugh ...)&n; *&t;See RFC793 and RFC1122. The RFC writes these in capitals.&n; */
DECL|member|rcv_nxt
id|__u32
id|rcv_nxt
suffix:semicolon
multiline_comment|/* What we want to receive next &t;*/
DECL|member|rcv_up
id|__u32
id|rcv_up
suffix:semicolon
multiline_comment|/* The urgent point (may not be valid) &t;*/
DECL|member|rcv_wnd
id|__u32
id|rcv_wnd
suffix:semicolon
multiline_comment|/* Current receiver window&t;&t;*/
DECL|member|snd_nxt
id|__u32
id|snd_nxt
suffix:semicolon
multiline_comment|/* Next sequence we send&t;&t;*/
DECL|member|snd_una
id|__u32
id|snd_una
suffix:semicolon
multiline_comment|/* First byte we want an ack for&t;*/
DECL|member|snd_up
id|__u32
id|snd_up
suffix:semicolon
multiline_comment|/* Outgoing urgent pointer&t;&t;*/
DECL|member|snd_wl1
id|__u32
id|snd_wl1
suffix:semicolon
multiline_comment|/* Sequence for window update&t;&t;*/
DECL|member|snd_wl2
id|__u32
id|snd_wl2
suffix:semicolon
multiline_comment|/* Ack sequence for update&t;&t;*/
DECL|member|rcv_wup
id|__u32
id|rcv_wup
suffix:semicolon
multiline_comment|/* rcv_nxt on last window update sent&t;*/
DECL|member|fin_seq
id|__u32
id|fin_seq
suffix:semicolon
multiline_comment|/* XXX This one should go, we don&squot;t need it. -DaveM */
DECL|member|srtt
id|__u32
id|srtt
suffix:semicolon
multiline_comment|/* smothed round trip time &lt;&lt; 3&t;&t;*/
DECL|member|mdev
id|__u32
id|mdev
suffix:semicolon
multiline_comment|/* medium deviation&t;&t;&t;*/
DECL|member|rto
id|__u32
id|rto
suffix:semicolon
multiline_comment|/* retransmit timeout&t;&t;&t;*/
DECL|member|backoff
id|__u32
id|backoff
suffix:semicolon
multiline_comment|/* backoff&t;&t;&t;&t;*/
multiline_comment|/*&n; *&t;Slow start and congestion control (see also Nagle, and Karn &amp; Partridge)&n; */
DECL|member|snd_cwnd
id|__u32
id|snd_cwnd
suffix:semicolon
multiline_comment|/* Sending congestion window&t;&t;*/
DECL|member|snd_ssthresh
id|__u32
id|snd_ssthresh
suffix:semicolon
multiline_comment|/* Slow start size threshold&t;&t;*/
DECL|member|snd_cwnd_cnt
id|__u16
id|snd_cwnd_cnt
suffix:semicolon
DECL|member|max_window
id|__u16
id|max_window
suffix:semicolon
multiline_comment|/*&n; *      Options received (usually on last packet, some only on SYN packets).&n; */
DECL|member|tstamp_ok
r_char
id|tstamp_ok
comma
multiline_comment|/* TIMESTAMP seen on SYN packet&t;&t;*/
DECL|member|wscale_ok
id|wscale_ok
comma
multiline_comment|/* Wscale seen on SYN packet&t;&t;*/
DECL|member|sack_ok
id|sack_ok
suffix:semicolon
multiline_comment|/* SACK_PERM seen on SYN packet&t;&t;*/
DECL|member|saw_tstamp
r_char
id|saw_tstamp
suffix:semicolon
multiline_comment|/* Saw TIMESTAMP on last packet&t;&t;*/
DECL|member|in_mss
id|__u16
id|in_mss
suffix:semicolon
multiline_comment|/* MSS option received from sender&t;*/
DECL|member|snd_wscale
id|__u8
id|snd_wscale
suffix:semicolon
multiline_comment|/* Window scaling received from sender&t;*/
DECL|member|rcv_wscale
id|__u8
id|rcv_wscale
suffix:semicolon
multiline_comment|/* Window scaling to send to receiver&t;*/
DECL|member|rcv_tsval
id|__u32
id|rcv_tsval
suffix:semicolon
multiline_comment|/* Time stamp value             &t;*/
DECL|member|rcv_tsecr
id|__u32
id|rcv_tsecr
suffix:semicolon
multiline_comment|/* Time stamp echo reply        &t;*/
DECL|member|ts_recent
id|__u32
id|ts_recent
suffix:semicolon
multiline_comment|/* Time stamp to echo next&t;&t;*/
DECL|member|ts_recent_stamp
id|__u32
id|ts_recent_stamp
suffix:semicolon
multiline_comment|/* Time we stored ts_recent (for aging) */
DECL|member|last_ack_sent
id|__u32
id|last_ack_sent
suffix:semicolon
multiline_comment|/* last ack we sent&t;&t;&t;*/
DECL|member|sacks
r_int
id|sacks
suffix:semicolon
multiline_comment|/* Number of SACK blocks if any&t;&t;*/
DECL|member|left_sack
id|__u32
id|left_sack
(braket
l_int|4
)braket
suffix:semicolon
multiline_comment|/* Left edges of blocks         &t;*/
DECL|member|right_sack
id|__u32
id|right_sack
(braket
l_int|4
)braket
suffix:semicolon
multiline_comment|/* Right edges of blocks        &t;*/
DECL|member|tcp_header_len
r_int
id|tcp_header_len
suffix:semicolon
multiline_comment|/* Bytes of tcp header to send &t;*/
multiline_comment|/*&n; *&t;Timers used by the TCP protocol layer&n; */
DECL|member|delack_timer
r_struct
id|timer_list
id|delack_timer
suffix:semicolon
multiline_comment|/* Ack delay &t;*/
DECL|member|idle_timer
r_struct
id|timer_list
id|idle_timer
suffix:semicolon
multiline_comment|/* Idle watch &t;*/
DECL|member|completion_timer
r_struct
id|timer_list
id|completion_timer
suffix:semicolon
multiline_comment|/* Up/Down timer */
DECL|member|probe_timer
r_struct
id|timer_list
id|probe_timer
suffix:semicolon
multiline_comment|/* Probes&t;*/
DECL|member|retransmit_timer
r_struct
id|timer_list
id|retransmit_timer
suffix:semicolon
multiline_comment|/* Resend (no ack) */
DECL|member|basertt
id|__u32
id|basertt
suffix:semicolon
multiline_comment|/* Vegas baseRTT */
DECL|member|packets_out
id|__u32
id|packets_out
suffix:semicolon
multiline_comment|/* Packets which are &quot;in flight&quot; */
DECL|member|window_clamp
id|__u32
id|window_clamp
suffix:semicolon
multiline_comment|/* XXX Document this... -DaveM */
DECL|member|pending
id|__u8
id|pending
suffix:semicolon
multiline_comment|/* pending events */
DECL|member|delayed_acks
id|__u8
id|delayed_acks
suffix:semicolon
DECL|member|dup_acks
id|__u8
id|dup_acks
suffix:semicolon
multiline_comment|/* Consequetive duplicate acks seen from other end */
DECL|member|retransmits
id|__u8
id|retransmits
suffix:semicolon
DECL|member|lrcvtime
id|__u32
id|lrcvtime
suffix:semicolon
multiline_comment|/* timestamp of last received data packet  */
DECL|member|rcv_tstamp
id|__u32
id|rcv_tstamp
suffix:semicolon
multiline_comment|/* timestamp of last received packet  */
DECL|member|iat_mdev
id|__u32
id|iat_mdev
suffix:semicolon
multiline_comment|/* interarrival time medium deviation */
DECL|member|iat
id|__u32
id|iat
suffix:semicolon
multiline_comment|/* interarrival time */
DECL|member|ato
id|__u32
id|ato
suffix:semicolon
multiline_comment|/* delayed ack timeout */
DECL|member|high_seq
id|__u32
id|high_seq
suffix:semicolon
multiline_comment|/* highest sequence number sent by onset of congestion */
multiline_comment|/*&n; *&t;new send pointers&n; */
DECL|member|send_head
r_struct
id|sk_buff
op_star
id|send_head
suffix:semicolon
DECL|member|retrans_head
r_struct
id|sk_buff
op_star
id|retrans_head
suffix:semicolon
multiline_comment|/* retrans head can be &n;&t;&t;&t;&t;&t;&t; * different to the head of&n;&t;&t;&t;&t;&t;&t; * write queue if we are doing&n;&t;&t;&t;&t;&t;&t; * fast retransmit&n;&t;&t;&t;&t;&t;&t; */
multiline_comment|/*&n; *&t;Header prediction flags&n; *&t;0x5?10 &lt;&lt; 16 + snd_wnd in net byte order&n; */
DECL|member|pred_flags
id|__u32
id|pred_flags
suffix:semicolon
DECL|member|snd_wnd
id|__u32
id|snd_wnd
suffix:semicolon
multiline_comment|/* The window we expect to receive */
DECL|member|probes_out
id|__u32
id|probes_out
suffix:semicolon
multiline_comment|/* unanswered 0 window probes&t;   */
DECL|member|syn_wait_queue
r_struct
id|open_request
op_star
id|syn_wait_queue
suffix:semicolon
DECL|member|syn_wait_last
r_struct
id|open_request
op_star
op_star
id|syn_wait_last
suffix:semicolon
DECL|member|syn_backlog
r_int
id|syn_backlog
suffix:semicolon
DECL|member|af_specific
r_struct
id|tcp_func
op_star
id|af_specific
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This structure really needs to be cleaned up.&n; * Most of it is for TCP, and not used by any of&n; * the other protocols.&n; */
multiline_comment|/*&n; * The idea is to start moving to a newer struct gradualy&n; * &n; * IMHO the newer struct should have the following format:&n; * &n; *&t;struct sock {&n; *&t;&t;sockmem [mem, proto, callbacks]&n; *&n; *&t;&t;union or struct {&n; *&t;&t;&t;ax25;&n; *&t;&t;} ll_pinfo;&n; *&t;&n; *&t;&t;union {&n; *&t;&t;&t;ipv4;&n; *&t;&t;&t;ipv6;&n; *&t;&t;&t;ipx;&n; *&t;&t;&t;netrom;&n; *&t;&t;&t;rose;&n; * &t;&t;&t;x25;&n; *&t;&t;} net_pinfo;&n; *&n; *&t;&t;union {&n; *&t;&t;&t;tcp;&n; *&t;&t;&t;udp;&n; *&t;&t;&t;spx;&n; *&t;&t;&t;netrom;&n; *&t;&t;} tp_pinfo;&n; *&n; *&t;}&n; */
multiline_comment|/* Define this to get the sk-&gt;debug debugging facility. */
DECL|macro|SOCK_DEBUGGING
mdefine_line|#define SOCK_DEBUGGING
macro_line|#ifdef SOCK_DEBUGGING
DECL|macro|SOCK_DEBUG
mdefine_line|#define SOCK_DEBUG(sk, msg...) if((sk) &amp;&amp; ((sk)-&gt;debug)) printk(KERN_DEBUG ## msg)
macro_line|#else
DECL|macro|SOCK_DEBUG
mdefine_line|#define SOCK_DEBUG(sk, msg...) do { } while (0)
macro_line|#endif
multiline_comment|/*&n; *  TCP will start to use the new protinfo while *still using the old* fields &n; */
DECL|struct|sock
r_struct
id|sock
(brace
multiline_comment|/* This must be first. */
DECL|member|sklist_next
r_struct
id|sock
op_star
id|sklist_next
suffix:semicolon
DECL|member|sklist_prev
r_struct
id|sock
op_star
id|sklist_prev
suffix:semicolon
DECL|member|wmem_alloc
id|atomic_t
id|wmem_alloc
suffix:semicolon
DECL|member|rmem_alloc
id|atomic_t
id|rmem_alloc
suffix:semicolon
DECL|member|allocation
r_int
r_int
id|allocation
suffix:semicolon
multiline_comment|/* Allocation mode */
multiline_comment|/* The following stuff should probably move to the tcp private area */
DECL|member|write_seq
id|__u32
id|write_seq
suffix:semicolon
DECL|member|copied_seq
id|__u32
id|copied_seq
suffix:semicolon
DECL|member|syn_seq
id|__u32
id|syn_seq
suffix:semicolon
DECL|member|urg_seq
id|__u32
id|urg_seq
suffix:semicolon
DECL|member|urg_data
id|__u32
id|urg_data
suffix:semicolon
DECL|member|delayed_acks
r_int
r_char
id|delayed_acks
suffix:semicolon
multiline_comment|/* End of block to move */
DECL|member|sock_readers
r_int
id|sock_readers
suffix:semicolon
multiline_comment|/* user count */
multiline_comment|/*&n;   *&t;Not all are volatile, but some are, so we&n;   * &t;might as well say they all are.&n;   */
DECL|member|dead
r_volatile
r_char
id|dead
comma
DECL|member|urginline
id|urginline
comma
DECL|member|done
id|done
comma
DECL|member|reuse
id|reuse
comma
DECL|member|keepopen
id|keepopen
comma
DECL|member|linger
id|linger
comma
DECL|member|destroy
id|destroy
comma
DECL|member|no_check
id|no_check
comma
DECL|member|zapped
id|zapped
comma
multiline_comment|/* In ax25 &amp; ipx means not linked */
DECL|member|broadcast
id|broadcast
comma
DECL|member|nonagle
id|nonagle
comma
DECL|member|bsdism
id|bsdism
suffix:semicolon
DECL|member|bound_dev_if
r_int
id|bound_dev_if
suffix:semicolon
DECL|member|lingertime
r_int
r_int
id|lingertime
suffix:semicolon
DECL|member|proc
r_int
id|proc
suffix:semicolon
DECL|member|next
r_struct
id|sock
op_star
id|next
suffix:semicolon
DECL|member|pprev
r_struct
id|sock
op_star
op_star
id|pprev
suffix:semicolon
DECL|member|bind_next
r_struct
id|sock
op_star
id|bind_next
suffix:semicolon
DECL|member|bind_pprev
r_struct
id|sock
op_star
op_star
id|bind_pprev
suffix:semicolon
DECL|member|prev
r_struct
id|sock
op_star
id|prev
suffix:semicolon
DECL|member|hashent
r_int
id|hashent
suffix:semicolon
DECL|member|pair
r_struct
id|sock
op_star
id|pair
suffix:semicolon
DECL|member|back_log
r_struct
id|sk_buff_head
id|back_log
suffix:semicolon
DECL|member|write_queue
r_struct
id|sk_buff_head
id|write_queue
comma
DECL|member|receive_queue
id|receive_queue
comma
DECL|member|out_of_order_queue
id|out_of_order_queue
comma
DECL|member|error_queue
id|error_queue
suffix:semicolon
DECL|member|family
r_int
r_int
id|family
suffix:semicolon
DECL|member|prot
r_struct
id|proto
op_star
id|prot
suffix:semicolon
DECL|member|sleep
r_struct
id|wait_queue
op_star
op_star
id|sleep
suffix:semicolon
DECL|member|daddr
id|__u32
id|daddr
suffix:semicolon
DECL|member|saddr
id|__u32
id|saddr
suffix:semicolon
multiline_comment|/* Sending source */
DECL|member|rcv_saddr
id|__u32
id|rcv_saddr
suffix:semicolon
multiline_comment|/* Bound address */
DECL|member|dst_cache
r_struct
id|dst_entry
op_star
id|dst_cache
suffix:semicolon
multiline_comment|/*&n; *&t;mss is min(mtu, max_window) &n; */
DECL|member|mtu
r_int
r_int
id|mtu
suffix:semicolon
multiline_comment|/* mss negotiated in the syn&squot;s */
DECL|member|mss
r_int
r_int
id|mss
suffix:semicolon
multiline_comment|/* current eff. mss - can change */
DECL|member|user_mss
r_int
r_int
id|user_mss
suffix:semicolon
multiline_comment|/* mss requested by user in ioctl */
DECL|member|num
r_int
r_int
id|num
suffix:semicolon
DECL|member|shutdown
r_int
r_int
id|shutdown
suffix:semicolon
macro_line|#if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)
r_union
(brace
DECL|member|af_inet6
r_struct
id|ipv6_pinfo
id|af_inet6
suffix:semicolon
DECL|member|net_pinfo
)brace
id|net_pinfo
suffix:semicolon
macro_line|#endif
r_union
(brace
DECL|member|af_tcp
r_struct
id|tcp_opt
id|af_tcp
suffix:semicolon
macro_line|#if defined(CONFIG_INET) || defined (CONFIG_INET_MODULE)
DECL|member|tp_raw4
r_struct
id|raw_opt
id|tp_raw4
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)
DECL|member|tp_raw
r_struct
id|raw6_opt
id|tp_raw
suffix:semicolon
macro_line|#endif
DECL|member|tp_pinfo
)brace
id|tp_pinfo
suffix:semicolon
DECL|member|err
DECL|member|err_soft
r_int
id|err
comma
id|err_soft
suffix:semicolon
multiline_comment|/* Soft holds errors that don&squot;t&n;&t;&t;&t;&t;&t;&t;   cause failure but are the cause&n;&t;&t;&t;&t;&t;&t;   of a persistent failure not just&n;&t;&t;&t;&t;&t;&t;   &squot;timed out&squot; */
DECL|member|protocol
r_int
r_char
id|protocol
suffix:semicolon
DECL|member|state
r_volatile
r_int
r_char
id|state
suffix:semicolon
DECL|member|ack_backlog
r_int
r_int
id|ack_backlog
suffix:semicolon
DECL|member|max_ack_backlog
r_int
r_int
id|max_ack_backlog
suffix:semicolon
DECL|member|debug
r_int
r_char
id|debug
suffix:semicolon
DECL|member|priority
id|__u32
id|priority
suffix:semicolon
DECL|member|rcvbuf
r_int
id|rcvbuf
suffix:semicolon
DECL|member|sndbuf
r_int
id|sndbuf
suffix:semicolon
DECL|member|type
r_int
r_int
id|type
suffix:semicolon
DECL|member|localroute
r_int
r_char
id|localroute
suffix:semicolon
multiline_comment|/* Route locally only */
DECL|member|peercred
r_struct
id|ucred
id|peercred
suffix:semicolon
macro_line|#ifdef CONFIG_FILTER
multiline_comment|/* Socket Filtering Instructions */
DECL|member|filter
r_int
id|filter
suffix:semicolon
DECL|member|filter_data
r_struct
id|sock_filter
op_star
id|filter_data
suffix:semicolon
macro_line|#endif /* CONFIG_FILTER */
multiline_comment|/*&n; *&t;This is where all the private (optional) areas that don&squot;t&n; *&t;overlap will eventually live. &n; */
r_union
(brace
DECL|member|destruct_hook
r_void
op_star
id|destruct_hook
suffix:semicolon
DECL|member|af_unix
r_struct
id|unix_opt
id|af_unix
suffix:semicolon
macro_line|#if defined(CONFIG_ATALK) || defined(CONFIG_ATALK_MODULE)
DECL|member|af_at
r_struct
id|atalk_sock
id|af_at
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_IPX) || defined(CONFIG_IPX_MODULE)
DECL|member|af_ipx
r_struct
id|ipx_opt
id|af_ipx
suffix:semicolon
macro_line|#endif
macro_line|#if defined (CONFIG_PACKET) || defined(CONFIG_PACKET_MODULE)
DECL|member|af_packet
r_struct
id|packet_opt
op_star
id|af_packet
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_INET
macro_line|#ifdef CONFIG_NUTCP&t;&t;
DECL|member|af_tcp
r_struct
id|tcp_opt
id|af_tcp
suffix:semicolon
macro_line|#endif&t;&t;
macro_line|#endif
macro_line|#if defined(CONFIG_X25) || defined(CONFIG_X25_MODULE)
DECL|member|x25
id|x25_cb
op_star
id|x25
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_AX25) || defined(CONFIG_AX25_MODULE)
DECL|member|ax25
id|ax25_cb
op_star
id|ax25
suffix:semicolon
macro_line|#if defined(CONFIG_NETROM) || defined(CONFIG_NETROM_MODULE)
DECL|member|nr
id|nr_cb
op_star
id|nr
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_ROSE) || defined(CONFIG_ROSE_MODULE)
DECL|member|rose
id|rose_cb
op_star
id|rose
suffix:semicolon
macro_line|#endif
macro_line|#endif
macro_line|#if defined(CONFIG_DECNET) || defined(CONFIG_DECNET_MODULE)
DECL|member|dn
id|dn_cb
op_star
id|dn
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_NETLINK
DECL|member|af_netlink
r_struct
id|netlink_opt
id|af_netlink
suffix:semicolon
macro_line|#endif
DECL|member|protinfo
)brace
id|protinfo
suffix:semicolon
multiline_comment|/* &n; *&t;IP &squot;private area&squot; or will be eventually &n; */
DECL|member|ip_ttl
r_int
id|ip_ttl
suffix:semicolon
multiline_comment|/* TTL setting */
DECL|member|ip_tos
r_int
id|ip_tos
suffix:semicolon
multiline_comment|/* TOS */
DECL|member|ip_cmsg_flags
r_int
id|ip_cmsg_flags
suffix:semicolon
DECL|member|dummy_th
r_struct
id|tcphdr
id|dummy_th
suffix:semicolon
DECL|member|opt
r_struct
id|ip_options
op_star
id|opt
suffix:semicolon
DECL|member|ip_hdrincl
r_int
r_char
id|ip_hdrincl
suffix:semicolon
multiline_comment|/* Include headers ? */
DECL|member|ip_mc_ttl
id|__u8
id|ip_mc_ttl
suffix:semicolon
multiline_comment|/* Multicasting TTL */
DECL|member|ip_mc_loop
id|__u8
id|ip_mc_loop
suffix:semicolon
multiline_comment|/* Loopback */
DECL|member|ip_recverr
id|__u8
id|ip_recverr
suffix:semicolon
DECL|member|ip_pmtudisc
id|__u8
id|ip_pmtudisc
suffix:semicolon
DECL|member|ip_mc_index
r_int
id|ip_mc_index
suffix:semicolon
multiline_comment|/* Multicast device index */
DECL|member|ip_mc_addr
id|__u32
id|ip_mc_addr
suffix:semicolon
DECL|member|ip_mc_list
r_struct
id|ip_mc_socklist
op_star
id|ip_mc_list
suffix:semicolon
multiline_comment|/* Group array */
multiline_comment|/*&n; *&t;This part is used for the timeout functions (timer.c). &n; */
DECL|member|timeout
r_int
id|timeout
suffix:semicolon
multiline_comment|/* What are we waiting for? */
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
multiline_comment|/* This is the TIME_WAIT/receive timer&n;&t;&t;&t;&t;&t;&t; * when we are doing IP&n;&t;&t;&t;&t;&t;&t; */
DECL|member|stamp
r_struct
id|timeval
id|stamp
suffix:semicolon
multiline_comment|/*&n;  *&t;Identd &n;  */
DECL|member|socket
r_struct
id|socket
op_star
id|socket
suffix:semicolon
multiline_comment|/*&n;   *&t;RPC layer private data&n;   */
DECL|member|user_data
r_void
op_star
id|user_data
suffix:semicolon
multiline_comment|/*&n;   *&t;Callbacks &n;   */
DECL|member|state_change
r_void
(paren
op_star
id|state_change
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|data_ready
r_void
(paren
op_star
id|data_ready
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|bytes
)paren
suffix:semicolon
DECL|member|write_space
r_void
(paren
op_star
id|write_space
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|error_report
r_void
(paren
op_star
id|error_report
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|backlog_rcv
r_int
(paren
op_star
id|backlog_rcv
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
DECL|member|destruct
r_void
(paren
op_star
id|destruct
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; *&t;IP protocol blocks we attach to sockets.&n; *&t;socket layer -&gt; transport layer interface&n; *&t;transport -&gt; network interface is defined by struct inet_proto&n; */
DECL|struct|proto
r_struct
id|proto
(brace
multiline_comment|/* These must be first. */
DECL|member|sklist_next
r_struct
id|sock
op_star
id|sklist_next
suffix:semicolon
DECL|member|sklist_prev
r_struct
id|sock
op_star
id|sklist_prev
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
r_int
id|timeout
)paren
suffix:semicolon
DECL|member|connect
r_int
(paren
op_star
id|connect
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sockaddr
op_star
id|uaddr
comma
r_int
id|addr_len
)paren
suffix:semicolon
DECL|member|accept
r_struct
id|sock
op_star
(paren
op_star
id|accept
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|flags
)paren
suffix:semicolon
DECL|member|retransmit
r_void
(paren
op_star
id|retransmit
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|all
)paren
suffix:semicolon
DECL|member|write_wakeup
r_void
(paren
op_star
id|write_wakeup
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|read_wakeup
r_void
(paren
op_star
id|read_wakeup
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|poll
r_int
r_int
(paren
op_star
id|poll
)paren
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|poll_table_struct
op_star
id|wait
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
DECL|member|init
r_int
(paren
op_star
id|init
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|destroy
r_int
(paren
op_star
id|destroy
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|shutdown
r_void
(paren
op_star
id|shutdown
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|how
)paren
suffix:semicolon
DECL|member|setsockopt
r_int
(paren
op_star
id|setsockopt
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|level
comma
r_int
id|optname
comma
r_char
op_star
id|optval
comma
r_int
id|optlen
)paren
suffix:semicolon
DECL|member|getsockopt
r_int
(paren
op_star
id|getsockopt
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
id|level
comma
r_int
id|optname
comma
r_char
op_star
id|optval
comma
r_int
op_star
id|option
)paren
suffix:semicolon
DECL|member|sendmsg
r_int
(paren
op_star
id|sendmsg
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|len
)paren
suffix:semicolon
DECL|member|recvmsg
r_int
(paren
op_star
id|recvmsg
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|msghdr
op_star
id|msg
comma
r_int
id|len
comma
r_int
id|noblock
comma
r_int
id|flags
comma
r_int
op_star
id|addr_len
)paren
suffix:semicolon
DECL|member|bind
r_int
(paren
op_star
id|bind
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sockaddr
op_star
id|uaddr
comma
r_int
id|addr_len
)paren
suffix:semicolon
DECL|member|backlog_rcv
r_int
(paren
op_star
id|backlog_rcv
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
multiline_comment|/* Keeping track of sk&squot;s, looking them up, and port selection methods. */
DECL|member|hash
r_void
(paren
op_star
id|hash
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|unhash
r_void
(paren
op_star
id|unhash
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|rehash
r_void
(paren
op_star
id|rehash
)paren
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|member|good_socknum
r_int
r_int
(paren
op_star
id|good_socknum
)paren
(paren
r_void
)paren
suffix:semicolon
DECL|member|verify_bind
r_int
(paren
op_star
id|verify_bind
)paren
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
r_int
id|snum
)paren
suffix:semicolon
DECL|member|max_header
r_int
r_int
id|max_header
suffix:semicolon
DECL|member|retransmits
r_int
r_int
id|retransmits
suffix:semicolon
DECL|member|name
r_char
id|name
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|inuse
DECL|member|highestinuse
r_int
id|inuse
comma
id|highestinuse
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|TIME_WRITE
mdefine_line|#define TIME_WRITE&t;1&t;/* Not yet used */
DECL|macro|TIME_RETRANS
mdefine_line|#define TIME_RETRANS&t;2&t;/* Retransmit timer */
DECL|macro|TIME_DACK
mdefine_line|#define TIME_DACK&t;3&t;/* Delayed ack timer */
DECL|macro|TIME_CLOSE
mdefine_line|#define TIME_CLOSE&t;4
DECL|macro|TIME_KEEPOPEN
mdefine_line|#define TIME_KEEPOPEN&t;5
DECL|macro|TIME_DESTROY
mdefine_line|#define TIME_DESTROY&t;6
DECL|macro|TIME_DONE
mdefine_line|#define TIME_DONE&t;7&t;/* Used to absorb those last few packets */
DECL|macro|TIME_PROBE0
mdefine_line|#define TIME_PROBE0&t;8
multiline_comment|/*&n; *&t;About 10 seconds &n; */
DECL|macro|SOCK_DESTROY_TIME
mdefine_line|#define SOCK_DESTROY_TIME (10*HZ)
multiline_comment|/*&n; *&t;Sockets 0-1023 can&squot;t be bound to unless you are superuser &n; */
DECL|macro|PROT_SOCK
mdefine_line|#define PROT_SOCK&t;1024
DECL|macro|SHUTDOWN_MASK
mdefine_line|#define SHUTDOWN_MASK&t;3
DECL|macro|RCV_SHUTDOWN
mdefine_line|#define RCV_SHUTDOWN&t;1
DECL|macro|SEND_SHUTDOWN
mdefine_line|#define SEND_SHUTDOWN&t;2
multiline_comment|/* Per-protocol hash table implementations use this to make sure&n; * nothing changes.&n; */
DECL|macro|SOCKHASH_LOCK
mdefine_line|#define SOCKHASH_LOCK()&t;&t;start_bh_atomic()
DECL|macro|SOCKHASH_UNLOCK
mdefine_line|#define SOCKHASH_UNLOCK()&t;end_bh_atomic()
multiline_comment|/* Some things in the kernel just want to get at a protocols&n; * entire socket list commensurate, thus...&n; */
DECL|function|add_to_prot_sklist
r_static
id|__inline__
r_void
id|add_to_prot_sklist
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
id|SOCKHASH_LOCK
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|sk-&gt;sklist_next
)paren
(brace
r_struct
id|proto
op_star
id|p
op_assign
id|sk-&gt;prot
suffix:semicolon
id|sk-&gt;sklist_prev
op_assign
(paren
r_struct
id|sock
op_star
)paren
id|p
suffix:semicolon
id|sk-&gt;sklist_next
op_assign
id|p-&gt;sklist_next
suffix:semicolon
id|p-&gt;sklist_next-&gt;sklist_prev
op_assign
id|sk
suffix:semicolon
id|p-&gt;sklist_next
op_assign
id|sk
suffix:semicolon
multiline_comment|/* Charge the protocol. */
id|sk-&gt;prot-&gt;inuse
op_add_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|sk-&gt;prot-&gt;highestinuse
OL
id|sk-&gt;prot-&gt;inuse
)paren
(brace
id|sk-&gt;prot-&gt;highestinuse
op_assign
id|sk-&gt;prot-&gt;inuse
suffix:semicolon
)brace
)brace
id|SOCKHASH_UNLOCK
c_func
(paren
)paren
suffix:semicolon
)brace
DECL|function|del_from_prot_sklist
r_static
id|__inline__
r_void
id|del_from_prot_sklist
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
id|SOCKHASH_LOCK
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|sk-&gt;sklist_next
)paren
(brace
id|sk-&gt;sklist_next-&gt;sklist_prev
op_assign
id|sk-&gt;sklist_prev
suffix:semicolon
id|sk-&gt;sklist_prev-&gt;sklist_next
op_assign
id|sk-&gt;sklist_next
suffix:semicolon
id|sk-&gt;sklist_next
op_assign
l_int|NULL
suffix:semicolon
id|sk-&gt;prot-&gt;inuse
op_decrement
suffix:semicolon
)brace
id|SOCKHASH_UNLOCK
c_func
(paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Used by processes to &quot;lock&quot; a socket state, so that&n; * interrupts and bottom half handlers won&squot;t change it&n; * from under us. It essentially blocks any incoming&n; * packets, so that we won&squot;t get any new data or any&n; * packets that change the state of the socket.&n; *&n; * Note the &squot;barrier()&squot; calls: gcc may not move a lock&n; * &quot;downwards&quot; or a unlock &quot;upwards&quot; when optimizing.&n; */
r_extern
r_void
id|__release_sock
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
DECL|function|lock_sock
r_static
r_inline
r_void
id|lock_sock
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
macro_line|#if 0
multiline_comment|/* debugging code: the test isn&squot;t even 100% correct, but it can catch bugs */
multiline_comment|/* Note that a double lock is ok in theory - it&squot;s just _usually_ a bug */
r_if
c_cond
(paren
id|sk-&gt;sock_readers
)paren
(brace
id|__label__
id|here
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;double lock on socket at %p&bslash;n&quot;
comma
op_logical_and
id|here
)paren
suffix:semicolon
id|here
suffix:colon
)brace
macro_line|#endif
macro_line|#ifdef __SMP__
multiline_comment|/*&n;&t; * This is a very broken bottom half synchronization mechanism.&n;&t; * You don&squot;t want to know..&n;&t; */
(brace
r_int
r_int
id|flags
suffix:semicolon
id|save_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
id|cli
c_func
(paren
)paren
suffix:semicolon
id|sk-&gt;sock_readers
op_increment
suffix:semicolon
id|restore_flags
c_func
(paren
id|flags
)paren
suffix:semicolon
)brace
macro_line|#else
id|sk-&gt;sock_readers
op_increment
suffix:semicolon
id|barrier
c_func
(paren
)paren
suffix:semicolon
macro_line|#endif
)brace
DECL|function|release_sock
r_static
r_inline
r_void
id|release_sock
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
id|barrier
c_func
(paren
)paren
suffix:semicolon
macro_line|#if 0
multiline_comment|/* debugging code: remove me when ok */
r_if
c_cond
(paren
id|sk-&gt;sock_readers
op_eq
l_int|0
)paren
(brace
id|__label__
id|here
suffix:semicolon
id|sk-&gt;sock_readers
op_assign
l_int|1
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;trying to unlock unlocked socket at %p&bslash;n&quot;
comma
op_logical_and
id|here
)paren
suffix:semicolon
id|here
suffix:colon
)brace
macro_line|#endif
r_if
c_cond
(paren
(paren
id|sk-&gt;sock_readers
op_assign
id|sk-&gt;sock_readers
op_minus
l_int|1
)paren
op_eq
l_int|0
)paren
id|__release_sock
c_func
(paren
id|sk
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;This might not be the most apropriate place for this two&t; &n; *&t;but since they are used by a lot of the net related code&n; *&t;at least they get declared on a include that is common to all&n; */
DECL|function|min
r_static
id|__inline__
r_int
id|min
c_func
(paren
r_int
r_int
id|a
comma
r_int
r_int
id|b
)paren
(brace
r_if
c_cond
(paren
id|a
OG
id|b
)paren
id|a
op_assign
id|b
suffix:semicolon
r_return
id|a
suffix:semicolon
)brace
DECL|function|max
r_static
id|__inline__
r_int
id|max
c_func
(paren
r_int
r_int
id|a
comma
r_int
r_int
id|b
)paren
(brace
r_if
c_cond
(paren
id|a
OL
id|b
)paren
id|a
op_assign
id|b
suffix:semicolon
r_return
id|a
suffix:semicolon
)brace
r_extern
r_struct
id|sock
op_star
id|sk_alloc
c_func
(paren
r_int
id|family
comma
r_int
id|priority
)paren
suffix:semicolon
r_extern
r_void
id|sk_free
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|destroy_sock
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|sock_wmalloc
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
r_int
id|size
comma
r_int
id|force
comma
r_int
id|priority
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|sock_rmalloc
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
r_int
id|size
comma
r_int
id|force
comma
r_int
id|priority
)paren
suffix:semicolon
r_extern
r_void
id|sock_wfree
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_void
id|sock_rfree
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_extern
r_int
r_int
id|sock_rspace
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_int
r_int
id|sock_wspace
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_int
id|sock_setsockopt
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|op
comma
r_char
op_star
id|optval
comma
r_int
id|optlen
)paren
suffix:semicolon
r_extern
r_int
id|sock_getsockopt
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_int
id|level
comma
r_int
id|op
comma
r_char
op_star
id|optval
comma
r_int
op_star
id|optlen
)paren
suffix:semicolon
r_extern
r_struct
id|sk_buff
op_star
id|sock_alloc_send_skb
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_int
r_int
id|size
comma
r_int
r_int
id|fallback
comma
r_int
id|noblock
comma
r_int
op_star
id|errcode
)paren
suffix:semicolon
multiline_comment|/*&n; * Functions to fill in entries in struct proto_ops when a protocol&n; * does not implement a particular function.&n; */
r_extern
r_int
id|sock_no_dup
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|socket
op_star
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_release
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|socket
op_star
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_bind
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|sockaddr
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_connect
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|sockaddr
op_star
comma
r_int
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_socketpair
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|socket
op_star
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_accept
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|socket
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_getname
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|sockaddr
op_star
comma
r_int
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
r_int
id|sock_no_poll
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|poll_table_struct
op_star
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_ioctl
c_func
(paren
r_struct
id|socket
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_listen
c_func
(paren
r_struct
id|socket
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_shutdown
c_func
(paren
r_struct
id|socket
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_getsockopt
c_func
(paren
r_struct
id|socket
op_star
comma
r_int
comma
r_int
comma
r_char
op_star
comma
r_int
op_star
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_setsockopt
c_func
(paren
r_struct
id|socket
op_star
comma
r_int
comma
r_int
comma
r_char
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_fcntl
c_func
(paren
r_struct
id|socket
op_star
comma
r_int
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_sendmsg
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|msghdr
op_star
comma
r_int
comma
r_struct
id|scm_cookie
op_star
)paren
suffix:semicolon
r_extern
r_int
id|sock_no_recvmsg
c_func
(paren
r_struct
id|socket
op_star
comma
r_struct
id|msghdr
op_star
comma
r_int
comma
r_struct
id|scm_cookie
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; *&t;Default socket callbacks and setup code&n; */
r_extern
r_void
id|sock_def_callback1
c_func
(paren
r_struct
id|sock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sock_def_callback2
c_func
(paren
r_struct
id|sock
op_star
comma
r_int
)paren
suffix:semicolon
r_extern
r_void
id|sock_def_callback3
c_func
(paren
r_struct
id|sock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|sock_def_destruct
c_func
(paren
r_struct
id|sock
op_star
)paren
suffix:semicolon
multiline_comment|/* Initialise core socket variables */
r_extern
r_void
id|sock_init_data
c_func
(paren
r_struct
id|socket
op_star
id|sock
comma
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|sklist_remove_socket
c_func
(paren
r_struct
id|sock
op_star
op_star
id|list
comma
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|sklist_insert_socket
c_func
(paren
r_struct
id|sock
op_star
op_star
id|list
comma
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
r_extern
r_void
id|sklist_destroy_socket
c_func
(paren
r_struct
id|sock
op_star
op_star
id|list
comma
r_struct
id|sock
op_star
id|sk
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_FILTER
multiline_comment|/*&n; * Run the filter code and then cut skb-&gt;data to correct size returned by&n; * sk_run_filter. If pkt_len is 0 we toss packet. If skb-&gt;len is smaller&n; * than pkt_len we keep whole skb-&gt;data.&n; */
DECL|function|sk_filter
r_extern
id|__inline__
r_int
id|sk_filter
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|sock_filter
op_star
id|filter
comma
r_int
id|flen
)paren
(brace
r_int
id|pkt_len
suffix:semicolon
id|pkt_len
op_assign
id|sk_run_filter
c_func
(paren
id|skb-&gt;data
comma
id|skb-&gt;len
comma
id|filter
comma
id|flen
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|pkt_len
)paren
(brace
r_return
l_int|1
suffix:semicolon
)brace
multiline_comment|/* Toss Packet */
r_else
id|skb_trim
c_func
(paren
id|skb
comma
id|pkt_len
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* CONFIG_FILTER */
multiline_comment|/*&n; * &t;Queue a received datagram if it will fit. Stream and sequenced&n; *&t;protocols can&squot;t normally use this as they need to fit buffers in&n; *&t;and play with them.&n; *&n; * &t;Inlined as it&squot;s very short and called for pretty much every&n; *&t;packet ever received.&n; */
DECL|function|skb_set_owner_w
r_extern
id|__inline__
r_void
id|skb_set_owner_w
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|sock
op_star
id|sk
)paren
(brace
id|skb-&gt;sk
op_assign
id|sk
suffix:semicolon
id|skb-&gt;destructor
op_assign
id|sock_wfree
suffix:semicolon
id|atomic_add
c_func
(paren
id|skb-&gt;truesize
comma
op_amp
id|sk-&gt;wmem_alloc
)paren
suffix:semicolon
)brace
DECL|function|skb_set_owner_r
r_extern
id|__inline__
r_void
id|skb_set_owner_r
c_func
(paren
r_struct
id|sk_buff
op_star
id|skb
comma
r_struct
id|sock
op_star
id|sk
)paren
(brace
id|skb-&gt;sk
op_assign
id|sk
suffix:semicolon
id|skb-&gt;destructor
op_assign
id|sock_rfree
suffix:semicolon
id|atomic_add
c_func
(paren
id|skb-&gt;truesize
comma
op_amp
id|sk-&gt;rmem_alloc
)paren
suffix:semicolon
)brace
DECL|function|sock_queue_rcv_skb
r_extern
id|__inline__
r_int
id|sock_queue_rcv_skb
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sk-&gt;rmem_alloc
)paren
op_plus
id|skb-&gt;truesize
op_ge
id|sk-&gt;rcvbuf
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
id|skb_set_owner_r
c_func
(paren
id|skb
comma
id|sk
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_FILTER
r_if
c_cond
(paren
id|sk-&gt;filter
)paren
(brace
r_if
c_cond
(paren
id|sk_filter
c_func
(paren
id|skb
comma
id|sk-&gt;filter_data
comma
id|sk-&gt;filter
)paren
)paren
r_return
op_minus
l_int|1
suffix:semicolon
multiline_comment|/* Toss packet */
)brace
macro_line|#endif /* CONFIG_FILTER */
id|skb_queue_tail
c_func
(paren
op_amp
id|sk-&gt;receive_queue
comma
id|skb
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|sk-&gt;dead
)paren
id|sk
op_member_access_from_pointer
id|data_ready
c_func
(paren
id|sk
comma
id|skb-&gt;len
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|__sock_queue_rcv_skb
r_extern
id|__inline__
r_int
id|__sock_queue_rcv_skb
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sk-&gt;rmem_alloc
)paren
op_plus
id|skb-&gt;truesize
op_ge
id|sk-&gt;rcvbuf
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
id|skb_set_owner_r
c_func
(paren
id|skb
comma
id|sk
)paren
suffix:semicolon
id|__skb_queue_tail
c_func
(paren
op_amp
id|sk-&gt;receive_queue
comma
id|skb
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|sk-&gt;dead
)paren
id|sk
op_member_access_from_pointer
id|data_ready
c_func
(paren
id|sk
comma
id|skb-&gt;len
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|sock_queue_err_skb
r_extern
id|__inline__
r_int
id|sock_queue_err_skb
c_func
(paren
r_struct
id|sock
op_star
id|sk
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
(brace
r_if
c_cond
(paren
id|atomic_read
c_func
(paren
op_amp
id|sk-&gt;rmem_alloc
)paren
op_plus
id|skb-&gt;truesize
op_ge
id|sk-&gt;rcvbuf
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
id|skb_set_owner_r
c_func
(paren
id|skb
comma
id|sk
)paren
suffix:semicolon
id|__skb_queue_tail
c_func
(paren
op_amp
id|sk-&gt;error_queue
comma
id|skb
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|sk-&gt;dead
)paren
id|sk
op_member_access_from_pointer
id|data_ready
c_func
(paren
id|sk
comma
id|skb-&gt;len
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
multiline_comment|/*&n; *&t;Recover an error report and clear atomically&n; */
DECL|function|sock_error
r_extern
id|__inline__
r_int
id|sock_error
c_func
(paren
r_struct
id|sock
op_star
id|sk
)paren
(brace
r_int
id|err
op_assign
id|xchg
c_func
(paren
op_amp
id|sk-&gt;err
comma
l_int|0
)paren
suffix:semicolon
r_return
op_minus
id|err
suffix:semicolon
)brace
multiline_comment|/* &n; *&t;Declarations from timer.c &n; */
r_extern
r_struct
id|sock
op_star
id|timer_base
suffix:semicolon
r_extern
r_void
id|net_delete_timer
(paren
r_struct
id|sock
op_star
)paren
suffix:semicolon
r_extern
r_void
id|net_reset_timer
(paren
r_struct
id|sock
op_star
comma
r_int
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_void
id|net_timer
(paren
r_int
r_int
)paren
suffix:semicolon
multiline_comment|/* &n; *&t;Enable debug/info messages &n; */
macro_line|#if 0
mdefine_line|#define NETDEBUG(x)&t;do { } while (0)
macro_line|#else
DECL|macro|NETDEBUG
mdefine_line|#define NETDEBUG(x)&t;do { x; } while (0)
macro_line|#endif
macro_line|#endif&t;/* _SOCK_H */
eof
