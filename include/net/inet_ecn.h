macro_line|#ifndef _INET_ECN_H_
DECL|macro|_INET_ECN_H_
mdefine_line|#define _INET_ECN_H_
macro_line|#include &lt;linux/config.h&gt;
macro_line|#ifdef CONFIG_INET_ECN
DECL|function|INET_ECN_is_ce
r_static
r_inline
r_int
id|INET_ECN_is_ce
c_func
(paren
id|__u8
id|dsfield
)paren
(brace
r_return
(paren
id|dsfield
op_amp
l_int|3
)paren
op_eq
l_int|3
suffix:semicolon
)brace
DECL|function|INET_ECN_is_not_ce
r_static
r_inline
r_int
id|INET_ECN_is_not_ce
c_func
(paren
id|__u8
id|dsfield
)paren
(brace
r_return
(paren
id|dsfield
op_amp
l_int|3
)paren
op_eq
l_int|2
suffix:semicolon
)brace
DECL|function|INET_ECN_is_capable
r_static
r_inline
r_int
id|INET_ECN_is_capable
c_func
(paren
id|__u8
id|dsfield
)paren
(brace
r_return
(paren
id|dsfield
op_amp
l_int|2
)paren
suffix:semicolon
)brace
DECL|function|INET_ECN_encapsulate
r_static
r_inline
id|__u8
id|INET_ECN_encapsulate
c_func
(paren
id|__u8
id|outer
comma
id|__u8
id|inner
)paren
(brace
id|outer
op_and_assign
op_complement
l_int|3
suffix:semicolon
r_if
c_cond
(paren
id|INET_ECN_is_capable
c_func
(paren
id|inner
)paren
)paren
id|outer
op_or_assign
(paren
id|inner
op_amp
l_int|3
)paren
suffix:semicolon
r_return
id|outer
suffix:semicolon
)brace
DECL|macro|INET_ECN_xmit
mdefine_line|#define&t;INET_ECN_xmit(sk) do { (sk)-&gt;protinfo.af_inet.tos |= 2; } while (0)
DECL|macro|INET_ECN_dontxmit
mdefine_line|#define&t;INET_ECN_dontxmit(sk) do { (sk)-&gt;protinfo.af_inet.tos &amp;= ~3; } while (0)
DECL|macro|IP6_ECN_flow_init
mdefine_line|#define IP6_ECN_flow_init(label) do {&t;&bslash;&n;      (label) &amp;= ~htonl(3&lt;&lt;20);&t;&t;&bslash;&n;    } while (0)
DECL|macro|IP6_ECN_flow_xmit
mdefine_line|#define&t;IP6_ECN_flow_xmit(sk, label) do {&t;&t;&t;&bslash;&n;&t;if (INET_ECN_is_capable((sk)-&gt;protinfo.af_inet.tos))&t;&bslash;&n;&t;&t;(label) |= __constant_htons(2 &lt;&lt; 4);&t;&t;&bslash;&n;    } while (0)
macro_line|#else
DECL|macro|INET_ECN_is_ce
mdefine_line|#define INET_ECN_is_ce(x...)&t;&t;(0)
DECL|macro|INET_ECN_is_not_ce
mdefine_line|#define INET_ECN_is_not_ce(x...)&t;(0)
DECL|macro|INET_ECN_is_capable
mdefine_line|#define INET_ECN_is_capable(x...)&t;(0)
DECL|macro|INET_ECN_encapsulate
mdefine_line|#define INET_ECN_encapsulate(x, y)&t;(x)
DECL|macro|IP6_ECN_flow_init
mdefine_line|#define IP6_ECN_flow_init(x...)&t;&t;do { } while (0)
DECL|macro|IP6_ECN_flow_xmit
mdefine_line|#define&t;IP6_ECN_flow_xmit(x...)&t;&t;do { } while (0)
DECL|macro|INET_ECN_xmit
mdefine_line|#define&t;INET_ECN_xmit(x...)&t;&t;do { } while (0)
DECL|macro|INET_ECN_dontxmit
mdefine_line|#define&t;INET_ECN_dontxmit(x...)&t;&t;do { } while (0)
macro_line|#endif
DECL|function|IP_ECN_set_ce
r_static
r_inline
r_void
id|IP_ECN_set_ce
c_func
(paren
r_struct
id|iphdr
op_star
id|iph
)paren
(brace
id|u32
id|check
op_assign
id|iph-&gt;check
suffix:semicolon
id|check
op_add_assign
id|__constant_htons
c_func
(paren
l_int|0xFFFE
)paren
suffix:semicolon
id|iph-&gt;check
op_assign
id|check
op_plus
(paren
id|check
op_ge
l_int|0xFFFF
)paren
suffix:semicolon
id|iph-&gt;tos
op_or_assign
l_int|1
suffix:semicolon
)brace
r_struct
id|ipv6hdr
suffix:semicolon
DECL|function|IP6_ECN_set_ce
r_static
r_inline
r_void
id|IP6_ECN_set_ce
c_func
(paren
r_struct
id|ipv6hdr
op_star
id|iph
)paren
(brace
op_star
(paren
id|u32
op_star
)paren
id|iph
op_or_assign
id|htonl
c_func
(paren
l_int|1
op_lshift
l_int|20
)paren
suffix:semicolon
)brace
DECL|macro|ip6_get_dsfield
mdefine_line|#define ip6_get_dsfield(iph) ((ntohs(*(u16*)(iph)) &gt;&gt; 4) &amp; 0xFF)
macro_line|#endif
eof
