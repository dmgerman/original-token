multiline_comment|/* $Id: mmu_context.h,v 1.4 2000/02/23 00:41:38 ralf Exp $&n; *&n; * Switch a MMU context.&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Copyright (C) 1996, 1997, 1998, 1999 by Ralf Baechle&n; * Copyright (C) 1999 Silicon Graphics, Inc.&n; */
macro_line|#ifndef _ASM_MMU_CONTEXT_H
DECL|macro|_ASM_MMU_CONTEXT_H
mdefine_line|#define _ASM_MMU_CONTEXT_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/slab.h&gt;
macro_line|#include &lt;asm/pgalloc.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
multiline_comment|/*&n; * For the fast tlb miss handlers, we currently keep a per cpu array&n; * of pointers to the current pgd for each processor. Also, the proc.&n; * id is stuffed into the context register. This should be changed to &n; * use the processor id via current-&gt;processor, where current is stored&n; * in watchhi/lo. The context register should be used to contiguously&n; * map the page tables.&n; */
DECL|macro|TLBMISS_HANDLER_SETUP_PGD
mdefine_line|#define TLBMISS_HANDLER_SETUP_PGD(pgd) &bslash;&n;&t;pgd_current[smp_processor_id()] = (unsigned long)(pgd)
DECL|macro|TLBMISS_HANDLER_SETUP
mdefine_line|#define TLBMISS_HANDLER_SETUP() &bslash;&n;&t;set_context((unsigned long) smp_processor_id() &lt;&lt; (23 + 3)); &bslash;&n;&t;TLBMISS_HANDLER_SETUP_PGD(swapper_pg_dir)
r_extern
r_int
r_int
id|pgd_current
(braket
)braket
suffix:semicolon
macro_line|#ifndef CONFIG_SMP
DECL|macro|CPU_CONTEXT
mdefine_line|#define CPU_CONTEXT(cpu, mm)&t;(mm)-&gt;context
macro_line|#else
DECL|macro|CPU_CONTEXT
mdefine_line|#define CPU_CONTEXT(cpu, mm)&t;(*((unsigned long *)((mm)-&gt;context) + cpu))
macro_line|#endif
DECL|macro|ASID_CACHE
mdefine_line|#define ASID_CACHE(cpu)&t;&t;cpu_data[cpu].asid_cache
DECL|macro|ASID_INC
mdefine_line|#define ASID_INC&t;0x1
DECL|macro|ASID_MASK
mdefine_line|#define ASID_MASK&t;0xff
DECL|function|enter_lazy_tlb
r_static
r_inline
r_void
id|enter_lazy_tlb
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
id|cpu
)paren
(brace
)brace
multiline_comment|/*&n; *  All unused by hardware upper bits will be considered&n; *  as a software asid extension.&n; */
DECL|macro|ASID_VERSION_MASK
mdefine_line|#define ASID_VERSION_MASK  ((unsigned long)~(ASID_MASK|(ASID_MASK-1)))
DECL|macro|ASID_FIRST_VERSION
mdefine_line|#define ASID_FIRST_VERSION ((unsigned long)(~ASID_VERSION_MASK) + 1)
r_extern
r_inline
r_void
DECL|function|get_new_cpu_mmu_context
id|get_new_cpu_mmu_context
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
comma
r_int
r_int
id|cpu
)paren
(brace
r_int
r_int
id|asid
op_assign
id|ASID_CACHE
c_func
(paren
id|cpu
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
(paren
id|asid
op_add_assign
id|ASID_INC
)paren
op_amp
id|ASID_MASK
)paren
)paren
(brace
id|_flush_tlb_all
c_func
(paren
)paren
suffix:semicolon
multiline_comment|/* start new asid cycle */
r_if
c_cond
(paren
op_logical_neg
id|asid
)paren
multiline_comment|/* fix version if needed */
id|asid
op_assign
id|ASID_FIRST_VERSION
suffix:semicolon
)brace
id|CPU_CONTEXT
c_func
(paren
id|cpu
comma
id|mm
)paren
op_assign
id|ASID_CACHE
c_func
(paren
id|cpu
)paren
op_assign
id|asid
suffix:semicolon
)brace
multiline_comment|/*&n; * Initialize the context related info for a new mm_struct&n; * instance.&n; */
r_extern
r_inline
r_int
DECL|function|init_new_context
id|init_new_context
c_func
(paren
r_struct
id|task_struct
op_star
id|tsk
comma
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
macro_line|#ifndef CONFIG_SMP
id|mm-&gt;context
op_assign
l_int|0
suffix:semicolon
macro_line|#else
id|mm-&gt;context
op_assign
(paren
r_int
r_int
)paren
id|kmalloc
c_func
(paren
id|smp_num_cpus
op_star
r_sizeof
(paren
r_int
r_int
)paren
comma
id|GFP_KERNEL
)paren
suffix:semicolon
multiline_comment|/*&n; &t; * Init the &quot;context&quot; values so that a tlbpid allocation &n;&t; * happens on the first switch.&n; &t; */
r_if
c_cond
(paren
id|mm-&gt;context
op_eq
l_int|0
)paren
r_return
op_minus
id|ENOMEM
suffix:semicolon
id|memset
c_func
(paren
(paren
r_void
op_star
)paren
id|mm-&gt;context
comma
l_int|0
comma
id|smp_num_cpus
op_star
r_sizeof
(paren
r_int
r_int
)paren
)paren
suffix:semicolon
macro_line|#endif
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|switch_mm
r_extern
r_inline
r_void
id|switch_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|prev
comma
r_struct
id|mm_struct
op_star
id|next
comma
r_struct
id|task_struct
op_star
id|tsk
comma
r_int
id|cpu
)paren
(brace
multiline_comment|/* Check if our ASID is of an older version and thus invalid */
r_if
c_cond
(paren
(paren
id|CPU_CONTEXT
c_func
(paren
id|cpu
comma
id|next
)paren
op_xor
id|ASID_CACHE
c_func
(paren
id|cpu
)paren
)paren
op_amp
id|ASID_VERSION_MASK
)paren
id|get_new_cpu_mmu_context
c_func
(paren
id|next
comma
id|cpu
)paren
suffix:semicolon
id|set_entryhi
c_func
(paren
id|CPU_CONTEXT
c_func
(paren
id|cpu
comma
id|next
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
id|TLBMISS_HANDLER_SETUP_PGD
c_func
(paren
id|next-&gt;pgd
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * Destroy context related info for an mm_struct that is about&n; * to be put to rest.&n; */
DECL|function|destroy_context
r_extern
r_inline
r_void
id|destroy_context
c_func
(paren
r_struct
id|mm_struct
op_star
id|mm
)paren
(brace
macro_line|#ifdef CONFIG_SMP
r_if
c_cond
(paren
id|mm-&gt;context
)paren
id|kfree
c_func
(paren
(paren
r_void
op_star
)paren
id|mm-&gt;context
)paren
suffix:semicolon
macro_line|#endif
)brace
multiline_comment|/*&n; * After we have set current-&gt;mm to a new value, this activates&n; * the context for the new mm so we see the new mappings.&n; */
r_extern
r_inline
r_void
DECL|function|activate_mm
id|activate_mm
c_func
(paren
r_struct
id|mm_struct
op_star
id|prev
comma
r_struct
id|mm_struct
op_star
id|next
)paren
(brace
multiline_comment|/* Unconditionally get a new ASID.  */
id|get_new_cpu_mmu_context
c_func
(paren
id|next
comma
id|smp_processor_id
c_func
(paren
)paren
)paren
suffix:semicolon
id|set_entryhi
c_func
(paren
id|CPU_CONTEXT
c_func
(paren
id|smp_processor_id
c_func
(paren
)paren
comma
id|next
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
id|TLBMISS_HANDLER_SETUP_PGD
c_func
(paren
id|next-&gt;pgd
)paren
suffix:semicolon
)brace
macro_line|#endif /* _ASM_MMU_CONTEXT_H */
eof
