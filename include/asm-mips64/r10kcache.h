multiline_comment|/* $Id: r10kcache.h,v 1.1 2000/01/16 01:27:14 ralf Exp $&n; *&n; * This file is subject to the terms and conditions of the GNU General Public&n; * License.  See the file &quot;COPYING&quot; in the main directory of this archive&n; * for more details.&n; *&n; * Inline assembly cache operations.&n; *&n; * Copyright (C) 1996 David S. Miller (dm@engr.sgi.com)&n; * Copyright (C) 1999 Ralf Baechle&n; * Copyright (C) 1999 Silicon Graphics, Inc.&n; *&n; * FIXME: Handle split L2 caches.&n; */
macro_line|#ifndef _ASM_R10KCACHE_H
DECL|macro|_ASM_R10KCACHE_H
mdefine_line|#define _ASM_R10KCACHE_H
macro_line|#include &lt;asm/asm.h&gt;
macro_line|#include &lt;asm/r10kcacheops.h&gt;
multiline_comment|/* These are fixed for the current R10000.  */
DECL|macro|icache_size
mdefine_line|#define icache_size&t;0x8000
DECL|macro|dcache_size
mdefine_line|#define dcache_size&t;0x8000
DECL|macro|icache_way_size
mdefine_line|#define icache_way_size&t;0x4000
DECL|macro|dcache_way_size
mdefine_line|#define dcache_way_size&t;0x4000
DECL|macro|ic_lsize
mdefine_line|#define ic_lsize&t;64
DECL|macro|dc_lsize
mdefine_line|#define dc_lsize&t;32
multiline_comment|/* These are configuration dependant.  */
DECL|macro|scache_size
mdefine_line|#define scache_size()&t;({&t;&t;&t;&t;&t;&t;&bslash;&n;&t;unsigned long __res;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__res = (read_32bit_cp0_register(CP0_CONFIG) &gt;&gt; 16) &amp; 3;&t;&bslash;&n;&t;__res = 1 &lt;&lt; (__res + 19);&t;&t;&t;&t;&t;&bslash;&n;&t;__res;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|macro|sc_lsize
mdefine_line|#define sc_lsize()&t;({&t;&t;&t;&t;&t;&t;&bslash;&n;&t;unsigned long __res;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;__res = (read_32bit_cp0_register(CP0_CONFIG) &gt;&gt; 13) &amp; 1;&t;&bslash;&n;&t;__res = 1 &lt;&lt; (__res + 6);&t;&t;&t;&t;&t;&bslash;&n;&t;__res;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;})
DECL|function|flush_icache_line_indexed
r_extern
r_inline
r_void
id|flush_icache_line_indexed
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Index_Invalidate_I
)paren
)paren
suffix:semicolon
)brace
DECL|function|flush_dcache_line_indexed
r_extern
r_inline
r_void
id|flush_dcache_line_indexed
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Index_Writeback_Inv_D
)paren
)paren
suffix:semicolon
)brace
DECL|function|flush_scache_line_indexed
r_extern
r_inline
r_void
id|flush_scache_line_indexed
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Index_Writeback_Inv_S
)paren
)paren
suffix:semicolon
)brace
DECL|function|flush_icache_line
r_extern
r_inline
r_void
id|flush_icache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Invalidate_I
)paren
)paren
suffix:semicolon
)brace
DECL|function|flush_dcache_line
r_extern
r_inline
r_void
id|flush_dcache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Writeback_Inv_D
)paren
)paren
suffix:semicolon
)brace
DECL|function|invalidate_dcache_line
r_extern
r_inline
r_void
id|invalidate_dcache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Invalidate_D
)paren
)paren
suffix:semicolon
)brace
DECL|function|invalidate_scache_line
r_extern
r_inline
r_void
id|invalidate_scache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Invalidate_S
)paren
)paren
suffix:semicolon
)brace
DECL|function|flush_scache_line
r_extern
r_inline
r_void
id|flush_scache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;cache %1, (%0)&bslash;n&bslash;t&quot;
l_string|&quot;.set reorder&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Writeback_Inv_S
)paren
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * The next two are for badland addresses like signal trampolines.&n; */
DECL|function|protected_flush_icache_line
r_extern
r_inline
r_void
id|protected_flush_icache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;1:&bslash;tcache %1,(%0)&bslash;n&quot;
l_string|&quot;2:&bslash;t.set reorder&bslash;n&bslash;t&quot;
l_string|&quot;.section&bslash;t__ex_table,&bslash;&quot;a&bslash;&quot;&bslash;n&bslash;t&quot;
l_string|&quot;.dword&bslash;t1b,2b&bslash;n&bslash;t&quot;
l_string|&quot;.previous&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Invalidate_I
)paren
)paren
suffix:semicolon
)brace
DECL|function|protected_writeback_dcache_line
r_extern
r_inline
r_void
id|protected_writeback_dcache_line
c_func
(paren
r_int
r_int
id|addr
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;.set noreorder&bslash;n&bslash;t&quot;
l_string|&quot;1:&bslash;tcache %1,(%0)&bslash;n&quot;
l_string|&quot;2:&bslash;t.set reorder&bslash;n&bslash;t&quot;
l_string|&quot;.section&bslash;t__ex_table,&bslash;&quot;a&bslash;&quot;&bslash;n&bslash;t&quot;
l_string|&quot;.dword&bslash;t1b,2b&bslash;n&bslash;t&quot;
l_string|&quot;.previous&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|addr
)paren
comma
l_string|&quot;i&quot;
(paren
id|Hit_Writeback_Inv_D
)paren
)paren
suffix:semicolon
)brace
DECL|macro|cache32_unroll16
mdefine_line|#define cache32_unroll16(base,op)&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.set noreorder;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;cache %1, 0x000(%0); cache %1, 0x020(%0);&t;&bslash;&n;&t;&t;cache %1, 0x040(%0); cache %1, 0x060(%0);&t;&bslash;&n;&t;&t;cache %1, 0x080(%0); cache %1, 0x0a0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x0c0(%0); cache %1, 0x0e0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x100(%0); cache %1, 0x120(%0);&t;&bslash;&n;&t;&t;cache %1, 0x140(%0); cache %1, 0x160(%0);&t;&bslash;&n;&t;&t;cache %1, 0x180(%0); cache %1, 0x1a0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x1c0(%0); cache %1, 0x1e0(%0);&t;&bslash;&n;&t;&t;.set reorder&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;: &quot;r&quot; (base),&t;&t;&t;&t;&t;&bslash;&n;&t;&t;  &quot;i&quot; (op));
DECL|macro|cache32_unroll32
mdefine_line|#define cache32_unroll32(base,op)&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.set noreorder;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;cache %1, 0x000(%0); cache %1, 0x020(%0);&t;&bslash;&n;&t;&t;cache %1, 0x040(%0); cache %1, 0x060(%0);&t;&bslash;&n;&t;&t;cache %1, 0x080(%0); cache %1, 0x0a0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x0c0(%0); cache %1, 0x0e0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x100(%0); cache %1, 0x120(%0);&t;&bslash;&n;&t;&t;cache %1, 0x140(%0); cache %1, 0x160(%0);&t;&bslash;&n;&t;&t;cache %1, 0x180(%0); cache %1, 0x1a0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x1c0(%0); cache %1, 0x1e0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x200(%0); cache %1, 0x220(%0);&t;&bslash;&n;&t;&t;cache %1, 0x240(%0); cache %1, 0x260(%0);&t;&bslash;&n;&t;&t;cache %1, 0x280(%0); cache %1, 0x2a0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x2c0(%0); cache %1, 0x2e0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x300(%0); cache %1, 0x320(%0);&t;&bslash;&n;&t;&t;cache %1, 0x340(%0); cache %1, 0x360(%0);&t;&bslash;&n;&t;&t;cache %1, 0x380(%0); cache %1, 0x3a0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x3c0(%0); cache %1, 0x3e0(%0);&t;&bslash;&n;&t;&t;.set reorder&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;: &quot;r&quot; (base),&t;&t;&t;&t;&t;&bslash;&n;&t;&t;  &quot;i&quot; (op));
DECL|function|blast_dcache32
r_extern
r_inline
r_void
id|blast_dcache32
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|way0
op_assign
id|KSEG0
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|way0
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
(paren
id|way0
op_plus
id|dcache_way_size
)paren
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache32_unroll16
c_func
(paren
id|way0
comma
id|Index_Writeback_Inv_D
)paren
suffix:semicolon
id|cache32_unroll16
c_func
(paren
id|way1
comma
id|Index_Writeback_Inv_D
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x200
suffix:semicolon
id|way1
op_add_assign
l_int|0x200
suffix:semicolon
)brace
)brace
DECL|function|blast_dcache32_page
r_extern
r_inline
r_void
id|blast_dcache32_page
c_func
(paren
r_int
r_int
id|page
)paren
(brace
r_int
r_int
id|start
op_assign
id|page
suffix:semicolon
r_int
r_int
id|end
op_assign
id|page
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|start
OL
id|end
)paren
(brace
id|cache32_unroll32
c_func
(paren
id|start
comma
id|Hit_Writeback_Inv_D
)paren
suffix:semicolon
id|start
op_add_assign
l_int|0x400
suffix:semicolon
)brace
)brace
DECL|function|blast_dcache32_page_indexed
r_extern
r_inline
r_void
id|blast_dcache32_page_indexed
c_func
(paren
r_int
r_int
id|page
)paren
(brace
r_int
r_int
id|way0
op_assign
id|page
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|page
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
id|page
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache32_unroll16
c_func
(paren
id|way0
comma
id|Index_Writeback_Inv_D
)paren
suffix:semicolon
id|cache32_unroll16
c_func
(paren
id|way1
comma
id|Index_Writeback_Inv_D
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x200
suffix:semicolon
id|way1
op_add_assign
l_int|0x200
suffix:semicolon
)brace
)brace
DECL|macro|cache64_unroll16
mdefine_line|#define cache64_unroll16(base,op)&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.set noreorder;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;cache %1, 0x000(%0); cache %1, 0x040(%0);&t;&bslash;&n;&t;&t;cache %1, 0x080(%0); cache %1, 0x0c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x100(%0); cache %1, 0x140(%0);&t;&bslash;&n;&t;&t;cache %1, 0x180(%0); cache %1, 0x1c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x200(%0); cache %1, 0x240(%0);&t;&bslash;&n;&t;&t;cache %1, 0x280(%0); cache %1, 0x2c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x300(%0); cache %1, 0x340(%0);&t;&bslash;&n;&t;&t;cache %1, 0x380(%0); cache %1, 0x3c0(%0);&t;&bslash;&n;&t;&t;.set reorder&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;: &quot;r&quot; (base),&t;&t;&t;&t;&t;&bslash;&n;&t;&t;  &quot;i&quot; (op));
DECL|macro|cache64_unroll32
mdefine_line|#define cache64_unroll32(base,op)&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.set noreorder;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;cache %1, 0x000(%0); cache %1, 0x040(%0);&t;&bslash;&n;&t;&t;cache %1, 0x080(%0); cache %1, 0x0c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x100(%0); cache %1, 0x140(%0);&t;&bslash;&n;&t;&t;cache %1, 0x180(%0); cache %1, 0x1c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x200(%0); cache %1, 0x240(%0);&t;&bslash;&n;&t;&t;cache %1, 0x280(%0); cache %1, 0x2c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x300(%0); cache %1, 0x340(%0);&t;&bslash;&n;&t;&t;cache %1, 0x380(%0); cache %1, 0x3c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x400(%0); cache %1, 0x440(%0);&t;&bslash;&n;&t;&t;cache %1, 0x480(%0); cache %1, 0x4c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x500(%0); cache %1, 0x540(%0);&t;&bslash;&n;&t;&t;cache %1, 0x580(%0); cache %1, 0x5c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x600(%0); cache %1, 0x640(%0);&t;&bslash;&n;&t;&t;cache %1, 0x680(%0); cache %1, 0x6c0(%0);&t;&bslash;&n;&t;&t;cache %1, 0x700(%0); cache %1, 0x740(%0);&t;&bslash;&n;&t;&t;cache %1, 0x780(%0); cache %1, 0x7c0(%0);&t;&bslash;&n;&t;&t;.set reorder&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;: &quot;r&quot; (base),&t;&t;&t;&t;&t;&bslash;&n;&t;&t;  &quot;i&quot; (op));
DECL|function|blast_icache64
r_extern
r_inline
r_void
id|blast_icache64
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|way0
op_assign
id|KSEG0
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|way0
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
id|way0
op_plus
id|icache_way_size
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache64_unroll16
c_func
(paren
id|way0
comma
id|Index_Invalidate_I
)paren
suffix:semicolon
id|cache64_unroll16
c_func
(paren
id|way1
comma
id|Index_Invalidate_I
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x400
suffix:semicolon
id|way1
op_add_assign
l_int|0x400
suffix:semicolon
)brace
)brace
DECL|function|blast_icache64_page
r_extern
r_inline
r_void
id|blast_icache64_page
c_func
(paren
r_int
r_int
id|page
)paren
(brace
r_int
r_int
id|start
op_assign
id|page
suffix:semicolon
r_int
r_int
id|end
op_assign
id|page
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|start
OL
id|end
)paren
(brace
id|cache64_unroll32
c_func
(paren
id|start
comma
id|Hit_Invalidate_I
)paren
suffix:semicolon
id|start
op_add_assign
l_int|0x800
suffix:semicolon
)brace
)brace
DECL|function|blast_icache64_page_indexed
r_extern
r_inline
r_void
id|blast_icache64_page_indexed
c_func
(paren
r_int
r_int
id|page
)paren
(brace
r_int
r_int
id|way0
op_assign
id|page
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|page
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
id|page
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache64_unroll16
c_func
(paren
id|way0
comma
id|Index_Invalidate_I
)paren
suffix:semicolon
id|cache64_unroll16
c_func
(paren
id|way1
comma
id|Index_Invalidate_I
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x400
suffix:semicolon
id|way1
op_add_assign
l_int|0x400
suffix:semicolon
)brace
)brace
DECL|function|blast_scache64
r_extern
r_inline
r_void
id|blast_scache64
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|way0
op_assign
id|KSEG0
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|way0
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
id|KSEG0
op_plus
id|scache_size
c_func
(paren
)paren
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache64_unroll16
c_func
(paren
id|way0
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|cache64_unroll16
c_func
(paren
id|way1
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x400
suffix:semicolon
id|way1
op_add_assign
l_int|0x400
suffix:semicolon
)brace
)brace
DECL|function|blast_scache64_page
r_extern
r_inline
r_void
id|blast_scache64_page
c_func
(paren
r_int
r_int
id|page
)paren
(brace
r_int
r_int
id|start
op_assign
id|page
suffix:semicolon
r_int
r_int
id|end
op_assign
id|page
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|start
OL
id|end
)paren
(brace
id|cache64_unroll32
c_func
(paren
id|start
comma
id|Hit_Writeback_Inv_S
)paren
suffix:semicolon
id|start
op_add_assign
l_int|0x800
suffix:semicolon
)brace
)brace
DECL|function|blast_scache64_page_indexed
r_extern
r_inline
r_void
id|blast_scache64_page_indexed
c_func
(paren
r_int
r_int
id|page
)paren
(brace
r_int
r_int
id|way0
op_assign
id|page
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|page
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
id|page
op_plus
id|PAGE_SIZE
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache64_unroll16
c_func
(paren
id|way0
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|cache64_unroll16
c_func
(paren
id|way1
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x400
suffix:semicolon
id|way1
op_add_assign
l_int|0x400
suffix:semicolon
)brace
)brace
DECL|macro|cache128_unroll16
mdefine_line|#define cache128_unroll16(base,op)&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.set noreorder;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;cache %1, 0x000(%0); cache %1, 0x080(%0);&t;&bslash;&n;&t;&t;cache %1, 0x100(%0); cache %1, 0x180(%0);&t;&bslash;&n;&t;&t;cache %1, 0x200(%0); cache %1, 0x280(%0);&t;&bslash;&n;&t;&t;cache %1, 0x300(%0); cache %1, 0x380(%0);&t;&bslash;&n;&t;&t;cache %1, 0x400(%0); cache %1, 0x480(%0);&t;&bslash;&n;&t;&t;cache %1, 0x500(%0); cache %1, 0x580(%0);&t;&bslash;&n;&t;&t;cache %1, 0x600(%0); cache %1, 0x680(%0);&t;&bslash;&n;&t;&t;cache %1, 0x700(%0); cache %1, 0x780(%0);&t;&bslash;&n;&t;&t;.set reorder&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;: &quot;r&quot; (base),&t;&t;&t;&t;&t;&bslash;&n;&t;&t;  &quot;i&quot; (op));
DECL|macro|cache128_unroll32
mdefine_line|#define cache128_unroll32(base,op)&t;&t;&t;&t;&bslash;&n;&t;__asm__ __volatile__(&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;.set noreorder;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;cache %1, 0x000(%0); cache %1, 0x080(%0);&t;&bslash;&n;&t;&t;cache %1, 0x100(%0); cache %1, 0x180(%0);&t;&bslash;&n;&t;&t;cache %1, 0x200(%0); cache %1, 0x280(%0);&t;&bslash;&n;&t;&t;cache %1, 0x300(%0); cache %1, 0x380(%0);&t;&bslash;&n;&t;&t;cache %1, 0x400(%0); cache %1, 0x480(%0);&t;&bslash;&n;&t;&t;cache %1, 0x500(%0); cache %1, 0x580(%0);&t;&bslash;&n;&t;&t;cache %1, 0x600(%0); cache %1, 0x680(%0);&t;&bslash;&n;&t;&t;cache %1, 0x700(%0); cache %1, 0x780(%0);&t;&bslash;&n;&t;&t;cache %1, 0x800(%0); cache %1, 0x880(%0);&t;&bslash;&n;&t;&t;cache %1, 0x900(%0); cache %1, 0x980(%0);&t;&bslash;&n;&t;&t;cache %1, 0xa00(%0); cache %1, 0xa80(%0);&t;&bslash;&n;&t;&t;cache %1, 0xb00(%0); cache %1, 0xb80(%0);&t;&bslash;&n;&t;&t;cache %1, 0xc00(%0); cache %1, 0xc80(%0);&t;&bslash;&n;&t;&t;cache %1, 0xd00(%0); cache %1, 0xd80(%0);&t;&bslash;&n;&t;&t;cache %1, 0xe00(%0); cache %1, 0xe80(%0);&t;&bslash;&n;&t;&t;cache %1, 0xf00(%0); cache %1, 0xf80(%0);&t;&bslash;&n;&t;&t;.set reorder&quot;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;:&t;&t;&t;&t;&t;&t;&bslash;&n;&t;&t;: &quot;r&quot; (base),&t;&t;&t;&t;&t;&bslash;&n;&t;&t;  &quot;i&quot; (op));
DECL|function|blast_scache128
r_extern
r_inline
r_void
id|blast_scache128
c_func
(paren
r_void
)paren
(brace
r_int
r_int
id|way0
op_assign
id|KSEG0
suffix:semicolon
r_int
r_int
id|way1
op_assign
id|way0
op_xor
l_int|1
suffix:semicolon
r_int
r_int
id|end
op_assign
id|way0
op_plus
id|scache_size
c_func
(paren
)paren
suffix:semicolon
r_while
c_loop
(paren
id|way0
OL
id|end
)paren
(brace
id|cache128_unroll16
c_func
(paren
id|way0
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|cache128_unroll16
c_func
(paren
id|way1
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|way0
op_add_assign
l_int|0x800
suffix:semicolon
id|way1
op_add_assign
l_int|0x800
suffix:semicolon
)brace
)brace
DECL|function|blast_scache128_page
r_extern
r_inline
r_void
id|blast_scache128_page
c_func
(paren
r_int
r_int
id|page
)paren
(brace
id|cache128_unroll32
c_func
(paren
id|page
comma
id|Hit_Writeback_Inv_S
)paren
suffix:semicolon
)brace
DECL|function|blast_scache128_page_indexed
r_extern
r_inline
r_void
id|blast_scache128_page_indexed
c_func
(paren
r_int
r_int
id|page
)paren
(brace
id|cache128_unroll32
c_func
(paren
id|page
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
id|cache128_unroll32
c_func
(paren
id|page
op_xor
l_int|1
comma
id|Index_Writeback_Inv_S
)paren
suffix:semicolon
)brace
macro_line|#endif /* _ASM_R10KCACHE_H */
eof
