multiline_comment|/* Software floating-point emulation.&n;   Basic four-word fraction declaration and manipulation.&n;   Copyright (C) 1997,1998,1999 Free Software Foundation, Inc.&n;   This file is part of the GNU C Library.&n;   Contributed by Richard Henderson (rth@cygnus.com),&n;&t;&t;  Jakub Jelinek (jj@ultra.linux.cz),&n;&t;&t;  David S. Miller (davem@redhat.com) and&n;&t;&t;  Peter Maydell (pmaydell@chiark.greenend.org.uk).&n;&n;   The GNU C Library is free software; you can redistribute it and/or&n;   modify it under the terms of the GNU Library General Public License as&n;   published by the Free Software Foundation; either version 2 of the&n;   License, or (at your option) any later version.&n;&n;   The GNU C Library is distributed in the hope that it will be useful,&n;   but WITHOUT ANY WARRANTY; without even the implied warranty of&n;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&n;   Library General Public License for more details.&n;&n;   You should have received a copy of the GNU Library General Public&n;   License along with the GNU C Library; see the file COPYING.LIB.  If&n;   not, write to the Free Software Foundation, Inc.,&n;   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
DECL|macro|_FP_FRAC_DECL_4
mdefine_line|#define _FP_FRAC_DECL_4(X)&t;_FP_W_TYPE X##_f[4]
DECL|macro|_FP_FRAC_COPY_4
mdefine_line|#define _FP_FRAC_COPY_4(D,S)&t;&t;&t;&bslash;&n;  (D##_f[0] = S##_f[0], D##_f[1] = S##_f[1],&t;&bslash;&n;   D##_f[2] = S##_f[2], D##_f[3] = S##_f[3])
DECL|macro|_FP_FRAC_SET_4
mdefine_line|#define _FP_FRAC_SET_4(X,I)&t;__FP_FRAC_SET_4(X, I)
DECL|macro|_FP_FRAC_HIGH_4
mdefine_line|#define _FP_FRAC_HIGH_4(X)&t;(X##_f[3])
DECL|macro|_FP_FRAC_LOW_4
mdefine_line|#define _FP_FRAC_LOW_4(X)&t;(X##_f[0])
DECL|macro|_FP_FRAC_WORD_4
mdefine_line|#define _FP_FRAC_WORD_4(X,w)&t;(X##_f[w])
DECL|macro|_FP_FRAC_SLL_4
mdefine_line|#define _FP_FRAC_SLL_4(X,N)&t;&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_I_TYPE _up, _down, _skip, _i;&t;&t;&t;&t;&t;&bslash;&n;    _skip = (N) / _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&bslash;&n;    _up = (N) % _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&bslash;&n;    _down = _FP_W_TYPE_SIZE - _up;&t;&t;&t;&t;&t;&bslash;&n;    if (!_up)&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      for (_i = 3; _i &gt;= _skip; --_i)&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f[_i] = X##_f[_i-_skip];&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;for (_i = 3; _i &gt; _skip; --_i)&t;&t;&t;&t;&t;&bslash;&n;&t;  X##_f[_i] = X##_f[_i-_skip] &lt;&lt; _up&t;&t;&t;&t;&bslash;&n;&t;&t;      | X##_f[_i-_skip-1] &gt;&gt; _down;&t;&t;&t;&bslash;&n;&t;X##_f[_i--] = X##_f[0] &lt;&lt; _up; &t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    for (; _i &gt;= 0; --_i)&t;&t;&t;&t;&t;&t;&bslash;&n;      X##_f[_i] = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* This one was broken too */
DECL|macro|_FP_FRAC_SRL_4
mdefine_line|#define _FP_FRAC_SRL_4(X,N)&t;&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_I_TYPE _up, _down, _skip, _i;&t;&t;&t;&t;&t;&bslash;&n;    _skip = (N) / _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&bslash;&n;    _down = (N) % _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&bslash;&n;    _up = _FP_W_TYPE_SIZE - _down;&t;&t;&t;&t;&t;&bslash;&n;    if (!_down)&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      for (_i = 0; _i &lt;= 3-_skip; ++_i)&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f[_i] = X##_f[_i+_skip];&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;for (_i = 0; _i &lt; 3-_skip; ++_i)&t;&t;&t;&t;&bslash;&n;&t;  X##_f[_i] = X##_f[_i+_skip] &gt;&gt; _down&t;&t;&t;&t;&bslash;&n;&t;&t;      | X##_f[_i+_skip+1] &lt;&lt; _up;&t;&t;&t;&bslash;&n;&t;X##_f[_i++] = X##_f[3] &gt;&gt; _down;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    for (; _i &lt; 4; ++_i)&t;&t;&t;&t;&t;&t;&bslash;&n;      X##_f[_i] = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* Right shift with sticky-lsb. &n; * What this actually means is that we do a standard right-shift,&n; * but that if any of the bits that fall off the right hand side&n; * were one then we always set the LSbit.&n; */
DECL|macro|_FP_FRAC_SRS_4
mdefine_line|#define _FP_FRAC_SRS_4(X,N,size)&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _FP_I_TYPE _up, _down, _skip, _i;&t;&t;&t;&t;&t;&bslash;&n;    _FP_W_TYPE _s;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _skip = (N) / _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&bslash;&n;    _down = (N) % _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&bslash;&n;    _up = _FP_W_TYPE_SIZE - _down;&t;&t;&t;&t;&t;&bslash;&n;    for (_s = _i = 0; _i &lt; _skip; ++_i)&t;&t;&t;&t;&t;&bslash;&n;      _s |= X##_f[_i];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _s |= X##_f[_i] &lt;&lt; _up;&t;&t;&t;&t;&t;&t;&bslash;&n;/* s is now != 0 if we want to set the LSbit */&t;&t;&t;&t;&bslash;&n;    if (!_down)&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      for (_i = 0; _i &lt;= 3-_skip; ++_i)&t;&t;&t;&t;&t;&bslash;&n;&t;X##_f[_i] = X##_f[_i+_skip];&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;for (_i = 0; _i &lt; 3-_skip; ++_i)&t;&t;&t;&t;&bslash;&n;&t;  X##_f[_i] = X##_f[_i+_skip] &gt;&gt; _down&t;&t;&t;&t;&bslash;&n;&t;&t;      | X##_f[_i+_skip+1] &lt;&lt; _up;&t;&t;&t;&bslash;&n;&t;X##_f[_i++] = X##_f[3] &gt;&gt; _down;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    for (; _i &lt; 4; ++_i)&t;&t;&t;&t;&t;&t;&bslash;&n;      X##_f[_i] = 0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    /* don&squot;t fix the LSB until the very end when we&squot;re sure f[0] is stable */&t;&bslash;&n;    X##_f[0] |= (_s != 0);&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_FRAC_ADD_4
mdefine_line|#define _FP_FRAC_ADD_4(R,X,Y)&t;&t;&t;&t;&t;&t;&bslash;&n;  __FP_FRAC_ADD_4(R##_f[3], R##_f[2], R##_f[1], R##_f[0],&t;&t;&bslash;&n;&t;&t;  X##_f[3], X##_f[2], X##_f[1], X##_f[0],&t;&t;&bslash;&n;&t;&t;  Y##_f[3], Y##_f[2], Y##_f[1], Y##_f[0])
DECL|macro|_FP_FRAC_SUB_4
mdefine_line|#define _FP_FRAC_SUB_4(R,X,Y)&t;&t;&t;&t;&t;&t;&bslash;&n;  __FP_FRAC_SUB_4(R##_f[3], R##_f[2], R##_f[1], R##_f[0],&t;&t;&bslash;&n;&t;&t;  X##_f[3], X##_f[2], X##_f[1], X##_f[0],&t;&t;&bslash;&n;&t;&t;  Y##_f[3], Y##_f[2], Y##_f[1], Y##_f[0])
DECL|macro|_FP_FRAC_DEC_4
mdefine_line|#define _FP_FRAC_DEC_4(X,Y)&t;&t;&t;&t;&t;&t;&bslash;&n;  __FP_FRAC_DEC_4(X##_f[3], X##_f[2], X##_f[1], X##_f[0],&t;&t;&bslash;&n;&t;&t;  Y##_f[3], Y##_f[2], Y##_f[1], Y##_f[0])
DECL|macro|_FP_FRAC_ADDI_4
mdefine_line|#define _FP_FRAC_ADDI_4(X,I)&t;&t;&t;&t;&t;&t;&bslash;&n;  __FP_FRAC_ADDI_4(X##_f[3], X##_f[2], X##_f[1], X##_f[0], I)
DECL|macro|_FP_ZEROFRAC_4
mdefine_line|#define _FP_ZEROFRAC_4  0,0,0,0
DECL|macro|_FP_MINFRAC_4
mdefine_line|#define _FP_MINFRAC_4   0,0,0,1
DECL|macro|_FP_MAXFRAC_4
mdefine_line|#define _FP_MAXFRAC_4&t;(~(_FP_WS_TYPE)0), (~(_FP_WS_TYPE)0), (~(_FP_WS_TYPE)0), (~(_FP_WS_TYPE)0)
DECL|macro|_FP_FRAC_ZEROP_4
mdefine_line|#define _FP_FRAC_ZEROP_4(X)     ((X##_f[0] | X##_f[1] | X##_f[2] | X##_f[3]) == 0)
DECL|macro|_FP_FRAC_NEGP_4
mdefine_line|#define _FP_FRAC_NEGP_4(X)      ((_FP_WS_TYPE)X##_f[3] &lt; 0)
DECL|macro|_FP_FRAC_OVERP_4
mdefine_line|#define _FP_FRAC_OVERP_4(fs,X)  (_FP_FRAC_HIGH_##fs(X) &amp; _FP_OVERFLOW_##fs)
DECL|macro|_FP_FRAC_EQ_4
mdefine_line|#define _FP_FRAC_EQ_4(X,Y)&t;&t;&t;&t;&bslash;&n; (X##_f[0] == Y##_f[0] &amp;&amp; X##_f[1] == Y##_f[1]&t;&t;&bslash;&n;  &amp;&amp; X##_f[2] == Y##_f[2] &amp;&amp; X##_f[3] == Y##_f[3])
DECL|macro|_FP_FRAC_GT_4
mdefine_line|#define _FP_FRAC_GT_4(X,Y)&t;&t;&t;&t;&bslash;&n; (X##_f[3] &gt; Y##_f[3] ||&t;&t;&t;&t;&bslash;&n;  (X##_f[3] == Y##_f[3] &amp;&amp; (X##_f[2] &gt; Y##_f[2] ||&t;&bslash;&n;   (X##_f[2] == Y##_f[2] &amp;&amp; (X##_f[1] &gt; Y##_f[1] ||&t;&bslash;&n;    (X##_f[1] == Y##_f[1] &amp;&amp; X##_f[0] &gt; Y##_f[0])&t;&bslash;&n;   ))&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  ))&t;&t;&t;&t;&t;&t;&t;&bslash;&n; )
DECL|macro|_FP_FRAC_GE_4
mdefine_line|#define _FP_FRAC_GE_4(X,Y)&t;&t;&t;&t;&bslash;&n; (X##_f[3] &gt; Y##_f[3] ||&t;&t;&t;&t;&bslash;&n;  (X##_f[3] == Y##_f[3] &amp;&amp; (X##_f[2] &gt; Y##_f[2] ||&t;&bslash;&n;   (X##_f[2] == Y##_f[2] &amp;&amp; (X##_f[1] &gt; Y##_f[1] ||&t;&bslash;&n;    (X##_f[1] == Y##_f[1] &amp;&amp; X##_f[0] &gt;= Y##_f[0])&t;&bslash;&n;   ))&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  ))&t;&t;&t;&t;&t;&t;&t;&bslash;&n; )
DECL|macro|_FP_FRAC_CLZ_4
mdefine_line|#define _FP_FRAC_CLZ_4(R,X)&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&bslash;&n;    if (X##_f[3])&t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&t;&bslash;&n;&t;__FP_CLZ(R,X##_f[3]);&t;&t;&bslash;&n;    }&t;&t;&t;&t;&t;&bslash;&n;    else if (X##_f[2])&t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&t;&bslash;&n;&t;__FP_CLZ(R,X##_f[2]);&t;&t;&bslash;&n;&t;R += _FP_W_TYPE_SIZE;&t;&t;&bslash;&n;    }&t;&t;&t;&t;&t;&bslash;&n;    else if (X##_f[1])&t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&t;&bslash;&n;&t;__FP_CLZ(R,X##_f[2]);&t;&t;&bslash;&n;&t;R += _FP_W_TYPE_SIZE*2;&t;&t;&bslash;&n;    }&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&t;&bslash;&n;&t;__FP_CLZ(R,X##_f[0]);&t;&t;&bslash;&n;&t;R += _FP_W_TYPE_SIZE*3;&t;&t;&bslash;&n;    }&t;&t;&t;&t;&t;&bslash;&n;  } while(0)
DECL|macro|_FP_UNPACK_RAW_4
mdefine_line|#define _FP_UNPACK_RAW_4(fs, X, val)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs _flo; _flo.flt = (val);&t;&t;&bslash;&n;    X##_f[0] = _flo.bits.frac0;&t;&t;&t;&t;&t;&bslash;&n;    X##_f[1] = _flo.bits.frac1;&t;&t;&t;&t;&t;&bslash;&n;    X##_f[2] = _flo.bits.frac2;&t;&t;&t;&t;&t;&bslash;&n;    X##_f[3] = _flo.bits.frac3;&t;&t;&t;&t;&t;&bslash;&n;    X##_e  = _flo.bits.exp;&t;&t;&t;&t;&t;&bslash;&n;    X##_s  = _flo.bits.sign;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_UNPACK_RAW_4_P
mdefine_line|#define _FP_UNPACK_RAW_4_P(fs, X, val)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs *_flo =&t;&t;&t;&t;&bslash;&n;      (union _FP_UNION_##fs *)(val);&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f[0] = _flo-&gt;bits.frac0;&t;&t;&t;&t;&bslash;&n;    X##_f[1] = _flo-&gt;bits.frac1;&t;&t;&t;&t;&bslash;&n;    X##_f[2] = _flo-&gt;bits.frac2;&t;&t;&t;&t;&bslash;&n;    X##_f[3] = _flo-&gt;bits.frac3;&t;&t;&t;&t;&bslash;&n;    X##_e  = _flo-&gt;bits.exp;&t;&t;&t;&t;&t;&bslash;&n;    X##_s  = _flo-&gt;bits.sign;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_PACK_RAW_4
mdefine_line|#define _FP_PACK_RAW_4(fs, val, X)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs _flo;&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.frac0 = X##_f[0];&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.frac1 = X##_f[1];&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.frac2 = X##_f[2];&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.frac3 = X##_f[3];&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.exp   = X##_e;&t;&t;&t;&t;&t;&bslash;&n;    _flo.bits.sign  = X##_s;&t;&t;&t;&t;&t;&bslash;&n;    (val) = _flo.flt;&t;&t;&t;&t;   &t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_PACK_RAW_4_P
mdefine_line|#define _FP_PACK_RAW_4_P(fs, val, X)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    union _FP_UNION_##fs *_flo =&t;&t;&t;&t;&bslash;&n;      (union _FP_UNION_##fs *)(val);&t;&t;&t;&t;&bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.frac0 = X##_f[0];&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.frac1 = X##_f[1];&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.frac2 = X##_f[2];&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.frac3 = X##_f[3];&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.exp   = X##_e;&t;&t;&t;&t;&t;&bslash;&n;    _flo-&gt;bits.sign  = X##_s;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Multiplication algorithms:&n; */
multiline_comment|/* Given a 1W * 1W =&gt; 2W primitive, do the extended multiplication.  */
DECL|macro|_FP_MUL_MEAT_4_wide
mdefine_line|#define _FP_MUL_MEAT_4_wide(wfracbits, R, X, Y, doit)&t;&t;&t;    &bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_DECL_8(_z); _FP_FRAC_DECL_2(_b); _FP_FRAC_DECL_2(_c);&t;    &bslash;&n;    _FP_FRAC_DECL_2(_d); _FP_FRAC_DECL_2(_e); _FP_FRAC_DECL_2(_f);&t;    &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    doit(_FP_FRAC_WORD_8(_z,1), _FP_FRAC_WORD_8(_z,0), X##_f[0], Y##_f[0]); &bslash;&n;    doit(_b_f1, _b_f0, X##_f[0], Y##_f[1]);&t;&t;&t;&t;    &bslash;&n;    doit(_c_f1, _c_f0, X##_f[1], Y##_f[0]);&t;&t;&t;&t;    &bslash;&n;    doit(_d_f1, _d_f0, X##_f[1], Y##_f[1]);&t;&t;&t;&t;    &bslash;&n;    doit(_e_f1, _e_f0, X##_f[0], Y##_f[2]);&t;&t;&t;&t;    &bslash;&n;    doit(_f_f1, _f_f0, X##_f[2], Y##_f[0]);&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,3),_FP_FRAC_WORD_8(_z,2),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,1), 0,_b_f1,_b_f0,&t;&t;    &bslash;&n;&t;&t;    0,0,_FP_FRAC_WORD_8(_z,1));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,3),_FP_FRAC_WORD_8(_z,2),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,1), 0,_c_f1,_c_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3),_FP_FRAC_WORD_8(_z,2),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,1));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,4),_FP_FRAC_WORD_8(_z,3),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,2), 0,_d_f1,_d_f0,&t;&t;    &bslash;&n;&t;&t;    0,_FP_FRAC_WORD_8(_z,3),_FP_FRAC_WORD_8(_z,2));&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,4),_FP_FRAC_WORD_8(_z,3),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,2), 0,_e_f1,_e_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4),_FP_FRAC_WORD_8(_z,3),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,2));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,4),_FP_FRAC_WORD_8(_z,3),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,2), 0,_f_f1,_f_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4),_FP_FRAC_WORD_8(_z,3),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,2));&t;&t;&t;&t;    &bslash;&n;    doit(_b_f1, _b_f0, X##_f[0], Y##_f[3]);&t;&t;&t;&t;    &bslash;&n;    doit(_c_f1, _c_f0, X##_f[3], Y##_f[0]);&t;&t;&t;&t;    &bslash;&n;    doit(_d_f1, _d_f0, X##_f[1], Y##_f[2]);&t;&t;&t;&t;    &bslash;&n;    doit(_e_f1, _e_f0, X##_f[2], Y##_f[1]);&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3), 0,_b_f1,_b_f0,&t;&t;    &bslash;&n;&t;&t;    0,_FP_FRAC_WORD_8(_z,4),_FP_FRAC_WORD_8(_z,3));&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3), 0,_c_f1,_c_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3), 0,_d_f1,_d_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3), 0,_e_f1,_e_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,3));&t;&t;&t;&t;    &bslash;&n;    doit(_b_f1, _b_f0, X##_f[2], Y##_f[2]);&t;&t;&t;&t;    &bslash;&n;    doit(_c_f1, _c_f0, X##_f[1], Y##_f[3]);&t;&t;&t;&t;    &bslash;&n;    doit(_d_f1, _d_f0, X##_f[3], Y##_f[1]);&t;&t;&t;&t;    &bslash;&n;    doit(_e_f1, _e_f0, X##_f[2], Y##_f[3]);&t;&t;&t;&t;    &bslash;&n;    doit(_f_f1, _f_f0, X##_f[3], Y##_f[2]);&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,6),_FP_FRAC_WORD_8(_z,5),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4), 0,_b_f1,_b_f0,&t;&t;    &bslash;&n;&t;&t;    0,_FP_FRAC_WORD_8(_z,5),_FP_FRAC_WORD_8(_z,4));&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,6),_FP_FRAC_WORD_8(_z,5),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4), 0,_c_f1,_c_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,6),_FP_FRAC_WORD_8(_z,5),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,6),_FP_FRAC_WORD_8(_z,5),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4), 0,_d_f1,_d_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,6),_FP_FRAC_WORD_8(_z,5),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,4));&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,7),_FP_FRAC_WORD_8(_z,6),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,5), 0,_e_f1,_e_f0,&t;&t;    &bslash;&n;&t;&t;    0,_FP_FRAC_WORD_8(_z,6),_FP_FRAC_WORD_8(_z,5));&t;    &bslash;&n;    __FP_FRAC_ADD_3(_FP_FRAC_WORD_8(_z,7),_FP_FRAC_WORD_8(_z,6),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,5), 0,_f_f1,_f_f0,&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,7),_FP_FRAC_WORD_8(_z,6),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,5));&t;&t;&t;&t;    &bslash;&n;    doit(_b_f1, _b_f0, X##_f[3], Y##_f[3]);&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADD_2(_FP_FRAC_WORD_8(_z,7),_FP_FRAC_WORD_8(_z,6),&t;    &bslash;&n;&t;&t;    _b_f1,_b_f0,&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,7),_FP_FRAC_WORD_8(_z,6));&t;    &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    /* Normalize since we know where the msb of the multiplicands&t;    &bslash;&n;       were (bit B), we know that the msb of the of the product is&t;    &bslash;&n;       at either 2B or 2B-1.  */&t;&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_SRS_8(_z, wfracbits-1, 2*wfracbits);&t;&t;&t;    &bslash;&n;    __FP_FRAC_SET_4(R, _FP_FRAC_WORD_8(_z,3), _FP_FRAC_WORD_8(_z,2),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,1), _FP_FRAC_WORD_8(_z,0));&t;    &bslash;&n;  } while (0)
DECL|macro|_FP_MUL_MEAT_4_gmp
mdefine_line|#define _FP_MUL_MEAT_4_gmp(wfracbits, R, X, Y)&t;&t;&t;&t;    &bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_DECL_8(_z);&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    mpn_mul_n(_z_f, _x_f, _y_f, 4);&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    /* Normalize since we know where the msb of the multiplicands&t;    &bslash;&n;       were (bit B), we know that the msb of the of the product is&t;    &bslash;&n;       at either 2B or 2B-1.  */&t;&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_SRS_8(_z, wfracbits-1, 2*wfracbits);&t; &t;&t;    &bslash;&n;    __FP_FRAC_SET_4(R, _FP_FRAC_WORD_8(_z,3), _FP_FRAC_WORD_8(_z,2),&t;    &bslash;&n;&t;&t;    _FP_FRAC_WORD_8(_z,1), _FP_FRAC_WORD_8(_z,0));&t;    &bslash;&n;  } while (0)
multiline_comment|/*&n; * Helper utility for _FP_DIV_MEAT_4_udiv:&n; * pppp = m * nnn&n; */
DECL|macro|umul_ppppmnnn
mdefine_line|#define umul_ppppmnnn(p3,p2,p1,p0,m,n2,n1,n0)&t;&t;&t;&t;    &bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    UWtype _t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    umul_ppmm(p1,p0,m,n0);&t;&t;&t;&t;&t;&t;    &bslash;&n;    umul_ppmm(p2,_t,m,n1);&t;&t;&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADDI_2(p2,p1,_t);&t;&t;&t;&t;&t;&t;    &bslash;&n;    umul_ppmm(p3,_t,m,n2);&t;&t;&t;&t;&t;&t;    &bslash;&n;    __FP_FRAC_ADDI_2(p3,p2,_t);&t;&t;&t;&t;&t;&t;    &bslash;&n;  } while (0)
multiline_comment|/*&n; * Division algorithms:&n; */
DECL|macro|_FP_DIV_MEAT_4_udiv
mdefine_line|#define _FP_DIV_MEAT_4_udiv(fs, R, X, Y)&t;&t;&t;&t;    &bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    int _i;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_DECL_4(_n); _FP_FRAC_DECL_4(_m);&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_SET_4(_n, _FP_ZEROFRAC_4);&t;&t;&t;&t;&t;    &bslash;&n;    if (_FP_FRAC_GT_4(X, Y))&t;&t;&t;&t;&t;&t;    &bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;_n_f[3] = X##_f[0] &lt;&lt; (_FP_W_TYPE_SIZE - 1);&t;&t;&t;    &bslash;&n;&t;_FP_FRAC_SRL_4(X, 1);&t;&t;&t;&t;&t;&t;    &bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;      R##_e--;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    /* Normalize, i.e. make the most significant bit of the &t;&t;    &bslash;&n;       denominator set. */&t;&t;&t;&t;&t;&t;    &bslash;&n;    _FP_FRAC_SLL_4(Y, _FP_WFRACXBITS_##fs);&t;&t;&t;&t;    &bslash;&n;&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;    for (_i = 3; ; _i--)&t;&t;&t;&t;&t;&t;    &bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;        if (X##_f[3] == Y##_f[3])&t;&t;&t;&t;&t;    &bslash;&n;          {&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;            /* This is a special case, not an optimization&t;&t;    &bslash;&n;               (X##_f[3]/Y##_f[3] would not fit into UWtype).&t;&t;    &bslash;&n;               As X## is guaranteed to be &lt; Y,  R##_f[_i] can be either&t;    &bslash;&n;               (UWtype)-1 or (UWtype)-2.  */&t;&t;&t;&t;    &bslash;&n;            R##_f[_i] = -1;&t;&t;&t;&t;&t;&t;    &bslash;&n;            if (!_i)&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;      break;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;            __FP_FRAC_SUB_4(X##_f[3], X##_f[2], X##_f[1], X##_f[0],&t;    &bslash;&n;&t;&t;&t;    Y##_f[2], Y##_f[1], Y##_f[0], 0,&t;&t;    &bslash;&n;&t;&t;&t;    X##_f[2], X##_f[1], X##_f[0], _n_f[_i]);&t;    &bslash;&n;            _FP_FRAC_SUB_4(X, Y, X);&t;&t;&t;&t;&t;    &bslash;&n;            if (X##_f[3] &gt; Y##_f[3])&t;&t;&t;&t;&t;    &bslash;&n;              {&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;                R##_f[_i] = -2;&t;&t;&t;&t;&t;&t;    &bslash;&n;                _FP_FRAC_ADD_4(X, Y, X);&t;&t;&t;&t;    &bslash;&n;              }&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;          }&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;        else&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;          {&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;            udiv_qrnnd(R##_f[_i], X##_f[3], X##_f[3], X##_f[2], Y##_f[3]);  &bslash;&n;            umul_ppppmnnn(_m_f[3], _m_f[2], _m_f[1], _m_f[0],&t;&t;    &bslash;&n;&t;&t;&t;  R##_f[_i], Y##_f[2], Y##_f[1], Y##_f[0]);&t;    &bslash;&n;            X##_f[2] = X##_f[1];&t;&t;&t;&t;&t;    &bslash;&n;            X##_f[1] = X##_f[0];&t;&t;&t;&t;&t;    &bslash;&n;            X##_f[0] = _n_f[_i];&t;&t;&t;&t;&t;    &bslash;&n;            if (_FP_FRAC_GT_4(_m, X))&t;&t;&t;&t;&t;    &bslash;&n;              {&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;                R##_f[_i]--;&t;&t;&t;&t;&t;&t;    &bslash;&n;                _FP_FRAC_ADD_4(X, Y, X);&t;&t;&t;&t;    &bslash;&n;                if (_FP_FRAC_GE_4(X, Y) &amp;&amp; _FP_FRAC_GT_4(_m, X))&t;    &bslash;&n;                  {&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;    R##_f[_i]--;&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;    _FP_FRAC_ADD_4(X, Y, X);&t;&t;&t;&t;    &bslash;&n;                  }&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;              }&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;            _FP_FRAC_DEC_4(X, _m);&t;&t;&t;&t;&t;    &bslash;&n;            if (!_i)&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;      {&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;&t;if (!_FP_FRAC_EQ_4(X, _m))&t;&t;&t;&t;    &bslash;&n;&t;&t;  R##_f[0] |= _FP_WORK_STICKY;&t;&t;&t;&t;    &bslash;&n;&t;&t;break;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;&t;      }&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;          }&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&t;    &bslash;&n;  } while (0)
multiline_comment|/*&n; * Square root algorithms:&n; * We have just one right now, maybe Newton approximation&n; * should be added for those machines where division is fast.&n; */
DECL|macro|_FP_SQRT_MEAT_4
mdefine_line|#define _FP_SQRT_MEAT_4(R, S, T, X, q)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    while (q)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[3] = S##_f[3] + q;&t;&t;&t;&t;&bslash;&n;&t;if (T##_f[3] &lt;= X##_f[3])&t;&t;&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[3] = T##_f[3] + q;&t;&t;&t;&t;&bslash;&n;&t;    X##_f[3] -= T##_f[3];&t;&t;&t;&t;&bslash;&n;&t;    R##_f[3] += q;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_SLL_4(X, 1);&t;&t;&t;&t;&t;&bslash;&n;&t;q &gt;&gt;= 1;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    q = (_FP_W_TYPE)1 &lt;&lt; (_FP_W_TYPE_SIZE - 1);&t;&t;&t;&bslash;&n;    while (q)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[2] = S##_f[2] + q;&t;&t;&t;&t;&bslash;&n;&t;T##_f[3] = S##_f[3];&t;&t;&t;&t;&t;&bslash;&n;&t;if (T##_f[3] &lt; X##_f[3] || &t;&t;&t;&t;&bslash;&n;&t;    (T##_f[3] == X##_f[3] &amp;&amp; T##_f[2] &lt;= X##_f[2]))&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[2] = T##_f[2] + q;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[3] += (T##_f[2] &gt; S##_f[2]);&t;&t;&t;&bslash;&n;&t;    __FP_FRAC_DEC_2(X##_f[3], X##_f[2],&t;&t;&t;&bslash;&n;&t;&t;&t;    T##_f[3], T##_f[2]);&t;&t;&bslash;&n;&t;    R##_f[2] += q;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_SLL_4(X, 1);&t;&t;&t;&t;&t;&bslash;&n;&t;q &gt;&gt;= 1;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    q = (_FP_W_TYPE)1 &lt;&lt; (_FP_W_TYPE_SIZE - 1);&t;&t;&t;&bslash;&n;    while (q)&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[1] = S##_f[1] + q;&t;&t;&t;&t;&bslash;&n;&t;T##_f[2] = S##_f[2];&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[3] = S##_f[3];&t;&t;&t;&t;&t;&bslash;&n;&t;if (T##_f[3] &lt; X##_f[3] || &t;&t;&t;&t;&bslash;&n;&t;    (T##_f[3] == X##_f[3] &amp;&amp; (T##_f[2] &lt; X##_f[2] ||&t;&bslash;&n;&t;     (T##_f[2] == X##_f[2] &amp;&amp; T##_f[1] &lt;= X##_f[1]))))&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[1] = T##_f[1] + q;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[2] += (T##_f[1] &gt; S##_f[1]);&t;&t;&t;&bslash;&n;&t;    S##_f[3] += (T##_f[2] &gt; S##_f[2]);&t;&t;&t;&bslash;&n;&t;    __FP_FRAC_DEC_3(X##_f[3], X##_f[2], X##_f[1],&t;&bslash;&n;&t;    &t;&t;    T##_f[3], T##_f[2], T##_f[1]);&t;&bslash;&n;&t;    R##_f[1] += q;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_SLL_4(X, 1);&t;&t;&t;&t;&t;&bslash;&n;&t;q &gt;&gt;= 1;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    q = (_FP_W_TYPE)1 &lt;&lt; (_FP_W_TYPE_SIZE - 1);&t;&t;&t;&bslash;&n;    while (q != _FP_WORK_ROUND)&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[0] = S##_f[0] + q;&t;&t;&t;&t;&bslash;&n;&t;T##_f[1] = S##_f[1];&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[2] = S##_f[2];&t;&t;&t;&t;&t;&bslash;&n;&t;T##_f[3] = S##_f[3];&t;&t;&t;&t;&t;&bslash;&n;&t;if (_FP_FRAC_GE_4(X,T))&t;&t;&t;&t;&t;&bslash;&n;&t;  {&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[0] = T##_f[0] + q;&t;&t;&t;&t;&bslash;&n;&t;    S##_f[1] += (T##_f[0] &gt; S##_f[0]);&t;&t;&t;&bslash;&n;&t;    S##_f[2] += (T##_f[1] &gt; S##_f[1]);&t;&t;&t;&bslash;&n;&t;    S##_f[3] += (T##_f[2] &gt; S##_f[2]);&t;&t;&t;&bslash;&n;&t;    _FP_FRAC_DEC_4(X, T);&t;&t;&t;&t;&bslash;&n;&t;    R##_f[0] += q;&t;&t;&t;&t;&t;&bslash;&n;&t;  }&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;_FP_FRAC_SLL_4(X, 1);&t;&t;&t;&t;&t;&bslash;&n;&t;q &gt;&gt;= 1;&t;&t;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (!_FP_FRAC_ZEROP_4(X))&t;&t;&t;&t;&t;&bslash;&n;      {&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;&t;if (_FP_FRAC_GT_4(X,S))&t;&t;&t;&t;&t;&bslash;&n;&t;  R##_f[0] |= _FP_WORK_ROUND;&t;&t;&t;&t;&bslash;&n;&t;R##_f[0] |= _FP_WORK_STICKY;&t;&t;&t;&t;&bslash;&n;      }&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/*&n; * Internals &n; */
DECL|macro|__FP_FRAC_SET_4
mdefine_line|#define __FP_FRAC_SET_4(X,I3,I2,I1,I0)&t;&t;&t;&t;&t;&bslash;&n;  (X##_f[3] = I3, X##_f[2] = I2, X##_f[1] = I1, X##_f[0] = I0)
macro_line|#ifndef __FP_FRAC_ADD_3
DECL|macro|__FP_FRAC_ADD_3
mdefine_line|#define __FP_FRAC_ADD_3(r2,r1,r0,x2,x1,x0,y2,y1,y0)&t;&t;&t;&bslash;&n;  (r0 = x0 + y0,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   r1 = x1 + y1 + (r0 &lt; x0),&t;&t;&t;&t;&t;&t;&bslash;&n;   r2 = x2 + y2 + (r1 &lt; x1))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_ADD_4
DECL|macro|__FP_FRAC_ADD_4
mdefine_line|#define __FP_FRAC_ADD_4(r3,r2,r1,r0,x3,x2,x1,x0,y3,y2,y1,y0)&t;&t;&bslash;&n;  (r0 = x0 + y0,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   r1 = x1 + y1 + (r0 &lt; x0),&t;&t;&t;&t;&t;&t;&bslash;&n;   r2 = x2 + y2 + (r1 &lt; x1),&t;&t;&t;&t;&t;&t;&bslash;&n;   r3 = x3 + y3 + (r2 &lt; x2))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_SUB_3
DECL|macro|__FP_FRAC_SUB_3
mdefine_line|#define __FP_FRAC_SUB_3(r2,r1,r0,x2,x1,x0,y2,y1,y0)&t;&t;&t;&bslash;&n;  (r0 = x0 - y0,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   r1 = x1 - y1 - (r0 &gt; x0),&t;&t;&t;&t;&t;&t;&bslash;&n;   r2 = x2 - y2 - (r1 &gt; x1))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_SUB_4
DECL|macro|__FP_FRAC_SUB_4
mdefine_line|#define __FP_FRAC_SUB_4(r3,r2,r1,r0,x3,x2,x1,x0,y3,y2,y1,y0)&t;&t;&bslash;&n;  (r0 = x0 - y0,&t;&t;&t;&t;&t;&t;&t;&bslash;&n;   r1 = x1 - y1 - (r0 &gt; x0),&t;&t;&t;&t;&t;&t;&bslash;&n;   r2 = x2 - y2 - (r1 &gt; x1),&t;&t;&t;&t;&t;&t;&bslash;&n;   r3 = x3 - y3 - (r2 &gt; x2))
macro_line|#endif
macro_line|#ifndef __FP_FRAC_DEC_3
DECL|macro|__FP_FRAC_DEC_3
mdefine_line|#define __FP_FRAC_DEC_3(x2,x1,x0,y2,y1,y0)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    UWtype _t0, _t1;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _t0 = x0;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    x0 -= y0;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _t1 = x1;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    x1 -= y1 + (x0 &gt; _t0);&t;&t;&t;&t;&t;&t;&bslash;&n;    x2 -= y2 + (x1 &gt; _t1);&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
macro_line|#endif
macro_line|#ifndef __FP_FRAC_DEC_4
DECL|macro|__FP_FRAC_DEC_4
mdefine_line|#define __FP_FRAC_DEC_4(x3,x2,x1,x0,y3,y2,y1,y0)&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    UWtype _t0, _t1;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _t0 = x0;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    x0 -= y0;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _t1 = x1;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    x1 -= y1 + (x0 &gt; _t0);&t;&t;&t;&t;&t;&t;&bslash;&n;    _t0 = x2;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    x2 -= y2 + (x1 &gt; _t1);&t;&t;&t;&t;&t;&t;&bslash;&n;    x3 -= y3 + (x2 &gt; _t0);&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
macro_line|#endif
macro_line|#ifndef __FP_FRAC_ADDI_4
DECL|macro|__FP_FRAC_ADDI_4
mdefine_line|#define __FP_FRAC_ADDI_4(x3,x2,x1,x0,i)&t;&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    UWtype _t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    _t = ((x0 += i) &lt; i);&t;&t;&t;&t;&t;&t;&bslash;&n;    x1 += _t; _t = (x1 &lt; _t);&t;&t;&t;&t;&t;&t;&bslash;&n;    x2 += _t; _t = (x2 &lt; _t);&t;&t;&t;&t;&t;&t;&bslash;&n;    x3 += _t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
macro_line|#endif
multiline_comment|/* Convert FP values between word sizes. This appears to be more&n; * complicated than I&squot;d have expected it to be, so these might be&n; * wrong... These macros are in any case somewhat bogus because they&n; * use information about what various FRAC_n variables look like &n; * internally [eg, that 2 word vars are X_f0 and x_f1]. But so do&n; * the ones in op-2.h and op-1.h. &n; */
DECL|macro|_FP_FRAC_CONV_1_4
mdefine_line|#define _FP_FRAC_CONV_1_4(dfs, sfs, D, S)&t;&t;&t;&t;&bslash;&n;   do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     if (S##_c != FP_CLS_NAN)&t;&t;&t;&t;&t;&t;&bslash;&n;       _FP_FRAC_SRS_4(S, (_FP_WFRACBITS_##sfs - _FP_WFRACBITS_##dfs),&t;&bslash;&n;&t;&t;&t;  _FP_WFRACBITS_##sfs);&t;&t;&t;&t;&bslash;&n;     else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;       _FP_FRAC_SRL_4(S, (_FP_WFRACBITS_##sfs - _FP_WFRACBITS_##dfs));&t;&bslash;&n;     D##_f = S##_f[0];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
DECL|macro|_FP_FRAC_CONV_2_4
mdefine_line|#define _FP_FRAC_CONV_2_4(dfs, sfs, D, S)&t;&t;&t;&t;&bslash;&n;   do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     if (S##_c != FP_CLS_NAN)&t;&t;&t;&t;&t;&t;&bslash;&n;       _FP_FRAC_SRS_4(S, (_FP_WFRACBITS_##sfs - _FP_WFRACBITS_##dfs),&t;&bslash;&n;&t;&t;      _FP_WFRACBITS_##sfs);&t;&t;&t;&t;&bslash;&n;     else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;       _FP_FRAC_SRL_4(S, (_FP_WFRACBITS_##sfs - _FP_WFRACBITS_##dfs));&t;&bslash;&n;     D##_f0 = S##_f[0];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     D##_f1 = S##_f[1];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* Assembly/disassembly for converting to/from integral types.  &n; * No shifting or overflow handled here.&n; */
multiline_comment|/* Put the FP value X into r, which is an integer of size rsize. */
DECL|macro|_FP_FRAC_ASSEMBLE_4
mdefine_line|#define _FP_FRAC_ASSEMBLE_4(r, X, rsize)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    if (rsize &lt;= _FP_W_TYPE_SIZE)&t;&t;&t;&t;&t;&bslash;&n;      r = X##_f[0];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else if (rsize &lt;= 2*_FP_W_TYPE_SIZE)&t;&t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      r = X##_f[1];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      r &lt;&lt;= _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&t;&bslash;&n;      r += X##_f[0];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    else&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      /* I&squot;m feeling lazy so we deal with int == 3words (implausible)*/&t;&bslash;&n;      /* and int == 4words as a single case.&t;&t;&t; */&t;&bslash;&n;      r = X##_f[3];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      r &lt;&lt;= _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&t;&bslash;&n;      r += X##_f[2];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      r &lt;&lt;= _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&t;&bslash;&n;      r += X##_f[1];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;      r &lt;&lt;= _FP_W_TYPE_SIZE;&t;&t;&t;&t;&t;&t;&bslash;&n;      r += X##_f[0];&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    }&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;  } while (0)
multiline_comment|/* &quot;No disassemble Number Five!&quot; */
multiline_comment|/* move an integer of size rsize into X&squot;s fractional part. We rely on&n; * the _f[] array consisting of words of size _FP_W_TYPE_SIZE to avoid&n; * having to mask the values we store into it.&n; */
DECL|macro|_FP_FRAC_DISASSEMBLE_4
mdefine_line|#define _FP_FRAC_DISASSEMBLE_4(X, r, rsize)&t;&t;&t;&t;&bslash;&n;  do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f[0] = r;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;    X##_f[1] = (rsize &lt;= _FP_W_TYPE_SIZE ? 0 : r &gt;&gt; _FP_W_TYPE_SIZE);&t;&bslash;&n;    X##_f[2] = (rsize &lt;= 2*_FP_W_TYPE_SIZE ? 0 : r &gt;&gt; 2*_FP_W_TYPE_SIZE); &bslash;&n;    X##_f[3] = (rsize &lt;= 3*_FP_W_TYPE_SIZE ? 0 : r &gt;&gt; 3*_FP_W_TYPE_SIZE); &bslash;&n;  } while (0);
DECL|macro|_FP_FRAC_CONV_4_1
mdefine_line|#define _FP_FRAC_CONV_4_1(dfs, sfs, D, S)&t;&t;&t;&t;&bslash;&n;   do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     D##_f[0] = S##_f;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     D##_f[1] = D##_f[2] = D##_f[3] = 0;&t;&t;&t;&t;&bslash;&n;     _FP_FRAC_SLL_4(D, (_FP_WFRACBITS_##dfs - _FP_WFRACBITS_##sfs));&t;&bslash;&n;   } while (0)
DECL|macro|_FP_FRAC_CONV_4_2
mdefine_line|#define _FP_FRAC_CONV_4_2(dfs, sfs, D, S)&t;&t;&t;&t;&bslash;&n;   do {&t;&t;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     D##_f[0] = S##_f0;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     D##_f[1] = S##_f1;&t;&t;&t;&t;&t;&t;&t;&bslash;&n;     D##_f[2] = D##_f[3] = 0;&t;&t;&t;&t;&t;&t;&bslash;&n;     _FP_FRAC_SLL_4(D, (_FP_WFRACBITS_##dfs - _FP_WFRACBITS_##sfs));&t;&bslash;&n;   } while (0)
eof
