multiline_comment|/* Declarations and definitions of codes relating to the DWARF symbolic&n;   debugging information format.&n;&n;   Written by Ron Guilmette (rfg@ncd.com)&n;&n;Copyright (C) 1992 Free Software Foundation, Inc.&n;&n;This file is part of GNU CC.&n;&n;GNU CC is free software; you can redistribute it and/or modify&n;it under the terms of the GNU General Public License as published by&n;the Free Software Foundation; either version 2, or (at your option)&n;any later version.&n;&n;GNU CC is distributed in the hope that it will be useful,&n;but WITHOUT ANY WARRANTY; without even the implied warranty of&n;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n;GNU General Public License for more details.&n;&n;You should have received a copy of the GNU General Public License&n;along with GNU CC; see the file COPYING.  If not, write to&n;the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
multiline_comment|/* This file is derived from the DWARF specification (a public document)&n;   Revision 1.0.1 (April 8, 1992) developed by the UNIX International&n;   Programming Languages Special Interest Group (UI/PLSIG) and distributed&n;   by UNIX International.  Copies of this specification are available from&n;   UNIX International, 20 Waterview Boulevard, Parsippany, NJ, 07054.&n;*/
multiline_comment|/* Tag names and codes.  */
DECL|enum|dwarf_tag
r_enum
id|dwarf_tag
(brace
DECL|enumerator|TAG_padding
id|TAG_padding
op_assign
l_int|0x0000
comma
DECL|enumerator|TAG_array_type
id|TAG_array_type
op_assign
l_int|0x0001
comma
DECL|enumerator|TAG_class_type
id|TAG_class_type
op_assign
l_int|0x0002
comma
DECL|enumerator|TAG_entry_point
id|TAG_entry_point
op_assign
l_int|0x0003
comma
DECL|enumerator|TAG_enumeration_type
id|TAG_enumeration_type
op_assign
l_int|0x0004
comma
DECL|enumerator|TAG_formal_parameter
id|TAG_formal_parameter
op_assign
l_int|0x0005
comma
DECL|enumerator|TAG_global_subroutine
id|TAG_global_subroutine
op_assign
l_int|0x0006
comma
DECL|enumerator|TAG_global_variable
id|TAG_global_variable
op_assign
l_int|0x0007
comma
multiline_comment|/* 0x0008 -- reserved */
multiline_comment|/* 0x0009 -- reserved */
DECL|enumerator|TAG_label
id|TAG_label
op_assign
l_int|0x000a
comma
DECL|enumerator|TAG_lexical_block
id|TAG_lexical_block
op_assign
l_int|0x000b
comma
DECL|enumerator|TAG_local_variable
id|TAG_local_variable
op_assign
l_int|0x000c
comma
DECL|enumerator|TAG_member
id|TAG_member
op_assign
l_int|0x000d
comma
multiline_comment|/* 0x000e -- reserved */
DECL|enumerator|TAG_pointer_type
id|TAG_pointer_type
op_assign
l_int|0x000f
comma
DECL|enumerator|TAG_reference_type
id|TAG_reference_type
op_assign
l_int|0x0010
comma
DECL|enumerator|TAG_compile_unit
id|TAG_compile_unit
op_assign
l_int|0x0011
comma
DECL|enumerator|TAG_string_type
id|TAG_string_type
op_assign
l_int|0x0012
comma
DECL|enumerator|TAG_structure_type
id|TAG_structure_type
op_assign
l_int|0x0013
comma
DECL|enumerator|TAG_subroutine
id|TAG_subroutine
op_assign
l_int|0x0014
comma
DECL|enumerator|TAG_subroutine_type
id|TAG_subroutine_type
op_assign
l_int|0x0015
comma
DECL|enumerator|TAG_typedef
id|TAG_typedef
op_assign
l_int|0x0016
comma
DECL|enumerator|TAG_union_type
id|TAG_union_type
op_assign
l_int|0x0017
comma
DECL|enumerator|TAG_unspecified_parameters
id|TAG_unspecified_parameters
op_assign
l_int|0x0018
comma
DECL|enumerator|TAG_variant
id|TAG_variant
op_assign
l_int|0x0019
comma
DECL|enumerator|TAG_common_block
id|TAG_common_block
op_assign
l_int|0x001a
comma
DECL|enumerator|TAG_common_inclusion
id|TAG_common_inclusion
op_assign
l_int|0x001b
comma
DECL|enumerator|TAG_inheritance
id|TAG_inheritance
op_assign
l_int|0x001c
comma
DECL|enumerator|TAG_inlined_subroutine
id|TAG_inlined_subroutine
op_assign
l_int|0x001d
comma
DECL|enumerator|TAG_module
id|TAG_module
op_assign
l_int|0x001e
comma
DECL|enumerator|TAG_ptr_to_member_type
id|TAG_ptr_to_member_type
op_assign
l_int|0x001f
comma
DECL|enumerator|TAG_set_type
id|TAG_set_type
op_assign
l_int|0x0020
comma
DECL|enumerator|TAG_subrange_type
id|TAG_subrange_type
op_assign
l_int|0x0021
comma
DECL|enumerator|TAG_with_stmt
id|TAG_with_stmt
op_assign
l_int|0x0022
comma
multiline_comment|/* GNU extensions */
DECL|enumerator|TAG_format_label
id|TAG_format_label
op_assign
l_int|0x8000
comma
multiline_comment|/* for FORTRAN 77 and Fortran 90 */
DECL|enumerator|TAG_namelist
id|TAG_namelist
op_assign
l_int|0x8001
comma
multiline_comment|/* For Fortran 90 */
DECL|enumerator|TAG_function_template
id|TAG_function_template
op_assign
l_int|0x8002
comma
multiline_comment|/* for C++ */
DECL|enumerator|TAG_class_template
id|TAG_class_template
op_assign
l_int|0x8003
multiline_comment|/* for C++ */
)brace
suffix:semicolon
DECL|macro|TAG_lo_user
mdefine_line|#define TAG_lo_user&t;0x8000  /* implementation-defined range start */
DECL|macro|TAG_hi_user
mdefine_line|#define TAG_hi_user&t;0xffff  /* implementation-defined range end */
DECL|macro|TAG_source_file
mdefine_line|#define TAG_source_file TAG_compile_unit  /* for backward compatibility */
multiline_comment|/* Form names and codes.  */
DECL|enum|dwarf_form
r_enum
id|dwarf_form
(brace
DECL|enumerator|FORM_ADDR
id|FORM_ADDR
op_assign
l_int|0x1
comma
DECL|enumerator|FORM_REF
id|FORM_REF
op_assign
l_int|0x2
comma
DECL|enumerator|FORM_BLOCK2
id|FORM_BLOCK2
op_assign
l_int|0x3
comma
DECL|enumerator|FORM_BLOCK4
id|FORM_BLOCK4
op_assign
l_int|0x4
comma
DECL|enumerator|FORM_DATA2
id|FORM_DATA2
op_assign
l_int|0x5
comma
DECL|enumerator|FORM_DATA4
id|FORM_DATA4
op_assign
l_int|0x6
comma
DECL|enumerator|FORM_DATA8
id|FORM_DATA8
op_assign
l_int|0x7
comma
DECL|enumerator|FORM_STRING
id|FORM_STRING
op_assign
l_int|0x8
)brace
suffix:semicolon
multiline_comment|/* Attribute names and codes.  */
DECL|enum|dwarf_attribute
r_enum
id|dwarf_attribute
(brace
DECL|enumerator|AT_sibling
id|AT_sibling
op_assign
(paren
l_int|0x0010
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_location
id|AT_location
op_assign
(paren
l_int|0x0020
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_name
id|AT_name
op_assign
(paren
l_int|0x0030
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_fund_type
id|AT_fund_type
op_assign
(paren
l_int|0x0050
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_mod_fund_type
id|AT_mod_fund_type
op_assign
(paren
l_int|0x0060
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_user_def_type
id|AT_user_def_type
op_assign
(paren
l_int|0x0070
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_mod_u_d_type
id|AT_mod_u_d_type
op_assign
(paren
l_int|0x0080
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_ordering
id|AT_ordering
op_assign
(paren
l_int|0x0090
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_subscr_data
id|AT_subscr_data
op_assign
(paren
l_int|0x00a0
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_byte_size
id|AT_byte_size
op_assign
(paren
l_int|0x00b0
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_bit_offset
id|AT_bit_offset
op_assign
(paren
l_int|0x00c0
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_bit_size
id|AT_bit_size
op_assign
(paren
l_int|0x00d0
op_or
id|FORM_DATA4
)paren
comma
multiline_comment|/* (0x00e0|FORM_xxxx) -- reserved */
DECL|enumerator|AT_element_list
id|AT_element_list
op_assign
(paren
l_int|0x00f0
op_or
id|FORM_BLOCK4
)paren
comma
DECL|enumerator|AT_stmt_list
id|AT_stmt_list
op_assign
(paren
l_int|0x0100
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_low_pc
id|AT_low_pc
op_assign
(paren
l_int|0x0110
op_or
id|FORM_ADDR
)paren
comma
DECL|enumerator|AT_high_pc
id|AT_high_pc
op_assign
(paren
l_int|0x0120
op_or
id|FORM_ADDR
)paren
comma
DECL|enumerator|AT_language
id|AT_language
op_assign
(paren
l_int|0x0130
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_member
id|AT_member
op_assign
(paren
l_int|0x0140
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_discr
id|AT_discr
op_assign
(paren
l_int|0x0150
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_discr_value
id|AT_discr_value
op_assign
(paren
l_int|0x0160
op_or
id|FORM_BLOCK2
)paren
comma
multiline_comment|/* (0x0170|FORM_xxxx) -- reserved */
multiline_comment|/* (0x0180|FORM_xxxx) -- reserved */
DECL|enumerator|AT_string_length
id|AT_string_length
op_assign
(paren
l_int|0x0190
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_common_reference
id|AT_common_reference
op_assign
(paren
l_int|0x01a0
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_comp_dir
id|AT_comp_dir
op_assign
(paren
l_int|0x01b0
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_const_value_string
id|AT_const_value_string
op_assign
(paren
l_int|0x01c0
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_const_value_data2
id|AT_const_value_data2
op_assign
(paren
l_int|0x01c0
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_const_value_data4
id|AT_const_value_data4
op_assign
(paren
l_int|0x01c0
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_const_value_data8
id|AT_const_value_data8
op_assign
(paren
l_int|0x01c0
op_or
id|FORM_DATA8
)paren
comma
DECL|enumerator|AT_const_value_block2
id|AT_const_value_block2
op_assign
(paren
l_int|0x01c0
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_const_value_block4
id|AT_const_value_block4
op_assign
(paren
l_int|0x01c0
op_or
id|FORM_BLOCK4
)paren
comma
DECL|enumerator|AT_containing_type
id|AT_containing_type
op_assign
(paren
l_int|0x01d0
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_default_value_addr
id|AT_default_value_addr
op_assign
(paren
l_int|0x01e0
op_or
id|FORM_ADDR
)paren
comma
DECL|enumerator|AT_default_value_data2
id|AT_default_value_data2
op_assign
(paren
l_int|0x01e0
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_default_value_data4
id|AT_default_value_data4
op_assign
(paren
l_int|0x01e0
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_default_value_data8
id|AT_default_value_data8
op_assign
(paren
l_int|0x01e0
op_or
id|FORM_DATA8
)paren
comma
DECL|enumerator|AT_default_value_string
id|AT_default_value_string
op_assign
(paren
l_int|0x01e0
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_friends
id|AT_friends
op_assign
(paren
l_int|0x01f0
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_inline
id|AT_inline
op_assign
(paren
l_int|0x0200
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_is_optional
id|AT_is_optional
op_assign
(paren
l_int|0x0210
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_lower_bound_ref
id|AT_lower_bound_ref
op_assign
(paren
l_int|0x0220
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_lower_bound_data2
id|AT_lower_bound_data2
op_assign
(paren
l_int|0x0220
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_lower_bound_data4
id|AT_lower_bound_data4
op_assign
(paren
l_int|0x0220
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_lower_bound_data8
id|AT_lower_bound_data8
op_assign
(paren
l_int|0x0220
op_or
id|FORM_DATA8
)paren
comma
DECL|enumerator|AT_private
id|AT_private
op_assign
(paren
l_int|0x0240
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_producer
id|AT_producer
op_assign
(paren
l_int|0x0250
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_program
id|AT_program
op_assign
(paren
l_int|0x0230
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_protected
id|AT_protected
op_assign
(paren
l_int|0x0260
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_prototyped
id|AT_prototyped
op_assign
(paren
l_int|0x0270
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_public
id|AT_public
op_assign
(paren
l_int|0x0280
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_pure_virtual
id|AT_pure_virtual
op_assign
(paren
l_int|0x0290
op_or
id|FORM_STRING
)paren
comma
DECL|enumerator|AT_return_addr
id|AT_return_addr
op_assign
(paren
l_int|0x02a0
op_or
id|FORM_BLOCK2
)paren
comma
DECL|enumerator|AT_abstract_origin
id|AT_abstract_origin
op_assign
(paren
l_int|0x02b0
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_start_scope
id|AT_start_scope
op_assign
(paren
l_int|0x02c0
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_stride_size
id|AT_stride_size
op_assign
(paren
l_int|0x02e0
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_upper_bound_ref
id|AT_upper_bound_ref
op_assign
(paren
l_int|0x02f0
op_or
id|FORM_REF
)paren
comma
DECL|enumerator|AT_upper_bound_data2
id|AT_upper_bound_data2
op_assign
(paren
l_int|0x02f0
op_or
id|FORM_DATA2
)paren
comma
DECL|enumerator|AT_upper_bound_data4
id|AT_upper_bound_data4
op_assign
(paren
l_int|0x02f0
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_upper_bound_data8
id|AT_upper_bound_data8
op_assign
(paren
l_int|0x02f0
op_or
id|FORM_DATA8
)paren
comma
DECL|enumerator|AT_virtual
id|AT_virtual
op_assign
(paren
l_int|0x0300
op_or
id|FORM_STRING
)paren
comma
multiline_comment|/* GNU extensions.  */
DECL|enumerator|AT_sf_names
id|AT_sf_names
op_assign
(paren
l_int|0x8000
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_src_info
id|AT_src_info
op_assign
(paren
l_int|0x8010
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_mac_info
id|AT_mac_info
op_assign
(paren
l_int|0x8020
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_src_coords
id|AT_src_coords
op_assign
(paren
l_int|0x8030
op_or
id|FORM_DATA4
)paren
comma
DECL|enumerator|AT_body_begin
id|AT_body_begin
op_assign
(paren
l_int|0x8040
op_or
id|FORM_ADDR
)paren
comma
DECL|enumerator|AT_body_end
id|AT_body_end
op_assign
(paren
l_int|0x8050
op_or
id|FORM_ADDR
)paren
)brace
suffix:semicolon
DECL|macro|AT_lo_user
mdefine_line|#define AT_lo_user&t;0x8000  /* implementation-defined range start */
DECL|macro|AT_hi_user
mdefine_line|#define AT_hi_user&t;0xffff  /* implementation-defined range end */
multiline_comment|/* Location atom names and codes.  */
DECL|enum|dwarf_location_atom
r_enum
id|dwarf_location_atom
(brace
DECL|enumerator|OP_REG
id|OP_REG
op_assign
l_int|0x01
comma
DECL|enumerator|OP_BASEREG
id|OP_BASEREG
op_assign
l_int|0x02
comma
DECL|enumerator|OP_ADDR
id|OP_ADDR
op_assign
l_int|0x03
comma
DECL|enumerator|OP_CONST
id|OP_CONST
op_assign
l_int|0x04
comma
DECL|enumerator|OP_DEREF2
id|OP_DEREF2
op_assign
l_int|0x05
comma
DECL|enumerator|OP_DEREF4
id|OP_DEREF4
op_assign
l_int|0x06
comma
DECL|enumerator|OP_ADD
id|OP_ADD
op_assign
l_int|0x07
)brace
suffix:semicolon
DECL|macro|OP_LO_USER
mdefine_line|#define OP_LO_USER&t;0x80  /* implementation-defined range start */
DECL|macro|OP_HI_USER
mdefine_line|#define OP_HI_USER&t;0xff  /* implementation-defined range end */
multiline_comment|/* Fundamental type names and codes.  */
DECL|enum|dwarf_fundamental_type
r_enum
id|dwarf_fundamental_type
(brace
DECL|enumerator|FT_char
id|FT_char
op_assign
l_int|0x0001
comma
DECL|enumerator|FT_signed_char
id|FT_signed_char
op_assign
l_int|0x0002
comma
DECL|enumerator|FT_unsigned_char
id|FT_unsigned_char
op_assign
l_int|0x0003
comma
DECL|enumerator|FT_short
id|FT_short
op_assign
l_int|0x0004
comma
DECL|enumerator|FT_signed_short
id|FT_signed_short
op_assign
l_int|0x0005
comma
DECL|enumerator|FT_unsigned_short
id|FT_unsigned_short
op_assign
l_int|0x0006
comma
DECL|enumerator|FT_integer
id|FT_integer
op_assign
l_int|0x0007
comma
DECL|enumerator|FT_signed_integer
id|FT_signed_integer
op_assign
l_int|0x0008
comma
DECL|enumerator|FT_unsigned_integer
id|FT_unsigned_integer
op_assign
l_int|0x0009
comma
DECL|enumerator|FT_long
id|FT_long
op_assign
l_int|0x000a
comma
DECL|enumerator|FT_signed_long
id|FT_signed_long
op_assign
l_int|0x000b
comma
DECL|enumerator|FT_unsigned_long
id|FT_unsigned_long
op_assign
l_int|0x000c
comma
DECL|enumerator|FT_pointer
id|FT_pointer
op_assign
l_int|0x000d
comma
multiline_comment|/* an alias for (void *) */
DECL|enumerator|FT_float
id|FT_float
op_assign
l_int|0x000e
comma
DECL|enumerator|FT_dbl_prec_float
id|FT_dbl_prec_float
op_assign
l_int|0x000f
comma
DECL|enumerator|FT_ext_prec_float
id|FT_ext_prec_float
op_assign
l_int|0x0010
comma
multiline_comment|/* breaks &quot;classic&quot; svr4 SDB */
DECL|enumerator|FT_complex
id|FT_complex
op_assign
l_int|0x0011
comma
multiline_comment|/* breaks &quot;classic&quot; svr4 SDB */
DECL|enumerator|FT_dbl_prec_complex
id|FT_dbl_prec_complex
op_assign
l_int|0x0012
comma
multiline_comment|/* breaks &quot;classic&quot; svr4 SDB */
multiline_comment|/* 0x0013 -- reserved */
DECL|enumerator|FT_void
id|FT_void
op_assign
l_int|0x0014
comma
DECL|enumerator|FT_boolean
id|FT_boolean
op_assign
l_int|0x0015
comma
multiline_comment|/* breaks &quot;classic&quot; svr4 SDB */
DECL|enumerator|FT_ext_prec_complex
id|FT_ext_prec_complex
op_assign
l_int|0x0016
comma
multiline_comment|/* breaks &quot;classic&quot; svr4 SDB */
DECL|enumerator|FT_label
id|FT_label
op_assign
l_int|0x0017
comma
multiline_comment|/* GNU extensions&n;       The low order byte must indicate the size (in bytes) for the type.&n;       All of these types will probably break &quot;classic&quot; svr4 SDB */
DECL|enumerator|FT_long_long
id|FT_long_long
op_assign
l_int|0x8008
comma
DECL|enumerator|FT_signed_long_long
id|FT_signed_long_long
op_assign
l_int|0x8108
comma
DECL|enumerator|FT_unsigned_long_long
id|FT_unsigned_long_long
op_assign
l_int|0x8208
comma
DECL|enumerator|FT_int8
id|FT_int8
op_assign
l_int|0x9001
comma
DECL|enumerator|FT_signed_int8
id|FT_signed_int8
op_assign
l_int|0x9101
comma
DECL|enumerator|FT_unsigned_int8
id|FT_unsigned_int8
op_assign
l_int|0x9201
comma
DECL|enumerator|FT_int16
id|FT_int16
op_assign
l_int|0x9302
comma
DECL|enumerator|FT_signed_int16
id|FT_signed_int16
op_assign
l_int|0x9402
comma
DECL|enumerator|FT_unsigned_int16
id|FT_unsigned_int16
op_assign
l_int|0x9502
comma
DECL|enumerator|FT_int32
id|FT_int32
op_assign
l_int|0x9604
comma
DECL|enumerator|FT_signed_int32
id|FT_signed_int32
op_assign
l_int|0x9704
comma
DECL|enumerator|FT_unsigned_int32
id|FT_unsigned_int32
op_assign
l_int|0x9804
comma
DECL|enumerator|FT_int64
id|FT_int64
op_assign
l_int|0x9908
comma
DECL|enumerator|FT_signed_int64
id|FT_signed_int64
op_assign
l_int|0x9a08
comma
DECL|enumerator|FT_unsigned_int64
id|FT_unsigned_int64
op_assign
l_int|0x9b08
comma
DECL|enumerator|FT_real32
id|FT_real32
op_assign
l_int|0xa004
comma
DECL|enumerator|FT_real64
id|FT_real64
op_assign
l_int|0xa108
comma
DECL|enumerator|FT_real96
id|FT_real96
op_assign
l_int|0xa20c
comma
DECL|enumerator|FT_real128
id|FT_real128
op_assign
l_int|0xa310
)brace
suffix:semicolon
DECL|macro|FT_lo_user
mdefine_line|#define FT_lo_user&t;0x8000  /* implementation-defined range start */
DECL|macro|FT_hi_user
mdefine_line|#define FT_hi_user&t;0xffff  /* implementation defined range end */
multiline_comment|/* Type modifier names and codes.  */
DECL|enum|dwarf_type_modifier
r_enum
id|dwarf_type_modifier
(brace
DECL|enumerator|MOD_pointer_to
id|MOD_pointer_to
op_assign
l_int|0x01
comma
DECL|enumerator|MOD_reference_to
id|MOD_reference_to
op_assign
l_int|0x02
comma
DECL|enumerator|MOD_const
id|MOD_const
op_assign
l_int|0x03
comma
DECL|enumerator|MOD_volatile
id|MOD_volatile
op_assign
l_int|0x04
)brace
suffix:semicolon
DECL|macro|MOD_lo_user
mdefine_line|#define MOD_lo_user&t;0x80  /* implementation-defined range start */
DECL|macro|MOD_hi_user
mdefine_line|#define MOD_hi_user&t;0xff  /* implementation-defined range end */
multiline_comment|/* Array ordering names and codes.  */
DECL|enum|dwarf_array_dim_ordering
r_enum
id|dwarf_array_dim_ordering
(brace
DECL|enumerator|ORD_row_major
id|ORD_row_major
op_assign
l_int|0
comma
DECL|enumerator|ORD_col_major
id|ORD_col_major
op_assign
l_int|1
)brace
suffix:semicolon
multiline_comment|/* Array subscript format names and codes.  */
DECL|enum|dwarf_subscr_data_formats
r_enum
id|dwarf_subscr_data_formats
(brace
DECL|enumerator|FMT_FT_C_C
id|FMT_FT_C_C
op_assign
l_int|0x0
comma
DECL|enumerator|FMT_FT_C_X
id|FMT_FT_C_X
op_assign
l_int|0x1
comma
DECL|enumerator|FMT_FT_X_C
id|FMT_FT_X_C
op_assign
l_int|0x2
comma
DECL|enumerator|FMT_FT_X_X
id|FMT_FT_X_X
op_assign
l_int|0x3
comma
DECL|enumerator|FMT_UT_C_C
id|FMT_UT_C_C
op_assign
l_int|0x4
comma
DECL|enumerator|FMT_UT_C_X
id|FMT_UT_C_X
op_assign
l_int|0x5
comma
DECL|enumerator|FMT_UT_X_C
id|FMT_UT_X_C
op_assign
l_int|0x6
comma
DECL|enumerator|FMT_UT_X_X
id|FMT_UT_X_X
op_assign
l_int|0x7
comma
DECL|enumerator|FMT_ET
id|FMT_ET
op_assign
l_int|0x8
)brace
suffix:semicolon
multiline_comment|/* Derived from above for ease of use.  */
DECL|macro|FMT_CODE
mdefine_line|#define FMT_CODE(_FUNDAMENTAL_TYPE_P, _UB_CONST_P, _LB_CONST_P) &bslash;&n; (((_FUNDAMENTAL_TYPE_P) ? 0 : 4)&t;&bslash;&n;  | ((_UB_CONST_P) ? 0 : 2)&t;&t;&bslash;&n;  | ((_LB_CONST_P) ? 0 : 1))
multiline_comment|/* Source language names and codes.  */
DECL|enum|dwarf_source_language
r_enum
id|dwarf_source_language
(brace
DECL|enumerator|LANG_C89
id|LANG_C89
op_assign
l_int|0x00000001
comma
DECL|enumerator|LANG_C
id|LANG_C
op_assign
l_int|0x00000002
comma
DECL|enumerator|LANG_ADA83
id|LANG_ADA83
op_assign
l_int|0x00000003
comma
DECL|enumerator|LANG_C_PLUS_PLUS
id|LANG_C_PLUS_PLUS
op_assign
l_int|0x00000004
comma
DECL|enumerator|LANG_COBOL74
id|LANG_COBOL74
op_assign
l_int|0x00000005
comma
DECL|enumerator|LANG_COBOL85
id|LANG_COBOL85
op_assign
l_int|0x00000006
comma
DECL|enumerator|LANG_FORTRAN77
id|LANG_FORTRAN77
op_assign
l_int|0x00000007
comma
DECL|enumerator|LANG_FORTRAN90
id|LANG_FORTRAN90
op_assign
l_int|0x00000008
comma
DECL|enumerator|LANG_PASCAL83
id|LANG_PASCAL83
op_assign
l_int|0x00000009
comma
DECL|enumerator|LANG_MODULA2
id|LANG_MODULA2
op_assign
l_int|0x0000000a
comma
multiline_comment|/* GNU extensions */
DECL|enumerator|LANG_CHILL
id|LANG_CHILL
op_assign
l_int|0x00009af3
multiline_comment|/* random value for GNU Chill */
)brace
suffix:semicolon
DECL|macro|LANG_lo_user
mdefine_line|#define LANG_lo_user&t;0x00008000  /* implementation-defined range start */
DECL|macro|LANG_hi_user
mdefine_line|#define LANG_hi_user&t;0x0000ffff  /* implementation-defined range end */
multiline_comment|/* Names and codes for GNU &quot;macinfo&quot; extension.  */
DECL|enum|dwarf_macinfo_record_type
r_enum
id|dwarf_macinfo_record_type
(brace
DECL|enumerator|MACINFO_start
id|MACINFO_start
op_assign
l_char|&squot;s&squot;
comma
DECL|enumerator|MACINFO_resume
id|MACINFO_resume
op_assign
l_char|&squot;r&squot;
comma
DECL|enumerator|MACINFO_define
id|MACINFO_define
op_assign
l_char|&squot;d&squot;
comma
DECL|enumerator|MACINFO_undef
id|MACINFO_undef
op_assign
l_char|&squot;u&squot;
)brace
suffix:semicolon
eof
