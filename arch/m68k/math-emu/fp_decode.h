multiline_comment|/*&n; * fp_decode.h&n; *&n; * Copyright Roman Zippel, 1997.  All rights reserved.&n; *&n; * Redistribution and use in source and binary forms, with or without&n; * modification, are permitted provided that the following conditions&n; * are met:&n; * 1. Redistributions of source code must retain the above copyright&n; *    notice, and the entire permission notice in its entirety,&n; *    including the disclaimer of warranties.&n; * 2. Redistributions in binary form must reproduce the above copyright&n; *    notice, this list of conditions and the following disclaimer in the&n; *    documentation and/or other materials provided with the distribution.&n; * 3. The name of the author may not be used to endorse or promote&n; *    products derived from this software without specific prior&n; *    written permission.&n; *&n; * ALTERNATIVELY, this product may be distributed under the terms of&n; * the GNU Public License, in which case the provisions of the GPL are&n; * required INSTEAD OF the above restrictions.  (This clause is&n; * necessary due to a potential bad interaction between the GPL and&n; * the restrictions contained in a BSD-style copyright.)&n; *&n; * THIS SOFTWARE IS PROVIDED ``AS IS&squot;&squot; AND ANY EXPRESS OR IMPLIED&n; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&n; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&n; * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,&n; * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&n; * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&n; * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&n; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&n; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&n; * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&n; * OF THE POSSIBILITY OF SUCH DAMAGE.&n; */
macro_line|#ifndef _FP_DECODE_H
DECL|macro|_FP_DECODE_H
mdefine_line|#define _FP_DECODE_H
multiline_comment|/* These macros do the dirty work of the instr decoding, several variables&n; * can be defined in the source file to modify the work of these macros,&n; * currently the following variables are used:&n; * ...&n; * The register usage:&n; * d0 - will contain source operand for data direct mode,&n; *&t;otherwise scratch register&n; * d1 - upper 16bit are reserved for caller&n; *&t;lower 16bit may contain further arguments,&n; *&t;is destroyed during decoding&n; * d2 - contains first two instruction words,&n; *&t;first word will be used for extension word&n; * a0 - will point to source/dest operand for any indirect mode&n; *&t;otherwise scratch register&n; * a1 - scratch register&n; * a2 - base addr to the task structure&n; *&n; * the current implementation doesn&squot;t check for every disallowed&n; * addressing mode (e.g. pc relative modes as destination), as long&n; * as it only means a new addressing mode, which should not appear&n; * in a program and that doesn&squot;t crash the emulation, I think it&squot;s&n; * not a problem to allow these modes.&n; */
id|do_fmovem
op_assign
l_int|0
id|do_fmovem_cr
op_assign
l_int|0
id|do_no_pc_mode
op_assign
l_int|0
id|do_fscc
op_assign
l_int|0
op_or
id|first
id|decoding
id|of
id|the
id|instr
id|type
op_or
id|this
id|seperates
id|the
id|conditional
id|instr
dot
id|macro
id|fp_decode_cond_instr_type
id|bfextu
op_mod
id|d2
(brace
macro_line|#8,#2},%d0
id|jmp
(paren
(braket
l_float|0f
suffix:colon
id|w
comma
op_mod
id|pc
comma
op_mod
id|d0
op_star
l_int|4
)braket
)paren
dot
id|align
l_int|4
l_int|0
suffix:colon
op_or
dot
r_int
l_string|&quot;f&lt;op&gt;&quot;
comma
l_string|&quot;fscc/fdbcc&quot;
op_or
dot
r_int
l_string|&quot;fbccw&quot;
comma
l_string|&quot;fbccl&quot;
dot
id|endm
op_or
id|second
id|decoding
id|of
id|the
id|instr
id|type
op_or
id|this
id|seperates
id|most
id|move
id|instr
dot
id|macro
id|fp_decode_move_instr_type
id|bfextu
op_mod
id|d2
(brace
macro_line|#16,#3},%d0
id|jmp
(paren
(braket
l_float|0f
suffix:colon
id|w
comma
op_mod
id|pc
comma
op_mod
id|d0
op_star
l_int|4
)braket
)paren
dot
id|align
l_int|4
l_int|0
suffix:colon
op_or
dot
r_int
l_string|&quot;f&lt;op&gt; fpx,fpx&quot;
comma
l_string|&quot;invalid instr&quot;
op_or
dot
r_int
l_string|&quot;f&lt;op&gt; &lt;ea&gt;,fpx&quot;
comma
l_string|&quot;fmove fpx,&lt;ea&gt;&quot;
op_or
dot
r_int
l_string|&quot;fmovem &lt;ea&gt;,fpcr&quot;
comma
l_string|&quot;fmovem &lt;ea&gt;,fpx&quot;
op_or
dot
r_int
l_string|&quot;fmovem fpcr,&lt;ea&gt;&quot;
comma
l_string|&quot;fmovem fpx,&lt;ea&gt;&quot;
dot
id|endm
op_or
id|extract
id|the
id|source
id|specifier
comma
id|specifies
op_or
id|either
id|source
id|fp
r_register
op_logical_or
id|data
id|format
dot
id|macro
id|fp_decode_sourcespec
id|bfextu
op_mod
id|d2
(brace
macro_line|#19,#3},%d0
dot
id|endm
op_or
id|decode
id|destination
id|format
r_for
c_loop
id|fmove
id|reg
comma
id|ea
dot
id|macro
id|fp_decode_dest_format
id|bfextu
op_mod
id|d2
(brace
macro_line|#19,#3},%d0
dot
id|endm
op_or
id|decode
id|source
r_register
r_for
c_loop
id|fmove
id|reg
comma
id|ea
dot
id|macro
id|fp_decode_src_reg
id|bfextu
op_mod
id|d2
(brace
macro_line|#22,#3},%d0
dot
id|endm
op_or
id|extract
id|the
id|addressing
id|mode
op_or
id|it
id|depends
id|on
id|the
id|instr
id|which
id|of
id|the
id|modes
id|is
id|valid
dot
id|macro
id|fp_decode_addr_mode
id|bfextu
op_mod
id|d2
(brace
macro_line|#10,#3},%d0
id|jmp
(paren
(braket
l_float|0f
suffix:colon
id|w
comma
op_mod
id|pc
comma
op_mod
id|d0
op_star
l_int|4
)braket
)paren
dot
id|align
l_int|4
l_int|0
suffix:colon
op_or
dot
r_int
l_string|&quot;data register direct&quot;
comma
l_string|&quot;addr register direct&quot;
op_or
dot
r_int
l_string|&quot;addr register indirect&quot;
op_or
dot
r_int
l_string|&quot;addr register indirect postincrement&quot;
op_or
dot
r_int
l_string|&quot;addr register indirect predecrement&quot;
op_or
dot
r_int
l_string|&quot;addr register + index16&quot;
op_or
dot
r_int
l_string|&quot;extension mode1&quot;
comma
l_string|&quot;extension mode2&quot;
dot
id|endm
op_or
id|extract
id|the
r_register
r_for
c_loop
id|the
id|addressing
id|mode
dot
id|macro
id|fp_decode_addr_reg
id|bfextu
op_mod
id|d2
(brace
macro_line|#13,#3},%d0
dot
id|endm
op_or
id|decode
id|the
l_int|8
id|bit
id|diplacement
id|from
id|the
id|brief
id|extension
id|word
dot
id|macro
id|fp_decode_disp8
id|move.b
op_mod
id|d2
comma
op_mod
id|d0
id|ext.w
op_mod
id|d0
dot
id|endm
op_or
id|decode
id|the
id|index
id|of
id|the
id|brief
op_div
id|full
id|extension
id|word
dot
id|macro
id|fp_decode_index
id|bfextu
op_mod
id|d2
(brace
macro_line|#17,#3},%d0&t;&t;| get the register nr
DECL|variable|btst
id|btst
macro_line|#15,%d2&t;&t;&t;| test for data/addr register
id|jne
l_int|1
"&bslash;@"
id|f
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;d%d&quot;
comma
l_int|1
comma
op_mod
id|d0
id|jsr
id|fp_get_data_reg
id|jra
l_int|2
"&bslash;@"
id|f
DECL|variable|PDECODE
l_int|1
"&bslash;@"
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;a%d&quot;
comma
l_int|1
comma
op_mod
id|d0
id|jsr
id|fp_get_addr_reg
id|move.l
op_mod
id|a0
comma
op_mod
id|d0
l_int|2
"&bslash;@"
suffix:colon
id|debug
id|lea
l_string|&quot;&squot;l&squot;.w,%a0&quot;
DECL|variable|btst
id|btst
macro_line|#11,%d2&t;&t;&t;| 16/32 bit size?
id|jne
l_int|3
"&bslash;@"
id|f
id|debug
id|lea
l_string|&quot;&squot;w&squot;.w,%a0&quot;
id|ext.l
op_mod
id|d0
l_int|3
"&bslash;@"
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;:%c&quot;
comma
l_int|1
comma
op_mod
id|a0
id|move.w
op_mod
id|d2
comma
op_mod
id|d1
op_or
id|scale
id|factor
id|rol.w
macro_line|#7,%d1
op_logical_and
dot
id|w
macro_line|#3,%d1
id|debug
id|move.l
l_string|&quot;%d1,-(%sp)&quot;
id|debug
id|ext.l
l_string|&quot;%d1&quot;
id|printf
id|PDECODE
comma
l_string|&quot;:%d&quot;
comma
l_int|1
comma
op_mod
id|d1
id|debug
id|move.l
l_string|&quot;(%sp)+,%d1&quot;
id|lsl.l
op_mod
id|d1
comma
op_mod
id|d0
dot
id|endm
op_or
id|decode
id|the
id|base
id|displacement
id|size
dot
id|macro
id|fp_decode_basedisp
id|bfextu
op_mod
id|d2
(brace
macro_line|#26,#2},%d0
id|jmp
(paren
(braket
l_float|0f
suffix:colon
id|w
comma
op_mod
id|pc
comma
op_mod
id|d0
op_star
l_int|4
)braket
)paren
dot
id|align
l_int|4
l_int|0
suffix:colon
op_or
dot
r_int
l_string|&quot;reserved&quot;
comma
l_string|&quot;null displacement&quot;
op_or
dot
r_int
l_string|&quot;word displacement&quot;
comma
l_string|&quot;long displacement&quot;
dot
id|endm
dot
id|macro
id|fp_decode_outerdisp
id|bfextu
op_mod
id|d2
(brace
macro_line|#30,#2},%d0
id|jmp
(paren
(braket
l_float|0f
suffix:colon
id|w
comma
op_mod
id|pc
comma
op_mod
id|d0
op_star
l_int|4
)braket
)paren
dot
id|align
l_int|4
l_int|0
suffix:colon
op_or
dot
r_int
l_string|&quot;no memory indirect action/reserved&quot;
comma
l_string|&quot;null outer displacement&quot;
op_or
dot
r_int
l_string|&quot;word outer displacement&quot;
comma
l_string|&quot;long outer displacement&quot;
dot
id|endm
op_or
id|get
id|the
id|extension
id|word
op_logical_and
id|test
r_for
c_loop
id|brief
op_logical_or
id|full
id|extension
id|type
dot
id|macro
id|fp_get_test_extword
id|label
id|fp_get_instr_word
op_mod
id|d2
comma
id|fp_err_ua1
DECL|variable|btst
id|btst
macro_line|#8,%d2
id|jne
"&bslash;"
id|label
dot
id|endm
op_or
id|test
r_if
c_cond
op_mod
id|pc
id|is
id|the
id|base
r_register
r_for
c_loop
id|the
id|indirect
id|addr
id|mode
dot
id|macro
id|fp_test_basereg_d16
id|label
id|btst
macro_line|#20,%d2
id|jeq
"&bslash;"
id|label
dot
id|endm
op_or
id|test
r_if
c_cond
op_mod
id|pc
id|is
id|the
id|base
r_register
r_for
c_loop
id|one
id|of
id|the
id|extended
id|modes
dot
id|macro
id|fp_test_basereg_ext
id|label
id|btst
macro_line|#19,%d2
id|jeq
"&bslash;"
id|label
dot
id|endm
dot
id|macro
id|fp_test_suppr_index
id|label
id|btst
macro_line|#6,%d2
id|jne
"&bslash;"
id|label
dot
id|endm
op_or
id|addressing
id|mode
suffix:colon
id|data
r_register
id|direct
dot
id|macro
id|fp_mode_data_direct
id|fp_decode_addr_reg
id|printf
id|PDECODE
comma
l_string|&quot;d%d&quot;
comma
l_int|1
comma
op_mod
id|d0
dot
id|endm
op_or
id|addressing
id|mode
suffix:colon
id|address
r_register
id|indirect
dot
id|macro
id|fp_mode_addr_indirect
id|fp_decode_addr_reg
id|printf
id|PDECODE
comma
l_string|&quot;(a%d)&quot;
comma
l_int|1
comma
op_mod
id|d0
id|jsr
id|fp_get_addr_reg
dot
id|endm
op_or
id|adjust
id|stack
r_for
c_loop
id|byte
id|moves
id|from
op_div
id|to
id|stack
dot
id|macro
id|fp_test_sp_byte_move
dot
r_if
c_cond
op_logical_neg
id|do_fmovem
dot
r_if
c_cond
id|do_fscc
id|move.w
macro_line|#6,%d1
dot
id|endif
id|cmp.w
macro_line|#7,%d0
id|jne
l_int|1
"&bslash;@"
id|f
dot
r_if
c_cond
op_logical_neg
id|do_fscc
id|cmp.w
macro_line|#6,%d1
id|jne
l_int|1
"&bslash;@"
id|f
dot
id|endif
id|move.w
macro_line|#4,%d1
l_int|1
"&bslash;@"
suffix:colon
dot
id|endif
dot
id|endm
op_or
id|addressing
id|mode
suffix:colon
id|address
r_register
id|indirect
id|with
id|postincrement
dot
id|macro
id|fp_mode_addr_indirect_postinc
id|fp_decode_addr_reg
id|printf
id|PDECODE
comma
l_string|&quot;(a%d)+&quot;
comma
l_int|1
comma
op_mod
id|d0
id|fp_test_sp_byte_move
id|jsr
id|fp_get_addr_reg
id|move.l
op_mod
id|a0
comma
op_mod
id|a1
op_or
id|save
id|addr
dot
r_if
c_cond
id|do_fmovem
id|lea
(paren
op_mod
id|a0
comma
op_mod
id|d1.w
op_star
l_int|4
)paren
comma
op_mod
id|a0
dot
r_if
c_cond
op_logical_neg
id|do_fmovem_cr
id|lea
(paren
op_mod
id|a0
comma
op_mod
id|d1.w
op_star
l_int|8
)paren
comma
op_mod
id|a0
dot
id|endif
dot
r_else
id|add.w
(paren
id|fp_datasize
comma
op_mod
id|d1.w
op_star
l_int|2
)paren
comma
op_mod
id|a0
dot
id|endif
id|jsr
id|fp_put_addr_reg
id|move.l
op_mod
id|a1
comma
op_mod
id|a0
dot
id|endm
op_or
id|addressing
id|mode
suffix:colon
id|address
r_register
id|indirect
id|with
id|predecrement
dot
id|macro
id|fp_mode_addr_indirect_predec
id|fp_decode_addr_reg
id|printf
id|PDECODE
comma
l_string|&quot;-(a%d)&quot;
comma
l_int|1
comma
op_mod
id|d0
id|fp_test_sp_byte_move
id|jsr
id|fp_get_addr_reg
dot
r_if
c_cond
id|do_fmovem
dot
r_if
c_cond
op_logical_neg
id|do_fmovem_cr
id|lea
(paren
op_minus
l_int|12
comma
op_mod
id|a0
)paren
comma
op_mod
id|a1
op_or
id|setup
id|to
id|addr
id|of
l_int|1
id|st
id|reg
id|to
id|move
id|neg.w
op_mod
id|d1
id|lea
(paren
op_mod
id|a0
comma
op_mod
id|d1.w
op_star
l_int|4
)paren
comma
op_mod
id|a0
id|add.w
op_mod
id|d1
comma
op_mod
id|d1
id|lea
(paren
op_mod
id|a0
comma
op_mod
id|d1.w
op_star
l_int|4
)paren
comma
op_mod
id|a0
id|jsr
id|fp_put_addr_reg
id|move.l
op_mod
id|a1
comma
op_mod
id|a0
dot
r_else
id|neg.w
op_mod
id|d1
id|lea
(paren
op_mod
id|a0
comma
op_mod
id|d1.w
op_star
l_int|4
)paren
comma
op_mod
id|a0
id|jsr
id|fp_put_addr_reg
dot
id|endif
dot
r_else
id|sub.w
(paren
id|fp_datasize
comma
op_mod
id|d1.w
op_star
l_int|2
)paren
comma
op_mod
id|a0
id|jsr
id|fp_put_addr_reg
dot
id|endif
dot
id|endm
op_or
id|addressing
id|mode
suffix:colon
id|address
r_register
op_div
id|programm
id|counter
id|indirect
op_or
id|with
l_int|16
id|bit
id|displacement
dot
id|macro
id|fp_mode_addr_indirect_disp16
dot
r_if
c_cond
op_logical_neg
id|do_no_pc_mode
id|fp_test_basereg_d16
l_float|1f
id|printf
id|PDECODE
comma
l_string|&quot;pc&quot;
id|fp_get_pc
op_mod
id|a0
id|jra
l_float|2f
dot
id|endif
l_int|1
suffix:colon
id|fp_decode_addr_reg
id|printf
id|PDECODE
comma
l_string|&quot;a%d&quot;
comma
l_int|1
comma
op_mod
id|d0
id|jsr
id|fp_get_addr_reg
DECL|variable|a1
l_int|2
suffix:colon
id|fp_get_instr_word
op_mod
id|a1
comma
id|fp_err_ua1
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;@(%x)&quot;
comma
l_int|1
comma
op_mod
id|a1
id|add.l
op_mod
id|a1
comma
op_mod
id|a0
dot
id|endm
op_or
id|perform
id|preindex
(paren
r_if
id|I
op_div
id|IS
op_eq
l_int|0
id|xx
op_logical_and
id|xx
op_ne
l_int|00
)paren
dot
id|macro
id|fp_do_preindex
DECL|variable|moveq
id|moveq
macro_line|#3,%d0
op_logical_and
dot
id|w
op_mod
id|d2
comma
op_mod
id|d0
id|jeq
l_float|1f
DECL|variable|btst
id|btst
macro_line|#2,%d2
id|jne
l_float|1f
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;)@(&quot;
id|getuser.l
(paren
op_mod
id|a1
)paren
comma
op_mod
id|a1
comma
id|fp_err_ua1
comma
op_mod
id|a1
id|debug
id|jra
l_string|&quot;2f&quot;
DECL|variable|PDECODE
l_int|1
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;,&quot;
l_int|2
suffix:colon
dot
id|endm
op_or
id|perform
id|postindex
(paren
r_if
id|I
op_div
id|IS
op_eq
l_int|1
id|xx
)paren
dot
id|macro
id|fp_do_postindex
DECL|variable|btst
id|btst
macro_line|#2,%d2
id|jeq
l_float|1f
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;)@(&quot;
id|getuser.l
(paren
op_mod
id|a1
)paren
comma
op_mod
id|a1
comma
id|fp_err_ua1
comma
op_mod
id|a1
id|debug
id|jra
l_string|&quot;2f&quot;
DECL|variable|PDECODE
l_int|1
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;,&quot;
l_int|2
suffix:colon
dot
id|endm
op_or
id|all
id|other
id|indirect
id|addressing
id|modes
id|will
id|finally
id|end
id|up
id|here
dot
id|macro
id|fp_mode_addr_indirect_extmode0
dot
r_if
c_cond
op_logical_neg
id|do_no_pc_mode
id|fp_test_basereg_ext
l_float|1f
id|printf
id|PDECODE
comma
l_string|&quot;pc&quot;
id|fp_get_pc
op_mod
id|a0
id|jra
l_float|2f
dot
id|endif
l_int|1
suffix:colon
id|fp_decode_addr_reg
id|printf
id|PDECODE
comma
l_string|&quot;a%d&quot;
comma
l_int|1
comma
op_mod
id|d0
id|jsr
id|fp_get_addr_reg
l_int|2
suffix:colon
id|move.l
op_mod
id|a0
comma
op_mod
id|a1
id|swap
op_mod
id|d2
id|fp_get_test_extword
l_float|3f
op_or
id|addressing
id|mode
suffix:colon
id|address
r_register
op_div
id|programm
id|counter
id|indirect
op_or
id|with
id|index
op_logical_and
l_int|8
id|bit
id|displacement
id|fp_decode_disp8
id|debug
id|ext.l
l_string|&quot;%d0&quot;
id|printf
id|PDECODE
comma
l_string|&quot;@(%x,&quot;
comma
l_int|1
comma
op_mod
id|d0
id|add.w
op_mod
id|d0
comma
op_mod
id|a1
id|fp_decode_index
id|add.l
op_mod
id|d0
comma
op_mod
id|a1
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;)&quot;
id|jra
l_float|9f
l_int|3
suffix:colon
op_or
id|addressing
id|mode
suffix:colon
id|address
r_register
op_div
id|programm
id|counter
id|memory
id|indirect
op_or
id|with
id|base
op_logical_and
op_div
op_logical_or
id|outer
id|displacement
DECL|variable|btst
id|btst
macro_line|#7,%d2&t;&t;&t;| base register suppressed?
id|jeq
l_float|1f
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;!&quot;
id|sub.l
op_mod
id|a1
comma
op_mod
id|a1
DECL|variable|PDECODE
l_int|1
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;@(&quot;
id|fp_decode_basedisp
dot
r_int
id|fp_ill
comma
l_float|1f
dot
r_int
l_float|2f
comma
l_float|3f
macro_line|#ifdef FPU_EMU_DEBUG
DECL|variable|PDECODE
l_int|1
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;0&quot;
op_or
id|null
id|base
id|displacement
id|jra
l_float|1f
macro_line|#endif
DECL|variable|a0
l_int|2
suffix:colon
id|fp_get_instr_word
op_mod
id|a0
comma
id|fp_err_ua1
op_or
l_int|16
id|bit
id|base
id|displacement
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;%x:w&quot;
comma
l_int|1
comma
op_mod
id|a0
id|jra
l_float|4f
DECL|variable|a0
l_int|3
suffix:colon
id|fp_get_instr_long
op_mod
id|a0
comma
id|fp_err_ua1
op_or
l_int|32
id|bit
id|base
id|displacement
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;%x:l&quot;
comma
l_int|1
comma
op_mod
id|a0
l_int|4
suffix:colon
id|add.l
op_mod
id|a0
comma
op_mod
id|a1
l_int|1
suffix:colon
id|fp_do_postindex
id|fp_test_suppr_index
l_float|1f
id|fp_decode_index
id|add.l
op_mod
id|d0
comma
op_mod
id|a1
l_int|1
suffix:colon
id|fp_do_preindex
id|fp_decode_outerdisp
dot
r_int
l_float|5f
comma
l_float|1f
dot
r_int
l_float|2f
comma
l_float|3f
macro_line|#ifdef FPU_EMU_DEBUG
DECL|variable|PDECODE
l_int|1
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;0&quot;
op_or
id|null
id|outer
id|displacement
id|jra
l_float|1f
macro_line|#endif
DECL|variable|a0
l_int|2
suffix:colon
id|fp_get_instr_word
op_mod
id|a0
comma
id|fp_err_ua1
op_or
l_int|16
id|bit
id|outer
id|displacement
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;%x:w&quot;
comma
l_int|1
comma
op_mod
id|a0
id|jra
l_float|4f
DECL|variable|a0
l_int|3
suffix:colon
id|fp_get_instr_long
op_mod
id|a0
comma
id|fp_err_ua1
op_or
l_int|32
id|bit
id|outer
id|displacement
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;%x:l&quot;
comma
l_int|1
comma
op_mod
id|a0
l_int|4
suffix:colon
id|add.l
op_mod
id|a0
comma
op_mod
id|a1
l_int|1
suffix:colon
DECL|variable|PDECODE
l_int|5
suffix:colon
id|printf
id|PDECODE
comma
l_string|&quot;)&quot;
l_int|9
suffix:colon
id|move.l
op_mod
id|a1
comma
op_mod
id|a0
id|swap
op_mod
id|d2
dot
id|endm
op_or
id|get
id|the
id|absolute
r_int
id|address
id|from
id|user
id|space
dot
id|macro
id|fp_mode_abs_short
id|fp_get_instr_word
op_mod
id|a0
comma
id|fp_err_ua1
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;%x.w&quot;
comma
l_int|1
comma
op_mod
id|a0
dot
id|endm
op_or
id|get
id|the
id|absolute
r_int
id|address
id|from
id|user
id|space
dot
id|macro
id|fp_mode_abs_long
id|fp_get_instr_long
op_mod
id|a0
comma
id|fp_err_ua1
DECL|variable|PDECODE
id|printf
id|PDECODE
comma
l_string|&quot;%x.l&quot;
comma
l_int|1
comma
op_mod
id|a0
dot
id|endm
macro_line|#endif /* _FP_DECODE_H */
eof
