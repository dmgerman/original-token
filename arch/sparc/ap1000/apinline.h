multiline_comment|/*&n;   * Copyright 1996 The Australian National University.&n;   * Copyright 1996 Fujitsu Laboratories Limited&n;   * &n;   * This software may be distributed under the terms of the Gnu&n;   * Public License version 2 or later&n;  */
multiline_comment|/* inline utilities to support the AP1000 code */
macro_line|#if 0
multiline_comment|/* MMU bypass access */
r_static
r_inline
r_int
r_int
id|phys_9_in
c_func
(paren
r_int
r_int
id|paddr
)paren
(brace
r_int
r_int
id|word
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lda [%1] %2, %0&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|word
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
l_int|0x29
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|word
suffix:semicolon
)brace
r_static
r_inline
r_void
id|phys_9_out
c_func
(paren
r_int
r_int
id|paddr
comma
r_int
r_int
id|word
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta %0, [%1] %2&bslash;n&bslash;t&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|word
)paren
comma
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
l_int|0x29
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
id|phys_b_in
c_func
(paren
r_int
r_int
id|paddr
)paren
(brace
r_int
r_int
id|word
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lda [%1] %2, %0&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|word
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
l_int|0x2b
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|word
suffix:semicolon
)brace
r_static
r_inline
r_void
id|phys_b_out
c_func
(paren
r_int
r_int
id|paddr
comma
r_int
r_int
id|word
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta %0, [%1] %2&bslash;n&bslash;t&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|word
)paren
comma
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
l_int|0x2b
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
r_static
r_inline
r_int
r_int
id|phys_c_in
c_func
(paren
r_int
r_int
id|paddr
)paren
(brace
r_int
r_int
id|word
suffix:semicolon
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;lda [%1] %2, %0&bslash;n&bslash;t&quot;
suffix:colon
l_string|&quot;=r&quot;
(paren
id|word
)paren
suffix:colon
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
l_int|0x2b
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
r_return
id|word
suffix:semicolon
)brace
r_static
r_inline
r_void
id|phys_c_out
c_func
(paren
r_int
r_int
id|paddr
comma
r_int
r_int
id|word
)paren
(brace
id|__asm__
id|__volatile__
c_func
(paren
l_string|&quot;sta %0, [%1] %2&bslash;n&bslash;t&quot;
suffix:colon
suffix:colon
l_string|&quot;r&quot;
(paren
id|word
)paren
comma
l_string|&quot;r&quot;
(paren
id|paddr
)paren
comma
l_string|&quot;i&quot;
(paren
l_int|0x2b
)paren
suffix:colon
l_string|&quot;memory&quot;
)paren
suffix:semicolon
)brace
macro_line|#undef BIF_IN
macro_line|#undef BIF_OUT
macro_line|#undef DMA_IN
macro_line|#undef DMA_OUT
macro_line|#undef MSC_IN
macro_line|#undef MSC_OUT
macro_line|#undef MC_IN
macro_line|#undef MC_OUT
mdefine_line|#define BIF_IN(reg) phys_9_in(reg)
mdefine_line|#define BIF_OUT(reg,v) phys_9_out(reg,v)
mdefine_line|#define DMA_IN(reg) phys_9_in(reg)
mdefine_line|#define DMA_OUT(reg,v) phys_9_out(reg,v)
mdefine_line|#define MC_IN(reg) phys_b_in((reg) - MC_BASE0)
mdefine_line|#define MC_OUT(reg,v) phys_b_out((reg) - MC_BASE0,v)
mdefine_line|#define MSC_IN(reg) phys_c_in((reg) - MSC_BASE0)
mdefine_line|#define MSC_OUT(reg,v) phys_c_out((reg) - MSC_BASE0,v)
macro_line|#endif
eof
