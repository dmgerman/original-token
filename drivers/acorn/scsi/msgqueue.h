multiline_comment|/*&n; *  linux/drivers/acorn/scsi/msgqueue.h&n; *&n; *  Copyright (C) 1997 Russell King&n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License version 2 as&n; * published by the Free Software Foundation.&n; *&n; *  message queue handling&n; */
macro_line|#ifndef MSGQUEUE_H
DECL|macro|MSGQUEUE_H
mdefine_line|#define MSGQUEUE_H
DECL|struct|message
r_struct
id|message
(brace
DECL|member|msg
r_char
id|msg
(braket
l_int|8
)braket
suffix:semicolon
DECL|member|length
r_int
id|length
suffix:semicolon
DECL|member|fifo
r_int
id|fifo
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|msgqueue_entry
r_struct
id|msgqueue_entry
(brace
DECL|member|msg
r_struct
id|message
id|msg
suffix:semicolon
DECL|member|next
r_struct
id|msgqueue_entry
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|NR_MESSAGES
mdefine_line|#define NR_MESSAGES 4
r_typedef
r_struct
(brace
DECL|member|qe
r_struct
id|msgqueue_entry
op_star
id|qe
suffix:semicolon
DECL|member|free
r_struct
id|msgqueue_entry
op_star
id|free
suffix:semicolon
DECL|member|entries
r_struct
id|msgqueue_entry
id|entries
(braket
id|NR_MESSAGES
)braket
suffix:semicolon
DECL|typedef|MsgQueue_t
)brace
id|MsgQueue_t
suffix:semicolon
multiline_comment|/*&n; * Function: void msgqueue_initialise(MsgQueue_t *msgq)&n; * Purpose : initialise a message queue&n; * Params  : msgq - queue to initialise&n; */
r_extern
r_void
id|msgqueue_initialise
c_func
(paren
id|MsgQueue_t
op_star
id|msgq
)paren
suffix:semicolon
multiline_comment|/*&n; * Function: void msgqueue_free(MsgQueue_t *msgq)&n; * Purpose : free a queue&n; * Params  : msgq - queue to free&n; */
r_extern
r_void
id|msgqueue_free
c_func
(paren
id|MsgQueue_t
op_star
id|msgq
)paren
suffix:semicolon
multiline_comment|/*&n; * Function: int msgqueue_msglength(MsgQueue_t *msgq)&n; * Purpose : calculate the total length of all messages on the message queue&n; * Params  : msgq - queue to examine&n; * Returns : number of bytes of messages in queue&n; */
r_extern
r_int
id|msgqueue_msglength
c_func
(paren
id|MsgQueue_t
op_star
id|msgq
)paren
suffix:semicolon
multiline_comment|/*&n; * Function: struct message *msgqueue_getmsg(MsgQueue_t *msgq, int msgno)&n; * Purpose : return a message &amp; its length&n; * Params  : msgq   - queue to obtain message from&n; *         : msgno  - message number&n; * Returns : pointer to message string, or NULL&n; */
r_extern
r_struct
id|message
op_star
id|msgqueue_getmsg
c_func
(paren
id|MsgQueue_t
op_star
id|msgq
comma
r_int
id|msgno
)paren
suffix:semicolon
multiline_comment|/*&n; * Function: int msgqueue_addmsg(MsgQueue_t *msgq, int length, ...)&n; * Purpose : add a message onto a message queue&n; * Params  : msgq   - queue to add message on&n; *&t;     length - length of message&n; *&t;     ...    - message bytes&n; * Returns : != 0 if successful&n; */
r_extern
r_int
id|msgqueue_addmsg
c_func
(paren
id|MsgQueue_t
op_star
id|msgq
comma
r_int
id|length
comma
dot
dot
dot
)paren
suffix:semicolon
multiline_comment|/*&n; * Function: void msgqueue_flush(MsgQueue_t *msgq)&n; * Purpose : flush all messages from message queue&n; * Params  : msgq - queue to flush&n; */
r_extern
r_void
id|msgqueue_flush
c_func
(paren
id|MsgQueue_t
op_star
id|msgq
)paren
suffix:semicolon
macro_line|#endif
eof
