multiline_comment|/* linux/drivers/cdrom/optcd_isp16.h - ISP16 CDROM interface configuration&n;   $Id: optcd_isp16.h,v 1.3 1996/01/15 18:43:11 root Exp root $&n;&n;   Extracts from linux/drivers/cdrom/sjcd.c&n;   For copyrights see linux/drivers/cdrom/optcd.c&n;*/
multiline_comment|/* Some (Media)Magic */
multiline_comment|/* define types of drive the interface on an ISP16 card may be looking at */
DECL|macro|ISP16_DRIVE_X
mdefine_line|#define ISP16_DRIVE_X 0x00
DECL|macro|ISP16_SONY
mdefine_line|#define ISP16_SONY  0x02
DECL|macro|ISP16_PANASONIC0
mdefine_line|#define ISP16_PANASONIC0 0x02
DECL|macro|ISP16_SANYO0
mdefine_line|#define ISP16_SANYO0 0x02
DECL|macro|ISP16_MITSUMI
mdefine_line|#define ISP16_MITSUMI  0x04
DECL|macro|ISP16_PANASONIC1
mdefine_line|#define ISP16_PANASONIC1 0x06
DECL|macro|ISP16_SANYO1
mdefine_line|#define ISP16_SANYO1 0x06
DECL|macro|ISP16_DRIVE_NOT_USED
mdefine_line|#define ISP16_DRIVE_NOT_USED 0x08  /* not used */
DECL|macro|ISP16_DRIVE_SET_MASK
mdefine_line|#define ISP16_DRIVE_SET_MASK 0xF1  /* don&squot;t change 0-bit or 4-7-bits*/
multiline_comment|/* ...for port */
DECL|macro|ISP16_DRIVE_SET_PORT
mdefine_line|#define ISP16_DRIVE_SET_PORT 0xF8D
multiline_comment|/* set io parameters */
DECL|macro|ISP16_BASE_340
mdefine_line|#define ISP16_BASE_340  0x00
DECL|macro|ISP16_BASE_330
mdefine_line|#define ISP16_BASE_330  0x40
DECL|macro|ISP16_BASE_360
mdefine_line|#define ISP16_BASE_360  0x80
DECL|macro|ISP16_BASE_320
mdefine_line|#define ISP16_BASE_320  0xC0
DECL|macro|ISP16_IRQ_X
mdefine_line|#define ISP16_IRQ_X  0x00
DECL|macro|ISP16_IRQ_5
mdefine_line|#define ISP16_IRQ_5  0x04  /* shouldn&squot;t be used due to soundcard conflicts */
DECL|macro|ISP16_IRQ_7
mdefine_line|#define ISP16_IRQ_7  0x08  /* shouldn&squot;t be used due to soundcard conflicts */
DECL|macro|ISP16_IRQ_3
mdefine_line|#define ISP16_IRQ_3  0x0C
DECL|macro|ISP16_IRQ_9
mdefine_line|#define ISP16_IRQ_9  0x10
DECL|macro|ISP16_IRQ_10
mdefine_line|#define ISP16_IRQ_10  0x14
DECL|macro|ISP16_IRQ_11
mdefine_line|#define ISP16_IRQ_11  0x18
DECL|macro|ISP16_DMA_X
mdefine_line|#define ISP16_DMA_X  0x03
DECL|macro|ISP16_DMA_3
mdefine_line|#define ISP16_DMA_3  0x00
DECL|macro|ISP16_DMA_5
mdefine_line|#define ISP16_DMA_5  0x00
DECL|macro|ISP16_DMA_6
mdefine_line|#define ISP16_DMA_6  0x01
DECL|macro|ISP16_DMA_7
mdefine_line|#define ISP16_DMA_7  0x02
DECL|macro|ISP16_IO_SET_MASK
mdefine_line|#define ISP16_IO_SET_MASK  0x20  /* don&squot;t change 5-bit */
multiline_comment|/* ...for port */
DECL|macro|ISP16_IO_SET_PORT
mdefine_line|#define ISP16_IO_SET_PORT  0xF8E
multiline_comment|/* enable the card */
DECL|macro|ISP16_C928__ENABLE_PORT
mdefine_line|#define ISP16_C928__ENABLE_PORT  0xF90  /* ISP16 with OPTi 82C928 chip */
DECL|macro|ISP16_C929__ENABLE_PORT
mdefine_line|#define ISP16_C929__ENABLE_PORT  0xF91  /* ISP16 with OPTi 82C929 chip */
DECL|macro|ISP16_ENABLE_CDROM
mdefine_line|#define ISP16_ENABLE_CDROM  0x80  /* seven bit */
multiline_comment|/* the magic stuff */
DECL|macro|ISP16_CTRL_PORT
mdefine_line|#define ISP16_CTRL_PORT  0xF8F
DECL|macro|ISP16_C928__CTRL
mdefine_line|#define ISP16_C928__CTRL  0xE2  /* ISP16 with OPTi 82C928 chip */
DECL|macro|ISP16_C929__CTRL
mdefine_line|#define ISP16_C929__CTRL  0xE3  /* ISP16 with OPTi 82C929 chip */
r_static
r_int
id|isp16_detect
c_func
(paren
r_void
)paren
suffix:semicolon
r_static
r_int
id|isp16_c928__detect
c_func
(paren
r_void
)paren
suffix:semicolon
r_static
r_int
id|isp16_c929__detect
c_func
(paren
r_void
)paren
suffix:semicolon
r_static
r_int
id|isp16_cdi_config
c_func
(paren
r_int
id|base
comma
id|u_char
id|drive_type
comma
r_int
id|irq
comma
r_int
id|dma
)paren
suffix:semicolon
r_static
r_void
id|isp16_sound_config
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|variable|isp16_type
r_static
r_int
id|isp16_type
suffix:semicolon
multiline_comment|/* dependent on type of interface card */
DECL|variable|isp16_ctrl
r_static
id|u_char
id|isp16_ctrl
suffix:semicolon
DECL|variable|isp16_enable_port
r_static
id|u_short
id|isp16_enable_port
suffix:semicolon
multiline_comment|/*static int sjcd_present = 0;*/
DECL|variable|special_mask
r_static
id|u_char
id|special_mask
op_assign
l_int|0
suffix:semicolon
DECL|variable|defaults
r_static
r_int
r_char
id|defaults
(braket
l_int|16
)braket
op_assign
(brace
l_int|0xA8
comma
l_int|0xA8
comma
l_int|0x18
comma
l_int|0x18
comma
l_int|0x18
comma
l_int|0x18
comma
l_int|0x8E
comma
l_int|0x8E
comma
l_int|0x03
comma
l_int|0x00
comma
l_int|0x02
comma
l_int|0x00
comma
l_int|0x0A
comma
l_int|0x00
comma
l_int|0x00
comma
l_int|0x00
)brace
suffix:semicolon
multiline_comment|/* ------------- */
multiline_comment|/*&n; * -- ISP16 detection and configuration&n; *&n; *    Copyright (c) 1995, Eric van der Maarel &lt;maarel@marin.nl&gt;&n; *&n; *    Version 0.5&n; *&n; *    Detect cdrom interface on ISP16 soundcard.&n; *    Configure cdrom interface.&n; *    Configure sound interface.&n; *&n; *    Algorithm for the card with OPTi 82C928 taken&n; *    from the CDSETUP.SYS driver for MSDOS,&n; *    by OPTi Computers, version 2.03.&n; *    Algorithm for the card with OPTi 82C929 as communicated&n; *    to me by Vadim Model and Leo Spiekman.&n; *&n; *    Use, modifification or redistribution of this software is&n; *    allowed under the terms of the GPL.&n; *&n; */
DECL|macro|ISP16_IN
mdefine_line|#define ISP16_IN(p) (outb(isp16_ctrl,ISP16_CTRL_PORT), inb(p))
DECL|macro|ISP16_OUT
mdefine_line|#define ISP16_OUT(p,b) (outb(isp16_ctrl,ISP16_CTRL_PORT), outb(b,p))
r_static
r_int
DECL|function|isp16_detect
id|isp16_detect
c_func
(paren
r_void
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|isp16_c929__detect
c_func
(paren
)paren
OL
l_int|0
)paren
)paren
r_return
l_int|2
suffix:semicolon
r_else
r_return
id|isp16_c928__detect
c_func
(paren
)paren
suffix:semicolon
)brace
r_static
r_int
DECL|function|isp16_c928__detect
id|isp16_c928__detect
c_func
(paren
r_void
)paren
(brace
id|u_char
id|ctrl
suffix:semicolon
id|u_char
id|enable_cdrom
suffix:semicolon
id|u_char
id|io
suffix:semicolon
r_int
id|i
op_assign
op_minus
l_int|1
suffix:semicolon
id|isp16_ctrl
op_assign
id|ISP16_C928__CTRL
suffix:semicolon
id|isp16_enable_port
op_assign
id|ISP16_C928__ENABLE_PORT
suffix:semicolon
multiline_comment|/* read&squot; and write&squot; are a special read and write, respectively */
multiline_comment|/* read&squot; ISP16_CTRL_PORT, clear last two bits and write&squot; back the result */
id|ctrl
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_CTRL_PORT
)paren
op_amp
l_int|0xFC
suffix:semicolon
id|ISP16_OUT
c_func
(paren
id|ISP16_CTRL_PORT
comma
id|ctrl
)paren
suffix:semicolon
multiline_comment|/* read&squot; 3,4 and 5-bit from the cdrom enable port */
id|enable_cdrom
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_C928__ENABLE_PORT
)paren
op_amp
l_int|0x38
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|enable_cdrom
op_amp
l_int|0x20
)paren
)paren
(brace
multiline_comment|/* 5-bit not set */
multiline_comment|/* read&squot; last 2 bits of ISP16_IO_SET_PORT */
id|io
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_IO_SET_PORT
)paren
op_amp
l_int|0x03
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
id|io
op_amp
l_int|0x01
)paren
op_lshift
l_int|1
)paren
op_eq
(paren
id|io
op_amp
l_int|0x02
)paren
)paren
(brace
multiline_comment|/* bits are the same */
r_if
c_cond
(paren
id|io
op_eq
l_int|0
)paren
(brace
multiline_comment|/* ...the same and 0 */
id|i
op_assign
l_int|0
suffix:semicolon
id|enable_cdrom
op_or_assign
l_int|0x20
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* ...the same and 1 */
multiline_comment|/* my card, first time &squot;round */
id|i
op_assign
l_int|1
suffix:semicolon
id|enable_cdrom
op_or_assign
l_int|0x28
suffix:semicolon
)brace
id|ISP16_OUT
c_func
(paren
id|ISP16_C928__ENABLE_PORT
comma
id|enable_cdrom
)paren
suffix:semicolon
)brace
r_else
(brace
multiline_comment|/* bits are not the same */
id|ISP16_OUT
c_func
(paren
id|ISP16_CTRL_PORT
comma
id|ctrl
)paren
suffix:semicolon
r_return
id|i
suffix:semicolon
multiline_comment|/* -&gt; not detected: possibly incorrect conclusion */
)brace
)brace
r_else
r_if
c_cond
(paren
id|enable_cdrom
op_eq
l_int|0x20
)paren
id|i
op_assign
l_int|0
suffix:semicolon
r_else
r_if
c_cond
(paren
id|enable_cdrom
op_eq
l_int|0x28
)paren
multiline_comment|/* my card, already initialised */
id|i
op_assign
l_int|1
suffix:semicolon
id|ISP16_OUT
c_func
(paren
id|ISP16_CTRL_PORT
comma
id|ctrl
)paren
suffix:semicolon
r_return
id|i
suffix:semicolon
)brace
r_static
r_int
DECL|function|isp16_c929__detect
id|isp16_c929__detect
c_func
(paren
r_void
)paren
(brace
id|u_char
id|ctrl
suffix:semicolon
id|u_char
id|tmp
suffix:semicolon
id|isp16_ctrl
op_assign
id|ISP16_C929__CTRL
suffix:semicolon
id|isp16_enable_port
op_assign
id|ISP16_C929__ENABLE_PORT
suffix:semicolon
multiline_comment|/* read&squot; and write&squot; are a special read and write, respectively */
multiline_comment|/* read&squot; ISP16_CTRL_PORT and save */
id|ctrl
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_CTRL_PORT
)paren
suffix:semicolon
multiline_comment|/* write&squot; zero to the ctrl port and get response */
id|ISP16_OUT
c_func
(paren
id|ISP16_CTRL_PORT
comma
l_int|0
)paren
suffix:semicolon
id|tmp
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_CTRL_PORT
)paren
suffix:semicolon
r_if
c_cond
(paren
id|tmp
op_ne
l_int|2
)paren
multiline_comment|/* isp16 with 82C929 not detected */
r_return
op_minus
l_int|1
suffix:semicolon
multiline_comment|/* restore ctrl port value */
id|ISP16_OUT
c_func
(paren
id|ISP16_CTRL_PORT
comma
id|ctrl
)paren
suffix:semicolon
r_return
l_int|2
suffix:semicolon
)brace
r_static
r_int
DECL|function|isp16_cdi_config
id|isp16_cdi_config
c_func
(paren
r_int
id|base
comma
id|u_char
id|drive_type
comma
r_int
id|irq
comma
r_int
id|dma
)paren
(brace
id|u_char
id|base_code
suffix:semicolon
id|u_char
id|irq_code
suffix:semicolon
id|u_char
id|dma_code
suffix:semicolon
id|u_char
id|i
suffix:semicolon
r_if
c_cond
(paren
(paren
id|drive_type
op_eq
id|ISP16_MITSUMI
)paren
op_logical_and
(paren
id|dma
op_ne
l_int|0
)paren
)paren
id|printk
c_func
(paren
l_string|&quot;Mitsumi cdrom drive has no dma support.&bslash;n&quot;
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|base
)paren
(brace
r_case
l_int|0x340
suffix:colon
id|base_code
op_assign
id|ISP16_BASE_340
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x330
suffix:colon
id|base_code
op_assign
id|ISP16_BASE_330
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x360
suffix:colon
id|base_code
op_assign
id|ISP16_BASE_360
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x320
suffix:colon
id|base_code
op_assign
id|ISP16_BASE_320
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;Base address 0x%03X not supported by cdrom interface on ISP16.&bslash;n&quot;
comma
id|base
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_switch
c_cond
(paren
id|irq
)paren
(brace
r_case
l_int|0
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_X
suffix:semicolon
r_break
suffix:semicolon
multiline_comment|/* disable irq */
r_case
l_int|5
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_5
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Irq 5 shouldn&squot;t be used by cdrom interface on ISP16,&quot;
l_string|&quot; due to possible conflicts with the soundcard.&bslash;n&quot;
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|7
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_7
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Irq 7 shouldn&squot;t be used by cdrom interface on ISP16,&quot;
l_string|&quot; due to possible conflicts with the soundcard.&bslash;n&quot;
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_3
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|9
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_9
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|10
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_10
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|11
suffix:colon
id|irq_code
op_assign
id|ISP16_IRQ_11
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;Irq %d not supported by cdrom interface on ISP16.&bslash;n&quot;
comma
id|irq
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_switch
c_cond
(paren
id|dma
)paren
(brace
r_case
l_int|0
suffix:colon
id|dma_code
op_assign
id|ISP16_DMA_X
suffix:semicolon
r_break
suffix:semicolon
multiline_comment|/* disable dma */
r_case
l_int|1
suffix:colon
id|printk
c_func
(paren
l_string|&quot;Dma 1 cannot be used by cdrom interface on ISP16,&quot;
l_string|&quot; due to conflict with the soundcard.&bslash;n&quot;
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|3
suffix:colon
id|dma_code
op_assign
id|ISP16_DMA_3
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|5
suffix:colon
id|dma_code
op_assign
id|ISP16_DMA_5
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|6
suffix:colon
id|dma_code
op_assign
id|ISP16_DMA_6
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|7
suffix:colon
id|dma_code
op_assign
id|ISP16_DMA_7
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
l_string|&quot;Dma %d not supported by cdrom interface on ISP16.&bslash;n&quot;
comma
id|dma
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
id|drive_type
op_ne
id|ISP16_SONY
op_logical_and
id|drive_type
op_ne
id|ISP16_PANASONIC0
op_logical_and
id|drive_type
op_ne
id|ISP16_PANASONIC1
op_logical_and
id|drive_type
op_ne
id|ISP16_SANYO0
op_logical_and
id|drive_type
op_ne
id|ISP16_SANYO1
op_logical_and
id|drive_type
op_ne
id|ISP16_MITSUMI
op_logical_and
id|drive_type
op_ne
id|ISP16_DRIVE_X
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Drive type (code 0x%02X) not supported by cdrom&quot;
l_string|&quot; interface on ISP16.&bslash;n&quot;
comma
id|drive_type
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
multiline_comment|/* set type of interface */
id|i
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_DRIVE_SET_PORT
)paren
op_amp
id|ISP16_DRIVE_SET_MASK
suffix:semicolon
multiline_comment|/* clear some bits */
id|ISP16_OUT
c_func
(paren
id|ISP16_DRIVE_SET_PORT
comma
id|i
op_or
id|drive_type
)paren
suffix:semicolon
multiline_comment|/* enable cdrom on interface with 82C929 chip */
r_if
c_cond
(paren
id|isp16_type
OG
l_int|1
)paren
id|ISP16_OUT
c_func
(paren
id|isp16_enable_port
comma
id|ISP16_ENABLE_CDROM
)paren
suffix:semicolon
multiline_comment|/* set base address, irq and dma */
id|i
op_assign
id|ISP16_IN
c_func
(paren
id|ISP16_IO_SET_PORT
)paren
op_amp
id|ISP16_IO_SET_MASK
suffix:semicolon
multiline_comment|/* keep some bits */
id|ISP16_OUT
c_func
(paren
id|ISP16_IO_SET_PORT
comma
id|i
op_or
id|base_code
op_or
id|irq_code
op_or
id|dma_code
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|isp16_sound_config
r_static
r_void
id|isp16_sound_config
c_func
(paren
r_void
)paren
(brace
r_int
id|i
suffix:semicolon
id|u_char
id|saved
suffix:semicolon
id|saved
op_assign
id|ISP16_IN
c_func
(paren
l_int|0xF8D
)paren
op_amp
l_int|0x8F
suffix:semicolon
id|ISP16_OUT
c_func
(paren
l_int|0xF8D
comma
l_int|0x40
)paren
suffix:semicolon
multiline_comment|/*&n;   * Now we should wait for a while...&n;   */
r_for
c_loop
(paren
id|i
op_assign
l_int|16
op_star
l_int|1024
suffix:semicolon
id|i
op_decrement
suffix:semicolon
)paren
(brace
suffix:semicolon
)brace
id|ISP16_OUT
c_func
(paren
l_int|0xF8D
comma
id|saved
)paren
suffix:semicolon
id|ISP16_OUT
c_func
(paren
l_int|0xF91
comma
l_int|0x1B
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|5
op_star
l_int|64
op_star
l_int|1024
suffix:semicolon
id|i
op_ne
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
r_if
c_cond
(paren
op_logical_neg
(paren
id|inb
c_func
(paren
l_int|0x534
)paren
op_amp
l_int|0x80
)paren
)paren
(brace
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id|i
OG
l_int|0
)paren
(brace
id|saved
op_assign
(paren
id|inb
c_func
(paren
l_int|0x534
)paren
op_amp
l_int|0xE0
)paren
op_or
l_int|0x0A
suffix:semicolon
id|outb
c_func
(paren
id|saved
comma
l_int|0x534
)paren
suffix:semicolon
id|special_mask
op_assign
(paren
id|inb
c_func
(paren
l_int|0x535
)paren
op_rshift
l_int|4
)paren
op_amp
l_int|0x08
suffix:semicolon
id|saved
op_assign
(paren
id|inb
c_func
(paren
l_int|0x534
)paren
op_amp
l_int|0xE0
)paren
op_or
l_int|0x0C
suffix:semicolon
id|outb
c_func
(paren
id|saved
comma
l_int|0x534
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|inb
c_func
(paren
l_int|0x535
)paren
)paren
(brace
r_case
l_int|0x09
suffix:colon
r_case
l_int|0x0A
suffix:colon
id|special_mask
op_or_assign
l_int|0x05
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x8A
suffix:colon
id|special_mask
op_assign
l_int|0x0F
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|i
op_assign
l_int|0
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
id|i
op_eq
l_int|0
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;Strange MediaMagic, but&bslash;n&quot;
)paren
suffix:semicolon
)brace
r_else
(brace
id|printk
c_func
(paren
l_string|&quot;Conf:&quot;
)paren
suffix:semicolon
id|saved
op_assign
id|inb
c_func
(paren
l_int|0x534
)paren
op_amp
l_int|0xE0
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|16
suffix:semicolon
id|i
op_increment
)paren
(brace
id|outb
c_func
(paren
l_int|0x20
op_or
(paren
id|u_char
)paren
id|i
comma
l_int|0x534
)paren
suffix:semicolon
id|outb
c_func
(paren
id|defaults
(braket
id|i
)braket
comma
l_int|0x535
)paren
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|16
suffix:semicolon
id|i
op_increment
)paren
(brace
id|outb
c_func
(paren
l_int|0x20
op_or
(paren
id|u_char
)paren
id|i
comma
l_int|0x534
)paren
suffix:semicolon
id|saved
op_assign
id|inb
c_func
(paren
l_int|0x535
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot; %02X&quot;
comma
id|saved
)paren
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
)brace
id|ISP16_OUT
c_func
(paren
l_int|0xF91
comma
l_int|0xA0
op_or
id|special_mask
)paren
suffix:semicolon
multiline_comment|/*&n;   * The following have no explaination yet.&n;   */
id|ISP16_OUT
c_func
(paren
l_int|0xF90
comma
l_int|0xA2
)paren
suffix:semicolon
id|ISP16_OUT
c_func
(paren
l_int|0xF92
comma
l_int|0x03
)paren
suffix:semicolon
multiline_comment|/*&n;   * Turn general sound on and set total volume.&n;   */
id|ISP16_OUT
c_func
(paren
l_int|0xF93
comma
l_int|0x0A
)paren
suffix:semicolon
multiline_comment|/*&n;  outb( 0x04, 0x224 );&n;  saved = inb( 0x225 );&n;  outb( 0x04, 0x224 );&n;  outb( saved, 0x225 );&n;*/
)brace
eof
