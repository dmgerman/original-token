multiline_comment|/* cyberstormII.h: Defines and structures for the CyberStorm SCSI Mk II driver.&n; *&n; * Copyright (C) 1996 Jesper Skov (jskov@cygnus.co.uk)&n; */
macro_line|#include &quot;NCR53C9x.h&quot;
macro_line|#ifndef CYBERII_ESP_H
DECL|macro|CYBERII_ESP_H
mdefine_line|#define CYBERII_ESP_H
multiline_comment|/* The controller registers can be found in the Z2 config area at these&n; * offsets:&n; */
DECL|macro|CYBERII_ESP_ADDR
mdefine_line|#define CYBERII_ESP_ADDR 0x1ff03
DECL|macro|CYBERII_DMA_ADDR
mdefine_line|#define CYBERII_DMA_ADDR 0x1ff43
multiline_comment|/* The CyberStorm II DMA interface */
DECL|struct|cyberII_dma_registers
r_struct
id|cyberII_dma_registers
(brace
DECL|member|cond_reg
r_volatile
r_int
r_char
id|cond_reg
suffix:semicolon
multiline_comment|/* DMA cond    (ro)  [0x000] */
DECL|macro|ctrl_reg
mdefine_line|#define ctrl_reg  cond_reg&t;&t;&t;/* DMA control (wo)  [0x000] */
DECL|member|dmapad4
r_int
r_char
id|dmapad4
(braket
l_int|0x3f
)braket
suffix:semicolon
DECL|member|dma_addr0
r_volatile
r_int
r_char
id|dma_addr0
suffix:semicolon
multiline_comment|/* DMA address (MSB) [0x040] */
DECL|member|dmapad1
r_int
r_char
id|dmapad1
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|dma_addr1
r_volatile
r_int
r_char
id|dma_addr1
suffix:semicolon
multiline_comment|/* DMA address       [0x044] */
DECL|member|dmapad2
r_int
r_char
id|dmapad2
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|dma_addr2
r_volatile
r_int
r_char
id|dma_addr2
suffix:semicolon
multiline_comment|/* DMA address       [0x048] */
DECL|member|dmapad3
r_int
r_char
id|dmapad3
(braket
l_int|3
)braket
suffix:semicolon
DECL|member|dma_addr3
r_volatile
r_int
r_char
id|dma_addr3
suffix:semicolon
multiline_comment|/* DMA address (LSB) [0x04c] */
)brace
suffix:semicolon
multiline_comment|/* DMA control bits */
DECL|macro|CYBERII_DMA_LED
mdefine_line|#define CYBERII_DMA_LED    0x02&t;/* HD led control 1 = on */
r_extern
r_int
id|cyberII_esp_detect
c_func
(paren
r_struct
id|SHT
op_star
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|esp_info
c_func
(paren
r_struct
id|Scsi_Host
op_star
)paren
suffix:semicolon
r_extern
r_int
id|esp_queue
c_func
(paren
id|Scsi_Cmnd
op_star
comma
r_void
(paren
op_star
id|done
)paren
(paren
id|Scsi_Cmnd
op_star
)paren
)paren
suffix:semicolon
r_extern
r_int
id|esp_command
c_func
(paren
id|Scsi_Cmnd
op_star
)paren
suffix:semicolon
r_extern
r_int
id|esp_abort
c_func
(paren
id|Scsi_Cmnd
op_star
)paren
suffix:semicolon
r_extern
r_int
id|esp_reset
c_func
(paren
id|Scsi_Cmnd
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|esp_proc_info
c_func
(paren
r_char
op_star
id|buffer
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|offset
comma
r_int
id|length
comma
r_int
id|hostno
comma
r_int
id|inout
)paren
suffix:semicolon
DECL|macro|SCSI_CYBERSTORMII
mdefine_line|#define SCSI_CYBERSTORMII {                                                               &bslash;&n;/* struct SHT *next */                                         NULL,                   &bslash;&n;/* long *usage_count */                                        NULL,                   &bslash;&n;/* struct proc_dir_entry *proc_dir */                          &amp;proc_scsi_esp,         &bslash;&n;/* int (*proc_info)(char *, char **, off_t, int, int, int) */  &amp;esp_proc_info,                   &bslash;&n;/* const char *name */                                         &quot;CyberStorm Mk II SCSI&quot;, &bslash;&n;/* int detect(struct SHT *) */                                 cyberII_esp_detect,  &bslash;&n;/* int release(struct Scsi_Host *) */                          NULL,                   &bslash;&n;/* const char *info(struct Scsi_Host *) */                     esp_info,               &bslash;&n;/* int command(Scsi_Cmnd *) */                                 esp_command,            &bslash;&n;/* int queuecommand(Scsi_Cmnd *, void (*done)(Scsi_Cmnd *)) */ esp_queue,              &bslash;&n;/* int abort(Scsi_Cmnd *) */                                   esp_abort,              &bslash;&n;/* int reset(Scsi_Cmnd *) */                                   esp_reset,              &bslash;&n;/* int slave_attach(int, int) */                               NULL,                   &bslash;&n;/* int bios_param(Disk *, kdev_t, int[]) */                    NULL,                   &bslash;&n;/* int can_queue */                                            7,                      &bslash;&n;/* int this_id */                                              7,                      &bslash;&n;/* short unsigned int sg_tablesize */                          SG_ALL,                 &bslash;&n;/* short cmd_per_lun */                                        1,                      &bslash;&n;/* unsigned char present */                                    0,                      &bslash;&n;/* unsigned unchecked_isa_dma:1 */                             0,                      &bslash;&n;/* unsigned use_clustering:1 */                                DISABLE_CLUSTERING, }
macro_line|#endif /* CYBERII_ESP_H */
eof
