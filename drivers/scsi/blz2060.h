multiline_comment|/* blz2060.h: Defines and structures for the Blizzard 2060 SCSI driver.&n; *&n; * Copyright (C) 1996 Jesper Skov (jskov@cygnus.co.uk)&n; *&n; * This file is based on cyber_esp.h (hence the occasional reference to&n; * CyberStorm).&n; */
macro_line|#include &quot;NCR53C9x.h&quot;
macro_line|#ifndef BLZ2060_H
DECL|macro|BLZ2060_H
mdefine_line|#define BLZ2060_H
multiline_comment|/* The controller registers can be found in the Z2 config area at these&n; * offsets:&n; */
DECL|macro|BLZ2060_ESP_ADDR
mdefine_line|#define BLZ2060_ESP_ADDR 0x1ff00
DECL|macro|BLZ2060_DMA_ADDR
mdefine_line|#define BLZ2060_DMA_ADDR 0x1ffe0
multiline_comment|/* The Blizzard 2060 DMA interface&n; * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&n; * Only two things can be programmed in the Blizzard DMA:&n; *  1) The data direction is controlled by the status of bit 31 (1 = write)&n; *  2) The source/dest address (word aligned, shifted one right) in bits 30-0&n; *&n; * Figure out interrupt status by reading the ESP status byte.&n; */
DECL|struct|blz2060_dma_registers
r_struct
id|blz2060_dma_registers
(brace
DECL|member|dma_led_ctrl
r_volatile
r_int
r_char
id|dma_led_ctrl
suffix:semicolon
multiline_comment|/* DMA led control   [0x000] */
DECL|member|dmapad1
r_int
r_char
id|dmapad1
(braket
l_int|0x0f
)braket
suffix:semicolon
DECL|member|dma_addr0
r_volatile
r_int
r_char
id|dma_addr0
suffix:semicolon
multiline_comment|/* DMA address (MSB) [0x010] */
DECL|member|dmapad2
r_int
r_char
id|dmapad2
(braket
l_int|0x03
)braket
suffix:semicolon
DECL|member|dma_addr1
r_volatile
r_int
r_char
id|dma_addr1
suffix:semicolon
multiline_comment|/* DMA address       [0x014] */
DECL|member|dmapad3
r_int
r_char
id|dmapad3
(braket
l_int|0x03
)braket
suffix:semicolon
DECL|member|dma_addr2
r_volatile
r_int
r_char
id|dma_addr2
suffix:semicolon
multiline_comment|/* DMA address       [0x018] */
DECL|member|dmapad4
r_int
r_char
id|dmapad4
(braket
l_int|0x03
)braket
suffix:semicolon
DECL|member|dma_addr3
r_volatile
r_int
r_char
id|dma_addr3
suffix:semicolon
multiline_comment|/* DMA address (LSB) [0x01c] */
)brace
suffix:semicolon
DECL|macro|BLZ2060_DMA_WRITE
mdefine_line|#define BLZ2060_DMA_WRITE 0x80000000
multiline_comment|/* DMA control bits */
DECL|macro|BLZ2060_DMA_LED
mdefine_line|#define BLZ2060_DMA_LED    0x02&t;&t;/* HD led control 1 = off */
r_extern
r_int
id|blz2060_esp_detect
c_func
(paren
r_struct
id|SHT
op_star
)paren
suffix:semicolon
r_extern
r_int
id|blz2060_esp_release
c_func
(paren
r_struct
id|Scsi_Host
op_star
)paren
suffix:semicolon
r_extern
r_const
r_char
op_star
id|esp_info
c_func
(paren
r_struct
id|Scsi_Host
op_star
)paren
suffix:semicolon
r_extern
r_int
id|esp_queue
c_func
(paren
id|Scsi_Cmnd
op_star
comma
r_void
(paren
op_star
id|done
)paren
(paren
id|Scsi_Cmnd
op_star
)paren
)paren
suffix:semicolon
r_extern
r_int
id|esp_command
c_func
(paren
id|Scsi_Cmnd
op_star
)paren
suffix:semicolon
r_extern
r_int
id|esp_abort
c_func
(paren
id|Scsi_Cmnd
op_star
)paren
suffix:semicolon
r_extern
r_int
id|esp_reset
c_func
(paren
id|Scsi_Cmnd
op_star
comma
r_int
r_int
)paren
suffix:semicolon
r_extern
r_int
id|esp_proc_info
c_func
(paren
r_char
op_star
id|buffer
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|offset
comma
r_int
id|length
comma
r_int
id|hostno
comma
r_int
id|inout
)paren
suffix:semicolon
DECL|macro|SCSI_BLZ2060
mdefine_line|#define SCSI_BLZ2060      { proc_name:&t;&t;&quot;esp-blz2060&quot;, &bslash;&n;&t;&t;&t;    proc_info:&t;&t;esp_proc_info, &bslash;&n;&t;&t;&t;    name:&t;&t;&quot;Blizzard2060 SCSI&quot;, &bslash;&n;&t;&t;&t;    detect:&t;&t;blz2060_esp_detect, &bslash;&n;&t;&t;&t;    release:&t;&t;blz2060_esp_release, &bslash;&n;&t;&t;&t;    queuecommand:&t;esp_queue, &bslash;&n;&t;&t;&t;    abort:&t;&t;esp_abort, &bslash;&n;&t;&t;&t;    reset:&t;&t;esp_reset, &bslash;&n;&t;&t;&t;    can_queue:          7, &bslash;&n;&t;&t;&t;    this_id:&t;&t;7, &bslash;&n;&t;&t;&t;    sg_tablesize:&t;SG_ALL, &bslash;&n;&t;&t;&t;    cmd_per_lun:&t;1, &bslash;&n;&t;&t;&t;    use_clustering:&t;ENABLE_CLUSTERING }
macro_line|#endif /* BLZ2060_H */
eof
