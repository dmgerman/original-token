multiline_comment|/*&n; * UHCI-specific debugging code. Invaluable when something&n; * goes wrong, but don&squot;t get in my face.&n; *&n; * Kernel visible pointers are surrounded in []&squot;s and bus&n; * visible pointers are surrounded in ()&squot;s&n; *&n; * (C) Copyright 1999 Linus Torvalds&n; * (C) Copyright 1999 Johannes Erdfelt&n; */
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;asm/io.h&gt;
macro_line|#include &quot;uhci.h&quot;
DECL|function|uhci_show_td
r_void
id|uhci_show_td
c_func
(paren
r_struct
id|uhci_td
op_star
id|td
)paren
(brace
r_char
op_star
id|spid
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%08x &quot;
comma
id|td-&gt;link
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;e%d %s%s%s%s%s%s%s%s%s%sLength=%x &quot;
comma
(paren
(paren
id|td-&gt;status
op_rshift
l_int|27
)paren
op_amp
l_int|3
)paren
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_SPD
)paren
ques
c_cond
l_string|&quot;SPD &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_LS
)paren
ques
c_cond
l_string|&quot;LS &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_IOC
)paren
ques
c_cond
l_string|&quot;IOC &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_ACTIVE
)paren
ques
c_cond
l_string|&quot;Active &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_STALLED
)paren
ques
c_cond
l_string|&quot;Stalled &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_DBUFERR
)paren
ques
c_cond
l_string|&quot;DataBufErr &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_BABBLE
)paren
ques
c_cond
l_string|&quot;Babble &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_NAK
)paren
ques
c_cond
l_string|&quot;NAK &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_CRCTIMEO
)paren
ques
c_cond
l_string|&quot;CRC/Timeo &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|td-&gt;status
op_amp
id|TD_CTRL_BITSTUFF
)paren
ques
c_cond
l_string|&quot;BitStuff &quot;
suffix:colon
l_string|&quot;&quot;
comma
id|td-&gt;status
op_amp
l_int|0x7ff
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|td-&gt;info
op_amp
l_int|0xff
)paren
(brace
r_case
id|USB_PID_SETUP
suffix:colon
id|spid
op_assign
l_string|&quot;SETUP&quot;
suffix:semicolon
r_break
suffix:semicolon
r_case
id|USB_PID_OUT
suffix:colon
id|spid
op_assign
l_string|&quot;OUT&quot;
suffix:semicolon
r_break
suffix:semicolon
r_case
id|USB_PID_IN
suffix:colon
id|spid
op_assign
l_string|&quot;IN&quot;
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|spid
op_assign
l_string|&quot;?&quot;
suffix:semicolon
r_break
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;MaxLen=%x DT%d EndPt=%x Dev=%x, PID=%x(%s) &quot;
comma
id|td-&gt;info
op_rshift
l_int|21
comma
(paren
(paren
id|td-&gt;info
op_rshift
l_int|19
)paren
op_amp
l_int|1
)paren
comma
(paren
id|td-&gt;info
op_rshift
l_int|15
)paren
op_amp
l_int|15
comma
(paren
id|td-&gt;info
op_rshift
l_int|8
)paren
op_amp
l_int|127
comma
(paren
id|td-&gt;info
op_amp
l_int|0xff
)paren
comma
id|spid
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;(buf=%08x)&bslash;n&quot;
comma
id|td-&gt;buffer
)paren
suffix:semicolon
)brace
DECL|function|uhci_show_sc
r_static
r_void
id|uhci_show_sc
c_func
(paren
r_int
id|port
comma
r_int
r_int
id|status
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;  stat%d     =     %04x   %s%s%s%s%s%s%s%s&bslash;n&quot;
comma
id|port
comma
id|status
comma
(paren
id|status
op_amp
id|USBPORTSC_SUSP
)paren
ques
c_cond
l_string|&quot;PortSuspend &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_PR
)paren
ques
c_cond
l_string|&quot;PortReset &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_LSDA
)paren
ques
c_cond
l_string|&quot;LowSpeed &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_RD
)paren
ques
c_cond
l_string|&quot;ResumeDetect &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_PEC
)paren
ques
c_cond
l_string|&quot;EnableChange &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_PE
)paren
ques
c_cond
l_string|&quot;PortEnabled &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_CSC
)paren
ques
c_cond
l_string|&quot;ConnectChange &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|status
op_amp
id|USBPORTSC_CCS
)paren
ques
c_cond
l_string|&quot;PortConnected &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
)brace
DECL|function|uhci_show_status
r_void
id|uhci_show_status
c_func
(paren
r_struct
id|uhci
op_star
id|uhci
)paren
(brace
r_int
r_int
id|io_addr
op_assign
id|uhci-&gt;io_addr
suffix:semicolon
r_int
r_int
id|usbcmd
comma
id|usbstat
comma
id|usbint
comma
id|usbfrnum
suffix:semicolon
r_int
r_int
id|flbaseadd
suffix:semicolon
r_int
r_char
id|sof
suffix:semicolon
r_int
r_int
id|portsc1
comma
id|portsc2
suffix:semicolon
id|usbcmd
op_assign
id|inw
c_func
(paren
id|io_addr
op_plus
l_int|0
)paren
suffix:semicolon
id|usbstat
op_assign
id|inw
c_func
(paren
id|io_addr
op_plus
l_int|2
)paren
suffix:semicolon
id|usbint
op_assign
id|inw
c_func
(paren
id|io_addr
op_plus
l_int|4
)paren
suffix:semicolon
id|usbfrnum
op_assign
id|inw
c_func
(paren
id|io_addr
op_plus
l_int|6
)paren
suffix:semicolon
id|flbaseadd
op_assign
id|inl
c_func
(paren
id|io_addr
op_plus
l_int|8
)paren
suffix:semicolon
id|sof
op_assign
id|inb
c_func
(paren
id|io_addr
op_plus
l_int|12
)paren
suffix:semicolon
id|portsc1
op_assign
id|inw
c_func
(paren
id|io_addr
op_plus
l_int|16
)paren
suffix:semicolon
id|portsc2
op_assign
id|inw
c_func
(paren
id|io_addr
op_plus
l_int|18
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  usbcmd    =     %04x   %s%s%s%s%s%s%s%s&bslash;n&quot;
comma
id|usbcmd
comma
(paren
id|usbcmd
op_amp
id|USBCMD_MAXP
)paren
ques
c_cond
l_string|&quot;Maxp64 &quot;
suffix:colon
l_string|&quot;Maxp32 &quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_CF
)paren
ques
c_cond
l_string|&quot;CF &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_SWDBG
)paren
ques
c_cond
l_string|&quot;SWDBG &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_FGR
)paren
ques
c_cond
l_string|&quot;FGR &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_EGSM
)paren
ques
c_cond
l_string|&quot;EGSM &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_GRESET
)paren
ques
c_cond
l_string|&quot;GRESET &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_HCRESET
)paren
ques
c_cond
l_string|&quot;HCRESET &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbcmd
op_amp
id|USBCMD_RS
)paren
ques
c_cond
l_string|&quot;RS &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  usbstat   =     %04x   %s%s%s%s%s%s&bslash;n&quot;
comma
id|usbstat
comma
(paren
id|usbstat
op_amp
id|USBSTS_HCH
)paren
ques
c_cond
l_string|&quot;HCHalted &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbstat
op_amp
id|USBSTS_HCPE
)paren
ques
c_cond
l_string|&quot;HostControllerProcessError &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbstat
op_amp
id|USBSTS_HSE
)paren
ques
c_cond
l_string|&quot;HostSystemError &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbstat
op_amp
id|USBSTS_RD
)paren
ques
c_cond
l_string|&quot;ResumeDetect &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbstat
op_amp
id|USBSTS_ERROR
)paren
ques
c_cond
l_string|&quot;USBError &quot;
suffix:colon
l_string|&quot;&quot;
comma
(paren
id|usbstat
op_amp
id|USBSTS_USBINT
)paren
ques
c_cond
l_string|&quot;USBINT &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  usbint    =     %04x&bslash;n&quot;
comma
id|usbint
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  usbfrnum  =   (%d)%03x&bslash;n&quot;
comma
(paren
id|usbfrnum
op_rshift
l_int|10
)paren
op_amp
l_int|1
comma
l_int|0xfff
op_amp
(paren
l_int|4
op_star
(paren
r_int
r_int
)paren
id|usbfrnum
)paren
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  flbaseadd = %08x&bslash;n&quot;
comma
id|flbaseadd
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  sof       =       %02x&bslash;n&quot;
comma
id|sof
)paren
suffix:semicolon
id|uhci_show_sc
c_func
(paren
l_int|1
comma
id|portsc1
)paren
suffix:semicolon
id|uhci_show_sc
c_func
(paren
l_int|2
comma
id|portsc2
)paren
suffix:semicolon
)brace
DECL|macro|uhci_link_to_qh
mdefine_line|#define uhci_link_to_qh(x) ((struct uhci_qh *) uhci_link_to_td(x))
DECL|function|uhci_link_to_td
r_struct
id|uhci_td
op_star
id|uhci_link_to_td
c_func
(paren
r_int
r_int
id|link
)paren
(brace
r_if
c_cond
(paren
id|link
op_amp
id|UHCI_PTR_TERM
)paren
r_return
l_int|NULL
suffix:semicolon
r_return
id|bus_to_virt
c_func
(paren
id|link
op_amp
op_complement
id|UHCI_PTR_BITS
)paren
suffix:semicolon
)brace
DECL|function|uhci_show_urb_queue
r_void
id|uhci_show_urb_queue
c_func
(paren
r_struct
id|urb
op_star
id|urb
)paren
(brace
r_struct
id|urb_priv
op_star
id|urbp
op_assign
id|urb-&gt;hcpriv
suffix:semicolon
r_struct
id|list_head
op_star
id|head
comma
op_star
id|tmp
suffix:semicolon
r_int
id|i
comma
id|checked
op_assign
l_int|0
comma
id|prevactive
op_assign
l_int|0
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;  URB [%p] urbp [%p]&bslash;n&quot;
comma
id|urb
comma
id|urbp
)paren
suffix:semicolon
r_if
c_cond
(paren
id|urbp-&gt;qh
)paren
id|printk
c_func
(paren
l_string|&quot;    QH [%p]&bslash;n&quot;
comma
id|urbp-&gt;qh
)paren
suffix:semicolon
r_else
id|printk
c_func
(paren
l_string|&quot;    QH [%p] element (%08x) link (%08x)&bslash;n&quot;
comma
id|urbp-&gt;qh
comma
id|urbp-&gt;qh-&gt;element
comma
id|urbp-&gt;qh-&gt;link
)paren
suffix:semicolon
id|i
op_assign
l_int|0
suffix:semicolon
id|head
op_assign
op_amp
id|urbp-&gt;list
suffix:semicolon
id|tmp
op_assign
id|head-&gt;next
suffix:semicolon
r_while
c_loop
(paren
id|tmp
op_ne
id|head
)paren
(brace
r_struct
id|uhci_td
op_star
id|td
op_assign
id|list_entry
c_func
(paren
id|tmp
comma
r_struct
id|uhci_td
comma
id|list
)paren
suffix:semicolon
id|tmp
op_assign
id|tmp-&gt;next
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;      td %d: [%p]&bslash;n&quot;
comma
id|i
op_increment
comma
id|td
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;      &quot;
)paren
suffix:semicolon
id|uhci_show_td
c_func
(paren
id|td
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i
OG
l_int|10
op_logical_and
op_logical_neg
id|checked
op_logical_and
id|prevactive
op_logical_and
id|tmp
op_ne
id|head
)paren
(brace
r_struct
id|list_head
op_star
id|ntmp
op_assign
id|tmp
suffix:semicolon
r_struct
id|uhci_td
op_star
id|ntd
op_assign
id|td
suffix:semicolon
r_int
id|active
op_assign
l_int|1
comma
id|ni
op_assign
id|i
suffix:semicolon
id|checked
op_assign
l_int|1
suffix:semicolon
r_while
c_loop
(paren
id|ntmp
op_ne
id|head
op_logical_and
id|ntmp-&gt;next
op_ne
id|head
op_logical_and
id|active
)paren
(brace
id|ntd
op_assign
id|list_entry
c_func
(paren
id|ntmp
comma
r_struct
id|uhci_td
comma
id|list
)paren
suffix:semicolon
id|ntmp
op_assign
id|ntmp-&gt;next
suffix:semicolon
id|active
op_assign
id|ntd-&gt;status
op_amp
id|TD_CTRL_ACTIVE
suffix:semicolon
id|ni
op_increment
suffix:semicolon
)brace
r_if
c_cond
(paren
id|active
op_logical_and
id|ni
OG
id|i
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;      [skipped %d active TD&squot;s]&bslash;n&quot;
comma
id|ni
op_minus
id|i
)paren
suffix:semicolon
id|tmp
op_assign
id|ntmp
suffix:semicolon
id|td
op_assign
id|ntd
suffix:semicolon
id|i
op_assign
id|ni
suffix:semicolon
)brace
)brace
id|prevactive
op_assign
id|td-&gt;status
op_amp
id|TD_CTRL_ACTIVE
suffix:semicolon
)brace
)brace
DECL|function|uhci_show_queue
r_void
id|uhci_show_queue
c_func
(paren
r_struct
id|uhci_qh
op_star
id|qh
)paren
(brace
r_struct
id|uhci_td
op_star
id|td
comma
op_star
id|first
suffix:semicolon
r_int
id|i
op_assign
l_int|0
comma
id|count
op_assign
l_int|1000
suffix:semicolon
r_if
c_cond
(paren
id|qh-&gt;element
op_amp
id|UHCI_PTR_QH
)paren
id|printk
c_func
(paren
l_string|&quot;      Element points to QH (bug?)&bslash;n&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|qh-&gt;element
op_amp
id|UHCI_PTR_DEPTH
)paren
id|printk
c_func
(paren
l_string|&quot;      Depth traverse&bslash;n&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|qh-&gt;element
op_amp
id|UHCI_PTR_TERM
)paren
id|printk
c_func
(paren
l_string|&quot;      Terminate&bslash;n&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
(paren
id|qh-&gt;element
op_amp
op_complement
id|UHCI_PTR_BITS
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;      td 0: [NULL]&bslash;n&quot;
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|first
op_assign
id|uhci_link_to_td
c_func
(paren
id|qh-&gt;element
)paren
suffix:semicolon
multiline_comment|/* Make sure it doesn&squot;t runaway */
r_for
c_loop
(paren
id|td
op_assign
id|first
suffix:semicolon
id|td
op_logical_and
id|count
OG
l_int|0
suffix:semicolon
id|td
op_assign
id|uhci_link_to_td
c_func
(paren
id|td-&gt;link
)paren
comma
op_decrement
id|count
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;      td %d: [%p]&bslash;n&quot;
comma
id|i
op_increment
comma
id|td
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;      &quot;
)paren
suffix:semicolon
id|uhci_show_td
c_func
(paren
id|td
)paren
suffix:semicolon
r_if
c_cond
(paren
id|td
op_eq
id|uhci_link_to_td
c_func
(paren
id|td-&gt;link
)paren
)paren
(brace
id|printk
c_func
(paren
id|KERN_ERR
l_string|&quot;td links to itself!&bslash;n&quot;
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
)brace
DECL|function|uhci_is_skeleton_td
r_static
r_int
id|uhci_is_skeleton_td
c_func
(paren
r_struct
id|uhci
op_star
id|uhci
comma
r_struct
id|uhci_td
op_star
id|td
)paren
(brace
r_int
id|j
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|UHCI_NUM_SKELTD
suffix:semicolon
id|j
op_increment
)paren
r_if
c_cond
(paren
id|td
op_eq
id|uhci-&gt;skeltd
op_plus
id|j
)paren
r_return
l_int|1
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|uhci_is_skeleton_qh
r_static
r_int
id|uhci_is_skeleton_qh
c_func
(paren
r_struct
id|uhci
op_star
id|uhci
comma
r_struct
id|uhci_qh
op_star
id|qh
)paren
(brace
r_int
id|j
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|UHCI_NUM_SKELQH
suffix:semicolon
id|j
op_increment
)paren
r_if
c_cond
(paren
id|qh
op_eq
id|uhci-&gt;skelqh
op_plus
id|j
)paren
r_return
l_int|1
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|variable|td_names
r_static
r_const
r_char
op_star
id|td_names
(braket
)braket
op_assign
(brace
l_string|&quot;interrupt1&quot;
comma
l_string|&quot;interrupt2&quot;
comma
l_string|&quot;interrupt4&quot;
comma
l_string|&quot;interrupt8&quot;
comma
l_string|&quot;interrupt16&quot;
comma
l_string|&quot;interrupt32&quot;
comma
l_string|&quot;interrupt64&quot;
comma
l_string|&quot;interrupt128&quot;
comma
l_string|&quot;interrupt256&quot;
)brace
suffix:semicolon
DECL|variable|qh_names
r_static
r_const
r_char
op_star
id|qh_names
(braket
)braket
op_assign
(brace
l_string|&quot;control&quot;
comma
l_string|&quot;bulk&quot;
)brace
suffix:semicolon
DECL|function|uhci_show_queues
r_void
id|uhci_show_queues
c_func
(paren
r_struct
id|uhci
op_star
id|uhci
)paren
(brace
r_int
id|i
comma
id|isqh
op_assign
l_int|0
suffix:semicolon
r_struct
id|uhci_qh
op_star
id|qh
suffix:semicolon
r_struct
id|uhci_td
op_star
id|td
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|UHCI_NUMFRAMES
suffix:semicolon
op_increment
id|i
)paren
(brace
r_int
id|shown
op_assign
l_int|0
suffix:semicolon
id|td
op_assign
id|uhci_link_to_td
c_func
(paren
id|uhci-&gt;fl-&gt;frame
(braket
id|i
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|td
)paren
id|isqh
op_assign
id|uhci-&gt;fl-&gt;frame
(braket
id|i
)braket
op_amp
id|UHCI_PTR_QH
suffix:semicolon
r_while
c_loop
(paren
id|td
op_logical_and
op_logical_neg
id|isqh
)paren
(brace
r_if
c_cond
(paren
id|uhci_is_skeleton_td
c_func
(paren
id|uhci
comma
id|td
)paren
)paren
r_break
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|shown
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;   Frame %d&bslash;n&quot;
comma
id|i
)paren
suffix:semicolon
id|shown
op_assign
l_int|1
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;[%p] &quot;
comma
id|td
)paren
suffix:semicolon
id|uhci_show_td
c_func
(paren
id|td
)paren
suffix:semicolon
id|td
op_assign
id|uhci_link_to_td
c_func
(paren
id|td-&gt;link
)paren
suffix:semicolon
r_if
c_cond
(paren
id|td
)paren
id|isqh
op_assign
id|td-&gt;link
op_amp
id|UHCI_PTR_QH
suffix:semicolon
)brace
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|UHCI_NUM_SKELTD
suffix:semicolon
op_increment
id|i
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;  %s: [%p] (%08x)&bslash;n&quot;
comma
id|td_names
(braket
id|i
)braket
comma
op_amp
id|uhci-&gt;skeltd
(braket
id|i
)braket
comma
id|uhci-&gt;skeltd
(braket
id|i
)braket
dot
id|link
)paren
suffix:semicolon
id|td
op_assign
id|uhci_link_to_td
c_func
(paren
id|uhci-&gt;skeltd
(braket
id|i
)braket
dot
id|link
)paren
suffix:semicolon
r_if
c_cond
(paren
id|td
)paren
id|isqh
op_assign
id|uhci-&gt;skeltd
(braket
id|i
)braket
dot
id|link
op_amp
id|UHCI_PTR_QH
suffix:semicolon
r_while
c_loop
(paren
id|td
op_logical_and
op_logical_neg
id|isqh
)paren
(brace
r_if
c_cond
(paren
id|uhci_is_skeleton_td
c_func
(paren
id|uhci
comma
id|td
)paren
)paren
r_break
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%p] &quot;
comma
id|td
)paren
suffix:semicolon
id|uhci_show_td
c_func
(paren
id|td
)paren
suffix:semicolon
id|td
op_assign
id|uhci_link_to_td
c_func
(paren
id|td-&gt;link
)paren
suffix:semicolon
r_if
c_cond
(paren
id|td
)paren
id|isqh
op_assign
id|td-&gt;link
op_amp
id|UHCI_PTR_QH
suffix:semicolon
)brace
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|UHCI_NUM_SKELQH
suffix:semicolon
op_increment
id|i
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;  %s: [%p] (%08x) (%08x)&bslash;n&quot;
comma
id|qh_names
(braket
id|i
)braket
comma
op_amp
id|uhci-&gt;skelqh
(braket
id|i
)braket
comma
id|uhci-&gt;skelqh
(braket
id|i
)braket
dot
id|link
comma
id|uhci-&gt;skelqh
(braket
id|i
)braket
dot
id|element
)paren
suffix:semicolon
id|qh
op_assign
id|uhci_link_to_qh
c_func
(paren
id|uhci-&gt;skelqh
(braket
id|i
)braket
dot
id|link
)paren
suffix:semicolon
r_for
c_loop
(paren
suffix:semicolon
id|qh
suffix:semicolon
id|qh
op_assign
id|uhci_link_to_qh
c_func
(paren
id|qh-&gt;link
)paren
)paren
(brace
r_if
c_cond
(paren
id|uhci_is_skeleton_qh
c_func
(paren
id|uhci
comma
id|qh
)paren
)paren
r_break
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;    [%p] (%08x) (%08x)&bslash;n&quot;
comma
id|qh
comma
id|qh-&gt;link
comma
id|qh-&gt;element
)paren
suffix:semicolon
id|uhci_show_queue
c_func
(paren
id|qh
)paren
suffix:semicolon
)brace
)brace
)brace
eof
