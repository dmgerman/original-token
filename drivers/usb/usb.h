macro_line|#ifndef __LINUX_USB_H
DECL|macro|__LINUX_USB_H
mdefine_line|#define __LINUX_USB_H
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
DECL|function|wait_ms
r_static
id|__inline__
r_void
id|wait_ms
c_func
(paren
r_int
r_int
id|ms
)paren
(brace
id|current-&gt;state
op_assign
id|TASK_UNINTERRUPTIBLE
suffix:semicolon
id|schedule_timeout
c_func
(paren
l_int|1
op_plus
id|ms
op_star
id|HZ
op_div
l_int|1000
)paren
suffix:semicolon
)brace
r_typedef
r_struct
(brace
DECL|member|requesttype
r_int
r_char
id|requesttype
suffix:semicolon
DECL|member|request
r_int
r_char
id|request
suffix:semicolon
DECL|member|value
r_int
r_int
id|value
suffix:semicolon
DECL|member|index
r_int
r_int
id|index
suffix:semicolon
DECL|member|length
r_int
r_int
id|length
suffix:semicolon
DECL|typedef|devrequest
)brace
id|devrequest
suffix:semicolon
multiline_comment|/*&n; * Class codes&n; */
DECL|macro|USB_CLASS_HUB
mdefine_line|#define USB_CLASS_HUB&t;&t;&t;9
multiline_comment|/*&n; * Descriptor types&n; */
DECL|macro|USB_DT_DEVICE
mdefine_line|#define USB_DT_DEVICE&t;&t;&t;0x01
DECL|macro|USB_DT_CONFIG
mdefine_line|#define USB_DT_CONFIG&t;&t;&t;0x02
DECL|macro|USB_DT_STRING
mdefine_line|#define USB_DT_STRING&t;&t;&t;0x03
DECL|macro|USB_DT_INTERFACE
mdefine_line|#define USB_DT_INTERFACE&t;&t;0x04
DECL|macro|USB_DT_ENDPOINT
mdefine_line|#define USB_DT_ENDPOINT&t;&t;&t;0x05
DECL|macro|USB_DT_HUB
mdefine_line|#define USB_DT_HUB&t;&t;&t;0x29
DECL|macro|USB_DT_HID
mdefine_line|#define USB_DT_HID&t;&t;&t;0x21
multiline_comment|/*&n; * Standard requests&n; */
DECL|macro|USB_REQ_GET_STATUS
mdefine_line|#define USB_REQ_GET_STATUS&t;&t;0x00
DECL|macro|USB_REQ_CLEAR_FEATURE
mdefine_line|#define USB_REQ_CLEAR_FEATURE&t;&t;0x01
multiline_comment|/* 0x02 is reserved */
DECL|macro|USB_REQ_SET_FEATURE
mdefine_line|#define USB_REQ_SET_FEATURE&t;&t;0x03
multiline_comment|/* 0x04 is reserved */
DECL|macro|USB_REQ_SET_ADDRESS
mdefine_line|#define USB_REQ_SET_ADDRESS&t;&t;0x05
DECL|macro|USB_REQ_GET_DESCRIPTOR
mdefine_line|#define USB_REQ_GET_DESCRIPTOR&t;&t;0x06
DECL|macro|USB_REQ_SET_DESCRIPTOR
mdefine_line|#define USB_REQ_SET_DESCRIPTOR&t;&t;0x07
DECL|macro|USB_REQ_GET_CONFIGURATION
mdefine_line|#define USB_REQ_GET_CONFIGURATION&t;0x08
DECL|macro|USB_REQ_SET_CONFIGURATION
mdefine_line|#define USB_REQ_SET_CONFIGURATION&t;0x09
DECL|macro|USB_REQ_GET_INTERFACE
mdefine_line|#define USB_REQ_GET_INTERFACE&t;&t;0x0A
DECL|macro|USB_REQ_SET_INTERFACE
mdefine_line|#define USB_REQ_SET_INTERFACE&t;&t;0x0B
DECL|macro|USB_REQ_SYNCH_FRAME
mdefine_line|#define USB_REQ_SYNCH_FRAME&t;&t;0x0C
multiline_comment|/*&n; * HIDD requests&n; */
DECL|macro|USB_REQ_GET_REPORT
mdefine_line|#define USB_REQ_GET_REPORT&t;&t;0x01
DECL|macro|USB_REQ_GET_IDLE
mdefine_line|#define USB_REQ_GET_IDLE&t;&t;0x02
DECL|macro|USB_REQ_GET_PROTOCOL
mdefine_line|#define USB_REQ_GET_PROTOCOL&t;&t;0x03
DECL|macro|USB_REQ_SET_REPORT
mdefine_line|#define USB_REQ_SET_REPORT&t;&t;0x09
DECL|macro|USB_REQ_SET_IDLE
mdefine_line|#define USB_REQ_SET_IDLE&t;&t;0x0A
DECL|macro|USB_REQ_SET_PROTOCOL
mdefine_line|#define USB_REQ_SET_PROTOCOL&t;&t;0x0B
DECL|macro|USB_TYPE_STANDARD
mdefine_line|#define USB_TYPE_STANDARD&t;&t;(0x00 &lt;&lt; 5)
DECL|macro|USB_TYPE_CLASS
mdefine_line|#define USB_TYPE_CLASS&t;&t;&t;(0x01 &lt;&lt; 5)
DECL|macro|USB_TYPE_VENDOR
mdefine_line|#define USB_TYPE_VENDOR&t;&t;&t;(0x02 &lt;&lt; 5)
DECL|macro|USB_TYPE_RESERVED
mdefine_line|#define USB_TYPE_RESERVED&t;&t;(0x03 &lt;&lt; 5)
DECL|macro|USB_RECIP_DEVICE
mdefine_line|#define USB_RECIP_DEVICE&t;&t;0x00
DECL|macro|USB_RECIP_INTERFACE
mdefine_line|#define USB_RECIP_INTERFACE&t;&t;0x01
DECL|macro|USB_RECIP_ENDPOINT
mdefine_line|#define USB_RECIP_ENDPOINT&t;&t;0x02
DECL|macro|USB_RECIP_OTHER
mdefine_line|#define USB_RECIP_OTHER&t;&t;&t;0x03
multiline_comment|/*&n; * Request target types.&n; */
DECL|macro|USB_RT_DEVICE
mdefine_line|#define USB_RT_DEVICE&t;&t;&t;0x00
DECL|macro|USB_RT_INTERFACE
mdefine_line|#define USB_RT_INTERFACE&t;&t;0x01
DECL|macro|USB_RT_ENDPOINT
mdefine_line|#define USB_RT_ENDPOINT&t;&t;&t;0x02
DECL|macro|USB_RT_HUB
mdefine_line|#define USB_RT_HUB&t;&t;&t;(USB_TYPE_CLASS | USB_RECIP_DEVICE)
DECL|macro|USB_RT_PORT
mdefine_line|#define USB_RT_PORT&t;&t;&t;(USB_TYPE_CLASS | USB_RECIP_OTHER)
DECL|macro|USB_RT_HIDD
mdefine_line|#define USB_RT_HIDD&t;&t;&t;(USB_TYPE_CLASS | USB_RECIP_INTERFACE)
multiline_comment|/*&n; * USB device number allocation bitmap. There&squot;s one bitmap&n; * per USB tree.&n; */
DECL|struct|usb_devmap
r_struct
id|usb_devmap
(brace
DECL|member|devicemap
r_int
r_int
id|devicemap
(braket
l_int|128
op_div
(paren
l_int|8
op_star
r_sizeof
(paren
r_int
r_int
)paren
)paren
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This is a USB device descriptor.&n; *&n; * USB device information&n; *&n; */
DECL|macro|USB_MAXCONFIG
mdefine_line|#define USB_MAXCONFIG&t;&t;8
DECL|macro|USB_MAXINTERFACES
mdefine_line|#define USB_MAXINTERFACES&t;32
DECL|macro|USB_MAXENDPOINTS
mdefine_line|#define USB_MAXENDPOINTS&t;32
DECL|struct|usb_device_descriptor
r_struct
id|usb_device_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bcdUSB
id|__u16
id|bcdUSB
suffix:semicolon
DECL|member|bDeviceClass
id|__u8
id|bDeviceClass
suffix:semicolon
DECL|member|bDeviceSubClass
id|__u8
id|bDeviceSubClass
suffix:semicolon
DECL|member|bDeviceProtocol
id|__u8
id|bDeviceProtocol
suffix:semicolon
DECL|member|bMaxPacketSize0
id|__u8
id|bMaxPacketSize0
suffix:semicolon
DECL|member|idVendor
id|__u16
id|idVendor
suffix:semicolon
DECL|member|idProduct
id|__u16
id|idProduct
suffix:semicolon
DECL|member|bcdDevice
id|__u16
id|bcdDevice
suffix:semicolon
DECL|member|iManufacturer
id|__u8
id|iManufacturer
suffix:semicolon
DECL|member|iProduct
id|__u8
id|iProduct
suffix:semicolon
DECL|member|iSerialNumber
id|__u8
id|iSerialNumber
suffix:semicolon
DECL|member|bNumConfigurations
id|__u8
id|bNumConfigurations
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Endpoint descriptor */
DECL|struct|usb_endpoint_descriptor
r_struct
id|usb_endpoint_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bEndpointAddress
id|__u8
id|bEndpointAddress
suffix:semicolon
DECL|member|bmAttributes
id|__u8
id|bmAttributes
suffix:semicolon
DECL|member|wMaxPacketSize
id|__u16
id|wMaxPacketSize
suffix:semicolon
DECL|member|bInterval
id|__u8
id|bInterval
suffix:semicolon
DECL|member|audio
r_void
op_star
id|audio
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Interface descriptor */
DECL|struct|usb_interface_descriptor
r_struct
id|usb_interface_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bInterfaceNumber
id|__u8
id|bInterfaceNumber
suffix:semicolon
DECL|member|bAlternateSetting
id|__u8
id|bAlternateSetting
suffix:semicolon
DECL|member|bNumEndpoints
id|__u8
id|bNumEndpoints
suffix:semicolon
DECL|member|bInterfaceClass
id|__u8
id|bInterfaceClass
suffix:semicolon
DECL|member|bInterfaceSubClass
id|__u8
id|bInterfaceSubClass
suffix:semicolon
DECL|member|bInterfaceProtocol
id|__u8
id|bInterfaceProtocol
suffix:semicolon
DECL|member|iInterface
id|__u8
id|iInterface
suffix:semicolon
DECL|member|endpoint
r_struct
id|usb_endpoint_descriptor
op_star
id|endpoint
suffix:semicolon
DECL|member|audio
r_void
op_star
id|audio
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Configuration descriptor information.. */
DECL|struct|usb_config_descriptor
r_struct
id|usb_config_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|wTotalLength
id|__u16
id|wTotalLength
suffix:semicolon
DECL|member|bNumInterfaces
id|__u8
id|bNumInterfaces
suffix:semicolon
DECL|member|bConfigurationValue
id|__u8
id|bConfigurationValue
suffix:semicolon
DECL|member|iConfiguration
id|__u8
id|iConfiguration
suffix:semicolon
DECL|member|bmAttributes
id|__u8
id|bmAttributes
suffix:semicolon
DECL|member|MaxPower
id|__u8
id|MaxPower
suffix:semicolon
DECL|member|interface
r_struct
id|usb_interface_descriptor
op_star
id|interface
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* String descriptor */
DECL|struct|usb_string_descriptor
r_struct
id|usb_string_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* Hub descriptor */
DECL|struct|usb_hub_descriptor
r_struct
id|usb_hub_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bNbrPorts
id|__u8
id|bNbrPorts
suffix:semicolon
DECL|member|wHubCharacteristics
id|__u16
id|wHubCharacteristics
suffix:semicolon
DECL|member|bPwrOn2PwrGood
id|__u8
id|bPwrOn2PwrGood
suffix:semicolon
DECL|member|bHubContrCurrent
id|__u8
id|bHubContrCurrent
suffix:semicolon
multiline_comment|/* DeviceRemovable and PortPwrCtrlMask want to be variable-length &n;&t;   bitmaps that hold max 256 entries, but for now they&squot;re ignored */
DECL|member|filler
id|__u8
id|filler
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|usb_device
suffix:semicolon
DECL|struct|usb_driver
r_struct
id|usb_driver
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|probe
r_int
(paren
op_star
id|probe
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|disconnect
r_void
(paren
op_star
id|disconnect
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|driver_list
r_struct
id|list_head
id|driver_list
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Pointer to a device endpoint interrupt function -greg&n; *   Parameters:&n; *     int status - This needs to be defined.  Right now each HCD&n; *         passes different transfer status bits back.  Don&squot;t use it&n; *         until we come up with a common meaning.&n; *     void *buffer - This is a pointer to the data used in this&n; *         USB transfer.&n; *     void *dev_id - This is a user defined pointer set when the IRQ&n; *         is requested that is passed back.&n; */
DECL|typedef|usb_device_irq
r_typedef
r_int
(paren
op_star
id|usb_device_irq
)paren
(paren
r_int
comma
r_void
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|struct|usb_operations
r_struct
id|usb_operations
(brace
DECL|member|allocate
r_struct
id|usb_device
op_star
(paren
op_star
id|allocate
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|deallocate
r_int
(paren
op_star
id|deallocate
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|control_msg
r_int
(paren
op_star
id|control_msg
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
r_void
op_star
comma
r_void
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|request_irq
r_int
(paren
op_star
id|request_irq
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|usb_device_irq
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Allocated per bus we have&n; */
DECL|struct|usb_bus
r_struct
id|usb_bus
(brace
DECL|member|devmap
r_struct
id|usb_devmap
id|devmap
suffix:semicolon
multiline_comment|/* Device map */
DECL|member|op
r_struct
id|usb_operations
op_star
id|op
suffix:semicolon
multiline_comment|/* Operations (specific to the HC) */
DECL|member|root_hub
r_struct
id|usb_device
op_star
id|root_hub
suffix:semicolon
multiline_comment|/* Root hub */
DECL|member|hcpriv
r_void
op_star
id|hcpriv
suffix:semicolon
multiline_comment|/* Host Controller private data */
)brace
suffix:semicolon
DECL|macro|USB_MAXCHILDREN
mdefine_line|#define USB_MAXCHILDREN (8)
DECL|struct|usb_device
r_struct
id|usb_device
(brace
DECL|member|devnum
r_int
id|devnum
suffix:semicolon
multiline_comment|/* Device number on USB bus */
DECL|member|slow
r_int
id|slow
suffix:semicolon
multiline_comment|/* Slow device? */
DECL|member|maxpacketsize
r_int
id|maxpacketsize
suffix:semicolon
multiline_comment|/* Maximum packet size */
DECL|member|bus
r_struct
id|usb_bus
op_star
id|bus
suffix:semicolon
multiline_comment|/* Bus we&squot;re apart of */
DECL|member|driver
r_struct
id|usb_driver
op_star
id|driver
suffix:semicolon
multiline_comment|/* Driver */
DECL|member|descriptor
r_struct
id|usb_device_descriptor
id|descriptor
suffix:semicolon
multiline_comment|/* Descriptor */
DECL|member|config
r_struct
id|usb_config_descriptor
op_star
id|config
suffix:semicolon
multiline_comment|/* All of the configs */
DECL|member|parent
r_struct
id|usb_device
op_star
id|parent
suffix:semicolon
multiline_comment|/*&n;&t; * Child devices - these can be either new devices&n;&t; * (if this is a hub device), or different instances&n;&t; * of this same device.&n;&t; *&n;&t; * Each instance needs its own set of data structuctures.&n;&t; */
DECL|member|maxchild
r_int
id|maxchild
suffix:semicolon
multiline_comment|/* Number of ports if hub */
DECL|member|children
r_struct
id|usb_device
op_star
id|children
(braket
id|USB_MAXCHILDREN
)braket
suffix:semicolon
DECL|member|hcpriv
r_void
op_star
id|hcpriv
suffix:semicolon
multiline_comment|/* Host Controller private data */
DECL|member|private
r_void
op_star
r_private
suffix:semicolon
multiline_comment|/* Upper layer private data */
)brace
suffix:semicolon
r_extern
r_int
id|usb_register
c_func
(paren
r_struct
id|usb_driver
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_deregister
c_func
(paren
r_struct
id|usb_driver
op_star
)paren
suffix:semicolon
r_extern
r_int
id|usb_request_irq
c_func
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|usb_device_irq
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_init_root_hub
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|usb_connect
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|usb_disconnect
c_func
(paren
r_struct
id|usb_device
op_star
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_device_descriptor
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_int
id|usb_parse_configuration
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_void
op_star
id|buf
comma
r_int
id|len
)paren
suffix:semicolon
multiline_comment|/*&n; * Calling this entity a &quot;pipe&quot; is glorifying it. A USB pipe&n; * is something embarrassingly simple: it basically consists&n; * of the following information:&n; *  - device number (7 bits)&n; *  - endpoint number (4 bits)&n; *  - current Data0/1 state (1 bit)&n; *  - direction (1 bit)&n; *  - speed (1 bit)&n; *  - max packet size (2 bits: 8, 16, 32 or 64)&n; *  - pipe type (2 bits: control, interrupt, bulk, isochronous)&n; *&n; * That&squot;s 18 bits. Really. Nothing more. And the USB people have&n; * documented these eighteen bits as some kind of glorious&n; * virtual data structure.&n; *&n; * Let&squot;s not fall in that trap. We&squot;ll just encode it as a simple&n; * unsigned int. The encoding is:&n; *&n; *  - device:&t;&t;bits 8-14&n; *  - endpoint:&t;&t;bits 15-18&n; *  - Data0/1:&t;&t;bit 19&n; *  - direction:&t;bit 7&t;&t;(0 = Host-to-Device, 1 = Device-to-Host)&n; *  - speed:&t;&t;bit 26&t;&t;(0 = High, 1 = Low Speed)&n; *  - max size:&t;&t;bits 0-1&t;(00 = 8, 01 = 16, 10 = 32, 11 = 64)&n; *  - pipe type:&t;bits 30-31&t;(00 = isochronous, 01 = interrupt, 10 = control, 11 = bulk)&n; *&n; * Why? Because it&squot;s arbitrary, and whatever encoding we select is really&n; * up to us. This one happens to share a lot of bit positions with the UCHI&n; * specification, so that much of the uhci driver can just mask the bits&n; * appropriately.&n; */
DECL|macro|usb_maxpacket
mdefine_line|#define usb_maxpacket(pipe)&t;(8 &lt;&lt; ((pipe) &amp; 3))
DECL|macro|usb_packetid
mdefine_line|#define usb_packetid(pipe)&t;(((pipe) &amp; 0x80) ? 0x69 : 0xE1)
DECL|macro|usb_pipedevice
mdefine_line|#define usb_pipedevice(pipe)&t;(((pipe) &gt;&gt; 8) &amp; 0x7f)
DECL|macro|usb_pipeendpoint
mdefine_line|#define usb_pipeendpoint(pipe)&t;(((pipe) &gt;&gt; 15) &amp; 0xf)
DECL|macro|usb_pipedata
mdefine_line|#define usb_pipedata(pipe)&t;(((pipe) &gt;&gt; 19) &amp; 1)
DECL|macro|usb_pipeout
mdefine_line|#define usb_pipeout(pipe)&t;(((pipe) &amp; 0x80) == 0)
DECL|macro|usb_pipeslow
mdefine_line|#define usb_pipeslow(pipe)&t;(((pipe) &gt;&gt; 26) &amp; 1)
DECL|macro|usb_pipetype
mdefine_line|#define usb_pipetype(pipe)&t;(((pipe) &gt;&gt; 30) &amp; 3)
DECL|macro|usb_pipeisoc
mdefine_line|#define usb_pipeisoc(pipe)&t;(usb_pipetype((pipe)) == 0)
DECL|macro|usb_pipeint
mdefine_line|#define usb_pipeint(pipe)&t;(usb_pipetype((pipe)) == 1)
DECL|macro|usb_pipecontrol
mdefine_line|#define usb_pipecontrol(pipe)&t;(usb_pipetype((pipe)) == 2)
DECL|macro|usb_pipebulk
mdefine_line|#define usb_pipebulk(pipe)&t;(usb_pipetype((pipe)) == 3)
DECL|macro|usb_pipe_endpdev
mdefine_line|#define usb_pipe_endpdev(pipe)&t;(((pipe) &gt;&gt; 8) &amp; 0x7ff)
DECL|function|__create_pipe
r_static
r_inline
r_int
r_int
id|__create_pipe
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
r_int
id|endpoint
)paren
(brace
r_return
(paren
id|dev-&gt;devnum
op_lshift
l_int|8
)paren
op_or
(paren
id|endpoint
op_lshift
l_int|15
)paren
op_or
(paren
id|dev-&gt;slow
op_lshift
l_int|26
)paren
op_or
id|dev-&gt;maxpacketsize
suffix:semicolon
)brace
DECL|function|__default_pipe
r_static
r_inline
r_int
r_int
id|__default_pipe
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
(brace
r_return
(paren
id|dev-&gt;slow
op_lshift
l_int|26
)paren
suffix:semicolon
)brace
multiline_comment|/* Create control pipes.. */
DECL|macro|usb_sndctrlpipe
mdefine_line|#define usb_sndctrlpipe(dev,endpoint)&t;((2 &lt;&lt; 30) | __create_pipe(dev,endpoint))
DECL|macro|usb_rcvctrlpipe
mdefine_line|#define usb_rcvctrlpipe(dev,endpoint)&t;((2 &lt;&lt; 30) | __create_pipe(dev,endpoint) | 0x80)
DECL|macro|usb_snddefctrl
mdefine_line|#define usb_snddefctrl(dev)&t;&t;((2 &lt;&lt; 30) | __default_pipe(dev))
DECL|macro|usb_rcvdefctrl
mdefine_line|#define usb_rcvdefctrl(dev)&t;&t;((2 &lt;&lt; 30) | __default_pipe(dev) | 0x80)
multiline_comment|/* Create .. */
multiline_comment|/*&n; * Send and receive control messages..&n; */
r_void
id|usb_new_device
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_set_address
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_get_descriptor
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
r_char
id|desctype
comma
r_int
r_char
id|descindex
comma
r_void
op_star
id|buf
comma
r_int
id|size
)paren
suffix:semicolon
r_int
id|usb_get_device_descriptor
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_get_hub_descriptor
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_void
op_star
id|data
comma
r_int
id|size
)paren
suffix:semicolon
r_int
id|usb_clear_port_feature
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|port
comma
r_int
id|feature
)paren
suffix:semicolon
r_int
id|usb_set_port_feature
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|port
comma
r_int
id|feature
)paren
suffix:semicolon
r_int
id|usb_get_hub_status
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_int
id|usb_get_port_status
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|port
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_int
id|usb_get_protocol
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_set_protocol
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|protocol
)paren
suffix:semicolon
r_int
id|usb_set_idle
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|duration
comma
r_int
id|report_id
)paren
suffix:semicolon
r_int
id|usb_set_configuration
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|configuration
)paren
suffix:semicolon
r_int
id|usb_get_report
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/*&n; * Debugging helpers..&n; */
r_void
id|usb_show_device_descriptor
c_func
(paren
r_struct
id|usb_device_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_config_descriptor
c_func
(paren
r_struct
id|usb_config_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_interface_descriptor
c_func
(paren
r_struct
id|usb_interface_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_endpoint_descriptor
c_func
(paren
r_struct
id|usb_endpoint_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_hub_descriptor
c_func
(paren
r_struct
id|usb_hub_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_device
c_func
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Audio parsing helpers&n; */
macro_line|#ifdef CONFIG_USB_AUDIO
r_void
id|usb_audio_interface
c_func
(paren
r_struct
id|usb_interface_descriptor
op_star
comma
id|u8
op_star
)paren
suffix:semicolon
r_void
id|usb_audio_endpoint
c_func
(paren
r_struct
id|usb_endpoint_descriptor
op_star
comma
id|u8
op_star
)paren
suffix:semicolon
macro_line|#else
DECL|function|usb_audio_interface
r_extern
r_inline
r_void
id|usb_audio_interface
c_func
(paren
r_struct
id|usb_interface_descriptor
op_star
id|interface
comma
id|u8
op_star
id|data
)paren
(brace
)brace
DECL|function|usb_audio_endpoint
r_extern
r_inline
r_void
id|usb_audio_endpoint
c_func
(paren
r_struct
id|usb_endpoint_descriptor
op_star
id|interface
comma
id|u8
op_star
id|data
)paren
(brace
)brace
macro_line|#endif
macro_line|#endif
eof
