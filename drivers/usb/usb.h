macro_line|#ifndef __LINUX_USB_H
DECL|macro|__LINUX_USB_H
mdefine_line|#define __LINUX_USB_H
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/ioctl.h&gt;
multiline_comment|/* USB constants */
multiline_comment|/*&n; * Device and/or Interface Class codes&n; */
DECL|macro|USB_CLASS_PER_INTERFACE
mdefine_line|#define USB_CLASS_PER_INTERFACE&t;&t;0&t;/* for DeviceClass */
DECL|macro|USB_CLASS_AUDIO
mdefine_line|#define USB_CLASS_AUDIO&t;&t;&t;1
DECL|macro|USB_CLASS_COMM
mdefine_line|#define USB_CLASS_COMM&t;&t;&t;2
DECL|macro|USB_CLASS_HID
mdefine_line|#define USB_CLASS_HID&t;&t;&t;3
DECL|macro|USB_CLASS_PRINTER
mdefine_line|#define USB_CLASS_PRINTER&t;&t;7
DECL|macro|USB_CLASS_MASS_STORAGE
mdefine_line|#define USB_CLASS_MASS_STORAGE&t;&t;8
DECL|macro|USB_CLASS_HUB
mdefine_line|#define USB_CLASS_HUB&t;&t;&t;9
DECL|macro|USB_CLASS_DATA
mdefine_line|#define USB_CLASS_DATA&t;&t;&t;10
DECL|macro|USB_CLASS_VENDOR_SPEC
mdefine_line|#define USB_CLASS_VENDOR_SPEC&t;&t;0xff
multiline_comment|/*&n; * Descriptor types&n; */
DECL|macro|USB_DT_DEVICE
mdefine_line|#define USB_DT_DEVICE&t;&t;&t;0x01
DECL|macro|USB_DT_CONFIG
mdefine_line|#define USB_DT_CONFIG&t;&t;&t;0x02
DECL|macro|USB_DT_STRING
mdefine_line|#define USB_DT_STRING&t;&t;&t;0x03
DECL|macro|USB_DT_INTERFACE
mdefine_line|#define USB_DT_INTERFACE&t;&t;0x04
DECL|macro|USB_DT_ENDPOINT
mdefine_line|#define USB_DT_ENDPOINT&t;&t;&t;0x05
DECL|macro|USB_DT_HUB
mdefine_line|#define USB_DT_HUB&t;&t;&t;0x29
DECL|macro|USB_DT_HID
mdefine_line|#define USB_DT_HID&t;&t;&t;0x21
DECL|macro|USB_DT_REPORT
mdefine_line|#define USB_DT_REPORT&t;&t;&t;0x22
DECL|macro|USB_DT_PHYSICAL
mdefine_line|#define USB_DT_PHYSICAL&t;&t;&t;0x23
multiline_comment|/*&n; * Descriptor sizes per descriptor type&n; */
DECL|macro|USB_DT_DEVICE_SIZE
mdefine_line|#define USB_DT_DEVICE_SIZE&t;&t;18
DECL|macro|USB_DT_CONFIG_SIZE
mdefine_line|#define USB_DT_CONFIG_SIZE&t;&t;9
DECL|macro|USB_DT_INTERFACE_SIZE
mdefine_line|#define USB_DT_INTERFACE_SIZE&t;&t;9
DECL|macro|USB_DT_ENDPOINT_SIZE
mdefine_line|#define USB_DT_ENDPOINT_SIZE&t;&t;7
DECL|macro|USB_DT_ENDPOINT_AUDIO_SIZE
mdefine_line|#define USB_DT_ENDPOINT_AUDIO_SIZE&t;9&t;/* Audio extension */
DECL|macro|USB_DT_HUB_NONVAR_SIZE
mdefine_line|#define USB_DT_HUB_NONVAR_SIZE&t;&t;7
multiline_comment|/*&n; * USB Request Type and Endpoint Directions&n; */
DECL|macro|USB_DIR_OUT
mdefine_line|#define USB_DIR_OUT&t;&t;&t;0
DECL|macro|USB_DIR_IN
mdefine_line|#define USB_DIR_IN&t;&t;&t;0x80
multiline_comment|/*&n; * USB Packet IDs (PIDs)&n; */
DECL|macro|USB_PID_OUT
mdefine_line|#define USB_PID_OUT&t;&t;&t;0xe1
DECL|macro|USB_PID_IN
mdefine_line|#define USB_PID_IN&t;&t;&t;0x69
DECL|macro|USB_PID_SETUP
mdefine_line|#define USB_PID_SETUP&t;&t;&t;0x2d
multiline_comment|/*&n; * Standard requests&n; */
DECL|macro|USB_REQ_GET_STATUS
mdefine_line|#define USB_REQ_GET_STATUS&t;&t;0x00
DECL|macro|USB_REQ_CLEAR_FEATURE
mdefine_line|#define USB_REQ_CLEAR_FEATURE&t;&t;0x01
multiline_comment|/* 0x02 is reserved */
DECL|macro|USB_REQ_SET_FEATURE
mdefine_line|#define USB_REQ_SET_FEATURE&t;&t;0x03
multiline_comment|/* 0x04 is reserved */
DECL|macro|USB_REQ_SET_ADDRESS
mdefine_line|#define USB_REQ_SET_ADDRESS&t;&t;0x05
DECL|macro|USB_REQ_GET_DESCRIPTOR
mdefine_line|#define USB_REQ_GET_DESCRIPTOR&t;&t;0x06
DECL|macro|USB_REQ_SET_DESCRIPTOR
mdefine_line|#define USB_REQ_SET_DESCRIPTOR&t;&t;0x07
DECL|macro|USB_REQ_GET_CONFIGURATION
mdefine_line|#define USB_REQ_GET_CONFIGURATION&t;0x08
DECL|macro|USB_REQ_SET_CONFIGURATION
mdefine_line|#define USB_REQ_SET_CONFIGURATION&t;0x09
DECL|macro|USB_REQ_GET_INTERFACE
mdefine_line|#define USB_REQ_GET_INTERFACE&t;&t;0x0A
DECL|macro|USB_REQ_SET_INTERFACE
mdefine_line|#define USB_REQ_SET_INTERFACE&t;&t;0x0B
DECL|macro|USB_REQ_SYNCH_FRAME
mdefine_line|#define USB_REQ_SYNCH_FRAME&t;&t;0x0C
multiline_comment|/*&n; * HIDD requests&n; */
DECL|macro|USB_REQ_GET_REPORT
mdefine_line|#define USB_REQ_GET_REPORT&t;&t;0x01
DECL|macro|USB_REQ_GET_IDLE
mdefine_line|#define USB_REQ_GET_IDLE&t;&t;0x02
DECL|macro|USB_REQ_GET_PROTOCOL
mdefine_line|#define USB_REQ_GET_PROTOCOL&t;&t;0x03
DECL|macro|USB_REQ_SET_REPORT
mdefine_line|#define USB_REQ_SET_REPORT&t;&t;0x09
DECL|macro|USB_REQ_SET_IDLE
mdefine_line|#define USB_REQ_SET_IDLE&t;&t;0x0A
DECL|macro|USB_REQ_SET_PROTOCOL
mdefine_line|#define USB_REQ_SET_PROTOCOL&t;&t;0x0B
DECL|macro|USB_TYPE_STANDARD
mdefine_line|#define USB_TYPE_STANDARD&t;&t;(0x00 &lt;&lt; 5)
DECL|macro|USB_TYPE_CLASS
mdefine_line|#define USB_TYPE_CLASS&t;&t;&t;(0x01 &lt;&lt; 5)
DECL|macro|USB_TYPE_VENDOR
mdefine_line|#define USB_TYPE_VENDOR&t;&t;&t;(0x02 &lt;&lt; 5)
DECL|macro|USB_TYPE_RESERVED
mdefine_line|#define USB_TYPE_RESERVED&t;&t;(0x03 &lt;&lt; 5)
DECL|macro|USB_RECIP_DEVICE
mdefine_line|#define USB_RECIP_DEVICE&t;&t;0x00
DECL|macro|USB_RECIP_INTERFACE
mdefine_line|#define USB_RECIP_INTERFACE&t;&t;0x01
DECL|macro|USB_RECIP_ENDPOINT
mdefine_line|#define USB_RECIP_ENDPOINT&t;&t;0x02
DECL|macro|USB_RECIP_OTHER
mdefine_line|#define USB_RECIP_OTHER&t;&t;&t;0x03
DECL|macro|USB_HID_RPT_INPUT
mdefine_line|#define USB_HID_RPT_INPUT&t;&t;0x01
DECL|macro|USB_HID_RPT_OUTPUT
mdefine_line|#define USB_HID_RPT_OUTPUT&t;&t;0x02
DECL|macro|USB_HID_RPT_FEATURE
mdefine_line|#define USB_HID_RPT_FEATURE&t;&t;0x03
multiline_comment|/*&n; * Request target types.&n; */
DECL|macro|USB_RT_DEVICE
mdefine_line|#define USB_RT_DEVICE&t;&t;&t;0x00
DECL|macro|USB_RT_INTERFACE
mdefine_line|#define USB_RT_INTERFACE&t;&t;0x01
DECL|macro|USB_RT_ENDPOINT
mdefine_line|#define USB_RT_ENDPOINT&t;&t;&t;0x02
DECL|macro|USB_RT_HUB
mdefine_line|#define USB_RT_HUB&t;&t;&t;(USB_TYPE_CLASS | USB_RECIP_DEVICE)
DECL|macro|USB_RT_PORT
mdefine_line|#define USB_RT_PORT&t;&t;&t;(USB_TYPE_CLASS | USB_RECIP_OTHER)
DECL|macro|USB_RT_HIDD
mdefine_line|#define USB_RT_HIDD&t;&t;&t;(USB_TYPE_CLASS | USB_RECIP_INTERFACE)
multiline_comment|/* /proc/bus/usb/xxx/yyy ioctl codes */
DECL|struct|usb_proc_ctrltransfer
r_struct
id|usb_proc_ctrltransfer
(brace
DECL|member|requesttype
id|__u8
id|requesttype
suffix:semicolon
DECL|member|request
id|__u8
id|request
suffix:semicolon
DECL|member|value
id|__u16
id|value
suffix:semicolon
DECL|member|index
id|__u16
id|index
suffix:semicolon
DECL|member|length
id|__u16
id|length
suffix:semicolon
multiline_comment|/* pointer to data */
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|USB_PROC_CONTROL
mdefine_line|#define USB_PROC_CONTROL        _IOWR(&squot;U&squot;, 0, struct usb_proc_ctrltransfer)
DECL|struct|usb_proc_bulktransfer
r_struct
id|usb_proc_bulktransfer
(brace
DECL|member|ep
r_int
r_int
id|ep
suffix:semicolon
DECL|member|len
r_int
r_int
id|len
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|USB_PROC_BULK
mdefine_line|#define USB_PROC_BULK           _IOWR(&squot;U&squot;, 2, struct usb_proc_bulktransfer)
DECL|macro|USB_PROC_RESETEP
mdefine_line|#define USB_PROC_RESETEP        _IOR(&squot;U&squot;, 3, unsigned int)
DECL|struct|usb_proc_setinterface
r_struct
id|usb_proc_setinterface
(brace
DECL|member|interface
r_int
r_int
id|interface
suffix:semicolon
DECL|member|altsetting
r_int
r_int
id|altsetting
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|USB_PROC_SETINTERFACE
mdefine_line|#define USB_PROC_SETINTERFACE   _IOR(&squot;U&squot;, 4, struct usb_proc_setinterface)
macro_line|#ifdef __KERNEL__
macro_line|#include &lt;linux/config.h&gt;
macro_line|#include &lt;linux/list.h&gt;
macro_line|#include &lt;linux/sched.h&gt;
r_extern
r_int
id|usb_hub_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|usb_kbd_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|usb_cpia_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|usb_mouse_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_int
id|usb_printer_init
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|usb_hub_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
r_extern
r_void
id|usb_mouse_cleanup
c_func
(paren
r_void
)paren
suffix:semicolon
DECL|function|wait_ms
r_static
id|__inline__
r_void
id|wait_ms
c_func
(paren
r_int
r_int
id|ms
)paren
(brace
id|current-&gt;state
op_assign
id|TASK_UNINTERRUPTIBLE
suffix:semicolon
id|schedule_timeout
c_func
(paren
l_int|1
op_plus
id|ms
op_star
id|HZ
op_div
l_int|1000
)paren
suffix:semicolon
)brace
r_typedef
r_struct
(brace
DECL|member|requesttype
id|__u8
id|requesttype
suffix:semicolon
DECL|member|request
id|__u8
id|request
suffix:semicolon
DECL|member|value
id|__u16
id|value
suffix:semicolon
DECL|member|index
id|__u16
id|index
suffix:semicolon
DECL|member|length
id|__u16
id|length
suffix:semicolon
DECL|typedef|devrequest
)brace
id|devrequest
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* &n; * Status codes (these follow OHCI controllers condition codes)&n; */
DECL|macro|USB_ST_NOERROR
mdefine_line|#define USB_ST_NOERROR&t;&t;0x0
DECL|macro|USB_ST_CRC
mdefine_line|#define USB_ST_CRC&t;&t;0x1
DECL|macro|USB_ST_BITSTUFF
mdefine_line|#define USB_ST_BITSTUFF&t;&t;0x2
DECL|macro|USB_ST_DTMISMATCH
mdefine_line|#define USB_ST_DTMISMATCH&t;0x3&t;/* data toggle mismatch */
DECL|macro|USB_ST_STALL
mdefine_line|#define USB_ST_STALL&t;&t;0x4
DECL|macro|USB_ST_NORESPONSE
mdefine_line|#define USB_ST_NORESPONSE&t;0x5&t;/* device not responding/handshaking */
DECL|macro|USB_ST_PIDCHECK
mdefine_line|#define USB_ST_PIDCHECK&t;&t;0x6&t;/* Check bits on PID failed */
DECL|macro|USB_ST_PIDUNDEF
mdefine_line|#define USB_ST_PIDUNDEF&t;&t;0x7&t;/* PID unexpected/undefined */
DECL|macro|USB_ST_DATAOVERRUN
mdefine_line|#define USB_ST_DATAOVERRUN&t;0x8
DECL|macro|USB_ST_DATAUNDERRUN
mdefine_line|#define USB_ST_DATAUNDERRUN&t;0x9
DECL|macro|USB_ST_RESERVED1
mdefine_line|#define USB_ST_RESERVED1&t;0xA
DECL|macro|USB_ST_RESERVED2
mdefine_line|#define USB_ST_RESERVED2&t;0xB
DECL|macro|USB_ST_BUFFEROVERRUN
mdefine_line|#define USB_ST_BUFFEROVERRUN&t;0xC
DECL|macro|USB_ST_BUFFERUNDERRUN
mdefine_line|#define USB_ST_BUFFERUNDERRUN&t;0xD
DECL|macro|USB_ST_RESERVED3
mdefine_line|#define USB_ST_RESERVED3&t;0xE
DECL|macro|USB_ST_RESERVED4
mdefine_line|#define USB_ST_RESERVED4&t;0xF
multiline_comment|/* internal errors */
DECL|macro|USB_ST_REMOVED
mdefine_line|#define USB_ST_REMOVED&t;&t;0x100
DECL|macro|USB_ST_TIMEOUT
mdefine_line|#define USB_ST_TIMEOUT&t;&t;0x110
DECL|macro|USB_ST_INTERNALERROR
mdefine_line|#define USB_ST_INTERNALERROR&t;-1
DECL|macro|USB_ST_NOTSUPPORTED
mdefine_line|#define USB_ST_NOTSUPPORTED&t;-2
DECL|macro|USB_ST_BANDWIDTH_ERROR
mdefine_line|#define USB_ST_BANDWIDTH_ERROR&t;-3
multiline_comment|/*&n; * USB device number allocation bitmap. There&squot;s one bitmap&n; * per USB tree.&n; */
DECL|struct|usb_devmap
r_struct
id|usb_devmap
(brace
DECL|member|devicemap
r_int
r_int
id|devicemap
(braket
l_int|128
op_div
(paren
l_int|8
op_star
r_sizeof
(paren
r_int
r_int
)paren
)paren
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * This is a USB device descriptor.&n; *&n; * USB device information&n; */
multiline_comment|/* Everything but the endpoint maximums are aribtrary */
DECL|macro|USB_MAXCONFIG
mdefine_line|#define USB_MAXCONFIG&t;&t;8
DECL|macro|USB_MAXALTSETTING
mdefine_line|#define USB_MAXALTSETTING&t;16
DECL|macro|USB_MAXINTERFACES
mdefine_line|#define USB_MAXINTERFACES&t;32
DECL|macro|USB_MAXENDPOINTS
mdefine_line|#define USB_MAXENDPOINTS&t;32
multiline_comment|/* All standard descriptors have these 2 fields in common */
DECL|struct|usb_descriptor_header
r_struct
id|usb_descriptor_header
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* Device descriptor */
DECL|struct|usb_device_descriptor
r_struct
id|usb_device_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bcdUSB
id|__u16
id|bcdUSB
suffix:semicolon
DECL|member|bDeviceClass
id|__u8
id|bDeviceClass
suffix:semicolon
DECL|member|bDeviceSubClass
id|__u8
id|bDeviceSubClass
suffix:semicolon
DECL|member|bDeviceProtocol
id|__u8
id|bDeviceProtocol
suffix:semicolon
DECL|member|bMaxPacketSize0
id|__u8
id|bMaxPacketSize0
suffix:semicolon
DECL|member|idVendor
id|__u16
id|idVendor
suffix:semicolon
DECL|member|idProduct
id|__u16
id|idProduct
suffix:semicolon
DECL|member|bcdDevice
id|__u16
id|bcdDevice
suffix:semicolon
DECL|member|iManufacturer
id|__u8
id|iManufacturer
suffix:semicolon
DECL|member|iProduct
id|__u8
id|iProduct
suffix:semicolon
DECL|member|iSerialNumber
id|__u8
id|iSerialNumber
suffix:semicolon
DECL|member|bNumConfigurations
id|__u8
id|bNumConfigurations
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* Endpoint descriptor */
DECL|struct|usb_endpoint_descriptor
r_struct
id|usb_endpoint_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bEndpointAddress
id|__u8
id|bEndpointAddress
suffix:semicolon
DECL|member|bmAttributes
id|__u8
id|bmAttributes
suffix:semicolon
DECL|member|wMaxPacketSize
id|__u16
id|wMaxPacketSize
suffix:semicolon
DECL|member|bInterval
id|__u8
id|bInterval
suffix:semicolon
DECL|member|bRefresh
id|__u8
id|bRefresh
suffix:semicolon
DECL|member|bSynchAddress
id|__u8
id|bSynchAddress
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* HID descriptor */
DECL|struct|usb_hid_class_descriptor
r_struct
id|usb_hid_class_descriptor
(brace
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|wDescriptorLength
id|__u16
id|wDescriptorLength
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|usb_hid_descriptor
r_struct
id|usb_hid_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bcdHID
id|__u16
id|bcdHID
suffix:semicolon
DECL|member|bCountryCode
id|__u8
id|bCountryCode
suffix:semicolon
DECL|member|bNumDescriptors
id|__u8
id|bNumDescriptors
suffix:semicolon
DECL|member|desc
r_struct
id|usb_hid_class_descriptor
id|desc
(braket
l_int|1
)braket
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* Interface descriptor */
DECL|struct|usb_interface_descriptor
r_struct
id|usb_interface_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|bInterfaceNumber
id|__u8
id|bInterfaceNumber
suffix:semicolon
DECL|member|bAlternateSetting
id|__u8
id|bAlternateSetting
suffix:semicolon
DECL|member|bNumEndpoints
id|__u8
id|bNumEndpoints
suffix:semicolon
DECL|member|bInterfaceClass
id|__u8
id|bInterfaceClass
suffix:semicolon
DECL|member|bInterfaceSubClass
id|__u8
id|bInterfaceSubClass
suffix:semicolon
DECL|member|bInterfaceProtocol
id|__u8
id|bInterfaceProtocol
suffix:semicolon
DECL|member|iInterface
id|__u8
id|iInterface
suffix:semicolon
DECL|member|hid
r_struct
id|usb_hid_descriptor
op_star
id|hid
suffix:semicolon
DECL|member|endpoint
r_struct
id|usb_endpoint_descriptor
op_star
id|endpoint
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
DECL|struct|usb_interface
r_struct
id|usb_interface
(brace
DECL|member|altsetting
r_struct
id|usb_interface_descriptor
op_star
id|altsetting
suffix:semicolon
DECL|member|act_altsetting
r_int
id|act_altsetting
suffix:semicolon
multiline_comment|/* active alternate setting */
DECL|member|num_altsetting
r_int
id|num_altsetting
suffix:semicolon
multiline_comment|/* number of alternate settings */
)brace
suffix:semicolon
multiline_comment|/* Configuration descriptor information.. */
DECL|struct|usb_config_descriptor
r_struct
id|usb_config_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|wTotalLength
id|__u16
id|wTotalLength
suffix:semicolon
DECL|member|bNumInterfaces
id|__u8
id|bNumInterfaces
suffix:semicolon
DECL|member|bConfigurationValue
id|__u8
id|bConfigurationValue
suffix:semicolon
DECL|member|iConfiguration
id|__u8
id|iConfiguration
suffix:semicolon
DECL|member|bmAttributes
id|__u8
id|bmAttributes
suffix:semicolon
DECL|member|MaxPower
id|__u8
id|MaxPower
suffix:semicolon
DECL|member|interface
r_struct
id|usb_interface
op_star
id|interface
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
multiline_comment|/* String descriptor */
DECL|struct|usb_string_descriptor
r_struct
id|usb_string_descriptor
(brace
DECL|member|bLength
id|__u8
id|bLength
suffix:semicolon
DECL|member|bDescriptorType
id|__u8
id|bDescriptorType
suffix:semicolon
DECL|member|wData
id|__u16
id|wData
(braket
l_int|1
)braket
suffix:semicolon
)brace
id|__attribute__
(paren
(paren
id|packed
)paren
)paren
suffix:semicolon
r_struct
id|usb_device
suffix:semicolon
DECL|struct|usb_driver
r_struct
id|usb_driver
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|probe
r_int
(paren
op_star
id|probe
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|disconnect
r_void
(paren
op_star
id|disconnect
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|driver_list
r_struct
id|list_head
id|driver_list
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Pointer to a device endpoint interrupt function -greg&n; *   Parameters:&n; *     int status - This needs to be defined.  Right now each HCD&n; *         passes different transfer status bits back.  Don&squot;t use it&n; *         until we come up with a common meaning.&n; *     void *buffer - This is a pointer to the data used in this&n; *         USB transfer.&n; *     int length - This is the number of bytes transferred in or out&n; *         of the buffer by this transfer.  (-1 = unknown/unsupported)&n; *     void *dev_id - This is a user defined pointer set when the IRQ&n; *         is requested that is passed back.&n; *&n; *   Special Cases:&n; *     if (status == USB_ST_REMOVED), don&squot;t trust buffer or len.&n; */
DECL|typedef|usb_device_irq
r_typedef
r_int
(paren
op_star
id|usb_device_irq
)paren
(paren
r_int
comma
r_void
op_star
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Isoc. support additions&n; */
DECL|macro|START_FRAME_FUDGE
mdefine_line|#define START_FRAME_FUDGE      3
DECL|macro|USB_WRAP_FRAMENR
mdefine_line|#define USB_WRAP_FRAMENR(x) ((x) &amp; 2047)
multiline_comment|/* for start_type: */
r_enum
(brace
DECL|enumerator|START_ASAP
id|START_ASAP
op_assign
l_int|0
comma
DECL|enumerator|START_ABSOLUTE
id|START_ABSOLUTE
comma
DECL|enumerator|START_RELATIVE
id|START_RELATIVE
)brace
suffix:semicolon
DECL|macro|START_TYPE_MAX
mdefine_line|#define START_TYPE_MAX     START_RELATIVE
multiline_comment|/*&n; * Completion/Callback routine returns an enum,&n; * which tells the interrupt handler what to do&n; * with the completed frames (TDs).&n; */
r_enum
(brace
DECL|enumerator|CB_CONTINUE
id|CB_CONTINUE
op_assign
l_int|0
comma
multiline_comment|/* OK, remove all TDs;&n;&t;&t;&t;&t;   needs to be 0 to be consistent with&n;&t;&t;&t;&t;   current callback function ret. values */
DECL|enumerator|CB_REUSE
id|CB_REUSE
comma
multiline_comment|/* leave descriptors as NULL, not active */
DECL|enumerator|CB_RESTART
id|CB_RESTART
comma
multiline_comment|/* leave descriptors as they are, alive */
DECL|enumerator|CB_ABORT
id|CB_ABORT
multiline_comment|/* kill this USB transfer request */
)brace
suffix:semicolon
DECL|struct|isoc_frame_desc
r_struct
id|isoc_frame_desc
(brace
DECL|member|frame_length
r_int
id|frame_length
suffix:semicolon
multiline_comment|/* may be 0 (i.e., allowed) */
multiline_comment|/* set by driver for OUTs to devices;&n;&t;&t;&t; * set by USBD for INs from devices,&n;&t;&t;&t; * after I/O complete */
DECL|member|frame_status
r_int
r_int
id|frame_status
suffix:semicolon
multiline_comment|/* set by USBD after I/O complete */
)brace
suffix:semicolon
DECL|struct|usb_isoc_desc
r_struct
id|usb_isoc_desc
(brace
multiline_comment|/*&n;&t; * The following fields are set by the usb_init_isoc() call.&n;&t; */
DECL|member|usb_dev
r_struct
id|usb_device
op_star
id|usb_dev
suffix:semicolon
DECL|member|pipe
r_int
r_int
id|pipe
suffix:semicolon
DECL|member|frame_count
r_int
id|frame_count
suffix:semicolon
DECL|member|context
r_void
op_star
id|context
suffix:semicolon
multiline_comment|/* driver context (private) ptr */
DECL|member|frame_size
r_int
id|frame_size
suffix:semicolon
multiline_comment|/*&n;&t; * The following fields are set by the driver between the&n;&t; * usb_init_isoc() and usb_run_isoc() calls&n;&t; * (along with the &quot;frames&quot; array for OUTput).&n;&t; */
DECL|member|start_type
r_int
id|start_type
suffix:semicolon
DECL|member|start_frame
r_int
id|start_frame
suffix:semicolon
multiline_comment|/* optional, depending on start_type */
DECL|member|frame_spacing
r_int
id|frame_spacing
suffix:semicolon
multiline_comment|/* not using (yet?) */
DECL|member|callback_frames
r_int
id|callback_frames
suffix:semicolon
multiline_comment|/* every # frames + last one */
multiline_comment|/* 0 means no callbacks until IOC on last frame */
DECL|member|callback_fn
id|usb_device_irq
id|callback_fn
suffix:semicolon
DECL|member|data
r_void
op_star
id|data
suffix:semicolon
DECL|member|buf_size
r_int
id|buf_size
suffix:semicolon
multiline_comment|/*&n;&t; * The following fields are set by the usb_run_isoc() call.&n;&t; */
DECL|member|end_frame
r_int
id|end_frame
suffix:semicolon
DECL|member|td
r_void
op_star
id|td
suffix:semicolon
multiline_comment|/* UHCI or OHCI TD ptr */
multiline_comment|/*&n;&t; * The following fields are set by the USB HCD interrupt handler&n;&t; * before calling the driver&squot;s callback function.&n;&t; */
DECL|member|total_completed_frames
r_int
id|total_completed_frames
suffix:semicolon
DECL|member|prev_completed_frame
r_int
id|prev_completed_frame
suffix:semicolon
multiline_comment|/* from the previous callback */
DECL|member|cur_completed_frame
r_int
id|cur_completed_frame
suffix:semicolon
multiline_comment|/* from this callback */
DECL|member|total_length
r_int
id|total_length
suffix:semicolon
multiline_comment|/* accumulated */
DECL|member|error_count
r_int
id|error_count
suffix:semicolon
multiline_comment|/* accumulated */
DECL|member|frames
r_struct
id|isoc_frame_desc
id|frames
(braket
l_int|0
)braket
suffix:semicolon
multiline_comment|/* variable size: [frame_count] */
)brace
suffix:semicolon
DECL|struct|usb_operations
r_struct
id|usb_operations
(brace
DECL|member|allocate
r_int
(paren
op_star
id|allocate
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|deallocate
r_int
(paren
op_star
id|deallocate
)paren
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|member|control_msg
r_int
(paren
op_star
id|control_msg
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|devrequest
op_star
comma
r_void
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|bulk_msg
r_int
(paren
op_star
id|bulk_msg
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
r_void
op_star
comma
r_int
comma
r_int
r_int
op_star
)paren
suffix:semicolon
DECL|member|request_irq
r_void
op_star
(paren
op_star
id|request_irq
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|usb_device_irq
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|release_irq
r_int
(paren
op_star
id|release_irq
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|request_bulk
r_void
op_star
(paren
op_star
id|request_bulk
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|usb_device_irq
comma
r_void
op_star
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|terminate_bulk
r_int
(paren
op_star
id|terminate_bulk
)paren
(paren
r_struct
id|usb_device
op_star
comma
r_void
op_star
)paren
suffix:semicolon
DECL|member|get_frame_number
r_int
(paren
op_star
id|get_frame_number
)paren
(paren
r_struct
id|usb_device
op_star
id|usb_dev
)paren
suffix:semicolon
DECL|member|init_isoc
r_int
(paren
op_star
id|init_isoc
)paren
(paren
r_struct
id|usb_device
op_star
id|usb_dev
comma
r_int
r_int
id|pipe
comma
r_int
id|frame_count
comma
r_void
op_star
id|context
comma
r_struct
id|usb_isoc_desc
op_star
op_star
id|isocdesc
)paren
suffix:semicolon
DECL|member|free_isoc
r_void
(paren
op_star
id|free_isoc
)paren
(paren
r_struct
id|usb_isoc_desc
op_star
id|isocdesc
)paren
suffix:semicolon
DECL|member|run_isoc
r_int
(paren
op_star
id|run_isoc
)paren
(paren
r_struct
id|usb_isoc_desc
op_star
id|isocdesc
comma
r_struct
id|usb_isoc_desc
op_star
id|pr_isocdesc
)paren
suffix:semicolon
DECL|member|kill_isoc
r_int
(paren
op_star
id|kill_isoc
)paren
(paren
r_struct
id|usb_isoc_desc
op_star
id|isocdesc
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * Allocated per bus we have&n; */
DECL|struct|usb_bus
r_struct
id|usb_bus
(brace
DECL|member|devmap
r_struct
id|usb_devmap
id|devmap
suffix:semicolon
multiline_comment|/* Device map */
DECL|member|op
r_struct
id|usb_operations
op_star
id|op
suffix:semicolon
multiline_comment|/* Operations (specific to the HC) */
DECL|member|root_hub
r_struct
id|usb_device
op_star
id|root_hub
suffix:semicolon
multiline_comment|/* Root hub */
DECL|member|bus_list
r_struct
id|list_head
id|bus_list
suffix:semicolon
DECL|member|hcpriv
r_void
op_star
id|hcpriv
suffix:semicolon
multiline_comment|/* Host Controller private data */
multiline_comment|/* procfs entry */
DECL|member|proc_busnum
r_int
id|proc_busnum
suffix:semicolon
DECL|member|proc_entry
r_struct
id|proc_dir_entry
op_star
id|proc_entry
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|USB_MAXCHILDREN
mdefine_line|#define USB_MAXCHILDREN (8)&t;/* This is arbitrary */
DECL|struct|usb_device
r_struct
id|usb_device
(brace
DECL|member|devnum
r_int
id|devnum
suffix:semicolon
multiline_comment|/* Device number on USB bus */
DECL|member|slow
r_int
id|slow
suffix:semicolon
multiline_comment|/* Slow device? */
DECL|member|refcnt
id|atomic_t
id|refcnt
suffix:semicolon
multiline_comment|/* Reference count */
DECL|member|maxpacketsize
r_int
id|maxpacketsize
suffix:semicolon
multiline_comment|/* Maximum packet size; encoded as 0,1,2,3 = 8,16,32,64 */
DECL|member|toggle
r_int
r_int
id|toggle
(braket
l_int|2
)braket
suffix:semicolon
multiline_comment|/* one bit for each endpoint ([0] = IN, [1] = OUT) */
DECL|member|halted
r_int
r_int
id|halted
(braket
l_int|2
)braket
suffix:semicolon
multiline_comment|/* endpoint halts; one bit per endpoint # &amp; direction; */
multiline_comment|/* [0] = IN, [1] = OUT */
DECL|member|actconfig
r_struct
id|usb_config_descriptor
op_star
id|actconfig
suffix:semicolon
multiline_comment|/* the active configuration */
DECL|member|epmaxpacketin
r_int
id|epmaxpacketin
(braket
l_int|16
)braket
suffix:semicolon
multiline_comment|/* INput endpoint specific maximums */
DECL|member|epmaxpacketout
r_int
id|epmaxpacketout
(braket
l_int|16
)braket
suffix:semicolon
multiline_comment|/* OUTput endpoint specific maximums */
DECL|member|ifnum
r_int
id|ifnum
suffix:semicolon
multiline_comment|/* active interface number */
DECL|member|parent
r_struct
id|usb_device
op_star
id|parent
suffix:semicolon
DECL|member|bus
r_struct
id|usb_bus
op_star
id|bus
suffix:semicolon
multiline_comment|/* Bus we&squot;re part of */
DECL|member|driver
r_struct
id|usb_driver
op_star
id|driver
suffix:semicolon
multiline_comment|/* Driver */
DECL|member|descriptor
r_struct
id|usb_device_descriptor
id|descriptor
suffix:semicolon
multiline_comment|/* Descriptor */
DECL|member|config
r_struct
id|usb_config_descriptor
op_star
id|config
suffix:semicolon
multiline_comment|/* All of the configs */
DECL|member|string
r_char
op_star
id|string
suffix:semicolon
multiline_comment|/* pointer to the last string read from the device */
DECL|member|string_langid
r_int
id|string_langid
suffix:semicolon
multiline_comment|/* language ID for strings */
DECL|member|hcpriv
r_void
op_star
id|hcpriv
suffix:semicolon
multiline_comment|/* Host Controller private data */
DECL|member|private
r_void
op_star
r_private
suffix:semicolon
multiline_comment|/* Upper layer private data */
multiline_comment|/* procfs entry */
DECL|member|proc_entry
r_struct
id|proc_dir_entry
op_star
id|proc_entry
suffix:semicolon
multiline_comment|/*&n;&t; * Child devices - these can be either new devices&n;&t; * (if this is a hub device), or different instances&n;&t; * of this same device.&n;&t; *&n;&t; * Each instance needs its own set of data structures.&n;&t; */
DECL|member|maxchild
r_int
id|maxchild
suffix:semicolon
multiline_comment|/* Number of ports if hub */
DECL|member|children
r_struct
id|usb_device
op_star
id|children
(braket
id|USB_MAXCHILDREN
)braket
suffix:semicolon
)brace
suffix:semicolon
r_extern
r_int
id|usb_register
c_func
(paren
r_struct
id|usb_driver
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_deregister
c_func
(paren
r_struct
id|usb_driver
op_star
)paren
suffix:semicolon
r_int
id|usb_find_driver
c_func
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
r_void
id|usb_check_support
c_func
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
r_void
id|usb_driver_purge
c_func
(paren
r_struct
id|usb_driver
op_star
comma
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|usb_bus
op_star
id|usb_alloc_bus
c_func
(paren
r_struct
id|usb_operations
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_free_bus
c_func
(paren
r_struct
id|usb_bus
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_register_bus
c_func
(paren
r_struct
id|usb_bus
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_deregister_bus
c_func
(paren
r_struct
id|usb_bus
op_star
)paren
suffix:semicolon
r_extern
r_struct
id|usb_device
op_star
id|usb_alloc_dev
c_func
(paren
r_struct
id|usb_device
op_star
id|parent
comma
r_struct
id|usb_bus
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_free_dev
c_func
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_inc_dev_use
c_func
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
DECL|macro|usb_dec_dev_use
mdefine_line|#define usb_dec_dev_use usb_free_dev
r_extern
r_int
id|usb_control_msg
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
r_int
id|pipe
comma
id|__u8
id|request
comma
id|__u8
id|requesttype
comma
id|__u16
id|value
comma
id|__u16
id|index
comma
r_void
op_star
id|data
comma
id|__u16
id|size
)paren
suffix:semicolon
r_extern
r_void
op_star
id|usb_request_irq
c_func
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|usb_device_irq
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_int
id|usb_release_irq
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_void
op_star
id|handle
)paren
suffix:semicolon
r_extern
r_void
op_star
id|usb_request_bulk
c_func
(paren
r_struct
id|usb_device
op_star
comma
r_int
r_int
comma
id|usb_device_irq
comma
r_void
op_star
comma
r_int
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_int
id|usb_terminate_bulk
c_func
(paren
r_struct
id|usb_device
op_star
comma
r_void
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_init_root_hub
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|usb_connect
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_extern
r_void
id|usb_disconnect
c_func
(paren
r_struct
id|usb_device
op_star
op_star
)paren
suffix:semicolon
r_extern
r_void
id|usb_destroy_configuration
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_get_current_frame_number
(paren
r_struct
id|usb_device
op_star
id|usb_dev
)paren
suffix:semicolon
r_int
id|usb_init_isoc
(paren
r_struct
id|usb_device
op_star
id|usb_dev
comma
r_int
r_int
id|pipe
comma
r_int
id|frame_count
comma
r_void
op_star
id|context
comma
r_struct
id|usb_isoc_desc
op_star
op_star
id|isocdesc
)paren
suffix:semicolon
r_void
id|usb_free_isoc
(paren
r_struct
id|usb_isoc_desc
op_star
id|isocdesc
)paren
suffix:semicolon
r_int
id|usb_run_isoc
(paren
r_struct
id|usb_isoc_desc
op_star
id|isocdesc
comma
r_struct
id|usb_isoc_desc
op_star
id|pr_isocdesc
)paren
suffix:semicolon
r_int
id|usb_kill_isoc
(paren
r_struct
id|usb_isoc_desc
op_star
id|isocdesc
)paren
suffix:semicolon
multiline_comment|/*&n; * Calling this entity a &quot;pipe&quot; is glorifying it. A USB pipe&n; * is something embarrassingly simple: it basically consists&n; * of the following information:&n; *  - device number (7 bits)&n; *  - endpoint number (4 bits)&n; *  - current Data0/1 state (1 bit)&n; *  - direction (1 bit)&n; *  - speed (1 bit)&n; *  - max packet size (2 bits: 8, 16, 32 or 64)&n; *  - pipe type (2 bits: control, interrupt, bulk, isochronous)&n; *&n; * That&squot;s 18 bits. Really. Nothing more. And the USB people have&n; * documented these eighteen bits as some kind of glorious&n; * virtual data structure.&n; *&n; * Let&squot;s not fall in that trap. We&squot;ll just encode it as a simple&n; * unsigned int. The encoding is:&n; *&n; *  - max size:&t;&t;bits 0-1&t;(00 = 8, 01 = 16, 10 = 32, 11 = 64)&n; *  - direction:&t;bit 7&t;&t;(0 = Host-to-Device [Out], 1 = Device-to-Host [In])&n; *  - device:&t;&t;bits 8-14&n; *  - endpoint:&t;&t;bits 15-18&n; *  - Data0/1:&t;&t;bit 19&n; *  - speed:&t;&t;bit 26&t;&t;(0 = Full, 1 = Low Speed)&n; *  - pipe type:&t;bits 30-31&t;(00 = isochronous, 01 = interrupt, 10 = control, 11 = bulk)&n; *&n; * Why? Because it&squot;s arbitrary, and whatever encoding we select is really&n; * up to us. This one happens to share a lot of bit positions with the UHCI&n; * specification, so that much of the uhci driver can just mask the bits&n; * appropriately.&n; */
DECL|macro|usb_maxpacket
mdefine_line|#define usb_maxpacket(dev, pipe, out)&t;(out &bslash;&n;&t;&t;&t;&t;? (dev)-&gt;epmaxpacketout[usb_pipeendpoint(pipe)] &bslash;&n;&t;&t;&t;&t;: (dev)-&gt;epmaxpacketin [usb_pipeendpoint(pipe)] )
DECL|macro|usb_packetid
mdefine_line|#define usb_packetid(pipe)&t;(((pipe) &amp; USB_DIR_IN) ? USB_PID_IN : USB_PID_OUT)
DECL|macro|usb_pipeout
mdefine_line|#define usb_pipeout(pipe)&t;((((pipe) &gt;&gt; 7) &amp; 1) ^ 1)
DECL|macro|usb_pipein
mdefine_line|#define usb_pipein(pipe)&t;(((pipe) &gt;&gt; 7) &amp; 1)
DECL|macro|usb_pipedevice
mdefine_line|#define usb_pipedevice(pipe)&t;(((pipe) &gt;&gt; 8) &amp; 0x7f)
DECL|macro|usb_pipe_endpdev
mdefine_line|#define usb_pipe_endpdev(pipe)&t;(((pipe) &gt;&gt; 8) &amp; 0x7ff)
DECL|macro|usb_pipeendpoint
mdefine_line|#define usb_pipeendpoint(pipe)&t;(((pipe) &gt;&gt; 15) &amp; 0xf)
DECL|macro|usb_pipedata
mdefine_line|#define usb_pipedata(pipe)&t;(((pipe) &gt;&gt; 19) &amp; 1)
DECL|macro|usb_pipeslow
mdefine_line|#define usb_pipeslow(pipe)&t;(((pipe) &gt;&gt; 26) &amp; 1)
DECL|macro|usb_pipetype
mdefine_line|#define usb_pipetype(pipe)&t;(((pipe) &gt;&gt; 30) &amp; 3)
DECL|macro|usb_pipeisoc
mdefine_line|#define usb_pipeisoc(pipe)&t;(usb_pipetype((pipe)) == 0)
DECL|macro|usb_pipeint
mdefine_line|#define usb_pipeint(pipe)&t;(usb_pipetype((pipe)) == 1)
DECL|macro|usb_pipecontrol
mdefine_line|#define usb_pipecontrol(pipe)&t;(usb_pipetype((pipe)) == 2)
DECL|macro|usb_pipebulk
mdefine_line|#define usb_pipebulk(pipe)&t;(usb_pipetype((pipe)) == 3)
DECL|macro|PIPE_DEVEP_MASK
mdefine_line|#define PIPE_DEVEP_MASK&t;&t;0x0007ff00
multiline_comment|/* The D0/D1 toggle bits */
DECL|macro|usb_gettoggle
mdefine_line|#define usb_gettoggle(dev, ep, out) (((dev)-&gt;toggle[out] &gt;&gt; ep) &amp; 1)
DECL|macro|usb_dotoggle
mdefine_line|#define&t;usb_dotoggle(dev, ep, out)  ((dev)-&gt;toggle[out] ^= (1 &lt;&lt; ep))
DECL|macro|usb_settoggle
mdefine_line|#define usb_settoggle(dev, ep, out, bit) ((dev)-&gt;toggle[out] = ((dev)-&gt;toggle[out] &amp; ~(1 &lt;&lt; ep)) | ((bit) &lt;&lt; ep))
multiline_comment|/* Endpoint halt control/status */
DECL|macro|usb_endpoint_out
mdefine_line|#define usb_endpoint_out(ep_dir)&t;(((ep_dir &gt;&gt; 7) &amp; 1) ^ 1)
DECL|macro|usb_endpoint_halt
mdefine_line|#define usb_endpoint_halt(dev, ep, out) ((dev)-&gt;halted[out] |= (1 &lt;&lt; (ep)))
DECL|macro|usb_endpoint_running
mdefine_line|#define usb_endpoint_running(dev, ep, out) ((dev)-&gt;halted[out] &amp;= ~(1 &lt;&lt; (ep)))
DECL|macro|usb_endpoint_halted
mdefine_line|#define usb_endpoint_halted(dev, ep, out) ((dev)-&gt;halted[out] &amp; (1 &lt;&lt; (ep)))
DECL|function|__create_pipe
r_static
r_inline
r_int
r_int
id|__create_pipe
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
r_int
id|endpoint
)paren
(brace
r_return
(paren
id|dev-&gt;devnum
op_lshift
l_int|8
)paren
op_or
(paren
id|endpoint
op_lshift
l_int|15
)paren
op_or
(paren
id|dev-&gt;slow
op_lshift
l_int|26
)paren
op_or
id|dev-&gt;maxpacketsize
suffix:semicolon
)brace
DECL|function|__default_pipe
r_static
r_inline
r_int
r_int
id|__default_pipe
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
(brace
r_return
(paren
id|dev-&gt;slow
op_lshift
l_int|26
)paren
suffix:semicolon
)brace
multiline_comment|/* Create various pipes... */
DECL|macro|usb_sndctrlpipe
mdefine_line|#define usb_sndctrlpipe(dev,endpoint)&t;((2 &lt;&lt; 30) | __create_pipe(dev,endpoint))
DECL|macro|usb_rcvctrlpipe
mdefine_line|#define usb_rcvctrlpipe(dev,endpoint)&t;((2 &lt;&lt; 30) | __create_pipe(dev,endpoint) | USB_DIR_IN)
DECL|macro|usb_sndisocpipe
mdefine_line|#define usb_sndisocpipe(dev,endpoint)&t;((0 &lt;&lt; 30) | __create_pipe(dev,endpoint))
DECL|macro|usb_rcvisocpipe
mdefine_line|#define usb_rcvisocpipe(dev,endpoint)&t;((0 &lt;&lt; 30) | __create_pipe(dev,endpoint) | USB_DIR_IN)
DECL|macro|usb_sndbulkpipe
mdefine_line|#define usb_sndbulkpipe(dev,endpoint)&t;((3 &lt;&lt; 30) | __create_pipe(dev,endpoint))
DECL|macro|usb_rcvbulkpipe
mdefine_line|#define usb_rcvbulkpipe(dev,endpoint)&t;((3 &lt;&lt; 30) | __create_pipe(dev,endpoint) | USB_DIR_IN)
DECL|macro|usb_snddefctrl
mdefine_line|#define usb_snddefctrl(dev)&t;&t;((2 &lt;&lt; 30) | __default_pipe(dev))
DECL|macro|usb_rcvdefctrl
mdefine_line|#define usb_rcvdefctrl(dev)&t;&t;((2 &lt;&lt; 30) | __default_pipe(dev) | USB_DIR_IN)
multiline_comment|/*&n; * Send and receive control messages..&n; */
r_int
id|usb_new_device
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_set_address
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_get_descriptor
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
r_char
id|desctype
comma
r_int
r_char
id|descindex
comma
r_void
op_star
id|buf
comma
r_int
id|size
)paren
suffix:semicolon
r_int
id|usb_get_device_descriptor
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_get_status
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|type
comma
r_int
id|target
comma
r_void
op_star
id|data
)paren
suffix:semicolon
r_int
id|usb_get_protocol
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|usb_set_protocol
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|protocol
)paren
suffix:semicolon
r_int
id|usb_set_interface
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|interface
comma
r_int
id|alternate
)paren
suffix:semicolon
r_int
id|usb_set_idle
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|duration
comma
r_int
id|report_id
)paren
suffix:semicolon
r_int
id|usb_set_interface
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|interface
comma
r_int
id|alternate
)paren
suffix:semicolon
r_int
id|usb_set_configuration
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|configuration
)paren
suffix:semicolon
r_int
id|usb_get_report
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
r_char
id|type
comma
r_int
r_char
id|id
comma
r_int
r_char
id|index
comma
r_void
op_star
id|buf
comma
r_int
id|size
)paren
suffix:semicolon
r_char
op_star
id|usb_string
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|index
)paren
suffix:semicolon
r_int
id|usb_clear_halt
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_int
id|endp
)paren
suffix:semicolon
multiline_comment|/*&n; * Debugging helpers..&n; */
r_void
id|usb_show_device_descriptor
c_func
(paren
r_struct
id|usb_device_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_config_descriptor
c_func
(paren
r_struct
id|usb_config_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_interface_descriptor
c_func
(paren
r_struct
id|usb_interface_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_hid_descriptor
c_func
(paren
r_struct
id|usb_hid_descriptor
op_star
id|desc
)paren
suffix:semicolon
r_void
id|usb_show_endpoint_descriptor
c_func
(paren
r_struct
id|usb_endpoint_descriptor
op_star
)paren
suffix:semicolon
r_void
id|usb_show_device
c_func
(paren
r_struct
id|usb_device
op_star
)paren
suffix:semicolon
r_void
id|usb_show_string
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
comma
r_char
op_star
id|id
comma
r_int
id|index
)paren
suffix:semicolon
multiline_comment|/*&n; * procfs stuff&n; */
macro_line|#ifdef CONFIG_USB_PROC
r_void
id|proc_usb_add_bus
c_func
(paren
r_struct
id|usb_bus
op_star
id|bus
)paren
suffix:semicolon
r_void
id|proc_usb_remove_bus
c_func
(paren
r_struct
id|usb_bus
op_star
id|bus
)paren
suffix:semicolon
r_void
id|proc_usb_add_device
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
r_void
id|proc_usb_remove_device
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
suffix:semicolon
macro_line|#else
DECL|function|proc_usb_add_bus
r_extern
r_inline
r_void
id|proc_usb_add_bus
c_func
(paren
r_struct
id|usb_bus
op_star
id|bus
)paren
(brace
)brace
DECL|function|proc_usb_remove_bus
r_extern
r_inline
r_void
id|proc_usb_remove_bus
c_func
(paren
r_struct
id|usb_bus
op_star
id|bus
)paren
(brace
)brace
DECL|function|proc_usb_add_device
r_extern
r_inline
r_void
id|proc_usb_add_device
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
(brace
)brace
DECL|function|proc_usb_remove_device
r_extern
r_inline
r_void
id|proc_usb_remove_device
c_func
(paren
r_struct
id|usb_device
op_star
id|dev
)paren
(brace
)brace
macro_line|#endif
macro_line|#endif  /* __KERNEL */
macro_line|#endif
eof
