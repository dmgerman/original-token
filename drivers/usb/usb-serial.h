multiline_comment|/*&n; * USB Serial Converter driver&n; *&n; *&t;(C) Copyright (C) 1999, 2000&n; *&t;    Greg Kroah-Hartman (greg@kroah.com)&n; *&n; *&t;This program is free software; you can redistribute it and/or modify&n; *&t;it under the terms of the GNU General Public License as published by&n; *&t;the Free Software Foundation; either version 2 of the License, or&n; *&t;(at your option) any later version.&n; *&n; * See Documentation/usb/usb-serial.txt for more information on using this driver&n; * &n; */
macro_line|#ifndef __LINUX_USB_SERIAL_H
DECL|macro|__LINUX_USB_SERIAL_H
mdefine_line|#define __LINUX_USB_SERIAL_H
multiline_comment|/* Module information */
id|MODULE_AUTHOR
c_func
(paren
l_string|&quot;Greg Kroah-Hartman, greg@kroah.com, http://www.kroah.com/linux-usb/&quot;
)paren
suffix:semicolon
id|MODULE_DESCRIPTION
c_func
(paren
l_string|&quot;USB Serial Driver&quot;
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_USB_SERIAL_GENERIC
DECL|variable|vendor
r_static
id|__u16
id|vendor
op_assign
l_int|0x05f9
suffix:semicolon
DECL|variable|product
r_static
id|__u16
id|product
op_assign
l_int|0xffff
suffix:semicolon
id|MODULE_PARM
c_func
(paren
id|vendor
comma
l_string|&quot;i&quot;
)paren
suffix:semicolon
id|MODULE_PARM_DESC
c_func
(paren
id|vendor
comma
l_string|&quot;User specified USB idVendor&quot;
)paren
suffix:semicolon
id|MODULE_PARM
c_func
(paren
id|product
comma
l_string|&quot;i&quot;
)paren
suffix:semicolon
id|MODULE_PARM_DESC
c_func
(paren
id|product
comma
l_string|&quot;User specified USB idProduct&quot;
)paren
suffix:semicolon
macro_line|#endif
multiline_comment|/* USB Serial devices vendor ids and device ids that this driver supports */
DECL|macro|BELKIN_VENDOR_ID
mdefine_line|#define BELKIN_VENDOR_ID&t;&t;0x056c
DECL|macro|BELKIN_SERIAL_CONVERTER_ID
mdefine_line|#define BELKIN_SERIAL_CONVERTER_ID&t;0x8007
DECL|macro|PERACOM_VENDOR_ID
mdefine_line|#define PERACOM_VENDOR_ID&t;&t;0x0565
DECL|macro|PERACOM_SERIAL_CONVERTER_ID
mdefine_line|#define PERACOM_SERIAL_CONVERTER_ID&t;0x0001
DECL|macro|CONNECT_TECH_VENDOR_ID
mdefine_line|#define CONNECT_TECH_VENDOR_ID&t;&t;0x0710
DECL|macro|CONNECT_TECH_FAKE_WHITE_HEAT_ID
mdefine_line|#define CONNECT_TECH_FAKE_WHITE_HEAT_ID&t;0x0001
DECL|macro|CONNECT_TECH_WHITE_HEAT_ID
mdefine_line|#define CONNECT_TECH_WHITE_HEAT_ID&t;0x8001
DECL|macro|HANDSPRING_VENDOR_ID
mdefine_line|#define HANDSPRING_VENDOR_ID&t;&t;0x082d
DECL|macro|HANDSPRING_VISOR_ID
mdefine_line|#define HANDSPRING_VISOR_ID&t;&t;0x0100
DECL|macro|FTDI_VENDOR_ID
mdefine_line|#define FTDI_VENDOR_ID&t;&t;&t;0x0403
DECL|macro|FTDI_SERIAL_CONVERTER_ID
mdefine_line|#define FTDI_SERIAL_CONVERTER_ID&t;0x8372
DECL|macro|KEYSPAN_VENDOR_ID
mdefine_line|#define KEYSPAN_VENDOR_ID&t;&t;0x06cd
DECL|macro|KEYSPAN_PDA_FAKE_ID
mdefine_line|#define KEYSPAN_PDA_FAKE_ID&t;&t;0x0103
DECL|macro|KEYSPAN_PDA_ID
mdefine_line|#define KEYSPAN_PDA_ID&t;&t;&t;0x0103
DECL|macro|SERIAL_TTY_MAJOR
mdefine_line|#define SERIAL_TTY_MAJOR&t;188&t;/* Nice legal number now */
DECL|macro|SERIAL_TTY_MINORS
mdefine_line|#define SERIAL_TTY_MINORS&t;16&t;/* Actually we are allowed 255, but this is good for now */
DECL|macro|MAX_NUM_PORTS
mdefine_line|#define MAX_NUM_PORTS&t;8&t;/* The maximum number of ports one device can grab at once */
DECL|struct|usb_serial
r_struct
id|usb_serial
(brace
DECL|member|dev
r_struct
id|usb_device
op_star
id|dev
suffix:semicolon
DECL|member|type
r_struct
id|usb_serial_device_type
op_star
id|type
suffix:semicolon
DECL|member|irq_handle
r_void
op_star
id|irq_handle
suffix:semicolon
DECL|member|irqpipe
r_int
r_int
id|irqpipe
suffix:semicolon
DECL|member|tty
r_struct
id|tty_struct
op_star
id|tty
suffix:semicolon
multiline_comment|/* the coresponding tty for this device */
DECL|member|minor
r_int
r_char
id|minor
suffix:semicolon
DECL|member|num_ports
r_int
r_char
id|num_ports
suffix:semicolon
multiline_comment|/* the number of ports this device has */
DECL|member|active
r_char
id|active
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
multiline_comment|/* someone has this device open */
DECL|member|num_interrupt_in
r_char
id|num_interrupt_in
suffix:semicolon
multiline_comment|/* number of interrupt in endpoints we have */
DECL|member|interrupt_in_interval
id|__u8
id|interrupt_in_interval
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|interrupt_in_buffer
r_int
r_char
op_star
id|interrupt_in_buffer
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|control_urb
r_struct
id|urb
id|control_urb
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|num_bulk_in
r_char
id|num_bulk_in
suffix:semicolon
multiline_comment|/* number of bulk in endpoints we have */
DECL|member|bulk_in_buffer
r_int
r_char
op_star
id|bulk_in_buffer
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|read_urb
r_struct
id|urb
id|read_urb
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|num_bulk_out
r_char
id|num_bulk_out
suffix:semicolon
multiline_comment|/* number of bulk out endpoints we have */
DECL|member|bulk_out_buffer
r_int
r_char
op_star
id|bulk_out_buffer
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|bulk_out_size
r_int
id|bulk_out_size
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
DECL|member|write_urb
r_struct
id|urb
id|write_urb
(braket
id|MAX_NUM_PORTS
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|MUST_HAVE_NOT
mdefine_line|#define MUST_HAVE_NOT&t;0x01
DECL|macro|MUST_HAVE
mdefine_line|#define MUST_HAVE&t;0x02
DECL|macro|DONT_CARE
mdefine_line|#define DONT_CARE&t;0x03
DECL|macro|HAS
mdefine_line|#define&t;HAS&t;&t;0x02
DECL|macro|HAS_NOT
mdefine_line|#define HAS_NOT&t;&t;0x01
DECL|macro|NUM_DONT_CARE
mdefine_line|#define NUM_DONT_CARE&t;(-1)
multiline_comment|/* local function prototypes */
r_static
r_int
id|serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_int
id|serial_write
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_int
id|from_user
comma
r_const
r_int
r_char
op_star
id|buf
comma
r_int
id|count
)paren
suffix:semicolon
r_static
r_int
id|serial_write_room
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_int
id|serial_chars_in_buffer
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_void
id|serial_throttle
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_void
id|serial_unthrottle
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
multiline_comment|/* This structure defines the individual serial converter. */
DECL|struct|usb_serial_device_type
r_struct
id|usb_serial_device_type
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|idVendor
id|__u16
op_star
id|idVendor
suffix:semicolon
DECL|member|idProduct
id|__u16
op_star
id|idProduct
suffix:semicolon
DECL|member|needs_interrupt_in
r_char
id|needs_interrupt_in
suffix:semicolon
DECL|member|needs_bulk_in
r_char
id|needs_bulk_in
suffix:semicolon
DECL|member|needs_bulk_out
r_char
id|needs_bulk_out
suffix:semicolon
DECL|member|num_interrupt_in
r_char
id|num_interrupt_in
suffix:semicolon
DECL|member|num_bulk_in
r_char
id|num_bulk_in
suffix:semicolon
DECL|member|num_bulk_out
r_char
id|num_bulk_out
suffix:semicolon
DECL|member|num_ports
r_char
id|num_ports
suffix:semicolon
multiline_comment|/* number of serial ports this device has */
multiline_comment|/* function call to make before accepting driver */
DECL|member|startup
r_int
(paren
op_star
id|startup
)paren
(paren
r_struct
id|usb_serial
op_star
id|serial
)paren
suffix:semicolon
multiline_comment|/* return 0 to continue initialization, anything else to abort */
multiline_comment|/* serial function calls */
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
DECL|member|write
r_int
(paren
op_star
id|write
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_int
id|from_user
comma
r_const
r_int
r_char
op_star
id|buf
comma
r_int
id|count
)paren
suffix:semicolon
DECL|member|write_room
r_int
(paren
op_star
id|write_room
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
DECL|member|chars_in_buffer
r_int
(paren
op_star
id|chars_in_buffer
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
DECL|member|throttle
r_void
(paren
op_star
id|throttle
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
DECL|member|unthrottle
r_void
(paren
op_star
id|unthrottle
)paren
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* function prototypes for a &quot;generic&quot; type serial converter (no flow control, not all endpoints needed) */
multiline_comment|/* need to always compile these in, as some of the other devices use these functions as their own. */
r_static
r_int
id|generic_serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|generic_serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_int
id|generic_serial_write
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_int
id|from_user
comma
r_const
r_int
r_char
op_star
id|buf
comma
r_int
id|count
)paren
suffix:semicolon
r_static
r_int
id|generic_write_room
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_int
id|generic_chars_in_buffer
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
macro_line|#ifdef CONFIG_USB_SERIAL_GENERIC
multiline_comment|/* All of the device info needed for the Generic Serial Converter */
DECL|variable|generic_device
r_static
r_struct
id|usb_serial_device_type
id|generic_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Generic&quot;
comma
id|idVendor
suffix:colon
op_amp
id|vendor
comma
multiline_comment|/* use the user specified vendor id */
id|idProduct
suffix:colon
op_amp
id|product
comma
multiline_comment|/* use the user specified product id */
id|needs_interrupt_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_out
suffix:colon
id|NUM_DONT_CARE
comma
id|num_ports
suffix:colon
l_int|1
comma
id|open
suffix:colon
id|generic_serial_open
comma
id|close
suffix:colon
id|generic_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
comma
)brace
suffix:semicolon
macro_line|#endif
macro_line|#if defined(CONFIG_USB_SERIAL_BELKIN) || defined(CONFIG_USB_SERIAL_PERACOM)
multiline_comment|/* function prototypes for the eTek type converters (this includes Belkin and Peracom) */
r_static
r_int
id|etek_serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|etek_serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_BELKIN
multiline_comment|/* All of the device info needed for the Belkin Serial Converter */
DECL|variable|belkin_vendor_id
r_static
id|__u16
id|belkin_vendor_id
op_assign
id|BELKIN_VENDOR_ID
suffix:semicolon
DECL|variable|belkin_product_id
r_static
id|__u16
id|belkin_product_id
op_assign
id|BELKIN_SERIAL_CONVERTER_ID
suffix:semicolon
DECL|variable|belkin_device
r_static
r_struct
id|usb_serial_device_type
id|belkin_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Belkin&quot;
comma
id|idVendor
suffix:colon
op_amp
id|belkin_vendor_id
comma
multiline_comment|/* the Belkin vendor id */
id|idProduct
suffix:colon
op_amp
id|belkin_product_id
comma
multiline_comment|/* the Belkin serial converter product id */
id|needs_interrupt_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
l_int|1
comma
id|num_bulk_in
suffix:colon
l_int|1
comma
id|num_bulk_out
suffix:colon
l_int|1
comma
id|num_ports
suffix:colon
l_int|1
comma
id|open
suffix:colon
id|etek_serial_open
comma
id|close
suffix:colon
id|etek_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
comma
)brace
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_PERACOM
multiline_comment|/* All of the device info needed for the Peracom Serial Converter */
DECL|variable|peracom_vendor_id
r_static
id|__u16
id|peracom_vendor_id
op_assign
id|PERACOM_VENDOR_ID
suffix:semicolon
DECL|variable|peracom_product_id
r_static
id|__u16
id|peracom_product_id
op_assign
id|PERACOM_SERIAL_CONVERTER_ID
suffix:semicolon
DECL|variable|peracom_device
r_static
r_struct
id|usb_serial_device_type
id|peracom_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Peracom&quot;
comma
id|idVendor
suffix:colon
op_amp
id|peracom_vendor_id
comma
multiline_comment|/* the Peracom vendor id */
id|idProduct
suffix:colon
op_amp
id|peracom_product_id
comma
multiline_comment|/* the Peracom serial converter product id */
id|needs_interrupt_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk out endpoint */
id|num_ports
suffix:colon
l_int|1
comma
id|num_interrupt_in
suffix:colon
l_int|1
comma
id|num_bulk_in
suffix:colon
l_int|1
comma
id|num_bulk_out
suffix:colon
l_int|1
comma
id|open
suffix:colon
id|etek_serial_open
comma
id|close
suffix:colon
id|etek_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
comma
)brace
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_WHITEHEAT
multiline_comment|/* function prototypes for the Connect Tech WhiteHEAT serial converter */
r_static
r_int
id|whiteheat_serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|whiteheat_serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|whiteheat_throttle
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_void
id|whiteheat_unthrottle
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_int
id|whiteheat_startup
(paren
r_struct
id|usb_serial
op_star
id|serial
)paren
suffix:semicolon
multiline_comment|/* All of the device info needed for the Connect Tech WhiteHEAT */
DECL|variable|connecttech_vendor_id
r_static
id|__u16
id|connecttech_vendor_id
op_assign
id|CONNECT_TECH_VENDOR_ID
suffix:semicolon
DECL|variable|connecttech_whiteheat_fake_product_id
r_static
id|__u16
id|connecttech_whiteheat_fake_product_id
op_assign
id|CONNECT_TECH_FAKE_WHITE_HEAT_ID
suffix:semicolon
DECL|variable|connecttech_whiteheat_product_id
r_static
id|__u16
id|connecttech_whiteheat_product_id
op_assign
id|CONNECT_TECH_WHITE_HEAT_ID
suffix:semicolon
DECL|variable|whiteheat_fake_device
r_static
r_struct
id|usb_serial_device_type
id|whiteheat_fake_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Connect Tech - WhiteHEAT - (prerenumeration)&quot;
comma
id|idVendor
suffix:colon
op_amp
id|connecttech_vendor_id
comma
multiline_comment|/* the Connect Tech vendor id */
id|idProduct
suffix:colon
op_amp
id|connecttech_whiteheat_fake_product_id
comma
multiline_comment|/* the White Heat initial product id */
id|needs_interrupt_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_out
suffix:colon
id|NUM_DONT_CARE
comma
id|startup
suffix:colon
id|whiteheat_startup
)brace
suffix:semicolon
DECL|variable|whiteheat_device
r_static
r_struct
id|usb_serial_device_type
id|whiteheat_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Connect Tech - WhiteHEAT&quot;
comma
id|idVendor
suffix:colon
op_amp
id|connecttech_vendor_id
comma
multiline_comment|/* the Connect Tech vendor id */
id|idProduct
suffix:colon
op_amp
id|connecttech_whiteheat_product_id
comma
multiline_comment|/* the White Heat real product id */
id|needs_interrupt_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_out
suffix:colon
id|NUM_DONT_CARE
comma
id|num_ports
suffix:colon
l_int|4
comma
id|open
suffix:colon
id|whiteheat_serial_open
comma
id|close
suffix:colon
id|whiteheat_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
comma
id|throttle
suffix:colon
id|whiteheat_throttle
comma
id|unthrottle
suffix:colon
id|whiteheat_unthrottle
)brace
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_VISOR
multiline_comment|/****************************************************************************&n; * Handspring Visor Vendor specific request codes (bRequest values)&n; * A big thank you to Handspring for providing the following information.&n; * If anyone wants the original file where these values and structures came&n; * from, send email to &lt;greg@kroah.com&gt;.&n; ****************************************************************************/
multiline_comment|/****************************************************************************&n; * VISOR_REQUEST_BYTES_AVAILABLE asks the visor for the number of bytes that&n; * are available to be transfered to the host for the specified endpoint.&n; * Currently this is not used, and always returns 0x0001&n; ****************************************************************************/
DECL|macro|VISOR_REQUEST_BYTES_AVAILABLE
mdefine_line|#define VISOR_REQUEST_BYTES_AVAILABLE&t;&t;0x01
multiline_comment|/****************************************************************************&n; * VISOR_CLOSE_NOTIFICATION is set to the device to notify it that the host&n; * is now closing the pipe. An empty packet is sent in response.&n; ****************************************************************************/
DECL|macro|VISOR_CLOSE_NOTIFICATION
mdefine_line|#define VISOR_CLOSE_NOTIFICATION&t;&t;0x02
multiline_comment|/****************************************************************************&n; * VISOR_GET_CONNECTION_INFORMATION is sent by the host during enumeration to&n; * get the endpoints used by the connection.&n; ****************************************************************************/
DECL|macro|VISOR_GET_CONNECTION_INFORMATION
mdefine_line|#define VISOR_GET_CONNECTION_INFORMATION&t;0x03
multiline_comment|/****************************************************************************&n; * VISOR_GET_CONNECTION_INFORMATION returns data in the following format&n; ****************************************************************************/
DECL|struct|visor_connection_info
r_struct
id|visor_connection_info
(brace
DECL|member|num_ports
id|__u16
id|num_ports
suffix:semicolon
r_struct
(brace
DECL|member|port_function_id
id|__u8
id|port_function_id
suffix:semicolon
DECL|member|port
id|__u8
id|port
suffix:semicolon
DECL|member|connections
)brace
id|connections
(braket
l_int|2
)braket
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* struct visor_connection_info.connection[x].port defines: */
DECL|macro|VISOR_ENDPOINT_1
mdefine_line|#define VISOR_ENDPOINT_1&t;&t;0x01
DECL|macro|VISOR_ENDPOINT_2
mdefine_line|#define VISOR_ENDPOINT_2&t;&t;0x02
multiline_comment|/* struct visor_connection_info.connection[x].port_function_id defines: */
DECL|macro|VISOR_FUNCTION_GENERIC
mdefine_line|#define VISOR_FUNCTION_GENERIC&t;&t;0x00
DECL|macro|VISOR_FUNCTION_DEBUGGER
mdefine_line|#define VISOR_FUNCTION_DEBUGGER&t;&t;0x01
DECL|macro|VISOR_FUNCTION_HOTSYNC
mdefine_line|#define VISOR_FUNCTION_HOTSYNC&t;&t;0x02
DECL|macro|VISOR_FUNCTION_CONSOLE
mdefine_line|#define VISOR_FUNCTION_CONSOLE&t;&t;0x03
DECL|macro|VISOR_FUNCTION_REMOTE_FILE_SYS
mdefine_line|#define VISOR_FUNCTION_REMOTE_FILE_SYS&t;0x04
multiline_comment|/* function prototypes for a handspring visor */
r_static
r_int
id|visor_serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|visor_serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|visor_throttle
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_void
id|visor_unthrottle
(paren
r_struct
id|tty_struct
op_star
id|tty
)paren
suffix:semicolon
r_static
r_int
id|visor_startup
(paren
r_struct
id|usb_serial
op_star
id|serial
)paren
suffix:semicolon
multiline_comment|/* All of the device info needed for the Handspring Visor */
DECL|variable|handspring_vendor_id
r_static
id|__u16
id|handspring_vendor_id
op_assign
id|HANDSPRING_VENDOR_ID
suffix:semicolon
DECL|variable|handspring_product_id
r_static
id|__u16
id|handspring_product_id
op_assign
id|HANDSPRING_VISOR_ID
suffix:semicolon
DECL|variable|handspring_device
r_static
r_struct
id|usb_serial_device_type
id|handspring_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Handspring Visor&quot;
comma
id|idVendor
suffix:colon
op_amp
id|handspring_vendor_id
comma
multiline_comment|/* the Handspring vendor ID */
id|idProduct
suffix:colon
op_amp
id|handspring_product_id
comma
multiline_comment|/* the Handspring Visor product id */
id|needs_interrupt_in
suffix:colon
id|MUST_HAVE_NOT
comma
multiline_comment|/* this device must not have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
l_int|0
comma
id|num_bulk_in
suffix:colon
l_int|2
comma
id|num_bulk_out
suffix:colon
l_int|2
comma
id|num_ports
suffix:colon
l_int|2
comma
id|open
suffix:colon
id|visor_serial_open
comma
id|close
suffix:colon
id|visor_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
comma
id|throttle
suffix:colon
id|visor_throttle
comma
id|unthrottle
suffix:colon
id|visor_unthrottle
comma
id|startup
suffix:colon
id|visor_startup
)brace
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_FTDI
multiline_comment|/* function prototypes for a FTDI serial converter */
r_static
r_int
id|ftdi_serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|ftdi_serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
multiline_comment|/* All of the device info needed for the Handspring Visor */
DECL|variable|ftdi_vendor_id
r_static
id|__u16
id|ftdi_vendor_id
op_assign
id|FTDI_VENDOR_ID
suffix:semicolon
DECL|variable|ftdi_product_id
r_static
id|__u16
id|ftdi_product_id
op_assign
id|FTDI_SERIAL_CONVERTER_ID
suffix:semicolon
DECL|variable|ftdi_device
r_static
r_struct
id|usb_serial_device_type
id|ftdi_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;FTDI&quot;
comma
id|idVendor
suffix:colon
op_amp
id|ftdi_vendor_id
comma
multiline_comment|/* the FTDI vendor ID */
id|idProduct
suffix:colon
op_amp
id|ftdi_product_id
comma
multiline_comment|/* the FTDI product id */
id|needs_interrupt_in
suffix:colon
id|MUST_HAVE_NOT
comma
multiline_comment|/* this device must not have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
l_int|0
comma
id|num_bulk_in
suffix:colon
l_int|1
comma
id|num_bulk_out
suffix:colon
l_int|1
comma
id|num_ports
suffix:colon
l_int|1
comma
id|open
suffix:colon
id|ftdi_serial_open
comma
id|close
suffix:colon
id|ftdi_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
)brace
suffix:semicolon
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_KEYSPAN_PDA
multiline_comment|/* function prototypes for a FTDI serial converter */
r_static
r_int
id|keyspan_pda_serial_open
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_void
id|keyspan_pda_serial_close
(paren
r_struct
id|tty_struct
op_star
id|tty
comma
r_struct
id|file
op_star
id|filp
)paren
suffix:semicolon
r_static
r_int
id|keyspan_pda_startup
(paren
r_struct
id|usb_serial
op_star
id|serial
)paren
suffix:semicolon
multiline_comment|/* All of the device info needed for the Handspring Visor */
DECL|variable|keyspan_vendor_id
r_static
id|__u16
id|keyspan_vendor_id
op_assign
id|KEYSPAN_VENDOR_ID
suffix:semicolon
DECL|variable|keyspan_pda_fake_product_id
r_static
id|__u16
id|keyspan_pda_fake_product_id
op_assign
id|KEYSPAN_PDA_FAKE_ID
suffix:semicolon
DECL|variable|keyspan_pda_product_id
r_static
id|__u16
id|keyspan_pda_product_id
op_assign
id|KEYSPAN_PDA_ID
suffix:semicolon
DECL|variable|keyspan_pda_fake_device
r_static
r_struct
id|usb_serial_device_type
id|keyspan_pda_fake_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Keyspan PDA - (prerenumeration)&quot;
comma
id|idVendor
suffix:colon
op_amp
id|keyspan_vendor_id
comma
multiline_comment|/* the Keyspan PDA vendor ID */
id|idProduct
suffix:colon
op_amp
id|keyspan_pda_fake_product_id
comma
multiline_comment|/* the Keyspan PDA initial product id */
id|needs_interrupt_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|DONT_CARE
comma
multiline_comment|/* don&squot;t have to have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_in
suffix:colon
id|NUM_DONT_CARE
comma
id|num_bulk_out
suffix:colon
id|NUM_DONT_CARE
comma
id|startup
suffix:colon
id|keyspan_pda_startup
)brace
suffix:semicolon
DECL|variable|keyspan_pda_device
r_static
r_struct
id|usb_serial_device_type
id|keyspan_pda_device
op_assign
(brace
id|name
suffix:colon
l_string|&quot;Keyspan PDA&quot;
comma
id|idVendor
suffix:colon
op_amp
id|keyspan_vendor_id
comma
multiline_comment|/* the Keyspan PDA vendor ID */
id|idProduct
suffix:colon
op_amp
id|keyspan_pda_product_id
comma
multiline_comment|/* the Keyspan PDA product id */
id|needs_interrupt_in
suffix:colon
id|MUST_HAVE_NOT
comma
multiline_comment|/* this device must not have an interrupt in endpoint */
id|needs_bulk_in
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk in endpoint */
id|needs_bulk_out
suffix:colon
id|MUST_HAVE
comma
multiline_comment|/* this device must have a bulk out endpoint */
id|num_interrupt_in
suffix:colon
l_int|0
comma
id|num_bulk_in
suffix:colon
l_int|1
comma
id|num_bulk_out
suffix:colon
l_int|1
comma
id|num_ports
suffix:colon
l_int|1
comma
id|open
suffix:colon
id|keyspan_pda_serial_open
comma
id|close
suffix:colon
id|keyspan_pda_serial_close
comma
id|write
suffix:colon
id|generic_serial_write
comma
id|write_room
suffix:colon
id|generic_write_room
comma
id|chars_in_buffer
suffix:colon
id|generic_chars_in_buffer
)brace
suffix:semicolon
macro_line|#endif
multiline_comment|/* To add support for another serial converter, create a usb_serial_device_type&n;   structure for that device, and add it to this list, making sure that the last&n;   entry is NULL. */
DECL|variable|usb_serial_devices
r_static
r_struct
id|usb_serial_device_type
op_star
id|usb_serial_devices
(braket
)braket
op_assign
(brace
macro_line|#ifdef CONFIG_USB_SERIAL_GENERIC
op_amp
id|generic_device
comma
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_WHITEHEAT
op_amp
id|whiteheat_fake_device
comma
op_amp
id|whiteheat_device
comma
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_BELKIN
op_amp
id|belkin_device
comma
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_PERACOM
op_amp
id|peracom_device
comma
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_VISOR
op_amp
id|handspring_device
comma
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_FTDI
op_amp
id|ftdi_device
comma
macro_line|#endif
macro_line|#ifdef CONFIG_USB_SERIAL_KEYSPAN_PDA
op_amp
id|keyspan_pda_fake_device
comma
op_amp
id|keyspan_pda_device
comma
macro_line|#endif
l_int|NULL
)brace
suffix:semicolon
multiline_comment|/* determine if we should include the EzUSB loader functions */
macro_line|#if defined(CONFIG_USB_SERIAL_KEYSPAN_PDA) || defined(CONFIG_USB_SERIAL_WHITEHEAT)
DECL|macro|USES_EZUSB_FUNCTIONS
mdefine_line|#define&t;USES_EZUSB_FUNCTIONS
macro_line|#else
DECL|macro|USES_EZUSB_FUNCTIONS
macro_line|#undef &t;USES_EZUSB_FUNCTIONS
macro_line|#endif
multiline_comment|/* used to mark that a pointer is empty (and not NULL) */
DECL|macro|SERIAL_PTR_EMPTY
mdefine_line|#define SERIAL_PTR_EMPTY ((void *)(-1))
macro_line|#endif&t;/* ifdef __LINUX_USB_SERIAL_H */
eof
