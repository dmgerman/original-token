multiline_comment|/*&n; * $Id: hid-debug.h,v 1.2 2000/05/29 10:54:53 vojtech Exp $&n; *&n; *  (c) 1999 Andreas Gal&t;&lt;gal@cs.uni-magdeburg.de&gt;&n; *  (c) 2000 Vojtech Pavlik&t;&lt;vojtech@suse.cz&gt;&n; *&n; *  Some debug stuff for the HID parser.&n; *&n; *  Sponsored by SuSE&n; */
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or&n; * (at your option) any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA&n; *&n; * Should you need to contact me, the author, you can do so either by&n; * e-mail - mail your message to &lt;vojtech@suse.cz&gt;, or by paper mail:&n; * Vojtech Pavlik, Ucitelska 1576, Prague 8, 182 00 Czech Republic&n; */
DECL|struct|hid_usage_entry
r_struct
id|hid_usage_entry
(brace
DECL|member|page
r_int
id|page
suffix:semicolon
DECL|member|usage
r_int
id|usage
suffix:semicolon
DECL|member|description
r_char
op_star
id|description
suffix:semicolon
)brace
suffix:semicolon
DECL|variable|hid_usage_table
r_static
r_struct
id|hid_usage_entry
id|hid_usage_table
(braket
)braket
op_assign
(brace
(brace
l_int|1
comma
l_int|0
comma
l_string|&quot;GenericDesktop&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x01
comma
l_string|&quot;Pointer&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x02
comma
l_string|&quot;Mouse&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x04
comma
l_string|&quot;Joystick&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x05
comma
l_string|&quot;GamePad&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x06
comma
l_string|&quot;Keyboard&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x07
comma
l_string|&quot;Keypad&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x08
comma
l_string|&quot;MultiAxis&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x30
comma
l_string|&quot;X&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x31
comma
l_string|&quot;Y&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x32
comma
l_string|&quot;Z&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x33
comma
l_string|&quot;Rx&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x34
comma
l_string|&quot;Ry&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x35
comma
l_string|&quot;Rz&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x36
comma
l_string|&quot;Slider&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x37
comma
l_string|&quot;Dial&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x38
comma
l_string|&quot;Wheel&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x39
comma
l_string|&quot;HatSwitch&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3a
comma
l_string|&quot;CountedBuffer&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3b
comma
l_string|&quot;ByteCount&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3c
comma
l_string|&quot;MotionWakeup&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3d
comma
l_string|&quot;Start&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3e
comma
l_string|&quot;Select&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x40
comma
l_string|&quot;Vx&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x41
comma
l_string|&quot;Vy&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x42
comma
l_string|&quot;Vz&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x43
comma
l_string|&quot;Vbrx&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x44
comma
l_string|&quot;Vbry&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x45
comma
l_string|&quot;Vbrz&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x46
comma
l_string|&quot;Vno&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x80
comma
l_string|&quot;SystemControl&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x81
comma
l_string|&quot;SystemPowerDown&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x82
comma
l_string|&quot;SystemSleep&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x83
comma
l_string|&quot;SystemWakeUp&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x84
comma
l_string|&quot;SystemContextMenu&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x85
comma
l_string|&quot;SystemMainMenu&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x86
comma
l_string|&quot;SystemAppMenu&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x87
comma
l_string|&quot;SystemMenuHelp&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x88
comma
l_string|&quot;SystemMenuExit&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x89
comma
l_string|&quot;SystemMenuSelect&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x8a
comma
l_string|&quot;SystemMenuRight&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x8b
comma
l_string|&quot;SystemMenuLeft&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x8c
comma
l_string|&quot;SystemMenuUp&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x8d
comma
l_string|&quot;SystemMenuDown&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x90
comma
l_string|&quot;D-padUp&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x91
comma
l_string|&quot;D-padDown&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x92
comma
l_string|&quot;D-padRight&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x93
comma
l_string|&quot;D-padLeft&quot;
)brace
comma
(brace
l_int|7
comma
l_int|0
comma
l_string|&quot;Keyboard&quot;
)brace
comma
(brace
l_int|8
comma
l_int|0
comma
l_string|&quot;LED&quot;
)brace
comma
(brace
l_int|9
comma
l_int|0
comma
l_string|&quot;Button&quot;
)brace
comma
(brace
l_int|12
comma
l_int|0
comma
l_string|&quot;Hotkey&quot;
)brace
comma
(brace
l_int|13
comma
l_int|0
comma
l_string|&quot;Digitizers&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x01
comma
l_string|&quot;Digitizer&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x02
comma
l_string|&quot;Pen&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x03
comma
l_string|&quot;LightPen&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x04
comma
l_string|&quot;TouchScreen&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x05
comma
l_string|&quot;TouchPad&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x20
comma
l_string|&quot;Stylus&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x21
comma
l_string|&quot;Puck&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x22
comma
l_string|&quot;Finger&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x30
comma
l_string|&quot;TipPressure&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x31
comma
l_string|&quot;BarrelPressure&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x32
comma
l_string|&quot;InRange&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x33
comma
l_string|&quot;Touch&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x34
comma
l_string|&quot;UnTouch&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x35
comma
l_string|&quot;Tap&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x39
comma
l_string|&quot;TabletFunctionKey&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3a
comma
l_string|&quot;ProgramChangeKey&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x3c
comma
l_string|&quot;Invert&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x42
comma
l_string|&quot;TipSwitch&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x43
comma
l_string|&quot;SecondaryTipSwitch&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x44
comma
l_string|&quot;BarrelSwitch&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x45
comma
l_string|&quot;Eraser&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0x46
comma
l_string|&quot;TabletPick&quot;
)brace
comma
(brace
l_int|15
comma
l_int|0
comma
l_string|&quot;PhysicalInterfaceDevice&quot;
)brace
comma
(brace
l_int|0
comma
l_int|0
comma
l_int|NULL
)brace
)brace
suffix:semicolon
DECL|function|resolv_usage_page
r_static
r_void
id|resolv_usage_page
c_func
(paren
r_int
id|page
)paren
(brace
r_struct
id|hid_usage_entry
op_star
id|p
suffix:semicolon
r_for
c_loop
(paren
id|p
op_assign
id|hid_usage_table
suffix:semicolon
id|p-&gt;description
suffix:semicolon
id|p
op_increment
)paren
r_if
c_cond
(paren
id|p-&gt;page
op_eq
id|page
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|p-&gt;description
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;%04x&quot;
comma
id|page
)paren
suffix:semicolon
)brace
DECL|function|resolv_usage
r_static
r_void
id|resolv_usage
c_func
(paren
r_int
id|usage
)paren
(brace
r_struct
id|hid_usage_entry
op_star
id|p
suffix:semicolon
id|resolv_usage_page
c_func
(paren
id|usage
op_rshift
l_int|16
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;.&quot;
)paren
suffix:semicolon
r_for
c_loop
(paren
id|p
op_assign
id|hid_usage_table
suffix:semicolon
id|p-&gt;description
suffix:semicolon
id|p
op_increment
)paren
r_if
c_cond
(paren
id|p-&gt;page
op_eq
(paren
id|usage
op_rshift
l_int|16
)paren
)paren
(brace
r_for
c_loop
(paren
op_increment
id|p
suffix:semicolon
id|p-&gt;description
op_logical_and
id|p-&gt;page
op_eq
l_int|0
suffix:semicolon
id|p
op_increment
)paren
r_if
c_cond
(paren
id|p-&gt;usage
op_eq
(paren
id|usage
op_amp
l_int|0xffff
)paren
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|p-&gt;description
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_break
suffix:semicolon
)brace
id|printk
c_func
(paren
l_string|&quot;%04x&quot;
comma
id|usage
op_amp
l_int|0xffff
)paren
suffix:semicolon
)brace
DECL|function|tab
id|__inline__
r_static
r_void
id|tab
c_func
(paren
r_int
id|n
)paren
(brace
r_while
c_loop
(paren
id|n
op_decrement
)paren
id|printk
c_func
(paren
l_string|&quot; &quot;
)paren
suffix:semicolon
)brace
DECL|function|hid_dump_field
r_static
r_void
id|hid_dump_field
c_func
(paren
r_struct
id|hid_field
op_star
id|field
comma
r_int
id|n
)paren
(brace
r_int
id|j
suffix:semicolon
r_if
c_cond
(paren
id|field-&gt;physical
)paren
(brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Physical(&quot;
)paren
suffix:semicolon
id|resolv_usage
c_func
(paren
id|field-&gt;physical
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;)&bslash;n&quot;
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|field-&gt;logical
)paren
(brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Logical(&quot;
)paren
suffix:semicolon
id|resolv_usage
c_func
(paren
id|field-&gt;logical
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;)&bslash;n&quot;
)paren
suffix:semicolon
)brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Usage(%d)&bslash;n&quot;
comma
id|field-&gt;maxusage
)paren
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|field-&gt;maxusage
suffix:semicolon
id|j
op_increment
)paren
(brace
id|tab
c_func
(paren
id|n
op_plus
l_int|2
)paren
suffix:semicolon
id|resolv_usage
c_func
(paren
id|field-&gt;usage
(braket
id|j
)braket
dot
id|hid
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|field-&gt;logical_minimum
op_ne
id|field-&gt;logical_maximum
)paren
(brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Logical Minimum(%d)&bslash;n&quot;
comma
id|field-&gt;logical_minimum
)paren
suffix:semicolon
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Logical Maximum(%d)&bslash;n&quot;
comma
id|field-&gt;logical_maximum
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|field-&gt;physical_minimum
op_ne
id|field-&gt;physical_maximum
)paren
(brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Physical Minimum(%d)&bslash;n&quot;
comma
id|field-&gt;physical_minimum
)paren
suffix:semicolon
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Physical Maximum(%d)&bslash;n&quot;
comma
id|field-&gt;physical_maximum
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|field-&gt;unit_exponent
)paren
(brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Unit Exponent(%d)&bslash;n&quot;
comma
id|field-&gt;unit_exponent
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|field-&gt;unit
)paren
(brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Unit(%u)&bslash;n&quot;
comma
id|field-&gt;unit
)paren
suffix:semicolon
)brace
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Report Size(%u)&bslash;n&quot;
comma
id|field-&gt;report_size
)paren
suffix:semicolon
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Report Count(%u)&bslash;n&quot;
comma
id|field-&gt;report_count
)paren
suffix:semicolon
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Report Offset(%u)&bslash;n&quot;
comma
id|field-&gt;report_offset
)paren
suffix:semicolon
id|tab
c_func
(paren
id|n
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Flags( &quot;
)paren
suffix:semicolon
id|j
op_assign
id|field-&gt;flags
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_CONSTANT
op_amp
id|j
ques
c_cond
l_string|&quot;Constant &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_VARIABLE
op_amp
id|j
ques
c_cond
l_string|&quot;Variable &quot;
suffix:colon
l_string|&quot;Array &quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_RELATIVE
op_amp
id|j
ques
c_cond
l_string|&quot;Relative &quot;
suffix:colon
l_string|&quot;Absolute &quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_WRAP
op_amp
id|j
ques
c_cond
l_string|&quot;Wrap &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_NONLINEAR
op_amp
id|j
ques
c_cond
l_string|&quot;NonLinear &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_NO_PREFERRED
op_amp
id|j
ques
c_cond
l_string|&quot;NoPrefferedState &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_NULL_STATE
op_amp
id|j
ques
c_cond
l_string|&quot;NullState &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_VOLATILE
op_amp
id|j
ques
c_cond
l_string|&quot;Volatile &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|HID_MAIN_ITEM_BUFFERED_BYTE
op_amp
id|j
ques
c_cond
l_string|&quot;BufferedByte &quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;)&bslash;n&quot;
)paren
suffix:semicolon
)brace
DECL|function|hid_dump_device
r_void
id|hid_dump_device
c_func
(paren
r_struct
id|hid_device
op_star
id|device
)paren
(brace
r_struct
id|hid_report_enum
op_star
id|report_enum
suffix:semicolon
r_struct
id|hid_report
op_star
id|report
suffix:semicolon
r_struct
id|list_head
op_star
id|list
suffix:semicolon
r_int
id|i
comma
id|k
suffix:semicolon
r_static
r_char
op_star
id|table
(braket
)braket
op_assign
(brace
l_string|&quot;INPUT&quot;
comma
l_string|&quot;OUTPUT&quot;
comma
l_string|&quot;FEATURE&quot;
)brace
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Application(&quot;
)paren
suffix:semicolon
id|resolv_usage
c_func
(paren
id|device-&gt;application
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;)&bslash;n&quot;
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|HID_REPORT_TYPES
suffix:semicolon
id|i
op_increment
)paren
(brace
id|report_enum
op_assign
id|device-&gt;report_enum
op_plus
id|i
suffix:semicolon
id|list
op_assign
id|report_enum-&gt;report_list.next
suffix:semicolon
r_while
c_loop
(paren
id|list
op_ne
op_amp
id|report_enum-&gt;report_list
)paren
(brace
id|report
op_assign
(paren
r_struct
id|hid_report
op_star
)paren
id|list
suffix:semicolon
id|tab
c_func
(paren
l_int|2
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;%s&quot;
comma
id|table
(braket
id|i
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id|report-&gt;id
)paren
id|printk
c_func
(paren
l_string|&quot;(%d)&quot;
comma
id|report-&gt;id
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;[%s]&quot;
comma
id|table
(braket
id|report-&gt;type
)braket
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
r_for
c_loop
(paren
id|k
op_assign
l_int|0
suffix:semicolon
id|k
OL
id|report-&gt;maxfield
suffix:semicolon
id|k
op_increment
)paren
(brace
id|tab
c_func
(paren
l_int|4
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot;Field(%d)&bslash;n&quot;
comma
id|k
)paren
suffix:semicolon
id|hid_dump_field
c_func
(paren
id|report-&gt;field
(braket
id|k
)braket
comma
l_int|6
)paren
suffix:semicolon
)brace
id|list
op_assign
id|list-&gt;next
suffix:semicolon
)brace
)brace
)brace
DECL|function|hid_dump_input
r_void
id|hid_dump_input
c_func
(paren
r_struct
id|hid_usage
op_star
id|usage
comma
id|__s32
id|value
)paren
(brace
id|printk
c_func
(paren
l_string|&quot;hidd: input &quot;
)paren
suffix:semicolon
id|resolv_usage
c_func
(paren
id|usage-&gt;hid
)paren
suffix:semicolon
id|printk
c_func
(paren
l_string|&quot; = %d&bslash;n&quot;
comma
id|value
)paren
suffix:semicolon
)brace
eof
