multiline_comment|/*****************************************************************************/
multiline_comment|/*&n; *&t;sm.h  --  soundcard radio modem driver internal header.&n; *&n; *&t;Copyright (C) 1996-1999  Thomas Sailer (sailer@ife.ee.ethz.ch)&n; *&n; *&t;This program is free software; you can redistribute it and/or modify&n; *&t;it under the terms of the GNU General Public License as published by&n; *&t;the Free Software Foundation; either version 2 of the License, or&n; *&t;(at your option) any later version.&n; *&n; *&t;This program is distributed in the hope that it will be useful,&n; *&t;but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *&t;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *&t;GNU General Public License for more details.&n; *&n; *&t;You should have received a copy of the GNU General Public License&n; *&t;along with this program; if not, write to the Free Software&n; *&t;Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n; *&n; *  Please note that the GPL allows you to use the driver, NOT the radio.&n; *  In order to use the radio, you need a license from the communications&n; *  authority of your country.&n; *&n; */
macro_line|#ifndef _SM_H
DECL|macro|_SM_H
mdefine_line|#define _SM_H
multiline_comment|/* ---------------------------------------------------------------------- */
macro_line|#include &lt;linux/hdlcdrv.h&gt;
macro_line|#include &lt;linux/soundmodem.h&gt;
macro_line|#include &lt;asm/processor.h&gt;
macro_line|#include &lt;linux/bitops.h&gt;
macro_line|#include &lt;linux/parport.h&gt;
DECL|macro|SM_DEBUG
mdefine_line|#define SM_DEBUG
multiline_comment|/* ---------------------------------------------------------------------- */
multiline_comment|/*&n; * Information that need to be kept for each board.&n; */
DECL|struct|sm_state
r_struct
id|sm_state
(brace
DECL|member|hdrv
r_struct
id|hdlcdrv_state
id|hdrv
suffix:semicolon
DECL|member|mode_tx
r_const
r_struct
id|modem_tx_info
op_star
id|mode_tx
suffix:semicolon
DECL|member|mode_rx
r_const
r_struct
id|modem_rx_info
op_star
id|mode_rx
suffix:semicolon
DECL|member|hwdrv
r_const
r_struct
id|hardware_info
op_star
id|hwdrv
suffix:semicolon
DECL|member|pardev
r_struct
id|pardevice
op_star
id|pardev
suffix:semicolon
multiline_comment|/*&n;&t; * Hardware (soundcard) access routines state&n;&t; */
r_struct
(brace
DECL|member|ibuf
r_void
op_star
id|ibuf
suffix:semicolon
DECL|member|ifragsz
r_int
r_int
id|ifragsz
suffix:semicolon
DECL|member|ifragptr
r_int
r_int
id|ifragptr
suffix:semicolon
DECL|member|i16bit
r_int
r_int
id|i16bit
suffix:semicolon
DECL|member|obuf
r_void
op_star
id|obuf
suffix:semicolon
DECL|member|ofragsz
r_int
r_int
id|ofragsz
suffix:semicolon
DECL|member|ofragptr
r_int
r_int
id|ofragptr
suffix:semicolon
DECL|member|o16bit
r_int
r_int
id|o16bit
suffix:semicolon
DECL|member|ptt_cnt
r_int
id|ptt_cnt
suffix:semicolon
DECL|member|dma
)brace
id|dma
suffix:semicolon
r_union
(brace
DECL|member|hw
r_int
id|hw
(braket
l_int|32
op_div
r_sizeof
(paren
r_int
)paren
)braket
suffix:semicolon
DECL|member|hw
)brace
id|hw
suffix:semicolon
multiline_comment|/*&n;&t; * state of the modem code&n;&t; */
r_union
(brace
DECL|member|m
r_int
id|m
(braket
l_int|48
op_div
r_sizeof
(paren
r_int
)paren
)braket
suffix:semicolon
DECL|member|m
)brace
id|m
suffix:semicolon
r_union
(brace
DECL|member|d
r_int
id|d
(braket
l_int|256
op_div
r_sizeof
(paren
r_int
)paren
)braket
suffix:semicolon
DECL|member|d
)brace
id|d
suffix:semicolon
DECL|macro|DIAGDATALEN
mdefine_line|#define DIAGDATALEN 64
DECL|struct|diag_data
r_struct
id|diag_data
(brace
DECL|member|mode
r_int
r_int
id|mode
suffix:semicolon
DECL|member|flags
r_int
r_int
id|flags
suffix:semicolon
DECL|member|ptr
r_volatile
r_int
id|ptr
suffix:semicolon
DECL|member|data
r_int
id|data
(braket
id|DIAGDATALEN
)braket
suffix:semicolon
DECL|member|diag
)brace
id|diag
suffix:semicolon
macro_line|#ifdef SM_DEBUG
DECL|struct|debug_vals
r_struct
id|debug_vals
(brace
DECL|member|last_jiffies
r_int
r_int
id|last_jiffies
suffix:semicolon
DECL|member|cur_intcnt
r_int
id|cur_intcnt
suffix:semicolon
DECL|member|last_intcnt
r_int
id|last_intcnt
suffix:semicolon
DECL|member|mod_cyc
r_int
id|mod_cyc
suffix:semicolon
DECL|member|demod_cyc
r_int
id|demod_cyc
suffix:semicolon
DECL|member|dma_residue
r_int
id|dma_residue
suffix:semicolon
DECL|member|debug_vals
)brace
id|debug_vals
suffix:semicolon
macro_line|#endif /* SM_DEBUG */
)brace
suffix:semicolon
multiline_comment|/* ---------------------------------------------------------------------- */
multiline_comment|/*&n; * Mode definition structure&n; */
DECL|struct|modem_tx_info
r_struct
id|modem_tx_info
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|loc_storage
r_int
r_int
id|loc_storage
suffix:semicolon
DECL|member|srate
r_int
id|srate
suffix:semicolon
DECL|member|bitrate
r_int
id|bitrate
suffix:semicolon
DECL|member|modulator_u8
r_void
(paren
op_star
id|modulator_u8
)paren
(paren
r_struct
id|sm_state
op_star
comma
r_int
r_char
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|modulator_s16
r_void
(paren
op_star
id|modulator_s16
)paren
(paren
r_struct
id|sm_state
op_star
comma
r_int
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|init
r_void
(paren
op_star
id|init
)paren
(paren
r_struct
id|sm_state
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|modem_rx_info
r_struct
id|modem_rx_info
(brace
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|loc_storage
r_int
r_int
id|loc_storage
suffix:semicolon
DECL|member|srate
r_int
id|srate
suffix:semicolon
DECL|member|bitrate
r_int
id|bitrate
suffix:semicolon
DECL|member|overlap
r_int
r_int
id|overlap
suffix:semicolon
DECL|member|sperbit
r_int
r_int
id|sperbit
suffix:semicolon
DECL|member|demodulator_u8
r_void
(paren
op_star
id|demodulator_u8
)paren
(paren
r_struct
id|sm_state
op_star
comma
r_const
r_int
r_char
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|demodulator_s16
r_void
(paren
op_star
id|demodulator_s16
)paren
(paren
r_struct
id|sm_state
op_star
comma
r_const
r_int
op_star
comma
r_int
r_int
)paren
suffix:semicolon
DECL|member|init
r_void
(paren
op_star
id|init
)paren
(paren
r_struct
id|sm_state
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* ---------------------------------------------------------------------- */
multiline_comment|/*&n; * Soundcard driver definition structure&n; */
DECL|struct|hardware_info
r_struct
id|hardware_info
(brace
DECL|member|hw_name
r_char
op_star
id|hw_name
suffix:semicolon
multiline_comment|/* used for request_{region,irq,dma} */
DECL|member|loc_storage
r_int
r_int
id|loc_storage
suffix:semicolon
multiline_comment|/*&n;&t; * mode specific open/close&n;&t; */
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_struct
id|net_device
op_star
comma
r_struct
id|sm_state
op_star
)paren
suffix:semicolon
DECL|member|close
r_int
(paren
op_star
id|close
)paren
(paren
r_struct
id|net_device
op_star
comma
r_struct
id|sm_state
op_star
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_struct
id|net_device
op_star
comma
r_struct
id|sm_state
op_star
comma
r_struct
id|ifreq
op_star
comma
r_struct
id|hdlcdrv_ioctl
op_star
comma
r_int
)paren
suffix:semicolon
DECL|member|sethw
r_int
(paren
op_star
id|sethw
)paren
(paren
r_struct
id|net_device
op_star
comma
r_struct
id|sm_state
op_star
comma
r_char
op_star
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/* --------------------------------------------------------------------- */
DECL|macro|min
mdefine_line|#define min(a, b) (((a) &lt; (b)) ? (a) : (b))
DECL|macro|max
mdefine_line|#define max(a, b) (((a) &gt; (b)) ? (a) : (b))
multiline_comment|/* --------------------------------------------------------------------- */
r_extern
r_const
r_char
id|sm_drvname
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
id|sm_drvinfo
(braket
)braket
suffix:semicolon
multiline_comment|/* --------------------------------------------------------------------- */
multiline_comment|/*&n; * ===================== diagnostics stuff ===============================&n; */
DECL|function|diag_trigger
r_extern
r_inline
r_void
id|diag_trigger
c_func
(paren
r_struct
id|sm_state
op_star
id|sm
)paren
(brace
r_if
c_cond
(paren
id|sm-&gt;diag.ptr
OL
l_int|0
)paren
r_if
c_cond
(paren
op_logical_neg
(paren
id|sm-&gt;diag.flags
op_amp
id|SM_DIAGFLAG_DCDGATE
)paren
op_logical_or
id|sm-&gt;hdrv.hdlcrx.dcd
)paren
id|sm-&gt;diag.ptr
op_assign
l_int|0
suffix:semicolon
)brace
multiline_comment|/* --------------------------------------------------------------------- */
DECL|macro|SHRT_MAX
mdefine_line|#define SHRT_MAX ((short)(((unsigned short)(~0U))&gt;&gt;1))
DECL|macro|SHRT_MIN
mdefine_line|#define SHRT_MIN (-SHRT_MAX-1)
DECL|function|diag_add
r_extern
r_inline
r_void
id|diag_add
c_func
(paren
r_struct
id|sm_state
op_star
id|sm
comma
r_int
id|valinp
comma
r_int
id|valdemod
)paren
(brace
r_int
id|val
suffix:semicolon
r_if
c_cond
(paren
(paren
id|sm-&gt;diag.mode
op_ne
id|SM_DIAGMODE_INPUT
op_logical_and
id|sm-&gt;diag.mode
op_ne
id|SM_DIAGMODE_DEMOD
)paren
op_logical_or
id|sm-&gt;diag.ptr
op_ge
id|DIAGDATALEN
op_logical_or
id|sm-&gt;diag.ptr
OL
l_int|0
)paren
r_return
suffix:semicolon
id|val
op_assign
(paren
id|sm-&gt;diag.mode
op_eq
id|SM_DIAGMODE_DEMOD
)paren
ques
c_cond
id|valdemod
suffix:colon
id|valinp
suffix:semicolon
multiline_comment|/* clip */
r_if
c_cond
(paren
id|val
OG
id|SHRT_MAX
)paren
id|val
op_assign
id|SHRT_MAX
suffix:semicolon
r_if
c_cond
(paren
id|val
OL
id|SHRT_MIN
)paren
id|val
op_assign
id|SHRT_MIN
suffix:semicolon
id|sm-&gt;diag.data
(braket
id|sm-&gt;diag.ptr
op_increment
)braket
op_assign
id|val
suffix:semicolon
)brace
multiline_comment|/* --------------------------------------------------------------------- */
DECL|function|diag_add_one
r_extern
r_inline
r_void
id|diag_add_one
c_func
(paren
r_struct
id|sm_state
op_star
id|sm
comma
r_int
id|val
)paren
(brace
r_if
c_cond
(paren
(paren
id|sm-&gt;diag.mode
op_ne
id|SM_DIAGMODE_INPUT
op_logical_and
id|sm-&gt;diag.mode
op_ne
id|SM_DIAGMODE_DEMOD
)paren
op_logical_or
id|sm-&gt;diag.ptr
op_ge
id|DIAGDATALEN
op_logical_or
id|sm-&gt;diag.ptr
OL
l_int|0
)paren
r_return
suffix:semicolon
multiline_comment|/* clip */
r_if
c_cond
(paren
id|val
OG
id|SHRT_MAX
)paren
id|val
op_assign
id|SHRT_MAX
suffix:semicolon
r_if
c_cond
(paren
id|val
OL
id|SHRT_MIN
)paren
id|val
op_assign
id|SHRT_MIN
suffix:semicolon
id|sm-&gt;diag.data
(braket
id|sm-&gt;diag.ptr
op_increment
)braket
op_assign
id|val
suffix:semicolon
)brace
multiline_comment|/* --------------------------------------------------------------------- */
DECL|function|diag_add_constellation
r_static
r_inline
r_void
id|diag_add_constellation
c_func
(paren
r_struct
id|sm_state
op_star
id|sm
comma
r_int
id|vali
comma
r_int
id|valq
)paren
(brace
r_if
c_cond
(paren
(paren
id|sm-&gt;diag.mode
op_ne
id|SM_DIAGMODE_CONSTELLATION
)paren
op_logical_or
id|sm-&gt;diag.ptr
op_ge
id|DIAGDATALEN
op_minus
l_int|1
op_logical_or
id|sm-&gt;diag.ptr
OL
l_int|0
)paren
r_return
suffix:semicolon
multiline_comment|/* clip */
r_if
c_cond
(paren
id|vali
OG
id|SHRT_MAX
)paren
id|vali
op_assign
id|SHRT_MAX
suffix:semicolon
r_if
c_cond
(paren
id|vali
OL
id|SHRT_MIN
)paren
id|vali
op_assign
id|SHRT_MIN
suffix:semicolon
r_if
c_cond
(paren
id|valq
OG
id|SHRT_MAX
)paren
id|valq
op_assign
id|SHRT_MAX
suffix:semicolon
r_if
c_cond
(paren
id|valq
OL
id|SHRT_MIN
)paren
id|valq
op_assign
id|SHRT_MIN
suffix:semicolon
id|sm-&gt;diag.data
(braket
id|sm-&gt;diag.ptr
op_increment
)braket
op_assign
id|vali
suffix:semicolon
id|sm-&gt;diag.data
(braket
id|sm-&gt;diag.ptr
op_increment
)braket
op_assign
id|valq
suffix:semicolon
)brace
multiline_comment|/* --------------------------------------------------------------------- */
multiline_comment|/*&n; * ===================== utility functions ===============================&n; */
macro_line|#if 0
r_extern
r_inline
r_int
r_int
id|hweight32
c_func
(paren
r_int
r_int
id|w
)paren
id|__attribute__
(paren
(paren
id|unused
)paren
)paren
suffix:semicolon
r_extern
r_inline
r_int
r_int
id|hweight16
c_func
(paren
r_int
r_int
id|w
)paren
id|__attribute__
(paren
(paren
id|unused
)paren
)paren
suffix:semicolon
r_extern
r_inline
r_int
r_int
id|hweight8
c_func
(paren
r_int
r_char
id|w
)paren
id|__attribute__
(paren
(paren
id|unused
)paren
)paren
suffix:semicolon
r_extern
r_inline
r_int
r_int
id|hweight32
c_func
(paren
r_int
r_int
id|w
)paren
(brace
r_int
r_int
id|res
op_assign
(paren
id|w
op_amp
l_int|0x55555555
)paren
op_plus
(paren
(paren
id|w
op_rshift
l_int|1
)paren
op_amp
l_int|0x55555555
)paren
suffix:semicolon
id|res
op_assign
(paren
id|res
op_amp
l_int|0x33333333
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|2
)paren
op_amp
l_int|0x33333333
)paren
suffix:semicolon
id|res
op_assign
(paren
id|res
op_amp
l_int|0x0F0F0F0F
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|4
)paren
op_amp
l_int|0x0F0F0F0F
)paren
suffix:semicolon
id|res
op_assign
(paren
id|res
op_amp
l_int|0x00FF00FF
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|8
)paren
op_amp
l_int|0x00FF00FF
)paren
suffix:semicolon
r_return
(paren
id|res
op_amp
l_int|0x0000FFFF
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|16
)paren
op_amp
l_int|0x0000FFFF
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_int
r_int
id|hweight16
c_func
(paren
r_int
r_int
id|w
)paren
(brace
r_int
r_int
id|res
op_assign
(paren
id|w
op_amp
l_int|0x5555
)paren
op_plus
(paren
(paren
id|w
op_rshift
l_int|1
)paren
op_amp
l_int|0x5555
)paren
suffix:semicolon
id|res
op_assign
(paren
id|res
op_amp
l_int|0x3333
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|2
)paren
op_amp
l_int|0x3333
)paren
suffix:semicolon
id|res
op_assign
(paren
id|res
op_amp
l_int|0x0F0F
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|4
)paren
op_amp
l_int|0x0F0F
)paren
suffix:semicolon
r_return
(paren
id|res
op_amp
l_int|0x00FF
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|8
)paren
op_amp
l_int|0x00FF
)paren
suffix:semicolon
)brace
r_extern
r_inline
r_int
r_int
id|hweight8
c_func
(paren
r_int
r_char
id|w
)paren
(brace
r_int
r_int
id|res
op_assign
(paren
id|w
op_amp
l_int|0x55
)paren
op_plus
(paren
(paren
id|w
op_rshift
l_int|1
)paren
op_amp
l_int|0x55
)paren
suffix:semicolon
id|res
op_assign
(paren
id|res
op_amp
l_int|0x33
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|2
)paren
op_amp
l_int|0x33
)paren
suffix:semicolon
r_return
(paren
id|res
op_amp
l_int|0x0F
)paren
op_plus
(paren
(paren
id|res
op_rshift
l_int|4
)paren
op_amp
l_int|0x0F
)paren
suffix:semicolon
)brace
macro_line|#endif
r_extern
r_inline
r_int
r_int
id|gcd
c_func
(paren
r_int
r_int
id|x
comma
r_int
r_int
id|y
)paren
id|__attribute__
(paren
(paren
id|unused
)paren
)paren
suffix:semicolon
r_extern
r_inline
r_int
r_int
id|lcm
c_func
(paren
r_int
r_int
id|x
comma
r_int
r_int
id|y
)paren
id|__attribute__
(paren
(paren
id|unused
)paren
)paren
suffix:semicolon
DECL|function|gcd
r_extern
r_inline
r_int
r_int
id|gcd
c_func
(paren
r_int
r_int
id|x
comma
r_int
r_int
id|y
)paren
(brace
r_for
c_loop
(paren
suffix:semicolon
suffix:semicolon
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id|x
)paren
r_return
id|y
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|y
)paren
r_return
id|x
suffix:semicolon
r_if
c_cond
(paren
id|x
OG
id|y
)paren
id|x
op_mod_assign
id|y
suffix:semicolon
r_else
id|y
op_mod_assign
id|x
suffix:semicolon
)brace
)brace
DECL|function|lcm
r_extern
r_inline
r_int
r_int
id|lcm
c_func
(paren
r_int
r_int
id|x
comma
r_int
r_int
id|y
)paren
(brace
r_return
id|x
op_star
id|y
op_div
id|gcd
c_func
(paren
id|x
comma
id|y
)paren
suffix:semicolon
)brace
multiline_comment|/* --------------------------------------------------------------------- */
multiline_comment|/*&n; * ===================== profiling =======================================&n; */
macro_line|#ifdef __i386__
multiline_comment|/*&n; * only do 32bit cycle counter arithmetic; we hope we won&squot;t overflow.&n; * in fact, overflowing modems would require over 2THz CPU clock speeds :-)&n; */
DECL|macro|time_exec
mdefine_line|#define time_exec(var,cmd)                                              &bslash;&n;({                                                                      &bslash;&n;&t;if (cpu_has_tsc) {                                              &bslash;&n;&t;&t;unsigned int cnt1, cnt2, cnt3;                          &bslash;&n;&t;&t;__asm__(&quot;.byte 0x0f,0x31&quot; : &quot;=a&quot; (cnt1), &quot;=d&quot; (cnt3));  &bslash;&n;&t;&t;cmd;                                                    &bslash;&n;&t;&t;__asm__(&quot;.byte 0x0f,0x31&quot; : &quot;=a&quot; (cnt2), &quot;=d&quot; (cnt3));  &bslash;&n;&t;&t;var = cnt2-cnt1;                                        &bslash;&n;&t;} else {                                                        &bslash;&n;&t;&t;cmd;                                                    &bslash;&n;&t;}                                                               &bslash;&n;})
macro_line|#else /* __i386__ */
DECL|macro|time_exec
mdefine_line|#define time_exec(var,cmd) cmd
macro_line|#endif /* __i386__ */
multiline_comment|/* --------------------------------------------------------------------- */
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_afsk1200_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_afsk2400_7_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_afsk2400_8_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_afsk2666_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_psk4800_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_hapn4800_8_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_hapn4800_10_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_hapn4800_pm8_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_hapn4800_pm10_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_fsk9600_4_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
id|sm_fsk9600_5_tx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_afsk1200_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_afsk2400_7_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_afsk2400_8_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_afsk2666_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_psk4800_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_hapn4800_8_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_hapn4800_10_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_hapn4800_pm8_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_hapn4800_pm10_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_fsk9600_4_rx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
id|sm_fsk9600_5_rx
suffix:semicolon
r_extern
r_const
r_struct
id|hardware_info
id|sm_hw_sbc
suffix:semicolon
r_extern
r_const
r_struct
id|hardware_info
id|sm_hw_sbcfdx
suffix:semicolon
r_extern
r_const
r_struct
id|hardware_info
id|sm_hw_wss
suffix:semicolon
r_extern
r_const
r_struct
id|hardware_info
id|sm_hw_wssfdx
suffix:semicolon
r_extern
r_const
r_struct
id|modem_tx_info
op_star
id|sm_modem_tx_table
(braket
)braket
suffix:semicolon
r_extern
r_const
r_struct
id|modem_rx_info
op_star
id|sm_modem_rx_table
(braket
)braket
suffix:semicolon
r_extern
r_const
r_struct
id|hardware_info
op_star
id|sm_hardware_table
(braket
)braket
suffix:semicolon
multiline_comment|/* --------------------------------------------------------------------- */
r_void
id|sm_output_status
c_func
(paren
r_struct
id|sm_state
op_star
id|sm
)paren
suffix:semicolon
multiline_comment|/*void sm_output_open(struct sm_state *sm);*/
multiline_comment|/*void sm_output_close(struct sm_state *sm);*/
multiline_comment|/* --------------------------------------------------------------------- */
DECL|function|sm_int_freq
r_extern
r_void
r_inline
id|sm_int_freq
c_func
(paren
r_struct
id|sm_state
op_star
id|sm
)paren
(brace
macro_line|#ifdef SM_DEBUG
r_int
r_int
id|cur_jiffies
op_assign
id|jiffies
suffix:semicolon
multiline_comment|/*&n;&t; * measure the interrupt frequency&n;&t; */
id|sm-&gt;debug_vals.cur_intcnt
op_increment
suffix:semicolon
r_if
c_cond
(paren
(paren
id|cur_jiffies
op_minus
id|sm-&gt;debug_vals.last_jiffies
)paren
op_ge
id|HZ
)paren
(brace
id|sm-&gt;debug_vals.last_jiffies
op_assign
id|cur_jiffies
suffix:semicolon
id|sm-&gt;debug_vals.last_intcnt
op_assign
id|sm-&gt;debug_vals.cur_intcnt
suffix:semicolon
id|sm-&gt;debug_vals.cur_intcnt
op_assign
l_int|0
suffix:semicolon
)brace
macro_line|#endif /* SM_DEBUG */
)brace
multiline_comment|/* --------------------------------------------------------------------- */
macro_line|#endif /* _SM_H */
eof
