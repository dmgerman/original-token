multiline_comment|/*&n;&t;drivers/net/tulip/tulip.h&n;&n;&t;Copyright 2000  The Linux Kernel Team&n;&t;Written/copyright 1994-1999 by Donald Becker.&n;&n;&t;This software may be used and distributed according to the terms&n;&t;of the GNU Public License, incorporated herein by reference.&n;&n;*/
macro_line|#ifndef __NET_TULIP_H__
DECL|macro|__NET_TULIP_H__
mdefine_line|#define __NET_TULIP_H__
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/types.h&gt;
macro_line|#include &lt;linux/spinlock.h&gt;
macro_line|#include &lt;linux/netdevice.h&gt;
macro_line|#include &lt;linux/timer.h&gt;
DECL|struct|tulip_chip_table
r_struct
id|tulip_chip_table
(brace
DECL|member|chip_name
r_char
op_star
id|chip_name
suffix:semicolon
DECL|member|io_size
r_int
id|io_size
suffix:semicolon
DECL|member|valid_intrs
r_int
id|valid_intrs
suffix:semicolon
multiline_comment|/* CSR7 interrupt enable settings */
DECL|member|flags
r_int
id|flags
suffix:semicolon
DECL|member|media_timer
r_void
(paren
op_star
id|media_timer
)paren
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|enum|tbl_flag
r_enum
id|tbl_flag
(brace
DECL|enumerator|HAS_MII
id|HAS_MII
op_assign
l_int|1
comma
DECL|enumerator|HAS_MEDIA_TABLE
id|HAS_MEDIA_TABLE
op_assign
l_int|2
comma
DECL|enumerator|CSR12_IN_SROM
id|CSR12_IN_SROM
op_assign
l_int|4
comma
DECL|enumerator|ALWAYS_CHECK_MII
id|ALWAYS_CHECK_MII
op_assign
l_int|8
comma
DECL|enumerator|HAS_ACPI
id|HAS_ACPI
op_assign
l_int|0x10
comma
DECL|enumerator|MC_HASH_ONLY
id|MC_HASH_ONLY
op_assign
l_int|0x20
comma
multiline_comment|/* Hash-only multicast filter. */
DECL|enumerator|HAS_PNICNWAY
id|HAS_PNICNWAY
op_assign
l_int|0x80
comma
DECL|enumerator|HAS_NWAY143
id|HAS_NWAY143
op_assign
l_int|0x40
comma
multiline_comment|/* Uses internal NWay xcvr. */
DECL|enumerator|HAS_8023X
id|HAS_8023X
op_assign
l_int|0x100
comma
)brace
suffix:semicolon
multiline_comment|/* Note 21142 == 21143. */
DECL|enum|chips
r_enum
id|chips
(brace
DECL|enumerator|DC21040
id|DC21040
op_assign
l_int|0
comma
DECL|enumerator|DC21041
id|DC21041
op_assign
l_int|1
comma
DECL|enumerator|DC21140
id|DC21140
op_assign
l_int|2
comma
DECL|enumerator|DC21142
DECL|enumerator|DC21143
id|DC21142
op_assign
l_int|3
comma
id|DC21143
op_assign
l_int|3
comma
DECL|enumerator|LC82C168
id|LC82C168
comma
DECL|enumerator|MX98713
id|MX98713
comma
DECL|enumerator|MX98715
id|MX98715
comma
DECL|enumerator|MX98725
id|MX98725
comma
DECL|enumerator|AX88140
id|AX88140
comma
DECL|enumerator|PNIC2
id|PNIC2
comma
DECL|enumerator|COMET
id|COMET
comma
DECL|enumerator|COMPEX9881
id|COMPEX9881
comma
DECL|enumerator|I21145
id|I21145
comma
DECL|enumerator|X3201_3
id|X3201_3
comma
)brace
suffix:semicolon
DECL|enum|MediaIs
r_enum
id|MediaIs
(brace
DECL|enumerator|MediaIsFD
id|MediaIsFD
op_assign
l_int|1
comma
DECL|enumerator|MediaAlwaysFD
id|MediaAlwaysFD
op_assign
l_int|2
comma
DECL|enumerator|MediaIsMII
id|MediaIsMII
op_assign
l_int|4
comma
DECL|enumerator|MediaIsFx
id|MediaIsFx
op_assign
l_int|8
comma
DECL|enumerator|MediaIs100
id|MediaIs100
op_assign
l_int|16
)brace
suffix:semicolon
multiline_comment|/* Offsets to the Command and Status Registers, &quot;CSRs&quot;.  All accesses&n;   must be longword instructions and quadword aligned. */
DECL|enum|tulip_offsets
r_enum
id|tulip_offsets
(brace
DECL|enumerator|CSR0
id|CSR0
op_assign
l_int|0
comma
DECL|enumerator|CSR1
id|CSR1
op_assign
l_int|0x08
comma
DECL|enumerator|CSR2
id|CSR2
op_assign
l_int|0x10
comma
DECL|enumerator|CSR3
id|CSR3
op_assign
l_int|0x18
comma
DECL|enumerator|CSR4
id|CSR4
op_assign
l_int|0x20
comma
DECL|enumerator|CSR5
id|CSR5
op_assign
l_int|0x28
comma
DECL|enumerator|CSR6
id|CSR6
op_assign
l_int|0x30
comma
DECL|enumerator|CSR7
id|CSR7
op_assign
l_int|0x38
comma
DECL|enumerator|CSR8
id|CSR8
op_assign
l_int|0x40
comma
DECL|enumerator|CSR9
id|CSR9
op_assign
l_int|0x48
comma
DECL|enumerator|CSR10
id|CSR10
op_assign
l_int|0x50
comma
DECL|enumerator|CSR11
id|CSR11
op_assign
l_int|0x58
comma
DECL|enumerator|CSR12
id|CSR12
op_assign
l_int|0x60
comma
DECL|enumerator|CSR13
id|CSR13
op_assign
l_int|0x68
comma
DECL|enumerator|CSR14
id|CSR14
op_assign
l_int|0x70
comma
DECL|enumerator|CSR15
id|CSR15
op_assign
l_int|0x78
)brace
suffix:semicolon
multiline_comment|/* The bits in the CSR5 status registers, mostly interrupt sources. */
DECL|enum|status_bits
r_enum
id|status_bits
(brace
DECL|enumerator|TimerInt
id|TimerInt
op_assign
l_int|0x800
comma
DECL|enumerator|SytemError
id|SytemError
op_assign
l_int|0x2000
comma
DECL|enumerator|TPLnkFail
id|TPLnkFail
op_assign
l_int|0x1000
comma
DECL|enumerator|TPLnkPass
id|TPLnkPass
op_assign
l_int|0x10
comma
DECL|enumerator|NormalIntr
id|NormalIntr
op_assign
l_int|0x10000
comma
DECL|enumerator|AbnormalIntr
id|AbnormalIntr
op_assign
l_int|0x8000
comma
DECL|enumerator|RxJabber
id|RxJabber
op_assign
l_int|0x200
comma
DECL|enumerator|RxDied
id|RxDied
op_assign
l_int|0x100
comma
DECL|enumerator|RxNoBuf
id|RxNoBuf
op_assign
l_int|0x80
comma
DECL|enumerator|RxIntr
id|RxIntr
op_assign
l_int|0x40
comma
DECL|enumerator|TxFIFOUnderflow
id|TxFIFOUnderflow
op_assign
l_int|0x20
comma
DECL|enumerator|TxJabber
id|TxJabber
op_assign
l_int|0x08
comma
DECL|enumerator|TxNoBuf
id|TxNoBuf
op_assign
l_int|0x04
comma
DECL|enumerator|TxDied
id|TxDied
op_assign
l_int|0x02
comma
DECL|enumerator|TxIntr
id|TxIntr
op_assign
l_int|0x01
comma
)brace
suffix:semicolon
multiline_comment|/* The Tulip Rx and Tx buffer descriptors. */
DECL|struct|tulip_rx_desc
r_struct
id|tulip_rx_desc
(brace
DECL|member|status
id|s32
id|status
suffix:semicolon
DECL|member|length
id|s32
id|length
suffix:semicolon
DECL|member|buffer1
id|u32
id|buffer1
suffix:semicolon
DECL|member|buffer2
id|u32
id|buffer2
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|tulip_tx_desc
r_struct
id|tulip_tx_desc
(brace
DECL|member|status
id|s32
id|status
suffix:semicolon
DECL|member|length
id|s32
id|length
suffix:semicolon
DECL|member|buffer1
id|u32
id|buffer1
suffix:semicolon
DECL|member|buffer2
id|u32
id|buffer2
suffix:semicolon
multiline_comment|/* We use only buffer 1.  */
)brace
suffix:semicolon
DECL|enum|desc_status_bits
r_enum
id|desc_status_bits
(brace
DECL|enumerator|DescOwned
id|DescOwned
op_assign
l_int|0x80000000
comma
DECL|enumerator|RxDescFatalErr
id|RxDescFatalErr
op_assign
l_int|0x8000
comma
DECL|enumerator|RxWholePkt
id|RxWholePkt
op_assign
l_int|0x0300
comma
)brace
suffix:semicolon
multiline_comment|/* Keep the ring sizes a power of two for efficiency.&n;   Making the Tx ring too large decreases the effectiveness of channel&n;   bonding and packet priority.&n;   There are no ill effects from too-large receive rings. */
DECL|macro|TX_RING_SIZE
mdefine_line|#define TX_RING_SIZE&t;16
DECL|macro|RX_RING_SIZE
mdefine_line|#define RX_RING_SIZE&t;32
DECL|macro|PKT_BUF_SZ
mdefine_line|#define PKT_BUF_SZ&t;&t;1536&t;/* Size of each temporary Rx buffer. */
multiline_comment|/* Ring-wrap flag in length field, use for last ring entry.&n;&t;0x01000000 means chain on buffer2 address,&n;&t;0x02000000 means use the ring start address in CSR2/3.&n;   Note: Some work-alike chips do not function correctly in chained mode.&n;   The ASIX chip works only in chained mode.&n;   Thus we indicates ring mode, but always write the &squot;next&squot; field for&n;   chained mode as well.&n;*/
DECL|macro|DESC_RING_WRAP
mdefine_line|#define DESC_RING_WRAP 0x02000000
multiline_comment|/*  EEPROM_Ctrl bits. */
DECL|macro|EE_SHIFT_CLK
mdefine_line|#define EE_SHIFT_CLK&t;0x02&t;/* EEPROM shift clock. */
DECL|macro|EE_CS
mdefine_line|#define EE_CS&t;&t;&t;0x01&t;/* EEPROM chip select. */
DECL|macro|EE_DATA_WRITE
mdefine_line|#define EE_DATA_WRITE&t;0x04&t;/* Data from the Tulip to EEPROM. */
DECL|macro|EE_WRITE_0
mdefine_line|#define EE_WRITE_0&t;&t;0x01
DECL|macro|EE_WRITE_1
mdefine_line|#define EE_WRITE_1&t;&t;0x05
DECL|macro|EE_DATA_READ
mdefine_line|#define EE_DATA_READ&t;0x08&t;/* Data from the EEPROM chip. */
DECL|macro|EE_ENB
mdefine_line|#define EE_ENB&t;&t;&t;(0x4800 | EE_CS)
multiline_comment|/* Delay between EEPROM clock transitions.&n;   Even at 33Mhz current PCI implementations don&squot;t overrun the EEPROM clock.&n;   We add a bus turn-around to insure that this remains true. */
DECL|macro|eeprom_delay
mdefine_line|#define eeprom_delay()&t;inl(ee_addr)
multiline_comment|/* The EEPROM commands include the alway-set leading bit. */
DECL|macro|EE_READ_CMD
mdefine_line|#define EE_READ_CMD&t;&t;(6)
DECL|macro|EEPROM_SIZE
mdefine_line|#define EEPROM_SIZE 128 &t;/* 2 &lt;&lt; EEPROM_ADDRLEN */
multiline_comment|/* The maximum data clock rate is 2.5 Mhz.  The minimum timing is usually&n;   met by back-to-back PCI I/O cycles, but we insert a delay to avoid&n;   &quot;overclocking&quot; issues or future 66Mhz PCI. */
DECL|macro|mdio_delay
mdefine_line|#define mdio_delay() inl(mdio_addr)
multiline_comment|/* Read and write the MII registers using software-generated serial&n;   MDIO protocol.  It is just different enough from the EEPROM protocol&n;   to not share code.  The maxium data clock rate is 2.5 Mhz. */
DECL|macro|MDIO_SHIFT_CLK
mdefine_line|#define MDIO_SHIFT_CLK&t;0x10000
DECL|macro|MDIO_DATA_WRITE0
mdefine_line|#define MDIO_DATA_WRITE0 0x00000
DECL|macro|MDIO_DATA_WRITE1
mdefine_line|#define MDIO_DATA_WRITE1 0x20000
DECL|macro|MDIO_ENB
mdefine_line|#define MDIO_ENB&t;&t;0x00000&t;&t;/* Ignore the 0x02000 databook setting. */
DECL|macro|MDIO_ENB_IN
mdefine_line|#define MDIO_ENB_IN&t;&t;0x40000
DECL|macro|MDIO_DATA_READ
mdefine_line|#define MDIO_DATA_READ&t;0x80000
DECL|macro|RUN_AT
mdefine_line|#define RUN_AT(x) (jiffies + (x))
macro_line|#if defined(__i386__)&t;&t;&t;/* AKA get_unaligned() */
DECL|macro|get_u16
mdefine_line|#define get_u16(ptr) (*(u16 *)(ptr))
macro_line|#else
DECL|macro|get_u16
mdefine_line|#define get_u16(ptr) (((u8*)(ptr))[0] + (((u8*)(ptr))[1]&lt;&lt;8))
macro_line|#endif
multiline_comment|/* Condensed operations for readability. */
DECL|macro|virt_to_le32desc
mdefine_line|#define virt_to_le32desc(addr)  cpu_to_le32(virt_to_bus(addr))
DECL|macro|le32desc_to_virt
mdefine_line|#define le32desc_to_virt(addr)  bus_to_virt(le32_to_cpu(addr))
DECL|struct|medialeaf
r_struct
id|medialeaf
(brace
DECL|member|type
id|u8
id|type
suffix:semicolon
DECL|member|media
id|u8
id|media
suffix:semicolon
DECL|member|leafdata
r_int
r_char
op_star
id|leafdata
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mediatable
r_struct
id|mediatable
(brace
DECL|member|defaultmedia
id|u16
id|defaultmedia
suffix:semicolon
DECL|member|leafcount
id|u8
id|leafcount
suffix:semicolon
DECL|member|csr12dir
id|u8
id|csr12dir
suffix:semicolon
multiline_comment|/* General purpose pin directions. */
DECL|member|has_mii
r_int
id|has_mii
suffix:colon
l_int|1
suffix:semicolon
DECL|member|has_nonmii
r_int
id|has_nonmii
suffix:colon
l_int|1
suffix:semicolon
DECL|member|has_reset
r_int
id|has_reset
suffix:colon
l_int|6
suffix:semicolon
DECL|member|csr15dir
id|u32
id|csr15dir
suffix:semicolon
DECL|member|csr15val
id|u32
id|csr15val
suffix:semicolon
multiline_comment|/* 21143 NWay setting. */
DECL|member|mleaf
r_struct
id|medialeaf
id|mleaf
(braket
l_int|0
)braket
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mediainfo
r_struct
id|mediainfo
(brace
DECL|member|next
r_struct
id|mediainfo
op_star
id|next
suffix:semicolon
DECL|member|info_type
r_int
id|info_type
suffix:semicolon
DECL|member|index
r_int
id|index
suffix:semicolon
DECL|member|info
r_int
r_char
op_star
id|info
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|tulip_private
r_struct
id|tulip_private
(brace
DECL|member|product_name
r_const
r_char
op_star
id|product_name
suffix:semicolon
DECL|member|next_module
r_struct
id|net_device
op_star
id|next_module
suffix:semicolon
DECL|member|rx_ring
r_struct
id|tulip_rx_desc
id|rx_ring
(braket
id|RX_RING_SIZE
)braket
suffix:semicolon
DECL|member|tx_ring
r_struct
id|tulip_tx_desc
id|tx_ring
(braket
id|TX_RING_SIZE
)braket
suffix:semicolon
multiline_comment|/* The saved address of a sent-in-place packet/buffer, for skfree(). */
DECL|member|tx_skbuff
r_struct
id|sk_buff
op_star
id|tx_skbuff
(braket
id|TX_RING_SIZE
)braket
suffix:semicolon
multiline_comment|/* The addresses of receive-in-place skbuffs. */
DECL|member|rx_skbuff
r_struct
id|sk_buff
op_star
id|rx_skbuff
(braket
id|RX_RING_SIZE
)braket
suffix:semicolon
DECL|member|rx_buffs
r_char
op_star
id|rx_buffs
suffix:semicolon
multiline_comment|/* Address of temporary Rx buffers. */
DECL|member|setup_frame
id|u16
id|setup_frame
(braket
l_int|96
)braket
suffix:semicolon
multiline_comment|/* Pseudo-Tx frame to init address table. */
DECL|member|chip_id
r_int
id|chip_id
suffix:semicolon
DECL|member|revision
r_int
id|revision
suffix:semicolon
DECL|member|flags
r_int
id|flags
suffix:semicolon
DECL|member|stats
r_struct
id|net_device_stats
id|stats
suffix:semicolon
DECL|member|timer
r_struct
id|timer_list
id|timer
suffix:semicolon
multiline_comment|/* Media selection timer. */
DECL|member|tx_lock
id|spinlock_t
id|tx_lock
suffix:semicolon
DECL|member|cur_rx
DECL|member|cur_tx
r_int
r_int
id|cur_rx
comma
id|cur_tx
suffix:semicolon
multiline_comment|/* The next free ring entry */
DECL|member|dirty_rx
DECL|member|dirty_tx
r_int
r_int
id|dirty_rx
comma
id|dirty_tx
suffix:semicolon
multiline_comment|/* The ring entries to be free()ed. */
DECL|member|tx_full
r_int
r_int
id|tx_full
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* The Tx queue is full. */
DECL|member|full_duplex
r_int
r_int
id|full_duplex
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* Full-duplex operation requested. */
DECL|member|full_duplex_lock
r_int
r_int
id|full_duplex_lock
suffix:colon
l_int|1
suffix:semicolon
DECL|member|fake_addr
r_int
r_int
id|fake_addr
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* Multiport board faked address. */
DECL|member|default_port
r_int
r_int
id|default_port
suffix:colon
l_int|4
suffix:semicolon
multiline_comment|/* Last dev-&gt;if_port value. */
DECL|member|media2
r_int
r_int
id|media2
suffix:colon
l_int|4
suffix:semicolon
multiline_comment|/* Secondary monitored media port. */
DECL|member|medialock
r_int
r_int
id|medialock
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* Don&squot;t sense media type. */
DECL|member|mediasense
r_int
r_int
id|mediasense
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* Media sensing in progress. */
DECL|member|nway
DECL|member|nwayset
r_int
r_int
id|nway
suffix:colon
l_int|1
comma
id|nwayset
suffix:colon
l_int|1
suffix:semicolon
multiline_comment|/* 21143 internal NWay. */
DECL|member|csr0
r_int
r_int
id|csr0
suffix:semicolon
multiline_comment|/* CSR0 setting. */
DECL|member|csr6
r_int
r_int
id|csr6
suffix:semicolon
multiline_comment|/* Current CSR6 control settings. */
DECL|member|eeprom
r_int
r_char
id|eeprom
(braket
id|EEPROM_SIZE
)braket
suffix:semicolon
multiline_comment|/* Serial EEPROM contents. */
DECL|member|link_change
r_void
(paren
op_star
id|link_change
)paren
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|csr5
)paren
suffix:semicolon
DECL|member|to_advertise
id|u16
id|to_advertise
suffix:semicolon
multiline_comment|/* NWay capabilities advertised.  */
DECL|member|lpar
id|u16
id|lpar
suffix:semicolon
multiline_comment|/* 21143 Link partner ability. */
DECL|member|advertising
id|u16
id|advertising
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|phys
DECL|member|mii_cnt
r_int
r_char
id|phys
(braket
l_int|4
)braket
comma
id|mii_cnt
suffix:semicolon
multiline_comment|/* MII device addresses. */
DECL|member|mtable
r_struct
id|mediatable
op_star
id|mtable
suffix:semicolon
DECL|member|cur_index
r_int
id|cur_index
suffix:semicolon
multiline_comment|/* Current media index. */
DECL|member|saved_if_port
r_int
id|saved_if_port
suffix:semicolon
DECL|member|pdev
r_struct
id|pci_dev
op_star
id|pdev
suffix:semicolon
DECL|member|ttimer
r_int
id|ttimer
suffix:semicolon
DECL|member|susp_rx
r_int
id|susp_rx
suffix:semicolon
DECL|member|nir
r_int
r_int
id|nir
suffix:semicolon
DECL|member|base_addr
r_int
r_int
id|base_addr
suffix:semicolon
DECL|member|pad0
DECL|member|pad1
r_int
id|pad0
comma
id|pad1
suffix:semicolon
multiline_comment|/* Used for 8-byte alignment */
)brace
suffix:semicolon
DECL|struct|eeprom_fixup
r_struct
id|eeprom_fixup
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|addr0
r_int
r_char
id|addr0
suffix:semicolon
DECL|member|addr1
r_int
r_char
id|addr1
suffix:semicolon
DECL|member|addr2
r_int
r_char
id|addr2
suffix:semicolon
DECL|member|newtable
id|u16
id|newtable
(braket
l_int|32
)braket
suffix:semicolon
multiline_comment|/* Max length below. */
)brace
suffix:semicolon
multiline_comment|/* 21142.c */
r_extern
id|u16
id|t21142_csr14
(braket
)braket
suffix:semicolon
r_void
id|t21142_timer
c_func
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
r_void
id|t21142_start_nway
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_void
id|t21142_lnk_change
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|csr5
)paren
suffix:semicolon
multiline_comment|/* eeprom.c */
r_void
id|tulip_parse_eeprom
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_int
id|tulip_read_eeprom
c_func
(paren
r_int
id|ioaddr
comma
r_int
id|location
comma
r_int
id|addr_len
)paren
suffix:semicolon
multiline_comment|/* interrupt.c */
r_extern
r_int
id|tulip_max_interrupt_work
suffix:semicolon
r_extern
r_int
id|tulip_rx_copybreak
suffix:semicolon
r_void
id|tulip_interrupt
c_func
(paren
r_int
id|irq
comma
r_void
op_star
id|dev_instance
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
multiline_comment|/* media.c */
r_int
id|tulip_mdio_read
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|phy_id
comma
r_int
id|location
)paren
suffix:semicolon
r_void
id|tulip_mdio_write
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|phy_id
comma
r_int
id|location
comma
r_int
id|value
)paren
suffix:semicolon
r_void
id|tulip_select_media
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|startup
)paren
suffix:semicolon
r_int
id|tulip_check_duplex
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
multiline_comment|/* pnic.c */
r_void
id|pnic_do_nway
c_func
(paren
r_struct
id|net_device
op_star
id|dev
)paren
suffix:semicolon
r_void
id|pnic_lnk_change
c_func
(paren
r_struct
id|net_device
op_star
id|dev
comma
r_int
id|csr5
)paren
suffix:semicolon
r_void
id|pnic_timer
c_func
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
multiline_comment|/* timer.c */
r_void
id|tulip_timer
c_func
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
r_void
id|mxic_timer
c_func
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
r_void
id|comet_timer
c_func
(paren
r_int
r_int
id|data
)paren
suffix:semicolon
multiline_comment|/* tulip_core.c */
r_extern
r_int
id|tulip_debug
suffix:semicolon
r_extern
r_const
r_char
op_star
r_const
id|medianame
(braket
)braket
suffix:semicolon
r_extern
r_const
r_char
id|tulip_media_cap
(braket
)braket
suffix:semicolon
r_extern
r_struct
id|tulip_chip_table
id|tulip_tbl
(braket
)braket
suffix:semicolon
r_extern
id|u8
id|t21040_csr13
(braket
)braket
suffix:semicolon
r_extern
id|u16
id|t21041_csr13
(braket
)braket
suffix:semicolon
r_extern
id|u16
id|t21041_csr14
(braket
)braket
suffix:semicolon
r_extern
id|u16
id|t21041_csr15
(braket
)braket
suffix:semicolon
r_void
id|tulip_outl_CSR6
(paren
r_struct
id|tulip_private
op_star
id|tp
comma
id|u32
id|newcsr6
)paren
suffix:semicolon
macro_line|#endif /* __NET_TULIP_H__ */
eof
