multiline_comment|/*&n;&t;setup.h&t;   (c) 1997-8   Grant R. Guenther &lt;grant@torque.net&gt;&n;&t;&t;                Under the terms of the GNU public license.&n;&n;        This is a table driven setup function for kernel modules&n;        using the module.variable=val,... command line notation.&n;&n;*/
multiline_comment|/* Changes:&n;&n;&t;1.01&t;GRG 1998.05.05&t;Allow negative and defaulted values&n;&n;*/
macro_line|#include &lt;linux/ctype.h&gt;
macro_line|#include &lt;linux/string.h&gt;
DECL|struct|setup_tab_t
r_struct
id|setup_tab_t
(brace
DECL|member|tag
r_char
op_star
id|tag
suffix:semicolon
multiline_comment|/* variable name */
DECL|member|size
r_int
id|size
suffix:semicolon
multiline_comment|/* number of elements in array */
DECL|member|iv
r_int
op_star
id|iv
suffix:semicolon
multiline_comment|/* pointer to variable */
)brace
suffix:semicolon
DECL|typedef|STT
r_typedef
r_struct
id|setup_tab_t
id|STT
suffix:semicolon
multiline_comment|/*  t &t;  is a table that describes the variables that can be set&n;&t;  by gen_setup&n;    n&t;  is the number of entries in the table&n;    ss&t;  is a string of the form:&n;&n;&t;&t;&lt;tag&gt;=[&lt;val&gt;,...]&lt;val&gt;&n;*/
DECL|function|generic_setup
r_static
r_void
id|generic_setup
c_func
(paren
id|STT
id|t
(braket
)braket
comma
r_int
id|n
comma
r_char
op_star
id|ss
)paren
(brace
r_int
id|j
comma
id|k
comma
id|sgn
suffix:semicolon
id|k
op_assign
l_int|0
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|n
suffix:semicolon
id|j
op_increment
)paren
(brace
id|k
op_assign
id|strlen
c_func
(paren
id|t
(braket
id|j
)braket
dot
id|tag
)paren
suffix:semicolon
r_if
c_cond
(paren
id|strncmp
c_func
(paren
id|ss
comma
id|t
(braket
id|j
)braket
dot
id|tag
comma
id|k
)paren
op_eq
l_int|0
)paren
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id|j
op_eq
id|n
)paren
r_return
suffix:semicolon
r_if
c_cond
(paren
id|ss
(braket
id|k
)braket
op_eq
l_int|0
)paren
(brace
id|t
(braket
id|j
)braket
dot
id|iv
(braket
l_int|0
)braket
op_assign
l_int|1
suffix:semicolon
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
id|ss
(braket
id|k
)braket
op_ne
l_char|&squot;=&squot;
)paren
r_return
suffix:semicolon
id|ss
op_add_assign
(paren
id|k
op_plus
l_int|1
)paren
suffix:semicolon
id|k
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|ss
op_logical_and
(paren
id|k
OL
id|t
(braket
id|j
)braket
dot
id|size
)paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
op_star
id|ss
)paren
r_break
suffix:semicolon
id|sgn
op_assign
l_int|1
suffix:semicolon
r_if
c_cond
(paren
op_star
id|ss
op_eq
l_char|&squot;-&squot;
)paren
(brace
id|ss
op_increment
suffix:semicolon
id|sgn
op_assign
op_minus
l_int|1
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
op_star
id|ss
)paren
r_break
suffix:semicolon
r_if
c_cond
(paren
id|isdigit
c_func
(paren
op_star
id|ss
)paren
)paren
id|t
(braket
id|j
)braket
dot
id|iv
(braket
id|k
)braket
op_assign
id|sgn
op_star
id|simple_strtoul
c_func
(paren
id|ss
comma
l_int|NULL
comma
l_int|0
)paren
suffix:semicolon
id|k
op_increment
suffix:semicolon
r_if
c_cond
(paren
(paren
id|ss
op_assign
id|strchr
c_func
(paren
id|ss
comma
l_char|&squot;,&squot;
)paren
)paren
op_ne
l_int|NULL
)paren
id|ss
op_increment
suffix:semicolon
)brace
)brace
multiline_comment|/* end of setup.h */
eof
