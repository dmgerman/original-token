macro_line|#ifndef IEEE1394_HIGHLEVEL_H
DECL|macro|IEEE1394_HIGHLEVEL_H
mdefine_line|#define IEEE1394_HIGHLEVEL_H
DECL|struct|hpsb_highlevel
r_struct
id|hpsb_highlevel
(brace
DECL|member|hl_list
r_struct
id|list_head
id|hl_list
suffix:semicolon
multiline_comment|/* List of hpsb_address_serve. */
DECL|member|addr_list
r_struct
id|list_head
id|addr_list
suffix:semicolon
DECL|member|name
r_const
r_char
op_star
id|name
suffix:semicolon
DECL|member|op
r_struct
id|hpsb_highlevel_ops
op_star
id|op
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|hpsb_address_serve
r_struct
id|hpsb_address_serve
(brace
DECL|member|as_list
r_struct
id|list_head
id|as_list
suffix:semicolon
multiline_comment|/* global list */
DECL|member|addr_list
r_struct
id|list_head
id|addr_list
suffix:semicolon
multiline_comment|/* hpsb_highlevel list */
DECL|member|op
r_struct
id|hpsb_address_ops
op_star
id|op
suffix:semicolon
multiline_comment|/* first address handled and first address behind, quadlet aligned */
DECL|member|start
DECL|member|end
id|u64
id|start
comma
id|end
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * The above structs are internal to highlevel driver handling.  Only the&n; * following structures are of interest to actual highlevel drivers.  &n; */
DECL|struct|hpsb_highlevel_ops
r_struct
id|hpsb_highlevel_ops
(brace
multiline_comment|/* Any of the following pointers can legally be NULL, except for&n;         * iso_receive which can only be NULL when you don&squot;t request&n;         * channels. */
multiline_comment|/* New host initialized.  Will also be called during&n;         * hpsb_register_highlevel for all hosts already installed. */
DECL|member|add_host
r_void
(paren
op_star
id|add_host
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
)paren
suffix:semicolon
multiline_comment|/* Host about to be removed.  Will also be called during&n;         * hpsb_unregister_highlevel once for each host. */
DECL|member|remove_host
r_void
(paren
op_star
id|remove_host
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
)paren
suffix:semicolon
multiline_comment|/* Host experienced bus reset with possible configuration changes.  Note&n;         * that this one may occur during interrupt/bottom half handling.  You&n;         * can not expect to be able to do stock hpsb_reads. */
DECL|member|host_reset
r_void
(paren
op_star
id|host_reset
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
)paren
suffix:semicolon
multiline_comment|/* An isochronous packet was received.  Channel contains the channel&n;         * number for your convenience, it is also contained in the included&n;         * packet header (first quadlet, CRCs are missing).  You may get called&n;         * for channel/host combinations you did not request. */
DECL|member|iso_receive
r_void
(paren
op_star
id|iso_receive
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|channel
comma
id|quadlet_t
op_star
id|data
comma
r_int
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/* A write request was received on either the FCP_COMMAND (direction =&n;         * 0) or the FCP_RESPONSE (direction = 1) register.  The cts arg&n;         * contains the cts field (first byte of data).&n;         */
DECL|member|fcp_request
r_void
(paren
op_star
id|fcp_request
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
r_int
id|direction
comma
r_int
id|cts
comma
id|u8
op_star
id|data
comma
r_int
r_int
id|length
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|hpsb_address_ops
r_struct
id|hpsb_address_ops
(brace
multiline_comment|/*&n;         * Null function pointers will make the respective operation complete &n;         * with RCODE_TYPE_ERROR.  Makes for easy to implement read-only &n;         * registers (just leave everything but read NULL).&n;         *&n;         * All functions shall return appropriate IEEE 1394 rcodes.&n;         */
multiline_comment|/* These functions have to implement block reads for themselves. */
DECL|member|read
r_int
(paren
op_star
id|read
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|quadlet_t
op_star
id|buffer
comma
id|u64
id|addr
comma
r_int
r_int
id|length
)paren
suffix:semicolon
DECL|member|write
r_int
(paren
op_star
id|write
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|quadlet_t
op_star
id|data
comma
id|u64
id|addr
comma
r_int
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/* Lock transactions: write results of ext_tcode operation into&n;         * *store. */
DECL|member|lock
r_int
(paren
op_star
id|lock
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|quadlet_t
op_star
id|store
comma
id|u64
id|addr
comma
id|quadlet_t
id|data
comma
id|quadlet_t
id|arg
comma
r_int
id|ext_tcode
)paren
suffix:semicolon
DECL|member|lock64
r_int
(paren
op_star
id|lock64
)paren
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|octlet_t
op_star
id|store
comma
id|u64
id|addr
comma
id|octlet_t
id|data
comma
id|octlet_t
id|arg
comma
r_int
id|ext_tcode
)paren
suffix:semicolon
)brace
suffix:semicolon
r_void
id|init_hpsb_highlevel
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|highlevel_add_host
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
)paren
suffix:semicolon
r_void
id|highlevel_remove_host
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
)paren
suffix:semicolon
r_void
id|highlevel_host_reset
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
)paren
suffix:semicolon
r_int
id|highlevel_read
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|quadlet_t
op_star
id|buffer
comma
id|u64
id|addr
comma
r_int
r_int
id|length
)paren
suffix:semicolon
r_int
id|highlevel_write
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|quadlet_t
op_star
id|data
comma
id|u64
id|addr
comma
r_int
r_int
id|length
)paren
suffix:semicolon
r_int
id|highlevel_lock
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|quadlet_t
op_star
id|store
comma
id|u64
id|addr
comma
id|quadlet_t
id|data
comma
id|quadlet_t
id|arg
comma
r_int
id|ext_tcode
)paren
suffix:semicolon
r_int
id|highlevel_lock64
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
id|octlet_t
op_star
id|store
comma
id|u64
id|addr
comma
id|octlet_t
id|data
comma
id|octlet_t
id|arg
comma
r_int
id|ext_tcode
)paren
suffix:semicolon
r_void
id|highlevel_iso_receive
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
id|quadlet_t
op_star
id|data
comma
r_int
r_int
id|length
)paren
suffix:semicolon
r_void
id|highlevel_fcp_request
c_func
(paren
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
id|nodeid
comma
r_int
id|direction
comma
id|u8
op_star
id|data
comma
r_int
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/*&n; * Register highlevel driver.  The name pointer has to stay valid at all times&n; * because the string is not copied.&n; */
r_struct
id|hpsb_highlevel
op_star
id|hpsb_register_highlevel
c_func
(paren
r_const
r_char
op_star
id|name
comma
r_struct
id|hpsb_highlevel_ops
op_star
id|ops
)paren
suffix:semicolon
r_void
id|hpsb_unregister_highlevel
c_func
(paren
r_struct
id|hpsb_highlevel
op_star
id|hl
)paren
suffix:semicolon
multiline_comment|/*&n; * Register handlers for host address spaces.  Start and end are 48 bit pointers&n; * and have to be quadlet aligned (end points to the first address behind the&n; * handled addresses.  This function can be called multiple times for a single&n; * hpsb_highlevel to implement sparse register sets.  The requested region must&n; * not overlap any previously allocated region, otherwise registering will fail.&n; *&n; * It returns true for successful allocation.  There is no unregister function,&n; * all address spaces are deallocated together with the hpsb_highlevel.&n; */
r_int
id|hpsb_register_addrspace
c_func
(paren
r_struct
id|hpsb_highlevel
op_star
id|hl
comma
r_struct
id|hpsb_address_ops
op_star
id|ops
comma
id|u64
id|start
comma
id|u64
id|end
)paren
suffix:semicolon
multiline_comment|/*&n; * Enable or disable receving a certain isochronous channel through the&n; * iso_receive op.&n; */
r_void
id|hpsb_listen_channel
c_func
(paren
r_struct
id|hpsb_highlevel
op_star
id|hl
comma
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
r_int
id|channel
)paren
suffix:semicolon
r_void
id|hpsb_unlisten_channel
c_func
(paren
r_struct
id|hpsb_highlevel
op_star
id|hl
comma
r_struct
id|hpsb_host
op_star
id|host
comma
r_int
r_int
id|channel
)paren
suffix:semicolon
macro_line|#endif /* IEEE1394_HIGHLEVEL_H */
eof
