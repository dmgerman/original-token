multiline_comment|/*&n; *  joy-analog.h  Version 1.2&n; *&n; *  Copyright (c) 1996-1998 Vojtech Pavlik&n; */
multiline_comment|/*&n; * This file is designed to be included in any joystick driver&n; * that communicates with standard analog joysticks. This currently&n; * is: joy-analog.c, joy-assasin.c, and joy-lightning.c&n; */
multiline_comment|/*&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2 of the License, or &n; * (at your option) any later version.&n; * &n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY; without even the implied warranty of&n; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; * GNU General Public License for more details.&n; * &n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA&n; * &n; * Should you need to contact me, the author, you can do so either by&n; * e-mail - mail your message to &lt;vojtech@suse.cz&gt;, or by paper mail:&n; * Vojtech Pavlik, Ucitelska 1576, Prague 8, 182 00 Czech Republic&n; */
DECL|macro|JS_AN_AXES_STD
mdefine_line|#define JS_AN_AXES_STD&t;&t;0x0f
DECL|macro|JS_AN_BUTTONS_STD
mdefine_line|#define JS_AN_BUTTONS_STD&t;0xf0
DECL|macro|JS_AN_BUTTONS_CHF
mdefine_line|#define JS_AN_BUTTONS_CHF&t;0x01
DECL|macro|JS_AN_HAT1_CHF
mdefine_line|#define JS_AN_HAT1_CHF&t;&t;0x02
DECL|macro|JS_AN_HAT2_CHF
mdefine_line|#define JS_AN_HAT2_CHF&t;&t;0x04
DECL|macro|JS_AN_ANY_CHF
mdefine_line|#define JS_AN_ANY_CHF&t;&t;0x07
DECL|macro|JS_AN_HAT_FCS
mdefine_line|#define JS_AN_HAT_FCS&t;&t;0x08
DECL|macro|JS_AN_HATS_ALL
mdefine_line|#define JS_AN_HATS_ALL&t;&t;0x0e
DECL|macro|JS_AN_BUTTON_PXY_X
mdefine_line|#define JS_AN_BUTTON_PXY_X&t;0x10
DECL|macro|JS_AN_BUTTON_PXY_Y
mdefine_line|#define JS_AN_BUTTON_PXY_Y&t;0x20
DECL|macro|JS_AN_BUTTON_PXY_U
mdefine_line|#define JS_AN_BUTTON_PXY_U&t;0x40
DECL|macro|JS_AN_BUTTON_PXY_V
mdefine_line|#define JS_AN_BUTTON_PXY_V&t;0x80
DECL|macro|JS_AN_BUTTONS_PXY_XY
mdefine_line|#define JS_AN_BUTTONS_PXY_XY&t;0x30
DECL|macro|JS_AN_BUTTONS_PXY_UV
mdefine_line|#define JS_AN_BUTTONS_PXY_UV&t;0xc0
DECL|macro|JS_AN_BUTTONS_PXY
mdefine_line|#define JS_AN_BUTTONS_PXY&t;0xf0
r_static
r_struct
(brace
DECL|member|x
r_int
id|x
suffix:semicolon
DECL|member|y
r_int
id|y
suffix:semicolon
DECL|variable|js_an_hat_to_axis
)brace
id|js_an_hat_to_axis
(braket
)braket
op_assign
(brace
(brace
l_int|0
comma
l_int|0
)brace
comma
(brace
l_int|0
comma
op_minus
l_int|1
)brace
comma
(brace
l_int|1
comma
l_int|0
)brace
comma
(brace
l_int|0
comma
l_int|1
)brace
comma
(brace
op_minus
l_int|1
comma
l_int|0
)brace
)brace
suffix:semicolon
DECL|struct|js_an_info
r_struct
id|js_an_info
(brace
DECL|member|io
r_int
id|io
suffix:semicolon
DECL|member|mask
r_int
r_char
id|mask
(braket
l_int|2
)braket
suffix:semicolon
DECL|member|extensions
r_int
r_int
id|extensions
suffix:semicolon
DECL|member|axes
r_int
id|axes
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|initial
r_int
id|initial
(braket
l_int|4
)braket
suffix:semicolon
DECL|member|buttons
r_int
r_char
id|buttons
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/*&n; * js_an_decode() decodes analog joystick data.&n; */
DECL|function|js_an_decode
r_static
r_void
id|js_an_decode
c_func
(paren
r_struct
id|js_an_info
op_star
id|info
comma
r_int
op_star
op_star
id|axes
comma
r_int
op_star
op_star
id|buttons
)paren
(brace
r_int
id|i
comma
id|j
comma
id|k
suffix:semicolon
r_int
id|hat1
comma
id|hat2
comma
id|hat3
suffix:semicolon
id|hat1
op_assign
id|hat2
op_assign
id|hat3
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;mask
(braket
l_int|0
)braket
op_amp
id|JS_AN_BUTTONS_STD
)paren
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;mask
(braket
l_int|1
)braket
op_amp
id|JS_AN_BUTTONS_STD
)paren
id|buttons
(braket
l_int|1
)braket
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_ANY_CHF
)paren
(brace
r_switch
c_cond
(paren
id|info-&gt;buttons
)paren
(brace
r_case
l_int|0x1
suffix:colon
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0x01
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x2
suffix:colon
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0x02
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x4
suffix:colon
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0x04
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x8
suffix:colon
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0x08
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x5
suffix:colon
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0x10
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x9
suffix:colon
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_assign
l_int|0x20
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0xf
suffix:colon
id|hat1
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0xb
suffix:colon
id|hat1
op_assign
l_int|2
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x7
suffix:colon
id|hat1
op_assign
l_int|3
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x3
suffix:colon
id|hat1
op_assign
l_int|4
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0xe
suffix:colon
id|hat2
op_assign
l_int|1
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0xa
suffix:colon
id|hat2
op_assign
l_int|2
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0x6
suffix:colon
id|hat2
op_assign
l_int|3
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|0xc
suffix:colon
id|hat2
op_assign
l_int|4
suffix:semicolon
r_break
suffix:semicolon
)brace
id|k
op_assign
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_CHF
ques
c_cond
l_int|6
suffix:colon
l_int|4
suffix:semicolon
)brace
r_else
(brace
r_for
c_loop
(paren
id|i
op_assign
l_int|1
suffix:semicolon
id|i
op_ge
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
r_for
c_loop
(paren
id|j
op_assign
id|k
op_assign
l_int|0
suffix:semicolon
id|j
OL
l_int|4
suffix:semicolon
id|j
op_increment
)paren
r_if
c_cond
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
(paren
l_int|0x10
op_lshift
id|j
)paren
)paren
id|buttons
(braket
id|i
)braket
(braket
l_int|0
)braket
op_or_assign
(paren
(paren
id|info-&gt;buttons
op_rshift
id|j
)paren
op_amp
l_int|1
)paren
op_lshift
id|k
op_increment
suffix:semicolon
)brace
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTON_PXY_X
)paren
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_or_assign
(paren
id|info-&gt;axes
(braket
l_int|2
)braket
OL
(paren
id|info-&gt;initial
(braket
l_int|2
)braket
op_rshift
l_int|1
)paren
)paren
op_lshift
id|k
op_increment
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTON_PXY_Y
)paren
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_or_assign
(paren
id|info-&gt;axes
(braket
l_int|3
)braket
OL
(paren
id|info-&gt;initial
(braket
l_int|3
)braket
op_rshift
l_int|1
)paren
)paren
op_lshift
id|k
op_increment
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTON_PXY_U
)paren
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_or_assign
(paren
id|info-&gt;axes
(braket
l_int|2
)braket
OG
(paren
id|info-&gt;initial
(braket
l_int|2
)braket
op_plus
(paren
id|info-&gt;initial
(braket
l_int|2
)braket
op_rshift
l_int|1
)paren
)paren
)paren
op_lshift
id|k
op_increment
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTON_PXY_V
)paren
id|buttons
(braket
l_int|0
)braket
(braket
l_int|0
)braket
op_or_assign
(paren
id|info-&gt;axes
(braket
l_int|3
)braket
OG
(paren
id|info-&gt;initial
(braket
l_int|3
)braket
op_plus
(paren
id|info-&gt;initial
(braket
l_int|3
)braket
op_rshift
l_int|1
)paren
)paren
)paren
op_lshift
id|k
op_increment
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HAT_FCS
)paren
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
l_int|4
suffix:semicolon
id|j
op_increment
)paren
r_if
c_cond
(paren
id|info-&gt;axes
(braket
l_int|3
)braket
OL
(paren
(paren
id|info-&gt;initial
(braket
l_int|3
)braket
op_star
(paren
(paren
id|j
op_lshift
l_int|1
)paren
op_plus
l_int|1
)paren
)paren
op_rshift
l_int|3
)paren
)paren
(brace
id|hat3
op_assign
id|j
op_plus
l_int|1
suffix:semicolon
r_break
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|1
suffix:semicolon
id|i
op_ge
l_int|0
suffix:semicolon
id|i
op_decrement
)paren
r_for
c_loop
(paren
id|j
op_assign
id|k
op_assign
l_int|0
suffix:semicolon
id|j
OL
l_int|4
suffix:semicolon
id|j
op_increment
)paren
r_if
c_cond
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
(paren
l_int|1
op_lshift
id|j
)paren
)paren
id|axes
(braket
id|i
)braket
(braket
id|k
op_increment
)braket
op_assign
id|info-&gt;axes
(braket
id|j
)braket
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HAT1_CHF
)paren
(brace
id|axes
(braket
l_int|0
)braket
(braket
id|k
op_increment
)braket
op_assign
id|js_an_hat_to_axis
(braket
id|hat1
)braket
dot
id|x
suffix:semicolon
id|axes
(braket
l_int|0
)braket
(braket
id|k
op_increment
)braket
op_assign
id|js_an_hat_to_axis
(braket
id|hat1
)braket
dot
id|y
suffix:semicolon
)brace
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HAT2_CHF
)paren
(brace
id|axes
(braket
l_int|0
)braket
(braket
id|k
op_increment
)braket
op_assign
id|js_an_hat_to_axis
(braket
id|hat2
)braket
dot
id|x
suffix:semicolon
id|axes
(braket
l_int|0
)braket
(braket
id|k
op_increment
)braket
op_assign
id|js_an_hat_to_axis
(braket
id|hat2
)braket
dot
id|y
suffix:semicolon
)brace
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HAT_FCS
)paren
(brace
id|axes
(braket
l_int|0
)braket
(braket
id|k
op_increment
)braket
op_assign
id|js_an_hat_to_axis
(braket
id|hat3
)braket
dot
id|x
suffix:semicolon
id|axes
(braket
l_int|0
)braket
(braket
id|k
op_increment
)braket
op_assign
id|js_an_hat_to_axis
(braket
id|hat3
)braket
dot
id|y
suffix:semicolon
)brace
)brace
multiline_comment|/*&n; * js_an_count_bits() counts set bits in a byte.&n; */
DECL|function|js_an_count_bits
r_static
r_inline
r_int
id|js_an_count_bits
c_func
(paren
r_int
r_int
id|c
)paren
(brace
r_int
id|i
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
id|c
)paren
(brace
id|i
op_add_assign
id|c
op_amp
l_int|1
suffix:semicolon
id|c
op_rshift_assign
l_int|1
suffix:semicolon
)brace
r_return
id|i
suffix:semicolon
)brace
multiline_comment|/*&n; * js_an_init_corr() initializes the correction values for&n; * analog joysticks.&n; */
DECL|function|js_an_init_corr
r_static
r_void
id|__init
id|js_an_init_corr
c_func
(paren
r_struct
id|js_an_info
op_star
id|info
comma
r_int
op_star
op_star
id|axes
comma
r_struct
id|js_corr
op_star
op_star
id|corr
comma
r_int
id|prec
)paren
(brace
r_int
id|i
comma
id|j
comma
id|t
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|2
suffix:semicolon
id|i
op_increment
)paren
r_for
c_loop
(paren
id|j
op_assign
l_int|0
suffix:semicolon
id|j
OL
id|js_an_count_bits
c_func
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
l_int|0xf
)paren
suffix:semicolon
id|j
op_increment
)paren
(brace
r_if
c_cond
(paren
(paren
id|j
op_eq
l_int|2
op_logical_and
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
l_int|0xb
)paren
op_eq
l_int|0xb
)paren
op_logical_or
(paren
id|j
op_eq
l_int|3
op_logical_and
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
l_int|0xf
)paren
op_eq
l_int|0xf
)paren
)paren
(brace
id|t
op_assign
(paren
id|axes
(braket
id|i
)braket
(braket
l_int|0
)braket
op_plus
id|axes
(braket
id|i
)braket
(braket
l_int|1
)braket
)paren
op_rshift
l_int|1
suffix:semicolon
)brace
r_else
(brace
id|t
op_assign
id|axes
(braket
id|i
)braket
(braket
id|j
)braket
suffix:semicolon
)brace
id|corr
(braket
id|i
)braket
(braket
id|j
)braket
dot
id|type
op_assign
id|JS_CORR_BROKEN
suffix:semicolon
id|corr
(braket
id|i
)braket
(braket
id|j
)braket
dot
id|prec
op_assign
id|prec
suffix:semicolon
id|corr
(braket
id|i
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|0
)braket
op_assign
id|t
op_minus
(paren
id|t
op_rshift
l_int|3
)paren
suffix:semicolon
id|corr
(braket
id|i
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|1
)braket
op_assign
id|t
op_plus
(paren
id|t
op_rshift
l_int|3
)paren
suffix:semicolon
id|corr
(braket
id|i
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|2
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
op_div
(paren
id|t
op_minus
(paren
id|t
op_rshift
l_int|2
)paren
op_plus
l_int|1
)paren
suffix:semicolon
id|corr
(braket
id|i
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|3
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
op_div
(paren
id|t
op_minus
(paren
id|t
op_rshift
l_int|2
)paren
op_plus
l_int|1
)paren
suffix:semicolon
)brace
id|i
op_assign
id|js_an_count_bits
c_func
(paren
id|info-&gt;mask
(braket
l_int|0
)braket
op_amp
l_int|0xf
)paren
suffix:semicolon
r_for
c_loop
(paren
id|j
op_assign
id|i
suffix:semicolon
id|j
OL
id|i
op_plus
(paren
id|js_an_count_bits
c_func
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HATS_ALL
)paren
op_lshift
l_int|1
)paren
suffix:semicolon
id|j
op_increment
)paren
(brace
id|corr
(braket
l_int|0
)braket
(braket
id|j
)braket
dot
id|type
op_assign
id|JS_CORR_BROKEN
suffix:semicolon
id|corr
(braket
l_int|0
)braket
(braket
id|j
)braket
dot
id|prec
op_assign
l_int|0
suffix:semicolon
id|corr
(braket
l_int|0
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|0
)braket
op_assign
l_int|0
suffix:semicolon
id|corr
(braket
l_int|0
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|1
)braket
op_assign
l_int|0
suffix:semicolon
id|corr
(braket
l_int|0
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|2
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
suffix:semicolon
id|corr
(braket
l_int|0
)braket
(braket
id|j
)braket
dot
id|coef
(braket
l_int|3
)braket
op_assign
(paren
l_int|1
op_lshift
l_int|29
)paren
suffix:semicolon
)brace
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
l_int|4
suffix:semicolon
id|i
op_increment
)paren
id|info-&gt;initial
(braket
id|i
)braket
op_assign
id|info-&gt;axes
(braket
id|i
)braket
suffix:semicolon
)brace
multiline_comment|/*&n; * js_an_probe_devs() probes for analog joysticks.&n; */
DECL|function|js_an_probe_devs
r_static
r_int
id|__init
id|js_an_probe_devs
c_func
(paren
r_struct
id|js_an_info
op_star
id|info
comma
r_int
id|exist
comma
r_int
id|mask0
comma
r_int
id|mask1
comma
r_struct
id|js_port
op_star
id|port
)paren
(brace
id|info-&gt;mask
(braket
l_int|0
)braket
op_assign
id|info-&gt;mask
(braket
l_int|1
)braket
op_assign
id|info-&gt;extensions
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|mask0
op_logical_or
id|mask1
)paren
(brace
id|info-&gt;mask
(braket
l_int|0
)braket
op_assign
id|mask0
op_amp
(paren
id|exist
op_or
l_int|0xf0
)paren
suffix:semicolon
id|info-&gt;mask
(braket
l_int|1
)braket
op_assign
id|mask1
op_amp
(paren
id|exist
op_or
l_int|0xf0
)paren
op_amp
op_complement
id|info-&gt;mask
(braket
l_int|0
)braket
suffix:semicolon
id|info-&gt;extensions
op_assign
(paren
id|mask0
op_rshift
l_int|8
)paren
op_amp
(paren
(paren
id|exist
op_amp
id|JS_AN_HAT_FCS
)paren
op_or
(paren
(paren
id|exist
op_lshift
l_int|2
)paren
op_amp
id|JS_AN_BUTTONS_PXY_XY
)paren
op_or
(paren
(paren
id|exist
op_lshift
l_int|4
)paren
op_amp
id|JS_AN_BUTTONS_PXY_UV
)paren
op_or
id|JS_AN_ANY_CHF
)paren
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_PXY
)paren
(brace
id|info-&gt;mask
(braket
l_int|0
)braket
op_and_assign
op_complement
(paren
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_PXY_XY
)paren
op_rshift
l_int|2
)paren
suffix:semicolon
id|info-&gt;mask
(braket
l_int|0
)braket
op_and_assign
op_complement
(paren
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_PXY_UV
)paren
op_rshift
l_int|4
)paren
suffix:semicolon
id|info-&gt;mask
(braket
l_int|1
)braket
op_assign
l_int|0
suffix:semicolon
)brace
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HAT_FCS
)paren
(brace
id|info-&gt;mask
(braket
l_int|0
)braket
op_and_assign
op_complement
id|JS_AN_HAT_FCS
suffix:semicolon
id|info-&gt;mask
(braket
l_int|1
)braket
op_assign
l_int|0
suffix:semicolon
id|info-&gt;extensions
op_and_assign
op_complement
(paren
id|JS_AN_BUTTON_PXY_Y
op_or
id|JS_AN_BUTTON_PXY_U
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_ANY_CHF
)paren
(brace
id|info-&gt;mask
(braket
l_int|0
)braket
op_or_assign
l_int|0xf0
suffix:semicolon
id|info-&gt;mask
(braket
l_int|1
)braket
op_assign
l_int|0
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
(paren
id|info-&gt;mask
(braket
l_int|0
)braket
op_or
id|info-&gt;mask
(braket
l_int|1
)braket
)paren
)paren
r_return
op_minus
l_int|1
suffix:semicolon
)brace
r_else
(brace
r_switch
c_cond
(paren
id|exist
)paren
(brace
r_case
l_int|0x0
suffix:colon
r_return
op_minus
l_int|1
suffix:semicolon
r_case
l_int|0x3
suffix:colon
id|info-&gt;mask
(braket
l_int|0
)braket
op_assign
l_int|0xf3
suffix:semicolon
multiline_comment|/* joystick 0, assuming 4-button */
r_break
suffix:semicolon
r_case
l_int|0xb
suffix:colon
id|info-&gt;mask
(braket
l_int|0
)braket
op_assign
l_int|0xfb
suffix:semicolon
multiline_comment|/* 3-axis, 4-button joystick */
r_break
suffix:semicolon
r_case
l_int|0xc
suffix:colon
id|info-&gt;mask
(braket
l_int|0
)braket
op_assign
l_int|0xcc
suffix:semicolon
multiline_comment|/* joystick 1 */
r_break
suffix:semicolon
r_case
l_int|0xf
suffix:colon
id|info-&gt;mask
(braket
l_int|0
)braket
op_assign
l_int|0x33
suffix:semicolon
multiline_comment|/* joysticks 0 and 1 */
id|info-&gt;mask
(braket
l_int|1
)braket
op_assign
l_int|0xcc
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|printk
c_func
(paren
id|KERN_WARNING
l_string|&quot;joy-analog: Unknown joystick device detected &quot;
l_string|&quot;(data=%#x), contact &lt;vojtech@suse.cz&gt;&bslash;n&quot;
comma
id|exist
)paren
suffix:semicolon
r_return
op_minus
l_int|1
suffix:semicolon
)brace
)brace
r_return
op_logical_neg
op_logical_neg
id|info-&gt;mask
(braket
l_int|0
)braket
op_plus
op_logical_neg
op_logical_neg
id|info-&gt;mask
(braket
l_int|1
)braket
suffix:semicolon
)brace
multiline_comment|/*&n; * js_an_axes() returns the number of axes for an analog joystick.&n; */
DECL|function|js_an_axes
r_static
r_inline
r_int
id|js_an_axes
c_func
(paren
r_int
id|i
comma
r_struct
id|js_an_info
op_star
id|info
)paren
(brace
r_return
id|js_an_count_bits
c_func
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
l_int|0x0f
)paren
op_plus
id|js_an_count_bits
c_func
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HATS_ALL
)paren
op_star
l_int|2
suffix:semicolon
)brace
multiline_comment|/*&n; * js_an_buttons() returns the number of buttons for an analog joystick.&n; */
DECL|function|js_an_buttons
r_static
r_inline
r_int
id|js_an_buttons
c_func
(paren
r_int
id|i
comma
r_struct
id|js_an_info
op_star
id|info
)paren
(brace
r_return
id|js_an_count_bits
c_func
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
l_int|0xf0
)paren
op_plus
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_CHF
)paren
op_star
l_int|2
op_plus
id|js_an_count_bits
c_func
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_PXY
)paren
suffix:semicolon
)brace
multiline_comment|/*&n; * js_an_name() constructs a name for an analog joystick.&n; */
DECL|variable|__initdata
r_static
r_char
id|js_an_name_buf
(braket
l_int|128
)braket
id|__initdata
op_assign
l_string|&quot;&quot;
suffix:semicolon
DECL|function|js_an_name
r_static
r_char
id|__init
op_star
id|js_an_name
c_func
(paren
r_int
id|i
comma
r_struct
id|js_an_info
op_star
id|info
)paren
(brace
id|sprintf
c_func
(paren
id|js_an_name_buf
comma
l_string|&quot;Analog %d-axis %d-button&quot;
comma
id|js_an_count_bits
c_func
(paren
id|info-&gt;mask
(braket
id|i
)braket
op_amp
l_int|0x0f
)paren
comma
id|js_an_buttons
c_func
(paren
id|i
comma
id|info
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HATS_ALL
)paren
id|sprintf
c_func
(paren
id|js_an_name_buf
comma
l_string|&quot;%s %d-hat&quot;
comma
id|js_an_name_buf
comma
id|js_an_count_bits
c_func
(paren
id|info-&gt;extensions
op_amp
id|JS_AN_HATS_ALL
)paren
)paren
suffix:semicolon
id|strcat
c_func
(paren
id|js_an_name_buf
comma
l_string|&quot; joystick&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|info-&gt;extensions
)paren
id|sprintf
c_func
(paren
id|js_an_name_buf
comma
l_string|&quot;%s with%s%s%s extensions&quot;
comma
id|js_an_name_buf
comma
id|info-&gt;extensions
op_amp
id|JS_AN_ANY_CHF
ques
c_cond
l_string|&quot; CHF&quot;
suffix:colon
l_string|&quot;&quot;
comma
id|info-&gt;extensions
op_amp
id|JS_AN_HAT_FCS
ques
c_cond
l_string|&quot; FCS&quot;
suffix:colon
l_string|&quot;&quot;
comma
id|info-&gt;extensions
op_amp
id|JS_AN_BUTTONS_PXY
ques
c_cond
l_string|&quot; XY-button&quot;
suffix:colon
l_string|&quot;&quot;
)paren
suffix:semicolon
r_return
id|js_an_name_buf
suffix:semicolon
)brace
eof
