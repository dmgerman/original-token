multiline_comment|/*&n;** File:&t;&t;selftest.h&n;**&n;** Author:&t;&t;David Dix&n;**&n;** Created:&t;&t;15th March 1993&n;**&n;** Last modified:&t;94/06/14&n;**&n; *&n; *  (C) 1990 - 2000 Specialix International Ltd., Byfleet, Surrey, UK.&n; *&n; *      This program is free software; you can redistribute it and/or modify&n; *      it under the terms of the GNU General Public License as published by&n; *      the Free Software Foundation; either version 2 of the License, or&n; *      (at your option) any later version.&n; *&n; *      This program is distributed in the hope that it will be useful,&n; *      but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *      GNU General Public License for more details.&n; *&n; *      You should have received a copy of the GNU General Public License&n; *      along with this program; if not, write to the Free Software&n; *      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n;*/
macro_line|#ifndef&t;_selftests_h_
DECL|macro|_selftests_h_
mdefine_line|#define _selftests_h_
multiline_comment|/*&n;** Selftest identifier...&n;*/
DECL|macro|SELFTEST_MAGIC
mdefine_line|#define SELFTEST_MAGIC&t;0x5a5a
multiline_comment|/*&n;** This is the structure of the packet that is sent back after each&n;** selftest on a booting RTA.&n;*/
r_typedef
r_struct
(brace
DECL|member|magic
r_int
id|magic
suffix:semicolon
multiline_comment|/* Identifies packet type */
DECL|member|test
r_int
id|test
suffix:semicolon
multiline_comment|/* Test number, see below */
DECL|member|result
r_int
r_int
id|result
suffix:semicolon
multiline_comment|/* Result value */
DECL|member|dataIn
r_int
r_int
id|dataIn
suffix:semicolon
DECL|member|dataOut
r_int
r_int
id|dataOut
suffix:semicolon
DECL|typedef|selftestStruct
)brace
id|selftestStruct
suffix:semicolon
multiline_comment|/*&n;** The different tests are identified by the following data values.&n;*/
DECL|enum|test
r_enum
id|test
(brace
DECL|enumerator|TESTS_COMPLETE
id|TESTS_COMPLETE
op_assign
l_int|0x00
comma
DECL|enumerator|MEMTEST_ADDR
id|MEMTEST_ADDR
op_assign
l_int|0x01
comma
DECL|enumerator|MEMTEST_BIT
id|MEMTEST_BIT
op_assign
l_int|0x02
comma
DECL|enumerator|MEMTEST_FILL
id|MEMTEST_FILL
op_assign
l_int|0x03
comma
DECL|enumerator|MEMTEST_DATABUS
id|MEMTEST_DATABUS
op_assign
l_int|0x04
comma
DECL|enumerator|MEMTEST_ADDRBUS
id|MEMTEST_ADDRBUS
op_assign
l_int|0x05
comma
DECL|enumerator|CD1400_INIT
id|CD1400_INIT
op_assign
l_int|0x10
comma
DECL|enumerator|CD1400_LOOP
id|CD1400_LOOP
op_assign
l_int|0x11
comma
DECL|enumerator|CD1400_INTERRUPT
id|CD1400_INTERRUPT
op_assign
l_int|0x12
)brace
suffix:semicolon
DECL|enum|result
r_enum
id|result
(brace
DECL|enumerator|E_PORT
id|E_PORT
op_assign
l_int|0x10
comma
DECL|enumerator|E_TX
id|E_TX
op_assign
l_int|0x11
comma
DECL|enumerator|E_RX
id|E_RX
op_assign
l_int|0x12
comma
DECL|enumerator|E_EXCEPT
id|E_EXCEPT
op_assign
l_int|0x13
comma
DECL|enumerator|E_COMPARE
id|E_COMPARE
op_assign
l_int|0x14
comma
DECL|enumerator|E_MODEM
id|E_MODEM
op_assign
l_int|0x15
comma
DECL|enumerator|E_TIMEOUT
id|E_TIMEOUT
op_assign
l_int|0x16
comma
DECL|enumerator|E_INTERRUPT
id|E_INTERRUPT
op_assign
l_int|0x17
)brace
suffix:semicolon
macro_line|#endif&t;/* _selftests_h_ */
eof
