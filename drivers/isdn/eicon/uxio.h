multiline_comment|/*&n; *&n; * Copyright (C) Eicon Technology Corporation, 2000.&n; *&n; * This source file is supplied for the exclusive use with Eicon&n; * Technology Corporation&squot;s range of DIVA Server Adapters.&n; *&n; * Eicon File Revision :    1.6  &n; *&n; * This program is free software; you can redistribute it and/or modify&n; * it under the terms of the GNU General Public License as published by&n; * the Free Software Foundation; either version 2, or (at your option)&n; * any later version.&n; *&n; * This program is distributed in the hope that it will be useful,&n; * but WITHOUT ANY WARRANTY OF ANY KIND WHATSOEVER INCLUDING ANY &n; * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  &n; * See the GNU General Public License for more details.&n; *&n; * You should have received a copy of the GNU General Public License&n; * along with this program; if not, write to the Free Software&n; * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.&n; *&n; */
multiline_comment|/*&n; * Interface to Unix specific code for performing card I/O&n; */
macro_line|#if !defined(UXIO_H)
DECL|macro|UXIO_H
mdefine_line|#define UXIO_H
macro_line|#include &quot;sys.h&quot;
macro_line|#include &quot;adapter.h&quot;
r_struct
id|pt_regs
suffix:semicolon
multiline_comment|/* user callback, returns zero if interrupt was from this card */
DECL|typedef|isr_fn_t
r_typedef
r_void
id|isr_fn_t
c_func
(paren
r_void
op_star
)paren
suffix:semicolon
DECL|struct|ux_diva_card_s
r_struct
id|ux_diva_card_s
(brace
DECL|member|in_use
id|word
id|in_use
suffix:semicolon
DECL|member|io_base
r_int
id|io_base
suffix:semicolon
DECL|member|reset_base
r_int
id|reset_base
suffix:semicolon
DECL|member|card_type
r_int
id|card_type
suffix:semicolon
DECL|member|mapped
id|byte
op_star
id|mapped
suffix:semicolon
DECL|member|bus_num
r_int
id|bus_num
suffix:semicolon
DECL|member|func_num
r_int
id|func_num
suffix:semicolon
DECL|member|slot
r_int
id|slot
suffix:semicolon
DECL|member|irq
r_int
id|irq
suffix:semicolon
DECL|member|pDRAM
id|byte
op_star
id|pDRAM
suffix:semicolon
DECL|member|pDEVICES
id|byte
op_star
id|pDEVICES
suffix:semicolon
DECL|member|pCONFIG
id|byte
op_star
id|pCONFIG
suffix:semicolon
DECL|member|pSHARED
id|byte
op_star
id|pSHARED
suffix:semicolon
DECL|member|pCONTROL
id|byte
op_star
id|pCONTROL
suffix:semicolon
DECL|member|features
id|word
id|features
suffix:semicolon
DECL|member|user_isr_arg
r_void
op_star
id|user_isr_arg
suffix:semicolon
DECL|member|user_isr
id|isr_fn_t
op_star
id|user_isr
suffix:semicolon
)brace
suffix:semicolon
r_void
id|bcopy
c_func
(paren
r_void
op_star
id|pSource
comma
r_void
op_star
id|pDest
comma
id|dword
id|dwLength
)paren
suffix:semicolon
r_void
id|bzero
c_func
(paren
r_void
op_star
id|pDataArea
comma
id|dword
id|dwLength
)paren
suffix:semicolon
multiline_comment|/*&n; * Get a card handle to enable card to be accessed&n; */
r_int
id|UxCardHandleGet
c_func
(paren
id|ux_diva_card_t
op_star
op_star
id|card
comma
id|dia_card_t
op_star
id|cfg
)paren
suffix:semicolon
multiline_comment|/*&n; * Free a card handle as no longer needed&n; */
r_void
id|UxCardHandleFree
c_func
(paren
id|ux_diva_card_t
op_star
id|card
)paren
suffix:semicolon
multiline_comment|/*&n; * Lock and unlock access to a card&n; */
r_int
id|UxCardLock
c_func
(paren
id|ux_diva_card_t
op_star
id|card
)paren
suffix:semicolon
r_void
id|UxCardUnlock
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
id|ipl
)paren
suffix:semicolon
multiline_comment|/*&n; * Set the mapping address for PCI cards&n; */
r_int
id|UxCardAddrMappingSet
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
id|id
comma
r_void
op_star
id|address
comma
r_int
id|size
)paren
suffix:semicolon
multiline_comment|/*&n; * Attach card to memory to enable it to be accessed&n; * Returns the mapped address&n; */
r_void
op_star
id|UxCardMemAttach
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
id|id
)paren
suffix:semicolon
multiline_comment|/*&n; * map card out of memory after completion of access&n; */
r_void
id|UxCardMemDetach
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
)paren
suffix:semicolon
multiline_comment|/*&n; * input functions for memory-mapped cards&n; */
id|byte
id|UxCardMemIn
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
)paren
suffix:semicolon
id|word
id|UxCardMemInW
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
)paren
suffix:semicolon
id|dword
id|UxCardMemInD
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
)paren
suffix:semicolon
r_void
id|UxCardMemInBuffer
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
comma
r_void
op_star
id|buffer
comma
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/*&n; * output functions for memory-mapped cards&n; */
r_void
id|UxCardMemOut
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
comma
id|byte
id|data
)paren
suffix:semicolon
r_void
id|UxCardMemOutW
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
comma
id|word
id|data
)paren
suffix:semicolon
r_void
id|UxCardMemOutD
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
comma
id|dword
id|data
)paren
suffix:semicolon
r_void
id|UxCardMemOutBuffer
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
id|address
comma
r_void
op_star
id|buffer
comma
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/*&n; * input functions for I/O-mapped cards&n; */
id|byte
id|UxCardIoIn
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
)paren
suffix:semicolon
id|word
id|UxCardIoInW
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
)paren
suffix:semicolon
id|dword
id|UxCardIoInD
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
)paren
suffix:semicolon
r_void
id|UxCardIoInBuffer
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
comma
r_void
op_star
id|buffer
comma
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/*&n; * output functions for I/O-mapped cards&n; */
r_void
id|UxCardIoOut
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
comma
id|byte
id|data
)paren
suffix:semicolon
r_void
id|UxCardIoOutW
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
comma
id|word
id|data
)paren
suffix:semicolon
r_void
id|UxCardIoOutD
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
comma
id|dword
id|data
)paren
suffix:semicolon
r_void
id|UxCardIoOutBuffer
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
comma
r_void
op_star
id|address
comma
r_void
op_star
id|buffer
comma
r_int
id|length
)paren
suffix:semicolon
multiline_comment|/*&n; * Get specified PCI config&n; */
r_void
id|UxPciConfigRead
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
id|size
comma
r_int
id|offset
comma
r_void
op_star
id|value
)paren
suffix:semicolon
multiline_comment|/*&n; * Set specified PCI config&n; */
r_void
id|UxPciConfigWrite
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
id|size
comma
r_int
id|offset
comma
r_void
op_star
id|value
)paren
suffix:semicolon
multiline_comment|/* allocate memory, returning NULL if none available */
r_void
op_star
id|UxAlloc
c_func
(paren
r_int
r_int
id|size
)paren
suffix:semicolon
r_void
id|UxFree
c_func
(paren
r_void
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * Pause for specified number of milli-seconds &n; */
r_void
id|UxPause
c_func
(paren
r_int
id|ms
)paren
suffix:semicolon
multiline_comment|/*&n; * Install an ISR for the specified card&n; */
r_int
id|UxIsrInstall
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
id|isr_fn_t
op_star
id|isr_fn
comma
r_void
op_star
id|isr_arg
)paren
suffix:semicolon
multiline_comment|/*&n; * Remove an ISR for the specified card&n; */
r_void
id|UxIsrRemove
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_void
op_star
)paren
suffix:semicolon
multiline_comment|/*&n; * DEBUG function to turn logging ON or OFF&n; */
r_void
id|UxCardLog
c_func
(paren
r_int
id|turn_on
)paren
suffix:semicolon
r_int
id|UxInterlockedIncrement
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
op_star
id|dst
)paren
suffix:semicolon
r_int
id|UxInterlockedDecrement
c_func
(paren
id|ux_diva_card_t
op_star
id|card
comma
r_int
op_star
id|dst
)paren
suffix:semicolon
macro_line|#endif /* of UXIO_H */
eof
