multiline_comment|/*&n; * $Id: avmcard.h,v 1.8 2000/10/10 17:44:19 kai Exp $&n; *&n; * Copyright 1999 by Carsten Paeth (calle@calle.in-berlin.de)&n; *&n; * $Log: avmcard.h,v $&n; * Revision 1.8  2000/10/10 17:44:19  kai&n; * changes from/for 2.2.18&n; *&n; * Revision 1.7  2000/01/25 14:33:38  calle&n; * - Added Support AVM B1 PCI V4.0 (tested with prototype)&n; *   - splitted up t1pci.c into b1dma.c for common function with b1pciv4&n; *   - support for revision register&n; *&n; * Revision 1.6  1999/11/05 16:38:01  calle&n; * Cleanups before kernel 2.4:&n; * - Changed all messages to use card-&gt;name or driver-&gt;name instead of&n; *   constant string.&n; * - Moved some data from struct avmcard into new struct avmctrl_info.&n; *   Changed all lowlevel capi driver to match the new structur.&n; *&n; * Revision 1.5  1999/09/07 09:02:53  calle&n; * SETDATA removed. Now inside the kernel the datapart of DATA_B3_REQ and&n; * DATA_B3_IND is always directly after the CAPI message. The &quot;Data&quot; member&n; * ist never used inside the kernel.&n; *&n; * Revision 1.4  1999/08/04 10:10:08  calle&n; * Bugfix: corrected /proc functions, added structure for new AVM cards.&n; *&n; * Revision 1.3  1999/07/23 08:41:47  calle&n; * prepared for new AVM cards.&n; *&n; * Revision 1.2  1999/07/05 15:09:45  calle&n; * - renamed &quot;appl_release&quot; to &quot;appl_released&quot;.&n; * - version und profile data now cleared on controller reset&n; * - extended /proc interface, to allow driver and controller specific&n; *   informations to include by driver hackers.&n; *&n; * Revision 1.1  1999/07/01 15:26:22  calle&n; * complete new version (I love it):&n; * + new hardware independed &quot;capi_driver&quot; interface that will make it easy to:&n; *   - support other controllers with CAPI-2.0 (i.e. USB Controller)&n; *   - write a CAPI-2.0 for the passive cards&n; *   - support serial link CAPI-2.0 boxes.&n; * + wrote &quot;capi_driver&quot; for all supported cards.&n; * + &quot;capi_driver&quot; (supported cards) now have to be configured with&n; *   make menuconfig, in the past all supported cards where included&n; *   at once.&n; * + new and better informations in /proc/capi/&n; * + new ioctl to switch trace of capi messages per controller&n; *   using &quot;avmcapictrl trace [contr] on|off|....&quot;&n; * + complete testcircle with all supported cards and also the&n; *   PCMCIA cards (now patch for pcmcia-cs-3.0.13 needed) done.&n; *&n; */
macro_line|#ifndef _AVMCARD_H_
DECL|macro|_AVMCARD_H_
mdefine_line|#define _AVMCARD_H_
DECL|macro|AVMB1_PORTLEN
mdefine_line|#define&t;AVMB1_PORTLEN&t;&t;0x1f
DECL|macro|AVM_MAXVERSION
mdefine_line|#define AVM_MAXVERSION&t;&t;8
DECL|macro|AVM_NAPPS
mdefine_line|#define AVM_NAPPS&t;&t;30
DECL|macro|AVM_NCCI_PER_CHANNEL
mdefine_line|#define AVM_NCCI_PER_CHANNEL&t;4
multiline_comment|/*&n; * Versions&n; */
DECL|macro|VER_DRIVER
mdefine_line|#define&t;VER_DRIVER&t;0
DECL|macro|VER_CARDTYPE
mdefine_line|#define&t;VER_CARDTYPE&t;1
DECL|macro|VER_HWID
mdefine_line|#define&t;VER_HWID&t;2
DECL|macro|VER_SERIAL
mdefine_line|#define&t;VER_SERIAL&t;3
DECL|macro|VER_OPTION
mdefine_line|#define&t;VER_OPTION&t;4
DECL|macro|VER_PROTO
mdefine_line|#define&t;VER_PROTO&t;5
DECL|macro|VER_PROFILE
mdefine_line|#define&t;VER_PROFILE&t;6
DECL|macro|VER_CAPI
mdefine_line|#define&t;VER_CAPI&t;7
DECL|enum|avmcardtype
r_enum
id|avmcardtype
(brace
DECL|enumerator|avm_b1isa
id|avm_b1isa
comma
DECL|enumerator|avm_b1pci
id|avm_b1pci
comma
DECL|enumerator|avm_b1pcmcia
id|avm_b1pcmcia
comma
DECL|enumerator|avm_m1
id|avm_m1
comma
DECL|enumerator|avm_m2
id|avm_m2
comma
DECL|enumerator|avm_t1isa
id|avm_t1isa
comma
DECL|enumerator|avm_t1pci
id|avm_t1pci
comma
DECL|enumerator|avm_c4
id|avm_c4
)brace
suffix:semicolon
DECL|struct|avmcard_dmainfo
r_typedef
r_struct
id|avmcard_dmainfo
(brace
DECL|member|recvlen
id|__u32
id|recvlen
suffix:semicolon
DECL|member|recvbuf
id|__u8
id|recvbuf
(braket
l_int|128
op_plus
l_int|2048
)braket
suffix:semicolon
DECL|member|send_queue
r_struct
id|sk_buff_head
id|send_queue
suffix:semicolon
DECL|member|sendbuf
id|__u8
id|sendbuf
(braket
l_int|128
op_plus
l_int|2048
)braket
suffix:semicolon
DECL|typedef|avmcard_dmainfo
)brace
id|avmcard_dmainfo
suffix:semicolon
DECL|struct|avmcard
r_typedef
r_struct
id|avmcard
(brace
DECL|member|name
r_char
id|name
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|port
r_int
r_int
id|port
suffix:semicolon
DECL|member|irq
r_int
id|irq
suffix:semicolon
DECL|member|membase
r_int
r_int
id|membase
suffix:semicolon
DECL|member|cardtype
r_enum
id|avmcardtype
id|cardtype
suffix:semicolon
DECL|member|revision
r_int
r_char
id|revision
suffix:semicolon
DECL|member|class
r_int
r_char
r_class
suffix:semicolon
DECL|member|cardnr
r_int
id|cardnr
suffix:semicolon
multiline_comment|/* for t1isa */
DECL|member|msgbuf
r_char
id|msgbuf
(braket
l_int|128
)braket
suffix:semicolon
multiline_comment|/* capimsg msg part */
DECL|member|databuf
r_char
id|databuf
(braket
l_int|2048
)braket
suffix:semicolon
multiline_comment|/* capimsg data part */
DECL|member|interrupt
r_int
id|interrupt
suffix:semicolon
DECL|member|mbase
r_void
op_star
id|mbase
suffix:semicolon
DECL|member|csr
r_volatile
id|__u32
id|csr
suffix:semicolon
DECL|member|dma
id|avmcard_dmainfo
op_star
id|dma
suffix:semicolon
DECL|struct|avmctrl_info
r_struct
id|avmctrl_info
(brace
DECL|member|cardname
r_char
id|cardname
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|versionlen
r_int
id|versionlen
suffix:semicolon
DECL|member|versionbuf
r_char
id|versionbuf
(braket
l_int|1024
)braket
suffix:semicolon
DECL|member|version
r_char
op_star
id|version
(braket
id|AVM_MAXVERSION
)braket
suffix:semicolon
DECL|member|infobuf
r_char
id|infobuf
(braket
l_int|128
)braket
suffix:semicolon
multiline_comment|/* for function procinfo */
DECL|member|card
r_struct
id|avmcard
op_star
id|card
suffix:semicolon
DECL|member|capi_ctrl
r_struct
id|capi_ctr
op_star
id|capi_ctrl
suffix:semicolon
DECL|member|ctrlinfo
)brace
op_star
id|ctrlinfo
suffix:semicolon
DECL|member|nlogcontr
r_int
id|nlogcontr
suffix:semicolon
DECL|typedef|avmcard
)brace
id|avmcard
suffix:semicolon
DECL|typedef|avmctrl_info
r_typedef
r_struct
id|avmctrl_info
id|avmctrl_info
suffix:semicolon
r_extern
r_int
id|b1_irq_table
(braket
l_int|16
)braket
suffix:semicolon
multiline_comment|/*&n; * LLI Messages to the ISDN-ControllerISDN Controller &n; */
DECL|macro|SEND_POLL
mdefine_line|#define&t;SEND_POLL&t;&t;0x72&t;/*&n;&t;&t;&t;&t;&t;   * after load &lt;- RECEIVE_POLL &n;&t;&t;&t;&t;&t; */
DECL|macro|SEND_INIT
mdefine_line|#define SEND_INIT&t;&t;0x11&t;/*&n;&t;&t;&t;&t;&t;   * first message &lt;- RECEIVE_INIT&n;&t;&t;&t;&t;&t;   * int32 NumApplications  int32&n;&t;&t;&t;&t;&t;   * NumNCCIs int32 BoardNumber &n;&t;&t;&t;&t;&t; */
DECL|macro|SEND_REGISTER
mdefine_line|#define SEND_REGISTER&t;&t;0x12&t;/*&n;&t;&t;&t;&t;&t;   * register an application int32&n;&t;&t;&t;&t;&t;   * ApplIDId int32 NumMessages&n;&t;&t;&t;&t;&t;   * int32 NumB3Connections int32&n;&t;&t;&t;&t;&t;   * NumB3Blocks int32 B3Size&n;&t;&t;&t;&t;&t;   * &n;&t;&t;&t;&t;&t;   * AnzB3Connection != 0 &amp;&amp;&n;&t;&t;&t;&t;&t;   * AnzB3Blocks &gt;= 1 &amp;&amp; B3Size &gt;= 1 &n;&t;&t;&t;&t;&t; */
DECL|macro|SEND_RELEASE
mdefine_line|#define SEND_RELEASE&t;&t;0x14&t;/*&n;&t;&t;&t;&t;&t;   * deregister an application int32 &n;&t;&t;&t;&t;&t;   * ApplID &n;&t;&t;&t;&t;&t; */
DECL|macro|SEND_MESSAGE
mdefine_line|#define SEND_MESSAGE&t;&t;0x15&t;/*&n;&t;&t;&t;&t;&t;   * send capi-message int32 length&n;&t;&t;&t;&t;&t;   * capi-data ... &n;&t;&t;&t;&t;&t; */
DECL|macro|SEND_DATA_B3_REQ
mdefine_line|#define SEND_DATA_B3_REQ&t;0x13&t;/*&n;&t;&t;&t;&t;&t;   * send capi-data-message int32&n;&t;&t;&t;&t;&t;   * MsgLength capi-data ... int32&n;&t;&t;&t;&t;&t;   * B3Length data .... &n;&t;&t;&t;&t;&t; */
DECL|macro|SEND_CONFIG
mdefine_line|#define SEND_CONFIG&t;&t;0x21    /*&n;                                         */
DECL|macro|SEND_POLLACK
mdefine_line|#define SEND_POLLACK&t;&t;0x73    /* T1 Watchdog */
multiline_comment|/*&n; * LLI Messages from the ISDN-ControllerISDN Controller &n; */
DECL|macro|RECEIVE_POLL
mdefine_line|#define RECEIVE_POLL&t;&t;0x32&t;/*&n;&t;&t;&t;&t;&t;   * &lt;- after SEND_POLL &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_INIT
mdefine_line|#define RECEIVE_INIT&t;&t;0x27&t;/*&n;&t;&t;&t;&t;&t;   * &lt;- after SEND_INIT int32 length&n;&t;&t;&t;&t;&t;   * byte total length b1struct board &n;&t;&t;&t;&t;&t;   * driver revision b1struct card&n;&t;&t;&t;&t;&t;   * type b1struct reserved b1struct&n;&t;&t;&t;&t;&t;   * serial number b1struct driver&n;&t;&t;&t;&t;&t;   * capability b1struct d-channel&n;&t;&t;&t;&t;&t;   * protocol b1struct CAPI-2.0&n;&t;&t;&t;&t;&t;   * profile b1struct capi version &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_MESSAGE
mdefine_line|#define RECEIVE_MESSAGE&t;&t;0x21&t;/*&n;&t;&t;&t;&t;&t;   * &lt;- after SEND_MESSAGE int32&n;&t;&t;&t;&t;&t;   * AppllID int32 Length capi-data&n;&t;&t;&t;&t;&t;   * .... &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_DATA_B3_IND
mdefine_line|#define RECEIVE_DATA_B3_IND&t;0x22&t;/*&n;&t;&t;&t;&t;&t;   * received data int32 AppllID&n;&t;&t;&t;&t;&t;   * int32 Length capi-data ...&n;&t;&t;&t;&t;&t;   * int32 B3Length data ... &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_START
mdefine_line|#define RECEIVE_START&t;&t;0x23&t;/*&n;&t;&t;&t;&t;&t;   * Handshake &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_STOP
mdefine_line|#define RECEIVE_STOP&t;&t;0x24&t;/*&n;&t;&t;&t;&t;&t;   * Handshake &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_NEW_NCCI
mdefine_line|#define RECEIVE_NEW_NCCI&t;0x25&t;/*&n;&t;&t;&t;&t;&t;   * int32 AppllID int32 NCCI int32&n;&t;&t;&t;&t;&t;   * WindowSize &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_FREE_NCCI
mdefine_line|#define RECEIVE_FREE_NCCI&t;0x26&t;/*&n;&t;&t;&t;&t;&t;   * int32 AppllID int32 NCCI &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_RELEASE
mdefine_line|#define RECEIVE_RELEASE&t;&t;0x26&t;/*&n;&t;&t;&t;&t;&t;   * int32 AppllID int32 0xffffffff &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_TASK_READY
mdefine_line|#define RECEIVE_TASK_READY&t;0x31&t;/*&n;&t;&t;&t;&t;&t;   * int32 tasknr&n;&t;&t;&t;&t;&t;   * int32 Length Taskname ...&n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_DEBUGMSG
mdefine_line|#define RECEIVE_DEBUGMSG&t;0x71&t;/*&n;&t;&t;&t;&t;&t;   * int32 Length message&n;&t;&t;&t;&t;&t;   * &n;&t;&t;&t;&t;&t; */
DECL|macro|RECEIVE_POLLDWORD
mdefine_line|#define RECEIVE_POLLDWORD&t;0x75&t;/* t1pci in dword mode */
DECL|macro|WRITE_REGISTER
mdefine_line|#define WRITE_REGISTER&t;&t;0x00
DECL|macro|READ_REGISTER
mdefine_line|#define READ_REGISTER&t;&t;0x01
multiline_comment|/*&n; * port offsets&n; */
DECL|macro|B1_READ
mdefine_line|#define B1_READ&t;&t;&t;0x00
DECL|macro|B1_WRITE
mdefine_line|#define B1_WRITE&t;&t;0x01
DECL|macro|B1_INSTAT
mdefine_line|#define B1_INSTAT&t;&t;0x02
DECL|macro|B1_OUTSTAT
mdefine_line|#define B1_OUTSTAT&t;&t;0x03
DECL|macro|B1_ANALYSE
mdefine_line|#define B1_ANALYSE&t;&t;0x04
DECL|macro|B1_REVISION
mdefine_line|#define B1_REVISION&t;&t;0x05
DECL|macro|B1_RESET
mdefine_line|#define B1_RESET&t;&t;0x10
DECL|macro|B1_STAT0
mdefine_line|#define B1_STAT0(cardtype)  ((cardtype) == avm_m1 ? 0x81200000l : 0x80A00000l)
DECL|macro|B1_STAT1
mdefine_line|#define B1_STAT1(cardtype)  (0x80E00000l)
multiline_comment|/* ---------------------------------------------------------------- */
DECL|function|b1outp
r_static
r_inline
r_int
r_char
id|b1outp
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|offset
comma
r_int
r_char
id|value
)paren
(brace
id|outb
c_func
(paren
id|value
comma
id|base
op_plus
id|offset
)paren
suffix:semicolon
r_return
id|inb
c_func
(paren
id|base
op_plus
id|B1_ANALYSE
)paren
suffix:semicolon
)brace
DECL|function|b1_rx_full
r_static
r_inline
r_int
id|b1_rx_full
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_return
id|inb
c_func
(paren
id|base
op_plus
id|B1_INSTAT
)paren
op_amp
l_int|0x1
suffix:semicolon
)brace
DECL|function|b1_get_byte
r_static
r_inline
r_int
r_char
id|b1_get_byte
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_int
r_int
id|stop
op_assign
id|jiffies
op_plus
l_int|1
op_star
id|HZ
suffix:semicolon
multiline_comment|/* maximum wait time 1 sec */
r_while
c_loop
(paren
op_logical_neg
id|b1_rx_full
c_func
(paren
id|base
)paren
op_logical_and
id|time_before
c_func
(paren
id|jiffies
comma
id|stop
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|b1_rx_full
c_func
(paren
id|base
)paren
)paren
r_return
id|inb
c_func
(paren
id|base
op_plus
id|B1_READ
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_CRIT
l_string|&quot;b1lli(0x%x): rx not full after 1 second&bslash;n&quot;
comma
id|base
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|b1_get_word
r_static
r_inline
r_int
r_int
id|b1_get_word
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_int
r_int
id|val
op_assign
l_int|0
suffix:semicolon
id|val
op_or_assign
id|b1_get_byte
c_func
(paren
id|base
)paren
suffix:semicolon
id|val
op_or_assign
(paren
id|b1_get_byte
c_func
(paren
id|base
)paren
op_lshift
l_int|8
)paren
suffix:semicolon
id|val
op_or_assign
(paren
id|b1_get_byte
c_func
(paren
id|base
)paren
op_lshift
l_int|16
)paren
suffix:semicolon
id|val
op_or_assign
(paren
id|b1_get_byte
c_func
(paren
id|base
)paren
op_lshift
l_int|24
)paren
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|b1_tx_empty
r_static
r_inline
r_int
id|b1_tx_empty
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_return
id|inb
c_func
(paren
id|base
op_plus
id|B1_OUTSTAT
)paren
op_amp
l_int|0x1
suffix:semicolon
)brace
DECL|function|b1_put_byte
r_static
r_inline
r_void
id|b1_put_byte
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_char
id|val
)paren
(brace
r_while
c_loop
(paren
op_logical_neg
id|b1_tx_empty
c_func
(paren
id|base
)paren
)paren
suffix:semicolon
id|b1outp
c_func
(paren
id|base
comma
id|B1_WRITE
comma
id|val
)paren
suffix:semicolon
)brace
DECL|function|b1_save_put_byte
r_static
r_inline
r_int
id|b1_save_put_byte
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_char
id|val
)paren
(brace
r_int
r_int
id|stop
op_assign
id|jiffies
op_plus
l_int|2
op_star
id|HZ
suffix:semicolon
r_while
c_loop
(paren
op_logical_neg
id|b1_tx_empty
c_func
(paren
id|base
)paren
op_logical_and
id|time_before
c_func
(paren
id|jiffies
comma
id|stop
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id|b1_tx_empty
c_func
(paren
id|base
)paren
)paren
r_return
op_minus
l_int|1
suffix:semicolon
id|b1outp
c_func
(paren
id|base
comma
id|B1_WRITE
comma
id|val
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
DECL|function|b1_put_word
r_static
r_inline
r_void
id|b1_put_word
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|val
)paren
(brace
id|b1_put_byte
c_func
(paren
id|base
comma
id|val
op_amp
l_int|0xff
)paren
suffix:semicolon
id|b1_put_byte
c_func
(paren
id|base
comma
(paren
id|val
op_rshift
l_int|8
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
id|b1_put_byte
c_func
(paren
id|base
comma
(paren
id|val
op_rshift
l_int|16
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
id|b1_put_byte
c_func
(paren
id|base
comma
(paren
id|val
op_rshift
l_int|24
)paren
op_amp
l_int|0xff
)paren
suffix:semicolon
)brace
DECL|function|b1_get_slice
r_static
r_inline
r_int
r_int
id|b1_get_slice
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_char
op_star
id|dp
)paren
(brace
r_int
r_int
id|len
comma
id|i
suffix:semicolon
id|len
op_assign
id|i
op_assign
id|b1_get_word
c_func
(paren
id|base
)paren
suffix:semicolon
r_while
c_loop
(paren
id|i
op_decrement
OG
l_int|0
)paren
op_star
id|dp
op_increment
op_assign
id|b1_get_byte
c_func
(paren
id|base
)paren
suffix:semicolon
r_return
id|len
suffix:semicolon
)brace
DECL|function|b1_put_slice
r_static
r_inline
r_void
id|b1_put_slice
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_char
op_star
id|dp
comma
r_int
r_int
id|len
)paren
(brace
r_int
id|i
op_assign
id|len
suffix:semicolon
id|b1_put_word
c_func
(paren
id|base
comma
id|i
)paren
suffix:semicolon
r_while
c_loop
(paren
id|i
op_decrement
OG
l_int|0
)paren
id|b1_put_byte
c_func
(paren
id|base
comma
op_star
id|dp
op_increment
)paren
suffix:semicolon
)brace
DECL|function|b1_wr_reg
r_static
r_void
id|b1_wr_reg
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|reg
comma
r_int
r_int
id|value
)paren
(brace
id|b1_put_byte
c_func
(paren
id|base
comma
id|WRITE_REGISTER
)paren
suffix:semicolon
id|b1_put_word
c_func
(paren
id|base
comma
id|reg
)paren
suffix:semicolon
id|b1_put_word
c_func
(paren
id|base
comma
id|value
)paren
suffix:semicolon
)brace
DECL|function|b1_rd_reg
r_static
r_inline
r_int
r_int
id|b1_rd_reg
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|reg
)paren
(brace
id|b1_put_byte
c_func
(paren
id|base
comma
id|READ_REGISTER
)paren
suffix:semicolon
id|b1_put_word
c_func
(paren
id|base
comma
id|reg
)paren
suffix:semicolon
r_return
id|b1_get_word
c_func
(paren
id|base
)paren
suffix:semicolon
)brace
DECL|function|b1_reset
r_static
r_inline
r_void
id|b1_reset
c_func
(paren
r_int
r_int
id|base
)paren
(brace
id|b1outp
c_func
(paren
id|base
comma
id|B1_RESET
comma
l_int|0
)paren
suffix:semicolon
id|mdelay
c_func
(paren
l_int|55
op_star
l_int|2
)paren
suffix:semicolon
multiline_comment|/* 2 TIC&squot;s */
id|b1outp
c_func
(paren
id|base
comma
id|B1_RESET
comma
l_int|1
)paren
suffix:semicolon
id|mdelay
c_func
(paren
l_int|55
op_star
l_int|2
)paren
suffix:semicolon
multiline_comment|/* 2 TIC&squot;s */
id|b1outp
c_func
(paren
id|base
comma
id|B1_RESET
comma
l_int|0
)paren
suffix:semicolon
id|mdelay
c_func
(paren
l_int|55
op_star
l_int|2
)paren
suffix:semicolon
multiline_comment|/* 2 TIC&squot;s */
)brace
DECL|function|b1_disable_irq
r_static
r_inline
r_int
r_char
id|b1_disable_irq
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_return
id|b1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x00
)paren
suffix:semicolon
)brace
multiline_comment|/* ---------------------------------------------------------------- */
DECL|function|b1_set_test_bit
r_static
r_inline
r_void
id|b1_set_test_bit
c_func
(paren
r_int
r_int
id|base
comma
r_enum
id|avmcardtype
id|cardtype
comma
r_int
id|onoff
)paren
(brace
id|b1_wr_reg
c_func
(paren
id|base
comma
id|B1_STAT0
c_func
(paren
id|cardtype
)paren
comma
id|onoff
ques
c_cond
l_int|0x21
suffix:colon
l_int|0x20
)paren
suffix:semicolon
)brace
DECL|function|b1_get_test_bit
r_static
r_inline
r_int
id|b1_get_test_bit
c_func
(paren
r_int
r_int
id|base
comma
r_enum
id|avmcardtype
id|cardtype
)paren
(brace
r_return
(paren
id|b1_rd_reg
c_func
(paren
id|base
comma
id|B1_STAT0
c_func
(paren
id|cardtype
)paren
)paren
op_amp
l_int|0x01
)paren
op_ne
l_int|0
suffix:semicolon
)brace
multiline_comment|/* ---------------------------------------------------------------- */
DECL|macro|T1_FASTLINK
mdefine_line|#define T1_FASTLINK&t;&t;0x00
DECL|macro|T1_SLOWLINK
mdefine_line|#define T1_SLOWLINK&t;&t;0x08
DECL|macro|T1_READ
mdefine_line|#define T1_READ&t;&t;&t;B1_READ
DECL|macro|T1_WRITE
mdefine_line|#define T1_WRITE&t;&t;B1_WRITE
DECL|macro|T1_INSTAT
mdefine_line|#define T1_INSTAT&t;&t;B1_INSTAT
DECL|macro|T1_OUTSTAT
mdefine_line|#define T1_OUTSTAT&t;&t;B1_OUTSTAT
DECL|macro|T1_IRQENABLE
mdefine_line|#define T1_IRQENABLE&t;&t;0x05
DECL|macro|T1_FIFOSTAT
mdefine_line|#define T1_FIFOSTAT&t;&t;0x06
DECL|macro|T1_RESETLINK
mdefine_line|#define T1_RESETLINK&t;&t;0x10
DECL|macro|T1_ANALYSE
mdefine_line|#define T1_ANALYSE&t;&t;0x11
DECL|macro|T1_IRQMASTER
mdefine_line|#define T1_IRQMASTER&t;&t;0x12
DECL|macro|T1_IDENT
mdefine_line|#define T1_IDENT&t;&t;0x17
DECL|macro|T1_RESETBOARD
mdefine_line|#define T1_RESETBOARD&t;&t;0x1f
DECL|macro|T1F_IREADY
mdefine_line|#define&t;T1F_IREADY&t;&t;0x01
DECL|macro|T1F_IHALF
mdefine_line|#define&t;T1F_IHALF&t;&t;0x02
DECL|macro|T1F_IFULL
mdefine_line|#define&t;T1F_IFULL&t;&t;0x04
DECL|macro|T1F_IEMPTY
mdefine_line|#define&t;T1F_IEMPTY&t;&t;0x08
DECL|macro|T1F_IFLAGS
mdefine_line|#define&t;T1F_IFLAGS&t;&t;0xF0
DECL|macro|T1F_OREADY
mdefine_line|#define&t;T1F_OREADY&t;&t;0x10
DECL|macro|T1F_OHALF
mdefine_line|#define&t;T1F_OHALF&t;&t;0x20
DECL|macro|T1F_OEMPTY
mdefine_line|#define&t;T1F_OEMPTY&t;&t;0x40
DECL|macro|T1F_OFULL
mdefine_line|#define&t;T1F_OFULL&t;&t;0x80
DECL|macro|T1F_OFLAGS
mdefine_line|#define&t;T1F_OFLAGS&t;&t;0xF0
multiline_comment|/* there are HEMA cards with 1k and 4k FIFO out */
DECL|macro|FIFO_OUTBSIZE
mdefine_line|#define FIFO_OUTBSIZE&t;&t;256
DECL|macro|FIFO_INPBSIZE
mdefine_line|#define FIFO_INPBSIZE&t;&t;512
DECL|macro|HEMA_VERSION_ID
mdefine_line|#define HEMA_VERSION_ID&t;&t;0
DECL|macro|HEMA_PAL_ID
mdefine_line|#define HEMA_PAL_ID&t;&t;0
DECL|function|t1outp
r_static
r_inline
r_void
id|t1outp
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|offset
comma
r_int
r_char
id|value
)paren
(brace
id|outb
c_func
(paren
id|value
comma
id|base
op_plus
id|offset
)paren
suffix:semicolon
)brace
DECL|function|t1inp
r_static
r_inline
r_int
r_char
id|t1inp
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_int
id|offset
)paren
(brace
r_return
id|inb
c_func
(paren
id|base
op_plus
id|offset
)paren
suffix:semicolon
)brace
DECL|function|t1_isfastlink
r_static
r_inline
r_int
id|t1_isfastlink
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_return
(paren
id|inb
c_func
(paren
id|base
op_plus
id|T1_IDENT
)paren
op_amp
op_complement
l_int|0x82
)paren
op_eq
l_int|1
suffix:semicolon
)brace
DECL|function|t1_fifostatus
r_static
r_inline
r_int
r_char
id|t1_fifostatus
c_func
(paren
r_int
r_int
id|base
)paren
(brace
r_return
id|inb
c_func
(paren
id|base
op_plus
id|T1_FIFOSTAT
)paren
suffix:semicolon
)brace
DECL|function|t1_get_slice
r_static
r_inline
r_int
r_int
id|t1_get_slice
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_char
op_star
id|dp
)paren
(brace
r_int
r_int
id|len
comma
id|i
suffix:semicolon
macro_line|#ifdef FASTLINK_DEBUG
r_int
id|wcnt
op_assign
l_int|0
comma
id|bcnt
op_assign
l_int|0
suffix:semicolon
macro_line|#endif
id|len
op_assign
id|i
op_assign
id|b1_get_word
c_func
(paren
id|base
)paren
suffix:semicolon
r_if
c_cond
(paren
id|t1_isfastlink
c_func
(paren
id|base
)paren
)paren
(brace
r_int
id|status
suffix:semicolon
r_while
c_loop
(paren
id|i
OG
l_int|0
)paren
(brace
id|status
op_assign
id|t1_fifostatus
c_func
(paren
id|base
)paren
op_amp
(paren
id|T1F_IREADY
op_or
id|T1F_IHALF
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i
op_ge
id|FIFO_INPBSIZE
)paren
id|status
op_or_assign
id|T1F_IFULL
suffix:semicolon
r_switch
c_cond
(paren
id|status
)paren
(brace
r_case
id|T1F_IREADY
op_or
id|T1F_IHALF
op_or
id|T1F_IFULL
suffix:colon
id|insb
c_func
(paren
id|base
op_plus
id|B1_READ
comma
id|dp
comma
id|FIFO_INPBSIZE
)paren
suffix:semicolon
id|dp
op_add_assign
id|FIFO_INPBSIZE
suffix:semicolon
id|i
op_sub_assign
id|FIFO_INPBSIZE
suffix:semicolon
macro_line|#ifdef FASTLINK_DEBUG
id|wcnt
op_add_assign
id|FIFO_INPBSIZE
suffix:semicolon
macro_line|#endif
r_break
suffix:semicolon
r_case
id|T1F_IREADY
op_or
id|T1F_IHALF
suffix:colon
id|insb
c_func
(paren
id|base
op_plus
id|B1_READ
comma
id|dp
comma
id|i
)paren
suffix:semicolon
macro_line|#ifdef FASTLINK_DEBUG
id|wcnt
op_add_assign
id|i
suffix:semicolon
macro_line|#endif
id|dp
op_add_assign
id|i
suffix:semicolon
id|i
op_assign
l_int|0
suffix:semicolon
r_if
c_cond
(paren
id|i
op_eq
l_int|0
)paren
r_break
suffix:semicolon
multiline_comment|/* fall through */
r_default
suffix:colon
op_star
id|dp
op_increment
op_assign
id|b1_get_byte
c_func
(paren
id|base
)paren
suffix:semicolon
id|i
op_decrement
suffix:semicolon
macro_line|#ifdef FASTLINK_DEBUG
id|bcnt
op_increment
suffix:semicolon
macro_line|#endif
r_break
suffix:semicolon
)brace
)brace
macro_line|#ifdef FASTLINK_DEBUG
r_if
c_cond
(paren
id|wcnt
)paren
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;b1lli(0x%x): get_slice l=%d w=%d b=%d&bslash;n&quot;
comma
id|base
comma
id|len
comma
id|wcnt
comma
id|bcnt
)paren
suffix:semicolon
macro_line|#endif
)brace
r_else
(brace
r_while
c_loop
(paren
id|i
op_decrement
OG
l_int|0
)paren
op_star
id|dp
op_increment
op_assign
id|b1_get_byte
c_func
(paren
id|base
)paren
suffix:semicolon
)brace
r_return
id|len
suffix:semicolon
)brace
DECL|function|t1_put_slice
r_static
r_inline
r_void
id|t1_put_slice
c_func
(paren
r_int
r_int
id|base
comma
r_int
r_char
op_star
id|dp
comma
r_int
r_int
id|len
)paren
(brace
r_int
id|i
op_assign
id|len
suffix:semicolon
id|b1_put_word
c_func
(paren
id|base
comma
id|i
)paren
suffix:semicolon
r_if
c_cond
(paren
id|t1_isfastlink
c_func
(paren
id|base
)paren
)paren
(brace
r_int
id|status
suffix:semicolon
r_while
c_loop
(paren
id|i
OG
l_int|0
)paren
(brace
id|status
op_assign
id|t1_fifostatus
c_func
(paren
id|base
)paren
op_amp
(paren
id|T1F_OREADY
op_or
id|T1F_OHALF
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i
op_ge
id|FIFO_OUTBSIZE
)paren
id|status
op_or_assign
id|T1F_OEMPTY
suffix:semicolon
r_switch
c_cond
(paren
id|status
)paren
(brace
r_case
id|T1F_OREADY
op_or
id|T1F_OHALF
op_or
id|T1F_OEMPTY
suffix:colon
id|outsb
c_func
(paren
id|base
op_plus
id|B1_WRITE
comma
id|dp
comma
id|FIFO_OUTBSIZE
)paren
suffix:semicolon
id|dp
op_add_assign
id|FIFO_OUTBSIZE
suffix:semicolon
id|i
op_sub_assign
id|FIFO_OUTBSIZE
suffix:semicolon
r_break
suffix:semicolon
r_case
id|T1F_OREADY
op_or
id|T1F_OHALF
suffix:colon
id|outsb
c_func
(paren
id|base
op_plus
id|B1_WRITE
comma
id|dp
comma
id|i
)paren
suffix:semicolon
id|dp
op_add_assign
id|i
suffix:semicolon
id|i
op_assign
l_int|0
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|b1_put_byte
c_func
(paren
id|base
comma
op_star
id|dp
op_increment
)paren
suffix:semicolon
id|i
op_decrement
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
)brace
r_else
(brace
r_while
c_loop
(paren
id|i
op_decrement
OG
l_int|0
)paren
id|b1_put_byte
c_func
(paren
id|base
comma
op_star
id|dp
op_increment
)paren
suffix:semicolon
)brace
)brace
DECL|function|t1_disable_irq
r_static
r_inline
r_void
id|t1_disable_irq
c_func
(paren
r_int
r_int
id|base
)paren
(brace
id|t1outp
c_func
(paren
id|base
comma
id|T1_IRQMASTER
comma
l_int|0x00
)paren
suffix:semicolon
)brace
DECL|function|t1_reset
r_static
r_inline
r_void
id|t1_reset
c_func
(paren
r_int
r_int
id|base
)paren
(brace
multiline_comment|/* reset T1 Controller */
id|b1_reset
c_func
(paren
id|base
)paren
suffix:semicolon
multiline_comment|/* disable irq on HEMA */
id|t1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x00
)paren
suffix:semicolon
id|t1outp
c_func
(paren
id|base
comma
id|B1_OUTSTAT
comma
l_int|0x00
)paren
suffix:semicolon
id|t1outp
c_func
(paren
id|base
comma
id|T1_IRQMASTER
comma
l_int|0x00
)paren
suffix:semicolon
multiline_comment|/* reset HEMA board configuration */
id|t1outp
c_func
(paren
id|base
comma
id|T1_RESETBOARD
comma
l_int|0xf
)paren
suffix:semicolon
)brace
DECL|function|b1_setinterrupt
r_static
r_inline
r_void
id|b1_setinterrupt
c_func
(paren
r_int
r_int
id|base
comma
r_int
id|irq
comma
r_enum
id|avmcardtype
id|cardtype
)paren
(brace
r_switch
c_cond
(paren
id|cardtype
)paren
(brace
r_case
id|avm_t1isa
suffix:colon
id|t1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x00
)paren
suffix:semicolon
id|t1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x02
)paren
suffix:semicolon
id|t1outp
c_func
(paren
id|base
comma
id|T1_IRQMASTER
comma
l_int|0x08
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|avm_b1isa
suffix:colon
id|b1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x00
)paren
suffix:semicolon
id|b1outp
c_func
(paren
id|base
comma
id|B1_RESET
comma
id|b1_irq_table
(braket
id|irq
)braket
)paren
suffix:semicolon
id|b1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x02
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
r_case
id|avm_m1
suffix:colon
r_case
id|avm_m2
suffix:colon
r_case
id|avm_b1pci
suffix:colon
id|b1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x00
)paren
suffix:semicolon
id|b1outp
c_func
(paren
id|base
comma
id|B1_RESET
comma
l_int|0xf0
)paren
suffix:semicolon
id|b1outp
c_func
(paren
id|base
comma
id|B1_INSTAT
comma
l_int|0x02
)paren
suffix:semicolon
r_break
suffix:semicolon
r_case
id|avm_c4
suffix:colon
r_case
id|avm_t1pci
suffix:colon
id|b1outp
c_func
(paren
id|base
comma
id|B1_RESET
comma
l_int|0xf0
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
)brace
multiline_comment|/* b1.c */
r_int
id|b1_detect
c_func
(paren
r_int
r_int
id|base
comma
r_enum
id|avmcardtype
id|cardtype
)paren
suffix:semicolon
r_void
id|b1_getrevision
c_func
(paren
id|avmcard
op_star
id|card
)paren
suffix:semicolon
r_int
id|b1_load_t4file
c_func
(paren
id|avmcard
op_star
id|card
comma
id|capiloaddatapart
op_star
id|t4file
)paren
suffix:semicolon
r_int
id|b1_load_config
c_func
(paren
id|avmcard
op_star
id|card
comma
id|capiloaddatapart
op_star
id|config
)paren
suffix:semicolon
r_int
id|b1_loaded
c_func
(paren
id|avmcard
op_star
id|card
)paren
suffix:semicolon
r_int
id|b1_load_firmware
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
id|capiloaddata
op_star
id|data
)paren
suffix:semicolon
r_void
id|b1_reset_ctr
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
)paren
suffix:semicolon
r_void
id|b1_register_appl
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
id|__u16
id|appl
comma
id|capi_register_params
op_star
id|rp
)paren
suffix:semicolon
r_void
id|b1_release_appl
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
id|__u16
id|appl
)paren
suffix:semicolon
r_void
id|b1_send_message
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_void
id|b1_parse_version
c_func
(paren
id|avmctrl_info
op_star
id|card
)paren
suffix:semicolon
r_void
id|b1_handle_interrupt
c_func
(paren
id|avmcard
op_star
id|card
)paren
suffix:semicolon
r_int
id|b1ctl_read_proc
c_func
(paren
r_char
op_star
id|page
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|off
comma
r_int
id|count
comma
r_int
op_star
id|eof
comma
r_struct
id|capi_ctr
op_star
id|ctrl
)paren
suffix:semicolon
multiline_comment|/* b1dma.c */
r_int
id|b1pciv4_detect
c_func
(paren
id|avmcard
op_star
id|card
)paren
suffix:semicolon
r_int
id|t1pci_detect
c_func
(paren
id|avmcard
op_star
id|card
)paren
suffix:semicolon
r_void
id|b1dma_reset
c_func
(paren
id|avmcard
op_star
id|card
)paren
suffix:semicolon
r_void
id|b1dma_interrupt
c_func
(paren
r_int
id|interrupt
comma
r_void
op_star
id|devptr
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_int
id|b1dma_load_firmware
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
id|capiloaddata
op_star
id|data
)paren
suffix:semicolon
r_void
id|b1dma_reset_ctr
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
)paren
suffix:semicolon
r_void
id|b1dma_remove_ctr
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
)paren
suffix:semicolon
r_void
id|b1dma_register_appl
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
id|__u16
id|appl
comma
id|capi_register_params
op_star
id|rp
)paren
suffix:semicolon
r_void
id|b1dma_release_appl
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
id|__u16
id|appl
)paren
suffix:semicolon
r_void
id|b1dma_send_message
c_func
(paren
r_struct
id|capi_ctr
op_star
id|ctrl
comma
r_struct
id|sk_buff
op_star
id|skb
)paren
suffix:semicolon
r_int
id|b1dmactl_read_proc
c_func
(paren
r_char
op_star
id|page
comma
r_char
op_star
op_star
id|start
comma
id|off_t
id|off
comma
r_int
id|count
comma
r_int
op_star
id|eof
comma
r_struct
id|capi_ctr
op_star
id|ctrl
)paren
suffix:semicolon
macro_line|#endif /* _AVMCARD_H_ */
eof
