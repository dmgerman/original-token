multiline_comment|/*&n; * Copyright (C) 1996 Universidade de Lisboa&n; * &n; * Written by Pedro Roque Marques (roque@di.fc.ul.pt)&n; *&n; * This software may be used and distributed according to the terms of &n; * the GNU Public License, incorporated herein by reference.&n; */
multiline_comment|/*&n; * 19991203 - Fernando Carvalho - takion@superbofh.org&n; * Hacked to compile with egcs and run with current version of isdn modules&n;*/
multiline_comment|/*        &n; *        PCBIT-D low-layer interface definitions&n; */
macro_line|#ifndef LAYER2_H
DECL|macro|LAYER2_H
mdefine_line|#define LAYER2_H
macro_line|#include &lt;asm/byteorder.h&gt;
DECL|macro|BANK1
mdefine_line|#define BANK1 0x0000U /* PC -&gt; Board */
DECL|macro|BANK2
mdefine_line|#define BANK2 0x01ffU /* Board -&gt; PC */
DECL|macro|BANK3
mdefine_line|#define BANK3 0x03feU /* Att Board */
DECL|macro|BANK4
mdefine_line|#define BANK4 0x03ffU /* Att PC */
DECL|macro|BANKLEN
mdefine_line|#define BANKLEN 0x01FFU
DECL|macro|LOAD_ZONE_START
mdefine_line|#define LOAD_ZONE_START 0x03f8U
DECL|macro|LOAD_ZONE_END
mdefine_line|#define LOAD_ZONE_END   0x03fdU
DECL|macro|LOAD_RETRY
mdefine_line|#define LOAD_RETRY      18000000
multiline_comment|/* TAM - XX - C - S  - NUM */
DECL|macro|PREHDR_LEN
mdefine_line|#define PREHDR_LEN 8
multiline_comment|/* TT  - M  - I - TH - TD  */
DECL|macro|FRAME_HDR_LEN
mdefine_line|#define FRAME_HDR_LEN  8   
DECL|macro|MSG_CONN_REQ
mdefine_line|#define MSG_CONN_REQ&t;&t;0x08000100
DECL|macro|MSG_CONN_CONF
mdefine_line|#define MSG_CONN_CONF&t;&t;0x00000101
DECL|macro|MSG_CONN_IND
mdefine_line|#define MSG_CONN_IND&t;&t;0x00000102
DECL|macro|MSG_CONN_RESP
mdefine_line|#define MSG_CONN_RESP&t;&t;0x08000103
DECL|macro|MSG_CONN_ACTV_REQ
mdefine_line|#define MSG_CONN_ACTV_REQ&t;0x08000300
DECL|macro|MSG_CONN_ACTV_CONF
mdefine_line|#define MSG_CONN_ACTV_CONF&t;0x00000301
DECL|macro|MSG_CONN_ACTV_IND
mdefine_line|#define MSG_CONN_ACTV_IND&t;0x00000302
DECL|macro|MSG_CONN_ACTV_RESP
mdefine_line|#define MSG_CONN_ACTV_RESP&t;0x08000303
DECL|macro|MSG_DISC_REQ
mdefine_line|#define MSG_DISC_REQ&t;&t;0x08000400
DECL|macro|MSG_DISC_CONF
mdefine_line|#define MSG_DISC_CONF&t;&t;0x00000401
DECL|macro|MSG_DISC_IND
mdefine_line|#define MSG_DISC_IND&t;&t;0x00000402
DECL|macro|MSG_DISC_RESP
mdefine_line|#define MSG_DISC_RESP&t;&t;0x08000403
DECL|macro|MSG_TDATA_REQ
mdefine_line|#define MSG_TDATA_REQ&t;&t;0x0908E200
DECL|macro|MSG_TDATA_CONF
mdefine_line|#define MSG_TDATA_CONF&t;&t;0x0000E201
DECL|macro|MSG_TDATA_IND
mdefine_line|#define MSG_TDATA_IND&t;&t;0x0000E202
DECL|macro|MSG_TDATA_RESP
mdefine_line|#define MSG_TDATA_RESP&t;&t;0x0908E203
DECL|macro|MSG_SELP_REQ
mdefine_line|#define MSG_SELP_REQ&t;&t;0x09004000
DECL|macro|MSG_SELP_CONF
mdefine_line|#define MSG_SELP_CONF&t;&t;0x00004001
DECL|macro|MSG_ACT_TRANSP_REQ
mdefine_line|#define MSG_ACT_TRANSP_REQ      0x0908E000
DECL|macro|MSG_ACT_TRANSP_CONF
mdefine_line|#define MSG_ACT_TRANSP_CONF     0x0000E001
DECL|macro|MSG_STPROT_REQ
mdefine_line|#define MSG_STPROT_REQ&t;&t;0x09004100
DECL|macro|MSG_STPROT_CONF
mdefine_line|#define MSG_STPROT_CONF&t;&t;0x00004101
DECL|macro|MSG_PING188_REQ
mdefine_line|#define MSG_PING188_REQ&t;&t;0x09030500
DECL|macro|MSG_PING188_CONF
mdefine_line|#define MSG_PING188_CONF        0x000005bc
DECL|macro|MSG_WATCH188
mdefine_line|#define MSG_WATCH188&t;        0x09030400
DECL|macro|MSG_API_ON
mdefine_line|#define MSG_API_ON              0x08020102
DECL|macro|MSG_POOL_PCBIT
mdefine_line|#define MSG_POOL_PCBIT          0x08020400
DECL|macro|MSG_POOL_PCBIT_CONF
mdefine_line|#define MSG_POOL_PCBIT_CONF     0x00000401
DECL|macro|MSG_INFO_IND
mdefine_line|#define MSG_INFO_IND            0x00002602
DECL|macro|MSG_INFO_RESP
mdefine_line|#define MSG_INFO_RESP           0x08002603
DECL|macro|MSG_DEBUG_188
mdefine_line|#define MSG_DEBUG_188           0x0000ff00
multiline_comment|/*&n;   &n;   long  4 3 2 1&n;   Intel 1 2 3 4&n;*/
macro_line|#ifdef __LITTLE_ENDIAN
DECL|macro|SET_MSG_SCMD
mdefine_line|#define SET_MSG_SCMD(msg, ch) &t;(msg = (msg &amp; 0xffffff00) | (((ch) &amp; 0xff)))
DECL|macro|SET_MSG_CMD
mdefine_line|#define SET_MSG_CMD(msg, ch) &t;(msg = (msg &amp; 0xffff00ff) | (((ch) &amp; 0xff) &lt;&lt; 8))
DECL|macro|SET_MSG_PROC
mdefine_line|#define SET_MSG_PROC(msg, ch) &t;(msg = (msg &amp; 0xff00ffff) | (((ch) &amp; 0xff) &lt;&lt; 16))
DECL|macro|SET_MSG_CPU
mdefine_line|#define SET_MSG_CPU(msg, ch) &t;(msg = (msg &amp; 0x00ffffff) | (((ch) &amp; 0xff) &lt;&lt; 24))
DECL|macro|GET_MSG_SCMD
mdefine_line|#define GET_MSG_SCMD(msg) &t;((msg) &amp; 0xFF)
DECL|macro|GET_MSG_CMD
mdefine_line|#define GET_MSG_CMD(msg) &t;((msg) &gt;&gt; 8 &amp; 0xFF)
DECL|macro|GET_MSG_PROC
mdefine_line|#define GET_MSG_PROC(msg) &t;((msg) &gt;&gt; 16 &amp; 0xFF)
DECL|macro|GET_MSG_CPU
mdefine_line|#define GET_MSG_CPU(msg) &t;((msg) &gt;&gt; 24)
macro_line|#else
macro_line|#error &quot;Non-Intel CPU&quot;
macro_line|#endif
DECL|macro|MAX_QUEUED
mdefine_line|#define MAX_QUEUED 7
DECL|macro|SCHED_READ
mdefine_line|#define SCHED_READ    0x01
DECL|macro|SCHED_WRITE
mdefine_line|#define SCHED_WRITE   0x02
DECL|macro|SET_RUN_TIMEOUT
mdefine_line|#define SET_RUN_TIMEOUT 2*HZ /* 2 seconds */
DECL|struct|frame_buf
r_struct
id|frame_buf
(brace
DECL|member|msg
id|ulong
id|msg
suffix:semicolon
DECL|member|refnum
r_int
r_int
id|refnum
suffix:semicolon
DECL|member|dt_len
r_int
r_int
id|dt_len
suffix:semicolon
DECL|member|hdr_len
r_int
r_int
id|hdr_len
suffix:semicolon
DECL|member|skb
r_struct
id|sk_buff
op_star
id|skb
suffix:semicolon
DECL|member|copied
r_int
r_int
id|copied
suffix:semicolon
DECL|member|next
r_struct
id|frame_buf
op_star
id|next
suffix:semicolon
)brace
suffix:semicolon
DECL|macro|MIN
mdefine_line|#define MIN(a,b) ((a&lt;b)?a:b)
r_extern
r_int
id|pcbit_l2_write
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
comma
id|ulong
id|msg
comma
id|ushort
id|refnum
comma
r_struct
id|sk_buff
op_star
id|skb
comma
r_int
r_int
id|hdr_len
)paren
suffix:semicolon
r_extern
r_void
id|pcbit_irq_handler
c_func
(paren
r_int
id|interrupt
comma
r_void
op_star
comma
r_struct
id|pt_regs
op_star
id|regs
)paren
suffix:semicolon
r_extern
r_struct
id|pcbit_dev
op_star
id|dev_pcbit
(braket
id|MAX_PCBIT_CARDS
)braket
suffix:semicolon
macro_line|#ifdef DEBUG
DECL|function|log_state
r_static
id|__inline__
r_void
id|log_state
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
)paren
(brace
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;writeptr = %ld&bslash;n&quot;
comma
(paren
id|ulong
)paren
(paren
id|dev-&gt;writeptr
op_minus
id|dev-&gt;sh_mem
)paren
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;readptr  = %ld&bslash;n&quot;
comma
(paren
id|ulong
)paren
(paren
id|dev-&gt;readptr
op_minus
(paren
id|dev-&gt;sh_mem
op_plus
id|BANK2
)paren
)paren
)paren
suffix:semicolon
id|printk
c_func
(paren
id|KERN_DEBUG
l_string|&quot;{rcv_seq=%01x, send_seq=%01x, unack_seq=%01x}&bslash;n&quot;
comma
id|dev-&gt;rcv_seq
comma
id|dev-&gt;send_seq
comma
id|dev-&gt;unack_seq
)paren
suffix:semicolon
)brace
macro_line|#endif
DECL|function|chan2dev
r_static
id|__inline__
r_struct
id|pcbit_dev
op_star
id|chan2dev
c_func
(paren
r_struct
id|pcbit_chan
op_star
id|chan
)paren
(brace
r_struct
id|pcbit_dev
op_star
id|dev
suffix:semicolon
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|MAX_PCBIT_CARDS
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
(paren
id|dev
op_assign
id|dev_pcbit
(braket
id|i
)braket
)paren
)paren
r_if
c_cond
(paren
id|dev-&gt;b1
op_eq
id|chan
op_logical_or
id|dev-&gt;b2
op_eq
id|chan
)paren
r_return
id|dev
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
DECL|function|finddev
r_static
id|__inline__
r_struct
id|pcbit_dev
op_star
id|finddev
c_func
(paren
r_int
id|id
)paren
(brace
r_struct
id|pcbit_dev
op_star
id|dev
suffix:semicolon
r_int
id|i
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|MAX_PCBIT_CARDS
suffix:semicolon
id|i
op_increment
)paren
r_if
c_cond
(paren
(paren
id|dev
op_assign
id|dev_pcbit
(braket
id|i
)braket
)paren
)paren
r_if
c_cond
(paren
id|dev-&gt;id
op_eq
id|id
)paren
r_return
id|dev
suffix:semicolon
r_return
l_int|NULL
suffix:semicolon
)brace
multiline_comment|/*&n; *  Support routines for reading and writing in the board&n; */
DECL|function|pcbit_writeb
r_static
id|__inline__
r_void
id|pcbit_writeb
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
comma
r_int
r_char
id|dt
)paren
(brace
id|writeb
c_func
(paren
id|dt
comma
id|dev-&gt;writeptr
op_increment
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;writeptr
op_eq
id|dev-&gt;sh_mem
op_plus
id|BANKLEN
)paren
id|dev-&gt;writeptr
op_assign
id|dev-&gt;sh_mem
suffix:semicolon
)brace
DECL|function|pcbit_writew
r_static
id|__inline__
r_void
id|pcbit_writew
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
comma
r_int
r_int
id|dt
)paren
(brace
r_int
id|dist
suffix:semicolon
id|dist
op_assign
id|BANKLEN
op_minus
(paren
id|dev-&gt;writeptr
op_minus
id|dev-&gt;sh_mem
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|dist
)paren
(brace
r_case
l_int|2
suffix:colon
id|writew
c_func
(paren
id|dt
comma
id|dev-&gt;writeptr
)paren
suffix:semicolon
id|dev-&gt;writeptr
op_assign
id|dev-&gt;sh_mem
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|writeb
c_func
(paren
(paren
id|u_char
)paren
(paren
id|dt
op_amp
l_int|0x00ffU
)paren
comma
id|dev-&gt;writeptr
)paren
suffix:semicolon
id|dev-&gt;writeptr
op_assign
id|dev-&gt;sh_mem
suffix:semicolon
id|writeb
c_func
(paren
(paren
id|u_char
)paren
(paren
id|dt
op_rshift
l_int|8
)paren
comma
id|dev-&gt;writeptr
op_increment
)paren
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|writew
c_func
(paren
id|dt
comma
id|dev-&gt;writeptr
)paren
suffix:semicolon
id|dev-&gt;writeptr
op_add_assign
l_int|2
suffix:semicolon
r_break
suffix:semicolon
)brace
suffix:semicolon
)brace
DECL|function|memcpy_topcbit
r_static
id|__inline__
r_void
id|memcpy_topcbit
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
comma
id|u_char
op_star
id|data
comma
r_int
id|len
)paren
(brace
r_int
id|diff
suffix:semicolon
id|diff
op_assign
id|len
op_minus
(paren
id|BANKLEN
op_minus
(paren
id|dev-&gt;writeptr
op_minus
id|dev-&gt;sh_mem
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|diff
OG
l_int|0
)paren
(brace
id|memcpy_toio
c_func
(paren
id|dev-&gt;writeptr
comma
id|data
comma
id|len
op_minus
id|diff
)paren
suffix:semicolon
id|memcpy_toio
c_func
(paren
id|dev-&gt;sh_mem
comma
id|data
op_plus
(paren
id|len
op_minus
id|diff
)paren
comma
id|diff
)paren
suffix:semicolon
id|dev-&gt;writeptr
op_assign
id|dev-&gt;sh_mem
op_plus
id|diff
suffix:semicolon
)brace
r_else
(brace
id|memcpy_toio
c_func
(paren
id|dev-&gt;writeptr
comma
id|data
comma
id|len
)paren
suffix:semicolon
id|dev-&gt;writeptr
op_add_assign
id|len
suffix:semicolon
r_if
c_cond
(paren
id|diff
op_eq
l_int|0
)paren
id|dev-&gt;writeptr
op_assign
id|dev-&gt;sh_mem
suffix:semicolon
)brace
)brace
DECL|function|pcbit_readb
r_static
id|__inline__
r_int
r_char
id|pcbit_readb
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
)paren
(brace
r_int
r_char
id|val
suffix:semicolon
id|val
op_assign
id|readb
c_func
(paren
id|dev-&gt;readptr
op_increment
)paren
suffix:semicolon
r_if
c_cond
(paren
id|dev-&gt;readptr
op_eq
id|dev-&gt;sh_mem
op_plus
id|BANK2
op_plus
id|BANKLEN
)paren
id|dev-&gt;readptr
op_assign
id|dev-&gt;sh_mem
op_plus
id|BANK2
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|pcbit_readw
r_static
id|__inline__
r_int
r_int
id|pcbit_readw
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
)paren
(brace
r_int
id|dist
suffix:semicolon
r_int
r_int
id|val
suffix:semicolon
id|dist
op_assign
id|BANKLEN
op_minus
(paren
id|dev-&gt;readptr
op_minus
(paren
id|dev-&gt;sh_mem
op_plus
id|BANK2
)paren
)paren
suffix:semicolon
r_switch
c_cond
(paren
id|dist
)paren
(brace
r_case
l_int|2
suffix:colon
id|val
op_assign
id|readw
c_func
(paren
id|dev-&gt;readptr
)paren
suffix:semicolon
id|dev-&gt;readptr
op_assign
id|dev-&gt;sh_mem
op_plus
id|BANK2
suffix:semicolon
r_break
suffix:semicolon
r_case
l_int|1
suffix:colon
id|val
op_assign
id|readb
c_func
(paren
id|dev-&gt;readptr
)paren
suffix:semicolon
id|dev-&gt;readptr
op_assign
id|dev-&gt;sh_mem
op_plus
id|BANK2
suffix:semicolon
id|val
op_assign
(paren
id|readb
c_func
(paren
id|dev-&gt;readptr
op_increment
)paren
op_lshift
l_int|8
)paren
op_or
id|val
suffix:semicolon
r_break
suffix:semicolon
r_default
suffix:colon
id|val
op_assign
id|readw
c_func
(paren
id|dev-&gt;readptr
)paren
suffix:semicolon
id|dev-&gt;readptr
op_add_assign
l_int|2
suffix:semicolon
r_break
suffix:semicolon
)brace
suffix:semicolon
r_return
id|val
suffix:semicolon
)brace
DECL|function|memcpy_frompcbit
r_static
id|__inline__
r_void
id|memcpy_frompcbit
c_func
(paren
r_struct
id|pcbit_dev
op_star
id|dev
comma
id|u_char
op_star
id|data
comma
r_int
id|len
)paren
(brace
r_int
id|diff
suffix:semicolon
id|diff
op_assign
id|len
op_minus
(paren
id|BANKLEN
op_minus
(paren
id|dev-&gt;readptr
op_minus
(paren
id|dev-&gt;sh_mem
op_plus
id|BANK2
)paren
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id|diff
OG
l_int|0
)paren
(brace
id|memcpy_fromio
c_func
(paren
id|data
comma
id|dev-&gt;readptr
comma
id|len
op_minus
id|diff
)paren
suffix:semicolon
id|memcpy_fromio
c_func
(paren
id|data
op_plus
(paren
id|len
op_minus
id|diff
)paren
comma
id|dev-&gt;sh_mem
op_plus
id|BANK2
comma
id|diff
)paren
suffix:semicolon
id|dev-&gt;readptr
op_assign
id|dev-&gt;sh_mem
op_plus
id|BANK2
op_plus
id|diff
suffix:semicolon
)brace
r_else
(brace
id|memcpy_fromio
c_func
(paren
id|data
comma
id|dev-&gt;readptr
comma
id|len
)paren
suffix:semicolon
id|dev-&gt;readptr
op_add_assign
id|len
suffix:semicolon
r_if
c_cond
(paren
id|diff
op_eq
l_int|0
)paren
id|dev-&gt;readptr
op_assign
id|dev-&gt;sh_mem
op_plus
id|BANK2
suffix:semicolon
)brace
)brace
macro_line|#endif
eof
