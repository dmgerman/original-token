multiline_comment|/*&n; **********************************************************************&n; *     hwaccess.h&n; *     Copyright 1999, 2000 Creative Labs, Inc.&n; *&n; **********************************************************************&n; *&n; *     Date&t;&t;    Author&t;    Summary of changes&n; *     ----&t;&t;    ------&t;    ------------------&n; *     October 20, 1999     Bertrand Lee    base code release&n; *&n; **********************************************************************&n; *&n; *     This program is free software; you can redistribute it and/or&n; *     modify it under the terms of the GNU General Public License as&n; *     published by the Free Software Foundation; either version 2 of&n; *     the License, or (at your option) any later version.&n; *&n; *     This program is distributed in the hope that it will be useful,&n; *     but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *     GNU General Public License for more details.&n; *&n; *     You should have received a copy of the GNU General Public&n; *     License along with this program; if not, write to the Free&n; *     Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,&n; *     USA.&n; *&n; **********************************************************************&n; */
macro_line|#ifndef _HWACCESS_H
DECL|macro|_HWACCESS_H
mdefine_line|#define _HWACCESS_H
macro_line|#include &lt;linux/version.h&gt;
macro_line|#include &lt;linux/kernel.h&gt;
macro_line|#include &lt;linux/fs.h&gt;
macro_line|#include &lt;linux/ioport.h&gt;
macro_line|#include &lt;linux/sound.h&gt;
macro_line|#include &lt;linux/malloc.h&gt;
macro_line|#include &lt;linux/soundcard.h&gt;
macro_line|#include &lt;linux/pci.h&gt;
macro_line|#include &lt;linux/interrupt.h&gt;
macro_line|#include &lt;asm/io.h&gt;
macro_line|#include &lt;asm/dma.h&gt;
macro_line|#include &lt;emu_wrapper.h&gt;
DECL|enum|GlobalErrorCode
r_enum
id|GlobalErrorCode
(brace
DECL|enumerator|CTSTATUS_SUCCESS
id|CTSTATUS_SUCCESS
op_assign
l_int|0x0000
comma
DECL|enumerator|CTSTATUS_ERROR
id|CTSTATUS_ERROR
comma
DECL|enumerator|CTSTATUS_NOMEMORY
id|CTSTATUS_NOMEMORY
comma
DECL|enumerator|CTSTATUS_INUSE
id|CTSTATUS_INUSE
comma
)brace
suffix:semicolon
DECL|macro|FLAGS_AVAILABLE
mdefine_line|#define FLAGS_AVAILABLE     0x0001
DECL|macro|FLAGS_READY
mdefine_line|#define FLAGS_READY         0x0002
DECL|macro|min
mdefine_line|#define min(x,y) ((x) &lt; (y)) ? (x) : (y)
DECL|struct|memhandle
r_struct
id|memhandle
(brace
DECL|member|busaddx
r_int
r_int
id|busaddx
suffix:semicolon
DECL|member|virtaddx
r_void
op_star
id|virtaddx
suffix:semicolon
DECL|member|order
id|u32
id|order
suffix:semicolon
)brace
suffix:semicolon
r_struct
id|memhandle
op_star
id|emu10k1_alloc_memphysical
c_func
(paren
id|u32
)paren
suffix:semicolon
r_void
id|emu10k1_free_memphysical
c_func
(paren
r_struct
id|memhandle
op_star
)paren
suffix:semicolon
DECL|macro|DEBUG_LEVEL
mdefine_line|#define DEBUG_LEVEL 2
macro_line|#ifdef EMU10K1_DEBUG
DECL|macro|DPD
macro_line|# define DPD(level,x,y...) do {if(level &lt;= DEBUG_LEVEL) printk( KERN_NOTICE &quot;emu10k1: %s: %d: &quot; x , __FILE__ , __LINE__ , y );} while(0)
DECL|macro|DPF
macro_line|# define DPF(level,x)   do {if(level &lt;= DEBUG_LEVEL) printk( KERN_NOTICE &quot;emu10k1: %s: %d: &quot; x , __FILE__ , __LINE__ );} while(0)
DECL|macro|ERROR
mdefine_line|#define ERROR() DPF(1,&quot;error&bslash;n&quot;);
macro_line|#else
DECL|macro|DPD
macro_line|# define DPD(level,x,y...) /* not debugging: nothing */
DECL|macro|DPF
macro_line|# define DPF(level,x)
DECL|macro|ERROR
mdefine_line|#define ERROR()
macro_line|#endif /* EMU10K1_DEBUG */
macro_line|#include &quot;8010.h&quot;
macro_line|#include &quot;voicemgr.h&quot;
r_int
id|emu10k1_addxmgr_alloc
c_func
(paren
id|u32
comma
r_struct
id|emu10k1_card
op_star
)paren
suffix:semicolon
r_void
id|emu10k1_addxmgr_free
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
r_int
)paren
suffix:semicolon
macro_line|#include &quot;timer.h&quot;
macro_line|#include &quot;irqmgr.h&quot;
multiline_comment|/* DATA STRUCTURES */
DECL|struct|emu10k1_card
r_struct
id|emu10k1_card
(brace
DECL|member|list
r_struct
id|list_head
id|list
suffix:semicolon
DECL|member|virtualpagetable
r_struct
id|memhandle
op_star
id|virtualpagetable
suffix:semicolon
DECL|member|tankmem
r_struct
id|memhandle
op_star
id|tankmem
suffix:semicolon
DECL|member|tmemsize
id|u32
id|tmemsize
suffix:semicolon
DECL|member|silentpage
r_struct
id|memhandle
op_star
id|silentpage
suffix:semicolon
DECL|member|lock
id|spinlock_t
id|lock
suffix:semicolon
DECL|member|voicemgr
r_struct
id|voice_manager
id|voicemgr
suffix:semicolon
DECL|member|emupagetable
id|u16
id|emupagetable
(braket
id|MAXPAGES
)braket
suffix:semicolon
DECL|member|timers
r_struct
id|list_head
id|timers
suffix:semicolon
DECL|member|timer_delay
r_int
id|timer_delay
suffix:semicolon
DECL|member|timer_lock
id|spinlock_t
id|timer_lock
suffix:semicolon
DECL|member|pci_dev
r_struct
id|pci_dev
op_star
id|pci_dev
suffix:semicolon
DECL|member|iobase
r_int
r_int
id|iobase
suffix:semicolon
DECL|member|mixeraddx
r_int
r_int
id|mixeraddx
suffix:semicolon
DECL|member|irq
id|u32
id|irq
suffix:semicolon
DECL|member|audio1_num
r_int
r_int
id|audio1_num
suffix:semicolon
DECL|member|audio2_num
r_int
r_int
id|audio2_num
suffix:semicolon
DECL|member|mixer_num
r_int
r_int
id|mixer_num
suffix:semicolon
DECL|member|midi_num
r_int
r_int
id|midi_num
suffix:semicolon
DECL|member|waveout
r_struct
id|emu10k1_waveout
op_star
id|waveout
suffix:semicolon
DECL|member|wavein
r_struct
id|emu10k1_wavein
op_star
id|wavein
suffix:semicolon
DECL|member|mpuout
r_struct
id|emu10k1_mpuout
op_star
id|mpuout
suffix:semicolon
DECL|member|mpuin
r_struct
id|emu10k1_mpuin
op_star
id|mpuin
suffix:semicolon
DECL|member|arrwVol
id|u16
id|arrwVol
(braket
id|SOUND_MIXER_NRDEVICES
op_plus
l_int|1
)braket
suffix:semicolon
multiline_comment|/* array is used from the member 1 to save (-1) operation */
DECL|member|digmix
id|u32
id|digmix
(braket
l_int|96
)braket
suffix:semicolon
DECL|member|modcnt
r_int
r_int
id|modcnt
suffix:semicolon
DECL|member|open_sem
r_struct
id|semaphore
id|open_sem
suffix:semicolon
DECL|member|open_mode
id|mode_t
id|open_mode
suffix:semicolon
DECL|member|open_wait
id|wait_queue_head_t
id|open_wait
suffix:semicolon
DECL|member|mpuacqcount
id|u32
id|mpuacqcount
suffix:semicolon
singleline_comment|// Mpu acquire count
DECL|member|has_toslink
id|u32
id|has_toslink
suffix:semicolon
singleline_comment|// TOSLink detection
DECL|member|chiprev
id|u8
id|chiprev
suffix:semicolon
multiline_comment|/* Chip revision                */
)brace
suffix:semicolon
macro_line|#ifdef PRIVATE_PCM_VOLUME
DECL|macro|MAX_PCM_CHANNELS
mdefine_line|#define MAX_PCM_CHANNELS NUM_G 
DECL|struct|sblive_pcm_volume_rec
r_struct
id|sblive_pcm_volume_rec
(brace
DECL|member|files
r_struct
id|files_struct
op_star
id|files
suffix:semicolon
singleline_comment|// identification of the same thread
DECL|member|attn_l
id|u8
id|attn_l
suffix:semicolon
singleline_comment|// attenuation for left channel
DECL|member|attn_r
id|u8
id|attn_r
suffix:semicolon
singleline_comment|// attenuation for right channel
DECL|member|mixer
id|u16
id|mixer
suffix:semicolon
singleline_comment|// saved mixer value for return
DECL|member|channel_l
id|u8
id|channel_l
suffix:semicolon
singleline_comment|// idx of left channel
DECL|member|channel_r
id|u8
id|channel_r
suffix:semicolon
singleline_comment|// idx of right channel
DECL|member|opened
r_int
id|opened
suffix:semicolon
singleline_comment|// counter - locks element
)brace
suffix:semicolon
r_extern
r_struct
id|sblive_pcm_volume_rec
id|sblive_pcm_volume
(braket
)braket
suffix:semicolon
macro_line|#endif
DECL|macro|ENABLE
mdefine_line|#define ENABLE &t;&t;&t;0xffffffff
DECL|macro|DISABLE
mdefine_line|#define DISABLE &t;&t;0x00000000
DECL|macro|ENV_ON
mdefine_line|#define ENV_ON&t;&t;&t;0x80
DECL|macro|ENV_OFF
mdefine_line|#define ENV_OFF&t;&t;&t;0x00
DECL|macro|TIMEOUT
mdefine_line|#define TIMEOUT &t;&t;    16384
id|u32
id|srToPitch
c_func
(paren
id|u32
)paren
suffix:semicolon
id|u8
id|sumVolumeToAttenuation
c_func
(paren
id|u32
)paren
suffix:semicolon
r_extern
r_struct
id|list_head
id|emu10k1_devs
suffix:semicolon
multiline_comment|/* Hardware Abstraction Layer access functions */
DECL|macro|WRITE_FN0
mdefine_line|#define WRITE_FN0(a,b,c) sblive_wrtmskfn0((a),(u8)(b), ((1 &lt;&lt; (((b) &gt;&gt; 24) &amp; 0x3f)) - 1) &lt;&lt; (((b) &gt;&gt; 16) &amp; 0x1f), (c) &lt;&lt; (((b) &gt;&gt; 16) &amp; 0x1f))
DECL|macro|READ_FN0
mdefine_line|#define READ_FN0(a,b) sblive_rdmskfn0((a),(u8)(b),((1 &lt;&lt; (((b) &gt;&gt; 24) &amp; 0x3f)) - 1) &lt;&lt; (((b) &gt;&gt; 16) &amp; 0x1f)) &gt;&gt; (((b) &gt;&gt; 16) &amp; 0x1f)
r_void
id|sblive_writefn0
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
comma
id|u32
)paren
suffix:semicolon
r_void
id|sblive_wrtmskfn0
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
comma
id|u32
comma
id|u32
)paren
suffix:semicolon
id|u32
id|sblive_readfn0
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
)paren
suffix:semicolon
id|u32
id|sblive_rdmskfn0
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
comma
id|u32
)paren
suffix:semicolon
r_void
id|sblive_writeptr
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u32
comma
id|u32
comma
id|u32
)paren
suffix:semicolon
id|u32
id|sblive_readptr
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u32
comma
id|u32
)paren
suffix:semicolon
r_void
id|emu10k1_set_stop_on_loop
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u32
)paren
suffix:semicolon
r_void
id|emu10k1_clear_stop_on_loop
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u32
)paren
suffix:semicolon
multiline_comment|/* AC97 Mixer access function */
r_int
id|sblive_readac97
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
comma
id|u16
op_star
)paren
suffix:semicolon
r_int
id|sblive_writeac97
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
comma
id|u16
)paren
suffix:semicolon
r_int
id|sblive_rmwac97
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
comma
id|u16
comma
id|u16
)paren
suffix:semicolon
multiline_comment|/* MPU access function*/
r_int
id|emu10k1_mpu_write_data
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
)paren
suffix:semicolon
r_int
id|emu10k1_mpu_read_data
c_func
(paren
r_struct
id|emu10k1_card
op_star
comma
id|u8
op_star
)paren
suffix:semicolon
r_int
id|emu10k1_mpu_reset
c_func
(paren
r_struct
id|emu10k1_card
op_star
)paren
suffix:semicolon
r_int
id|emu10k1_mpu_acquire
c_func
(paren
r_struct
id|emu10k1_card
op_star
)paren
suffix:semicolon
r_int
id|emu10k1_mpu_release
c_func
(paren
r_struct
id|emu10k1_card
op_star
)paren
suffix:semicolon
macro_line|#endif  /* _HWACCESS_H */
eof
