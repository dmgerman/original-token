multiline_comment|/*&n; *&t;dev_table.h&n; *&n; *&t;Global definitions for device call tables&n; * &n; * Copyright by Hannu Savolainen 1993&n; *&n; * Redistribution and use in source and binary forms, with or without&n; * modification, are permitted provided that the following conditions&n; * are met:&n; * 1. Redistributions of source code must retain the above copyright&n; *    notice, this list of conditions and the following disclaimer.&n; * 2. Redistributions in binary form must reproduce the above copyright&n; *    notice, this list of conditions and the following disclaimer in the&n; *    documentation and/or other materials provided with the distribution.&n; *&n; * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS&squot;&squot; AND&n; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&n; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&n; * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE&n; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&n; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS&n; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&n; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT&n; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY&n; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&n; * SUCH DAMAGE.&n; *&n;&n;*/
macro_line|#ifndef _DEV_TABLE_H_
DECL|macro|_DEV_TABLE_H_
mdefine_line|#define _DEV_TABLE_H_
multiline_comment|/*&n; *&t;NOTE! &t;NOTE!&t;NOTE!&t;NOTE!&n; *&n; *&t;If you modify this file, please check the dev_table.c also.&n; *&n; *&t;NOTE! &t;NOTE!&t;NOTE!&t;NOTE!&n; */
DECL|struct|card_info
r_struct
id|card_info
(brace
DECL|member|card_type
r_int
id|card_type
suffix:semicolon
multiline_comment|/*&t;From soundcard.c&t;*/
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
DECL|member|attach
r_int
(paren
op_star
id|attach
)paren
(paren
r_int
id|mem_start
comma
r_struct
id|address_info
op_star
id|hw_config
)paren
suffix:semicolon
DECL|member|probe
r_int
(paren
op_star
id|probe
)paren
(paren
r_struct
id|address_info
op_star
id|hw_config
)paren
suffix:semicolon
DECL|member|config
r_struct
id|address_info
id|config
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/** UWM -- new  MIDI structure here.. **/
DECL|struct|generic_midi_info
r_struct
id|generic_midi_info
(brace
DECL|member|name
r_char
op_star
id|name
suffix:semicolon
multiline_comment|/* Name of the MIDI device.. */
DECL|member|attach
r_int
(paren
op_star
id|attach
)paren
(paren
r_int
id|mem_start
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|audio_operations
r_struct
id|audio_operations
(brace
DECL|member|name
r_char
id|name
(braket
l_int|32
)braket
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_int
id|dev
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|output_block
r_void
(paren
op_star
id|output_block
)paren
(paren
r_int
id|dev
comma
r_int
r_int
id|buf
comma
r_int
id|count
comma
r_int
id|intrflag
)paren
suffix:semicolon
DECL|member|start_input
r_void
(paren
op_star
id|start_input
)paren
(paren
r_int
id|dev
comma
r_int
r_int
id|buf
comma
r_int
id|count
comma
r_int
id|intrflag
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_int
id|dev
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
comma
r_int
id|local
)paren
suffix:semicolon
DECL|member|prepare_for_input
r_int
(paren
op_star
id|prepare_for_input
)paren
(paren
r_int
id|dev
comma
r_int
id|bufsize
comma
r_int
id|nbufs
)paren
suffix:semicolon
DECL|member|prepare_for_output
r_int
(paren
op_star
id|prepare_for_output
)paren
(paren
r_int
id|dev
comma
r_int
id|bufsize
comma
r_int
id|nbufs
)paren
suffix:semicolon
DECL|member|reset
r_void
(paren
op_star
id|reset
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|halt_xfer
r_void
(paren
op_star
id|halt_xfer
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|has_output_drained
r_int
(paren
op_star
id|has_output_drained
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|copy_from_user
r_void
(paren
op_star
id|copy_from_user
)paren
(paren
r_int
id|dev
comma
r_char
op_star
id|localbuf
comma
r_int
id|localoffs
comma
id|snd_rw_buf
op_star
id|userbuf
comma
r_int
id|useroffs
comma
r_int
id|len
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|mixer_operations
r_struct
id|mixer_operations
(brace
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_int
id|dev
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|synth_operations
r_struct
id|synth_operations
(brace
DECL|member|info
r_struct
id|synth_info
op_star
id|info
suffix:semicolon
DECL|member|synth_type
r_int
id|synth_type
suffix:semicolon
DECL|member|synth_subtype
r_int
id|synth_subtype
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_int
id|dev
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_int
id|dev
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
DECL|member|kill_note
r_int
(paren
op_star
id|kill_note
)paren
(paren
r_int
id|dev
comma
r_int
id|voice
comma
r_int
id|velocity
)paren
suffix:semicolon
DECL|member|start_note
r_int
(paren
op_star
id|start_note
)paren
(paren
r_int
id|dev
comma
r_int
id|voice
comma
r_int
id|note
comma
r_int
id|velocity
)paren
suffix:semicolon
DECL|member|set_instr
r_int
(paren
op_star
id|set_instr
)paren
(paren
r_int
id|dev
comma
r_int
id|voice
comma
r_int
id|instr
)paren
suffix:semicolon
DECL|member|reset
r_void
(paren
op_star
id|reset
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|hw_control
r_void
(paren
op_star
id|hw_control
)paren
(paren
r_int
id|dev
comma
r_int
r_char
op_star
id|event
)paren
suffix:semicolon
DECL|member|load_patch
r_int
(paren
op_star
id|load_patch
)paren
(paren
r_int
id|dev
comma
r_int
id|format
comma
id|snd_rw_buf
op_star
id|addr
comma
r_int
id|offs
comma
r_int
id|count
comma
r_int
id|pmgr_flag
)paren
suffix:semicolon
DECL|member|aftertouch
r_void
(paren
op_star
id|aftertouch
)paren
(paren
r_int
id|dev
comma
r_int
id|voice
comma
r_int
id|pressure
)paren
suffix:semicolon
DECL|member|controller
r_void
(paren
op_star
id|controller
)paren
(paren
r_int
id|dev
comma
r_int
id|voice
comma
r_int
id|ctrl_num
comma
r_int
id|value
)paren
suffix:semicolon
DECL|member|panning
r_void
(paren
op_star
id|panning
)paren
(paren
r_int
id|dev
comma
r_int
id|voice
comma
r_int
id|value
)paren
suffix:semicolon
DECL|member|pmgr_interface
r_int
(paren
op_star
id|pmgr_interface
)paren
(paren
r_int
id|dev
comma
r_struct
id|patmgr_info
op_star
id|info
)paren
suffix:semicolon
)brace
suffix:semicolon
DECL|struct|midi_operations
r_struct
id|midi_operations
(brace
DECL|member|info
r_struct
id|midi_info
id|info
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_int
id|dev
comma
r_int
id|mode
comma
r_void
(paren
op_star
id|inputintr
)paren
(paren
r_int
id|dev
comma
r_int
r_char
id|data
)paren
comma
r_void
(paren
op_star
id|outputintr
)paren
(paren
r_int
id|dev
)paren
)paren
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|ioctl
r_int
(paren
op_star
id|ioctl
)paren
(paren
r_int
id|dev
comma
r_int
r_int
id|cmd
comma
r_int
r_int
id|arg
)paren
suffix:semicolon
DECL|member|putc
r_int
(paren
op_star
id|putc
)paren
(paren
r_int
id|dev
comma
r_int
r_char
id|data
)paren
suffix:semicolon
DECL|member|start_read
r_int
(paren
op_star
id|start_read
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|end_read
r_int
(paren
op_star
id|end_read
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|kick
r_void
(paren
op_star
id|kick
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|command
r_int
(paren
op_star
id|command
)paren
(paren
r_int
id|dev
comma
r_int
r_char
id|data
)paren
suffix:semicolon
DECL|member|buffer_status
r_int
(paren
op_star
id|buffer_status
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
)brace
suffix:semicolon
multiline_comment|/** UWM -- new structure for MIDI  **/
DECL|struct|generic_midi_operations
r_struct
id|generic_midi_operations
(brace
DECL|member|info
r_struct
id|midi_info
id|info
suffix:semicolon
DECL|member|open
r_int
(paren
op_star
id|open
)paren
(paren
r_int
id|dev
comma
r_int
id|mode
)paren
suffix:semicolon
DECL|member|close
r_void
(paren
op_star
id|close
)paren
(paren
r_int
id|dev
)paren
suffix:semicolon
DECL|member|write
r_int
(paren
op_star
id|write
)paren
(paren
r_int
id|dev
comma
id|snd_rw_buf
op_star
id|data
)paren
suffix:semicolon
DECL|member|read
r_int
(paren
op_star
id|read
)paren
(paren
r_int
id|dev
comma
id|snd_rw_buf
op_star
id|data
)paren
suffix:semicolon
)brace
suffix:semicolon
macro_line|#ifndef ALL_EXTERNAL_TO_ME
macro_line|#ifdef _MIDI_TABLE_C_
multiline_comment|/** UWM **/
DECL|variable|generic_midi_devs
r_struct
id|generic_midi_operations
op_star
id|generic_midi_devs
(braket
id|MAX_MIDI_DEV
)braket
op_assign
(brace
l_int|NULL
)brace
suffix:semicolon
DECL|variable|num_generic_midis
DECL|variable|pro_midi_dev
r_int
id|num_generic_midis
op_assign
l_int|0
comma
id|pro_midi_dev
op_assign
l_int|0
suffix:semicolon
DECL|variable|midi_supported
r_struct
id|generic_midi_info
id|midi_supported
(braket
)braket
op_assign
(brace
macro_line|#ifndef EXCLUDE_PRO_MIDI
(brace
l_string|&quot;ProAudioSpectrum MV101&quot;
comma
id|pro_midi_attach
)brace
macro_line|#endif
)brace
suffix:semicolon
DECL|variable|num_midi_drivers
r_int
id|num_midi_drivers
op_assign
r_sizeof
(paren
id|midi_supported
)paren
op_div
r_sizeof
(paren
r_struct
id|generic_midi_info
)paren
suffix:semicolon
macro_line|#endif
macro_line|#ifdef _DEV_TABLE_C_   
DECL|variable|dsp_devs
DECL|variable|num_dspdevs
r_struct
id|audio_operations
op_star
id|dsp_devs
(braket
id|MAX_DSP_DEV
)braket
op_assign
(brace
l_int|NULL
)brace
suffix:semicolon
r_int
id|num_dspdevs
op_assign
l_int|0
suffix:semicolon
DECL|variable|mixer_devs
DECL|variable|num_mixers
r_struct
id|mixer_operations
op_star
id|mixer_devs
(braket
id|MAX_MIXER_DEV
)braket
op_assign
(brace
l_int|NULL
)brace
suffix:semicolon
r_int
id|num_mixers
op_assign
l_int|0
suffix:semicolon
DECL|variable|synth_devs
DECL|variable|num_synths
r_struct
id|synth_operations
op_star
id|synth_devs
(braket
id|MAX_SYNTH_DEV
)braket
op_assign
(brace
l_int|NULL
)brace
suffix:semicolon
r_int
id|num_synths
op_assign
l_int|0
suffix:semicolon
DECL|variable|midi_devs
DECL|variable|num_midis
r_struct
id|midi_operations
op_star
id|midi_devs
(braket
id|MAX_MIDI_DEV
)braket
op_assign
(brace
l_int|NULL
)brace
suffix:semicolon
r_int
id|num_midis
op_assign
l_int|0
suffix:semicolon
macro_line|#   ifndef EXCLUDE_MPU401
DECL|variable|mpu401_dev
r_int
id|mpu401_dev
op_assign
l_int|0
suffix:semicolon
macro_line|#   endif
multiline_comment|/*&n; *&t;Note! The detection order is significant. Don&squot;t change it.&n; */
DECL|variable|supported_drivers
r_struct
id|card_info
id|supported_drivers
(braket
)braket
op_assign
(brace
macro_line|#ifndef EXCLUDE_MPU401
(brace
id|SNDCARD_MPU401
comma
l_string|&quot;Roland MPU-401&quot;
comma
id|attach_mpu401
comma
id|probe_mpu401
comma
(brace
id|MPU_BASE
comma
id|MPU_IRQ
comma
l_int|0
)brace
)brace
comma
macro_line|#endif
macro_line|#ifndef EXCLUDE_GUS
(brace
id|SNDCARD_GUS
comma
l_string|&quot;Gravis Ultrasound&quot;
comma
id|attach_gus_card
comma
id|probe_gus
comma
(brace
id|GUS_BASE
comma
id|GUS_IRQ
comma
id|GUS_DMA
)brace
)brace
comma
macro_line|#endif
macro_line|#ifndef EXCLUDE_PAS
(brace
id|SNDCARD_PAS
comma
l_string|&quot;ProAudioSpectrum&quot;
comma
id|attach_pas_card
comma
id|probe_pas
comma
(brace
id|PAS_BASE
comma
id|PAS_IRQ
comma
id|PAS_DMA
)brace
)brace
comma
macro_line|#endif
macro_line|#ifndef EXCLUDE_SB
(brace
id|SNDCARD_SB
comma
l_string|&quot;SoundBlaster&quot;
comma
id|attach_sb_card
comma
id|probe_sb
comma
(brace
id|SBC_BASE
comma
id|SBC_IRQ
comma
id|SBC_DMA
)brace
)brace
comma
macro_line|#endif
macro_line|#ifndef EXCLUDE_YM3812
(brace
id|SNDCARD_ADLIB
comma
l_string|&quot;AdLib&quot;
comma
id|attach_adlib_card
comma
id|probe_adlib
comma
(brace
id|FM_MONO
comma
l_int|0
comma
l_int|0
)brace
)brace
comma
macro_line|#endif
(brace
l_int|0
comma
l_string|&quot;*?*&quot;
comma
l_int|NULL
)brace
)brace
suffix:semicolon
DECL|variable|num_sound_drivers
r_int
id|num_sound_drivers
op_assign
r_sizeof
(paren
id|supported_drivers
)paren
op_div
r_sizeof
(paren
r_struct
id|card_info
)paren
suffix:semicolon
macro_line|# ifndef EXCLUDE_AUDIO 
DECL|variable|sound_buffcounts
r_int
id|sound_buffcounts
(braket
id|MAX_DSP_DEV
)braket
op_assign
(brace
l_int|0
)brace
suffix:semicolon
DECL|variable|sound_buffsizes
r_int
id|sound_buffsizes
(braket
id|MAX_DSP_DEV
)braket
op_assign
(brace
l_int|0
)brace
suffix:semicolon
DECL|variable|sound_dsp_dmachan
r_int
id|sound_dsp_dmachan
(braket
id|MAX_DSP_DEV
)braket
op_assign
(brace
l_int|0
)brace
suffix:semicolon
DECL|variable|sound_dma_automode
r_int
id|sound_dma_automode
(braket
id|MAX_DSP_DEV
)braket
op_assign
(brace
l_int|0
)brace
suffix:semicolon
macro_line|# endif
macro_line|#else
DECL|variable|num_dspdevs
r_extern
r_struct
id|audio_operations
op_star
id|dsp_devs
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_int
id|num_dspdevs
suffix:semicolon
r_extern
r_struct
id|mixer_operations
op_star
id|mixer_devs
(braket
id|MAX_MIXER_DEV
)braket
suffix:semicolon
r_extern
r_int
id|num_mixers
suffix:semicolon
r_extern
r_struct
id|synth_operations
op_star
id|synth_devs
(braket
id|MAX_SYNTH_DEV
)braket
suffix:semicolon
r_extern
r_int
id|num_synths
suffix:semicolon
r_extern
r_struct
id|midi_operations
op_star
id|midi_devs
(braket
id|MAX_MIDI_DEV
)braket
suffix:semicolon
r_extern
r_int
id|num_midis
suffix:semicolon
macro_line|#   ifndef EXCLUDE_MPU401
r_extern
r_int
id|mpu401_dev
suffix:semicolon
macro_line|#   endif
r_extern
r_struct
id|card_info
id|supported_drivers
(braket
)braket
suffix:semicolon
r_extern
r_int
id|num_sound_drivers
suffix:semicolon
macro_line|# ifndef EXCLUDE_AUDIO
r_extern
r_int
id|sound_buffcounts
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_extern
r_int
id|sound_buffsizes
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_extern
r_int
id|sound_dsp_dmachan
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_extern
r_int
id|sound_dma_automode
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
macro_line|# endif
macro_line|#endif
r_int
id|sndtable_init
c_func
(paren
r_int
id|mem_start
)paren
suffix:semicolon
r_int
id|sndtable_get_cardcount
(paren
r_void
)paren
suffix:semicolon
r_int
id|CMIDI_init
c_func
(paren
r_int
id|mem_start
)paren
suffix:semicolon
multiline_comment|/* */
macro_line|#endif
macro_line|#endif
multiline_comment|/* If external to me.... :) */
macro_line|#ifdef ALL_EXTERNAL_TO_ME
DECL|variable|num_dspdevs
r_extern
r_struct
id|audio_operations
op_star
id|dsp_devs
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_int
id|num_dspdevs
suffix:semicolon
r_extern
r_struct
id|mixer_operations
op_star
id|mixer_devs
(braket
id|MAX_MIXER_DEV
)braket
suffix:semicolon
r_extern
r_int
id|num_mixers
suffix:semicolon
r_extern
r_struct
id|synth_operations
op_star
id|synth_devs
(braket
id|MAX_SYNTH_DEV
)braket
suffix:semicolon
r_extern
r_int
id|num_synths
suffix:semicolon
r_extern
r_struct
id|midi_operations
op_star
id|midi_devs
(braket
id|MAX_MIDI_DEV
)braket
suffix:semicolon
r_extern
r_int
id|num_midis
suffix:semicolon
r_extern
r_struct
id|generic_midi_operations
op_star
id|generic_midi_devs
(braket
)braket
suffix:semicolon
r_extern
r_int
id|num_generic_midis
comma
id|pro_midi_dev
suffix:semicolon
macro_line|#ifndef EXCLUDE_MPU401
r_extern
r_int
id|mpu401_dev
suffix:semicolon
macro_line|#endif
r_extern
r_struct
id|generic_midi_info
id|midi_supported
(braket
)braket
suffix:semicolon
r_extern
r_struct
id|card_info
id|supported_drivers
(braket
)braket
suffix:semicolon
r_extern
r_int
id|num_sound_drivers
suffix:semicolon
r_extern
r_int
id|num_midi_drivers
suffix:semicolon
macro_line|#ifndef EXCLUDE_AUDIO
r_extern
r_int
id|sound_buffcounts
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_extern
r_int
id|sound_buffsizes
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_extern
r_int
id|sound_dsp_dmachan
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
r_extern
r_int
id|sound_dma_automode
(braket
id|MAX_DSP_DEV
)braket
suffix:semicolon
macro_line|#endif
macro_line|#endif
eof
