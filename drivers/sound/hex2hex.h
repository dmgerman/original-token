multiline_comment|/*&n; * This file is a part of configure.c&n; *&n; * hex2hex reads an input file in Intel HEX format and produces&n; * an (unsigned char) array which contains the bytes and writes it to the&n; * output file using C syntax&n; */
DECL|macro|MAX_SIZE
mdefine_line|#define MAX_SIZE (256*1024)
DECL|macro|ABANDON
mdefine_line|#define ABANDON(why) { &bslash;&n;&t;&t;fprintf(stderr, &quot;%s: &quot; why &quot;&bslash;n&quot;, source); &bslash;&n;&t;&t;fclose(inf);fclose(outf);return 0; &bslash;&n;&t;&t;}
DECL|function|hex2hex
r_int
id|hex2hex
c_func
(paren
r_char
op_star
id|source
comma
r_char
op_star
id|target
comma
r_char
op_star
id|varline
)paren
(brace
id|FILE
op_star
id|inf
comma
op_star
id|outf
suffix:semicolon
r_int
id|i
comma
id|l
comma
id|c
suffix:semicolon
r_int
r_char
id|buf
(braket
id|MAX_SIZE
)braket
suffix:semicolon
r_if
c_cond
(paren
(paren
id|inf
op_assign
id|fopen
c_func
(paren
id|source
comma
l_string|&quot;r&quot;
)paren
)paren
op_eq
l_int|NULL
)paren
(brace
id|perror
c_func
(paren
id|source
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
r_if
c_cond
(paren
(paren
id|outf
op_assign
id|fopen
c_func
(paren
id|target
comma
l_string|&quot;w&quot;
)paren
)paren
op_eq
l_int|NULL
)paren
(brace
id|perror
c_func
(paren
id|target
)paren
suffix:semicolon
id|fclose
c_func
(paren
id|inf
)paren
suffix:semicolon
r_return
l_int|0
suffix:semicolon
)brace
id|l
op_assign
l_int|0
suffix:semicolon
r_while
c_loop
(paren
(paren
id|c
op_assign
id|getc
c_func
(paren
id|inf
)paren
)paren
op_ne
id|EOF
)paren
(brace
r_if
c_cond
(paren
id|c
op_eq
l_char|&squot;:&squot;
)paren
multiline_comment|/* Sync with beginning of line */
(brace
r_int
id|n
comma
id|check
suffix:semicolon
r_int
r_char
id|sum
suffix:semicolon
r_int
id|addr
suffix:semicolon
r_int
id|linetype
suffix:semicolon
r_if
c_cond
(paren
id|fscanf
c_func
(paren
id|inf
comma
l_string|&quot;%02x&quot;
comma
op_amp
id|n
)paren
op_ne
l_int|1
)paren
id|ABANDON
c_func
(paren
l_string|&quot;File format error&quot;
)paren
suffix:semicolon
id|sum
op_assign
id|n
suffix:semicolon
r_if
c_cond
(paren
id|fscanf
c_func
(paren
id|inf
comma
l_string|&quot;%04x&quot;
comma
op_amp
id|addr
)paren
op_ne
l_int|1
)paren
id|ABANDON
c_func
(paren
l_string|&quot;File format error&quot;
)paren
suffix:semicolon
id|sum
op_add_assign
id|addr
op_div
l_int|256
suffix:semicolon
id|sum
op_add_assign
id|addr
op_mod
l_int|256
suffix:semicolon
r_if
c_cond
(paren
id|fscanf
c_func
(paren
id|inf
comma
l_string|&quot;%02x&quot;
comma
op_amp
id|linetype
)paren
op_ne
l_int|1
)paren
id|ABANDON
c_func
(paren
l_string|&quot;File format error&quot;
)paren
suffix:semicolon
id|sum
op_add_assign
id|linetype
suffix:semicolon
r_if
c_cond
(paren
id|linetype
op_ne
l_int|0
)paren
r_continue
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|n
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|fscanf
c_func
(paren
id|inf
comma
l_string|&quot;%02x&quot;
comma
op_amp
id|c
)paren
op_ne
l_int|1
)paren
id|ABANDON
c_func
(paren
l_string|&quot;File format error&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|addr
op_ge
id|MAX_SIZE
)paren
id|ABANDON
c_func
(paren
l_string|&quot;File too large&quot;
)paren
suffix:semicolon
id|buf
(braket
id|addr
op_increment
)braket
op_assign
id|c
suffix:semicolon
r_if
c_cond
(paren
id|addr
OG
id|l
)paren
id|l
op_assign
id|addr
suffix:semicolon
id|sum
op_add_assign
id|c
suffix:semicolon
)brace
r_if
c_cond
(paren
id|fscanf
c_func
(paren
id|inf
comma
l_string|&quot;%02x&quot;
comma
op_amp
id|check
)paren
op_ne
l_int|1
)paren
id|ABANDON
c_func
(paren
l_string|&quot;File format error&quot;
)paren
suffix:semicolon
id|sum
op_assign
op_complement
id|sum
op_plus
l_int|1
suffix:semicolon
r_if
c_cond
(paren
id|check
op_ne
id|sum
)paren
id|ABANDON
c_func
(paren
l_string|&quot;Line checksum error&quot;
)paren
suffix:semicolon
)brace
)brace
id|fprintf
c_func
(paren
id|outf
comma
l_string|&quot;/*&bslash;n *&bslash;t Computer generated file. Do not edit.&bslash;n */&bslash;n&quot;
)paren
suffix:semicolon
id|fprintf
c_func
(paren
id|outf
comma
l_string|&quot;%s[] = {&bslash;n&quot;
comma
id|varline
)paren
suffix:semicolon
r_for
c_loop
(paren
id|i
op_assign
l_int|0
suffix:semicolon
id|i
OL
id|l
suffix:semicolon
id|i
op_increment
)paren
(brace
r_if
c_cond
(paren
id|i
)paren
id|fprintf
c_func
(paren
id|outf
comma
l_string|&quot;,&quot;
)paren
suffix:semicolon
r_if
c_cond
(paren
id|i
op_logical_and
op_logical_neg
(paren
id|i
op_mod
l_int|16
)paren
)paren
id|fprintf
c_func
(paren
id|outf
comma
l_string|&quot;&bslash;n&quot;
)paren
suffix:semicolon
id|fprintf
c_func
(paren
id|outf
comma
l_string|&quot;0x%02x&quot;
comma
id|buf
(braket
id|i
)braket
)paren
suffix:semicolon
)brace
id|fprintf
c_func
(paren
id|outf
comma
l_string|&quot;&bslash;n};&bslash;n&bslash;n&quot;
)paren
suffix:semicolon
id|fclose
c_func
(paren
id|inf
)paren
suffix:semicolon
id|fclose
c_func
(paren
id|outf
)paren
suffix:semicolon
r_return
l_int|1
suffix:semicolon
)brace
eof
