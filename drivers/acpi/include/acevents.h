multiline_comment|/******************************************************************************&n; *&n; * Name: acevents.h - Event subcomponent prototypes and defines&n; *       $Revision: 62 $&n; *&n; *****************************************************************************/
multiline_comment|/*&n; *  Copyright (C) 2000 R. Byron Moore&n; *&n; *  This program is free software; you can redistribute it and/or modify&n; *  it under the terms of the GNU General Public License as published by&n; *  the Free Software Foundation; either version 2 of the License, or&n; *  (at your option) any later version.&n; *&n; *  This program is distributed in the hope that it will be useful,&n; *  but WITHOUT ANY WARRANTY; without even the implied warranty of&n; *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&n; *  GNU General Public License for more details.&n; *&n; *  You should have received a copy of the GNU General Public License&n; *  along with this program; if not, write to the Free Software&n; *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&n; */
macro_line|#ifndef __ACEVENTS_H__
DECL|macro|__ACEVENTS_H__
mdefine_line|#define __ACEVENTS_H__
id|ACPI_STATUS
id|acpi_ev_initialize
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * Acpi_evfixed - Fixed event handling&n; */
id|ACPI_STATUS
id|acpi_ev_fixed_event_initialize
(paren
r_void
)paren
suffix:semicolon
id|u32
id|acpi_ev_fixed_event_detect
(paren
r_void
)paren
suffix:semicolon
id|u32
id|acpi_ev_fixed_event_dispatch
(paren
id|u32
id|acpi_event
)paren
suffix:semicolon
multiline_comment|/*&n; * Acpi_evglock - Global Lock support&n; */
id|ACPI_STATUS
id|acpi_ev_acquire_global_lock
c_func
(paren
r_void
)paren
suffix:semicolon
r_void
id|acpi_ev_release_global_lock
c_func
(paren
r_void
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_init_global_lock_handler
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * Acpi_evgpe - GPE handling and dispatch&n; */
id|ACPI_STATUS
id|acpi_ev_gpe_initialize
(paren
r_void
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_init_gpe_control_methods
(paren
r_void
)paren
suffix:semicolon
id|u32
id|acpi_ev_gpe_dispatch
(paren
id|u32
id|gpe_number
)paren
suffix:semicolon
id|u32
id|acpi_ev_gpe_detect
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/*&n; * Acpi_evnotify - Device Notify handling and dispatch&n; */
r_void
id|acpi_ev_notify_dispatch
(paren
id|ACPI_HANDLE
id|device
comma
id|u32
id|notify_value
)paren
suffix:semicolon
multiline_comment|/*&n; * Acpi_evregion - Address Space handling&n; */
id|ACPI_STATUS
id|acpi_ev_install_default_address_space_handlers
(paren
r_void
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_address_space_dispatch
(paren
id|ACPI_OPERAND_OBJECT
op_star
id|region_obj
comma
id|u32
id|function
comma
id|ACPI_PHYSICAL_ADDRESS
id|address
comma
id|u32
id|bit_width
comma
id|u32
op_star
id|value
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_addr_handler_helper
(paren
id|ACPI_HANDLE
id|obj_handle
comma
id|u32
id|level
comma
r_void
op_star
id|context
comma
r_void
op_star
op_star
id|return_value
)paren
suffix:semicolon
r_void
id|acpi_ev_disassociate_region_from_handler
c_func
(paren
id|ACPI_OPERAND_OBJECT
op_star
id|region_obj
comma
id|u8
id|acpi_ns_is_locked
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_associate_region_and_handler
(paren
id|ACPI_OPERAND_OBJECT
op_star
id|handler_obj
comma
id|ACPI_OPERAND_OBJECT
op_star
id|region_obj
comma
id|u8
id|acpi_ns_is_locked
)paren
suffix:semicolon
multiline_comment|/*&n; * Acpi_evregini - Region initialization and setup&n; */
id|ACPI_STATUS
id|acpi_ev_system_memory_region_setup
(paren
id|ACPI_HANDLE
id|handle
comma
id|u32
id|function
comma
r_void
op_star
id|handler_context
comma
r_void
op_star
op_star
id|region_context
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_io_space_region_setup
(paren
id|ACPI_HANDLE
id|handle
comma
id|u32
id|function
comma
r_void
op_star
id|handler_context
comma
r_void
op_star
op_star
id|region_context
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_pci_config_region_setup
(paren
id|ACPI_HANDLE
id|handle
comma
id|u32
id|function
comma
r_void
op_star
id|handler_context
comma
r_void
op_star
op_star
id|region_context
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_default_region_setup
(paren
id|ACPI_HANDLE
id|handle
comma
id|u32
id|function
comma
r_void
op_star
id|handler_context
comma
r_void
op_star
op_star
id|region_context
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_initialize_region
(paren
id|ACPI_OPERAND_OBJECT
op_star
id|region_obj
comma
id|u8
id|acpi_ns_locked
)paren
suffix:semicolon
multiline_comment|/*&n; * Evsci - SCI (System Control Interrupt) handling/dispatch&n; */
id|u32
id|acpi_ev_install_sci_handler
(paren
r_void
)paren
suffix:semicolon
id|ACPI_STATUS
id|acpi_ev_remove_sci_handler
(paren
r_void
)paren
suffix:semicolon
id|u32
id|acpi_ev_initialize_sCI
(paren
id|u32
id|program_sCI
)paren
suffix:semicolon
r_void
id|acpi_ev_restore_acpi_state
(paren
r_void
)paren
suffix:semicolon
r_void
id|acpi_ev_terminate
(paren
r_void
)paren
suffix:semicolon
multiline_comment|/* Debug support */
macro_line|#ifdef ACPI_DEBUG
id|u32
id|acpi_ev_sci_count
(paren
id|u32
id|acpi_event
)paren
suffix:semicolon
DECL|macro|DEBUG_INCREMENT_EVENT_COUNT
mdefine_line|#define DEBUG_INCREMENT_EVENT_COUNT(a)   acpi_gbl_event_count[a]++;
macro_line|#else
DECL|macro|DEBUG_INCREMENT_EVENT_COUNT
mdefine_line|#define DEBUG_INCREMENT_EVENT_COUNT(a)
macro_line|#endif
macro_line|#endif  /* __ACEVENTS_H__  */
eof
